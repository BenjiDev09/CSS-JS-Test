CSS
Tutorial
Examples in Each Chapter
This CSS tutorial contains hundreds of CSS examples.
With our online editor, you can edit the CSS, and click on a button to view the result.
CSS Example
body
{
background-color: lightblue;
}
h1
{
color: white;
text-align: center;
}
p
{
font-family: verdana;
font-size: 20px;
}
Try it Yourself 
Click on the "Try it Yourself" button to see how it works.
CSS Examples
Learn from over 300 examples! With our editor, you can edit the CSS, and click on a
button to view the result.
Go to CSS Examples!
Use the Menu
We recommend reading this tutorial, in the sequence listed in the menu.
If you have a large screen, the menu will always be present on the left.
If you have a small screen, open the menu by clicking the top menu sign

.
CSS Templates
We have created some responsive W3.CSS templates for you to use.
You are free to modify, save, share, and use them in all your projects.
Free CSS Templates!
CSS Exercises
Test Yourself With Exercises
Exercise:
Set the color of all <p> elements to red.
<style>
{
red;
}
</style>
Submit Answer 
Start the Exercise
CSS Quiz
Test your CSS skills with a quiz.
Start CSS Quiz!
My Learning
Track your progress with the free "My Learning" program here at W3Schools.
Log in to your account, and start earning points!
This is an optional feature. You can study at W3Schools without using My Learning.
CSS References
At W3Schools you will find complete CSS references of all properties and selectors with syntax, examples, browser support, and more.
CSS Properties
CSS Selectors
CSS Browser Support
CSS Functions
CSS Animatable
CSS Aural
CSS Web Safe Fonts
CSS Units
Px to Em Conversion
CSS Colors
CSS Default Values
CSS Entities
CSS
Shadow Effects
Shadows
With CSS you can create shadow effects!
Hover over me!
CSS Shadow Effects
With CSS you can add shadow to text and to elements.
In these chapters you will learn about the following properties:
text-shadow
box-shadow
CSS Text Shadow
The CSS
text-shadow
property applies shadow to text.
In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px;
}
Try it Yourself 
Next, add a color to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px red;
}
Try it Yourself 
Then, add a blur effect to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px 5px red;
}
Try it Yourself 
The following example shows a white text with black shadow:
Text shadow effect!
Example
h1
{
color: white;
text-shadow: 2px 2px 4px #000000;
}
Try it Yourself 
The following example shows a red neon glow shadow:
Text shadow effect!
Example
h1
{
text-shadow: 0 0 3px #FF0000;
}
Try it Yourself 
Multiple Shadows
To add more than one shadow to the text, you can add a comma-separated list of shadows.
The following example shows a red and blue neon glow shadow:
Text shadow effect!
Example
h1
{
text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF;
}
Try it Yourself 
The following example shows a white text with black, blue, and darkblue shadow:
Text shadow effect!
Example
h1
{
color: white;
text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
}
Try it Yourself 
You can also use the text-shadow property to create a plain border around 
some text (without shadows):
Border around text!
Example
h1
{
color: coral;
text-shadow: -1px 0 black, 0 1px 
    black, 1px 0 black, 0 -1px black;
}
Try it Yourself 
CSS
Shadow Effects
Shadows
With CSS you can create shadow effects!
Hover over me!
CSS Shadow Effects
With CSS you can add shadow to text and to elements.
In these chapters you will learn about the following properties:
text-shadow
box-shadow
CSS Text Shadow
The CSS
text-shadow
property applies shadow to text.
In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px;
}
Try it Yourself 
Next, add a color to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px red;
}
Try it Yourself 
Then, add a blur effect to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px 5px red;
}
Try it Yourself 
The following example shows a white text with black shadow:
Text shadow effect!
Example
h1
{
color: white;
text-shadow: 2px 2px 4px #000000;
}
Try it Yourself 
The following example shows a red neon glow shadow:
Text shadow effect!
Example
h1
{
text-shadow: 0 0 3px #FF0000;
}
Try it Yourself 
Multiple Shadows
To add more than one shadow to the text, you can add a comma-separated list of shadows.
The following example shows a red and blue neon glow shadow:
Text shadow effect!
Example
h1
{
text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF;
}
Try it Yourself 
The following example shows a white text with black, blue, and darkblue shadow:
Text shadow effect!
Example
h1
{
color: white;
text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
}
Try it Yourself 
You can also use the text-shadow property to create a plain border around 
some text (without shadows):
Border around text!
Example
h1
{
color: coral;
text-shadow: -1px 0 black, 0 1px 
    black, 1px 0 black, 0 -1px black;
}
Try it Yourself 
CSS
Border Width
CSS Border Width
The
border-width
property specifies the width of the four borders.
The width can be set as a specific size (in px, pt, cm, em, etc) or by using 
one of the three pre-defined values: thin, medium, or thick:
Example
Demonstration of the different border widths:
p.one
{
border-style: solid;
border-width: 5px;
}
p.two
{
border-style: solid;
border-width: medium;
}
p.three
{
border-style: dotted;
border-width: 2px;
}
p.four
{
border-style: dotted;
border-width: thick;
}
Result:
5px border-width
medium border-width
2px border-width
thick border-width
Try it Yourself 
Specific Side Widths
The
border-width
property can have from one to four values (for the top border, right border, 
bottom border, and the left border):
Example
p.one {
border-style: solid;
border-width: 5px 20px; /* 
  5px top and bottom, 20px on the sides */
}
p.two {
border-style: 
  solid;
border-width: 20px 5px; /* 20px top and bottom, 5px on the 
  sides */
}
p.three {
border-style: solid;
border-width: 25px 10px 
  4px 35px; /* 25px top, 10px right, 4px bottom and 35px left */
}
Try it Yourself 
CSS
Box Shadow
CSS box-shadow Property
The CSS
box-shadow
property is used to apply 
one or more shadows to an element.
Specify a Horizontal and a Vertical Shadow
In its simplest use, you only specify a horizontal and a vertical shadow. The 
default color of the shadow is the current text-color.
A <div> element with a box-shadow
Example
Specify a horizontal and a vertical shadow:
div
{
box-shadow: 10px 10px;
}
Try it Yourself 
Specify a Color for the Shadow
The
color
parameter defines the color of the 
shadow.
A <div> element with a lightblue box-shadow
Example
Specify a color for the shadow:
div
{
box-shadow: 10px 10px lightblue;
}
Try it Yourself 
Add a Blur Effect to the Shadow
The
blur
parameter defines the blur radius. The higher the number, the more 
blurred the shadow will be.
A <div> element with a 5px blurred, lightblue box-shadow
Example
Add a blur effect to the shadow:
div
{
box-shadow: 10px 10px 5px lightblue;
}
Try it Yourself 
Set the Spread Radius of the Shadow
The
spread
parameter defines the spread radius. A positive value increases 
the size of the shadow, a negative value decreases the size of the shadow.
A <div> element with a blurred, lightblue box-shadow, with 
  a spread radius of 12px
Example
Set the spread radius of the shadow:
div
{
box-shadow: 10px 10px 5px 12px lightblue;
}
Try it Yourself 
Set the inset Parameter
The
inset
parameter changes the shadow from 
an outer shadow (outset) to an inner shadow.
A <div> element with a blurred, lightblue, inset box-shadow
Example
Add the inset parameter:
div
{
box-shadow: 10px 10px 5px lightblue inset;
}
Try it Yourself 
Add Multiple Shadows
An element can also have multiple shadows:
Example
div
{
box-shadow: 5px 5px blue, 10px 10px red, 15px 15px green;
}
Try it Yourself 
Cards
You can also use the
box-shadow
property to create paper-like cards:
1
January 1, 2021
Hardanger, Norway
Example
div.card
{
width: 250px;
box-shadow: 0 4px 8px 0 rgba(0, 0, 
0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
text-align: 
center;
}
Try it (Text Card) 
Try it (Image Card) 
Test Yourself With Exercises
Exercise:
Set a "2px" horizontal, and "2px" vertical, text shadow for the <h1> element.
<style>
h1 {
: 2px 2px;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS Shadow Properties
The following table lists the CSS shadow properties:
Property
Description
box-shadow
Adds one or more shadows to an element
text-shadow
Adds one or more shadows to a text
CSS
Pseudo-classes
What are Pseudo-classes?
A pseudo-class is used to define a special state 
of an element.
For example, it can be used to:
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus
Mouse Over Me
Syntax
The syntax of pseudo-classes:
selector:pseudo-class {
property: value;
}
Anchor Pseudo-classes
Links can be displayed in different ways:
Example
/* unvisited link */
a:link {
color: #FF0000;
}
/* visited 
link */
a:visited {
color: #00FF00;
}
/* mouse over link */
a:hover {
color: #FF00FF;
}
/* selected link */
a:active {
color: #0000FF;
}
Try it Yourself 
Pseudo-classes and HTML Classes
Pseudo-classes can be combined with HTML classes:
When you hover over the link in the example, it will change color:
Example
a.highlight:hover {
color: #ff0000;
}
Try it Yourself 
Hover on <div>
An example of using the
:hover
pseudo-class on a <div> element:
Example
div:hover {
background-color: blue;
}
Try it Yourself 
Simple Tooltip Hover
Hover over a <div> element to show a <p> element (like a tooltip):
Hover over me to show the <p> element.
Tada! Here I am!
Example
p {
display: none;
background-color: yellow;
padding: 20px;
}
div:hover p {
display: block;
}
Try it Yourself 
CSS - The :first-child Pseudo-class
The
:first-child
pseudo-class matches a specified element that is the first child of another element.
Match the first <p> element
In the following example, the selector matches any <p> element that is the first child of any element:
Example
p:first-child
{
color: blue;
}
Try it Yourself 
Match the first <i> element in all <p> elements
In the following example, the selector matches the first <i> element in all <p> elements:
Example
p i:first-child
{
color: blue;
}
Try it Yourself 
Match all <i> elements in all first child <p> elements
In the following example, the selector matches all <i> elements in <p> elements that are the first child of another element:
Example
p:first-child i
{
color: blue;
}
Try it Yourself 
CSS - The :lang Pseudo-class
The
:lang
pseudo-class allows you to define special rules for different languages.
In the example below,
:lang
defines the quotation marks for <q> elements with lang="no":
Example
<html>
<head>
<style>
q:lang(no) {
quotes: "~" "~";
}
</style>
</head>
<body>
<p>Some text <q lang="no">A quote in a paragraph</q> 
Some text.</p>
</body>
</html>
Try it Yourself 
More Examples
Add different styles to hyperlinks
This example demonstrates how to add other styles to hyperlinks.
Use of :focus
This example demonstrates how to use the :focus pseudo-class.
Test Yourself With Exercises
Exercise:
Set the background-color to red, when you mouse over a link.
<style>
{
  background-color: red;
}
</style>

<body>

<h1>This is a header.</h1>
<p>This is a paragraph.</p>
<a href="https://w3schools.com">This is a link.</a>

</body>
Submit Answer 
Start the Exercise
All CSS Pseudo Classes
Selector
Example
Example description
:active
a:active
Selects the active link
:checked
input:checked
Selects every checked <input> element
:disabled
input:disabled
Selects every disabled <input> element
:empty
p:empty
Selects every <p> element that has no children
:enabled
input:enabled
Selects every enabled <input> element
:first-child
p:first-child
Selects every <p> elements that is the first child of its parent
:first-of-type
p:first-of-type
Selects every <p> element that is the first <p> element of its parent
:focus
input:focus
Selects the <input> element that has focus
:hover
a:hover
Selects links on mouse over
:in-range
input:in-range
Selects <input> elements with a value within a specified range
:invalid
input:invalid
Selects all <input> elements with an invalid value
:lang(
language
)
p:lang(it)
Selects every <p> element with a lang attribute value starting with "it"
:last-child
p:last-child
Selects every <p> elements that is the last child of its parent
:last-of-type
p:last-of-type
Selects every <p> element that is the last <p> element of its parent
:link
a:link
Selects all unvisited links
:not(selector)
:not(p)
Selects every element that is not a <p> element
:nth-child(n)
p:nth-child(2)
Selects every <p> element that is the second child of its parent
:nth-last-child(n)
p:nth-last-child(2)
Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)
p:nth-last-of-type(2)
Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)
p:nth-of-type(2)
Selects every <p> element that is the second <p> element of its parent
:only-of-type
p:only-of-type
Selects every <p> element that is the only <p> element of its parent
:only-child
p:only-child
Selects every <p> element that is the only child of its parent
:optional
input:optional
Selects <input> elements with no "required" attribute
:out-of-range
input:out-of-range
Selects <input> elements with a value outside a specified range
:read-only
input:read-only
Selects <input> elements with a "readonly" attribute specified
:read-write
input:read-write
Selects <input> elements with no "readonly" attribute
:required
input:required
Selects <input> elements with a "required" attribute specified
:root
root
Selects the document's root element
:target
#news:target
Selects the current active #news element (clicked on a URL containing that anchor name)
:valid
input:valid
Selects all <input> elements with a valid value
:visited
a:visited
Selects all visited links
All CSS Pseudo Elements
Selector
Example
Example description
::after
p::after
Insert content after every <p> element
::before
p::before
Insert content before every <p> element
::first-letter
p::first-letter
Selects the first letter of every <p> element
::first-line
p::first-line
Selects the first line of every <p> element
::marker
::marker
Selects the markers of list items
::selection
p::selection
Selects the portion of an element that is selected by a user
CSS
Navigation Bar
Demo: Navigation Bars
Vertical
Home
News
Contact
About
Horizontal
Home
News
Contact
About
Home
News
Contact
About
Navigation Bars
Having easy-to-use navigation is important for any web site.
With CSS you can transform boring HTML menus into good-looking navigation bars.
Navigation Bar = List of Links
A navigation bar needs standard HTML as a base.
In our examples we will build the navigation bar from a standard HTML list.
A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect 
sense:
Example
<ul>
<li><a href="default.asp">Home</a></li>
<li><a href="news.asp">News</a></li>
<li><a href="contact.asp">Contact</a></li>
<li><a href="about.asp">About</a></li>
</ul>
Try it Yourself 
Now let's remove the bullets and the margins and padding from the list:
Example
ul
{
list-style-type: none;
margin: 0;
padding: 0;
}
Try it Yourself 
Example explained:
list-style-type: none;
- Removes the bullets. A navigation bar 
does not need list markers
Set
margin: 0;
and
padding: 0;
to remove browser default settings
The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters.
CSS
Website Layout
Website Layout
A website is often divided into headers, menus, content and a footer:
Header
Navigation Menu
Content
Main Content
Content
Footer
There are tons of different layout designs to choose from. However, the structure above, is one of the most common, and we will take a closer look at it in this tutorial.
Header
A header is usually located at the top of the website (or right below a top navigation menu). It often contains a logo or the website name:
Example
.header {
background-color: #F1F1F1;
text-align: 
   center;
padding: 20px;
}
Result
Header
Try it Yourself 
Navigation Bar
A navigation bar contains a list of links to help visitors navigating through your website:
Example
/* The navbar container */
.topnav {
overflow: hidden;
background-color: #333;
}
/* Navbar links */
.topnav a {
float: 
   left;
display: block;
color: 
   #f2f2f2;
text-align: center;
padding: 14px 16px;
text-decoration: none;
}
/* Links - change color on hover */
.topnav a:hover {
background-color: #ddd;
color: black;
}
Result
Link
Link
Link
Try it Yourself 
Content
The layout in this section, often depends on the target users. The most common layout is 
one (or combining them) of the following:
1-column
(often used for mobile browsers)
2-column
(often used for tablets and laptops)
3-column layout
(only used for desktops)
1-column:
2-column:
3-column:
We will create a 3-column layout, and change it to a 1-column layout on smaller screens:
Example
/* Create three equal columns that float next to each other */
.column {
float: left;
width: 33.33%;
}
/* Clear floats after the 
   columns */
.row:after {
content: "";
display: table;
clear: both;
}
/* Responsive 
   layout - makes the three columns stack on top of each other instead of next 
   to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 
   600px) {
.column 
   {
width: 100%;
}
}
Result
Column
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.
Column
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.
Column
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.
Try it Yourself 
Unequal Columns
The main content is the biggest and the most important part of your site.
It is common with
unequal
column widths, so that most of the space 
is reserved for 
the main content. The side content (if any) is often used as an alternative 
navigation or to specify information relevant to the main content. Change the widths as you like, only remember that it should add up to 100% in total:
Example
.column {
float: left;
}
/* Left and right column */
.column.side {
width: 25%;
}
/* Middle column */
.column.middle 
   {
width: 50%;
}
/* Responsive layout - makes 
   the three columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
.column.side, .column.middle 
   {
width: 100%;
}
}
Result
Side
Lorem ipsum dolor sit amet, consectetur adipiscing elit...
Main Content
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique. Quisque vehicula, risus eget aliquam placerat, purus leo tincidunt eros, eget luctus quam orci in velit. Praesent scelerisque tortor sed accumsan convallis.
Side
Lorem ipsum dolor sit amet, consectetur adipiscing elit...
Try it Yourself 
Footer
The footer is placed at the bottom of your page. It often contains 
information like copyright and contact info:
Example
.footer {
background-color: #F1F1F1;
text-align: 
   center;
padding: 10px;
}
Result
Footer
Try it Yourself 
Responsive Website Layout
By using some of the CSS code above, we have created a responsive website layout, which varies between two columns and full-width columns depending on screen width:
Try it Yourself 
CSS
Counters
Pizza
Hamburger
Hotdogs
CSS counters are "variables" maintained by CSS whose values can 
be incremented by CSS rules (to track how many times they are used). Counters 
let you adjust the appearance of content based on its placement in the document.
Automatic Numbering With Counters
CSS counters are like "variables". The variable values can be incremented by CSS rules 
(which will 
track how many times they are used).
To work with CSS counters we will use the following properties:
counter-reset
- Creates or resets a counter
counter-increment
- Increments a counter value
content
- Inserts generated 
content
counter()
or
counters()
function - Adds the 
value of a counter to an element
To use a CSS counter, it must first be created with
counter-reset
.
The following example creates a counter for the page (in the body selector), 
then increments the counter value for each <h2> element and adds "Section <
value of the counter
>:" 
to the beginning of each <h2> element:
Example
body {
counter-reset: section;
}
h2::before {
counter-increment: section;
content: "Section " counter(section) ": ";
}
Try it Yourself 
Nesting Counters
The following example creates one counter for the page (section) and one 
counter for each <h1> element (subsection). The "section" counter will be 
counted for each <h1> element with "Section <
value of the 
section counter
>.", and the "subsection" counter will be counted 
for each <h2> element with "<
value of the section counter
>.<
value of the 
subsection counter
>":
Example
body {
counter-reset: section;
}
h1 {
counter-reset: subsection;
}
h1::before {
counter-increment: 
section;
content: "Section " counter(section) ". ";
}
h2::before {
counter-increment: subsection;
content: 
counter(section) "." counter(subsection) " ";
}
Try it Yourself 
A counter can also be useful to make outlined lists because a new 
instance of a counter is automatically created in child elements. Here we use the
counters()
function to insert a string between different levels of nested 
counters:
Example
ol {
counter-reset: section;
list-style-type: none;
}
li::before {
counter-increment: section;
content: counters(section,".") " ";
}
Try it Yourself 
CSS Counter Properties
Property
Description
content
Used with the ::before and ::after pseudo-elements, to insert generated content
counter-increment
Increments one or more counter values
counter-reset
Creates or resets one or more counters
counter()
Returns the current value of the named counter
CSS
Font Size
Font Size
The
font-size
property sets the size of the text.
Being able to manage the text size is important in web design. However, you 
should not use font size adjustments to make paragraphs look like headings, or 
headings look like paragraphs.
Always use the proper HTML tags, like <h1> - <h6> for headings and <p> for 
paragraphs.
The font-size value can be  
an absolute, or relative size.
Absolute size:
Sets the text to a specified size
Does not allow a user to change the text size in all browsers (bad for accessibility reasons)
Absolute size is useful when the physical size of the output is known
Relative size:
Sets the size relative to surrounding elements
Allows a user to change the text size in browsers
Set Font Size With Pixels
Setting the text size with pixels gives you full control over the text size:
Example
h1 {
font-size: 40px;
}
h2 {
font-size: 30px;
}
p {
font-size: 14px;
}
Try it Yourself 
Tip:
If you use pixels, you can still use the zoom tool to resize the entire page.
Set Font Size With Em
To allow users to resize the text (in the browser menu), many 
developers use em instead of pixels.
1em is equal to the current font size. The default text size in browsers is 
16px. So, the default size of 1em is 16px.
The size can be calculated from pixels to em using this formula:
pixels
/16=
em
Example
h1 {
font-size: 2.5em; /* 40px/16=2.5em */
}
h2 {
font-size: 1.875em; /* 30px/16=1.875em */
}
p {
font-size: 0.875em; /* 14px/16=0.875em */
}
Try it Yourself 
In the example above, the text size in em is the same as the previous example 
in pixels. However, with the em size, it is possible to adjust the text size 
in all browsers.
Unfortunately, there is still a problem with older versions 
of Internet Explorer. 
The text becomes larger than it should 
when made larger, and smaller than it should when made smaller.
Use a Combination of Percent and Em
The solution that works in all browsers, is to set a default font-size in 
percent for the <body> element:
Example
body {
font-size: 100%;
}
h1 {
font-size: 2.5em;
}
h2 {
font-size: 1.875em;
}
p {
font-size: 0.875em;
}
Try it Yourself 
Our code now works great! It shows the same text size in 
all browsers, and allows all browsers to zoom or resize the text!
Responsive Font Size
The text size can be set with a
vw
unit, which means the "viewport width".
That way the text size will follow the size of the browser window:
Hello World
Resize the browser window to see how the font size scales.
Example
<h1 style="
font-size:10vw
">Hello World</h1>
Try it Yourself 
CSS
Comments
CSS comments are not displayed in the browser, but they can 
help document your source code.
CSS Comments
Comments are used to explain the code, and may help when you edit the source code at a later date.
Comments are ignored by browsers.
A CSS comment is placed inside the
<style>
element, and starts with
/*
and ends with
*/
:
Example
/* This is a single-line comment */
p
{
color: red;
}
Try it Yourself 
You can add comments wherever you want in the code:
Example
p
{
color: red;
  /* Set text color to red */
}
Try it Yourself 
Even in the middle of a code line:
Example
p
{
color: /*red*/blue;
}
Try it Yourself 
Comments can also span 
multiple lines:
Example
/* This is
a multi-line
comment */
p
{
color: red;
}
Try it Yourself 
HTML and CSS Comments
From the HTML tutorial, you learned that you can add comments to your HTML source by using the
<!--...-->
syntax.
In the following example, we use a combination of HTML and CSS comments:
Example
<!DOCTYPE html>
<html>
<head>
<style>
p {
color: red; /* Set 
  text color to red */
}
</style>
</head>
<body>
<h2>My 
  Heading</h2>
<!-- These paragraphs will be red -->
<p>Hello 
  World!</p>
<p>This paragraph is styled with CSS.</p>
<p>CSS comments are 
  not shown in the output.</p>
</body>
</html>
Try it Yourself 
Video: CSS Comments
CSS
Border Images
CSS Border Images
With the CSS
border-image
property, you can set an image to be used as the border around an element.
CSS border-image Property
The CSS
border-image
property allows you to specify an image to be used instead of the normal border around an element.
The property has three parts:
The image to use as the border
Where to slice the image
Define whether the middle sections should be repeated or stretched
We will use the following image (called "border.png"):
The
border-image
property takes the image and slices it into nine sections, 
like a tic-tac-toe board. It then places the corners at the corners, and the 
middle sections are repeated or stretched as you specify.
Note:
For
border-image
to work, the element also needs the
border
property set!
Here, the middle sections of the image are repeated to create the border:
An image as a border!
Here is the code:
Example
#borderimg
{
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 
30 round;
}
Try it Yourself 
Here, the middle sections of the image are stretched to create the border:
An image as a border!
Here is the code:
Example
#borderimg
{
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 
30 stretch;
}
Try it Yourself 
CSS border-image - Different Slice Values
Different slice values completely changes the look of the border:
Example 1:
border-image: url(border.png) 50 round;
Example 2:
border-image: url(border.png) 20% round;
Example 3:
border-image: url(border.png) 30% round;
Here is the code:
Example
#borderimg1 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 
50 round;
}
#borderimg2 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 20% round;
}
#borderimg3 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 
30% round;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Give the div element an image border.
Use the short hand property to define the details of the image border.
<style>
div {
  border: 10px solid transparent;
: url(border.png) 30 round;
}
</style>

<body>
  <div>This is a div element. It has some text.</div>
</body>
Submit Answer 
Start the Exercise
CSS Border Image Properties
Property
Description
border-image
A shorthand property for setting all the border-image-* properties
border-image-source
Specifies the path to the image to be used as a border
border-image-slice
Specifies how to slice the border image
border-image-width
Specifies the widths of the border image
border-image-outset
Specifies the amount by which the border image area extends beyond the border box
border-image-repeat
Specifies whether the border image should be repeated, rounded or stretched
CSS
Opacity / Transparency
The
opacity
property specifies the opacity/transparency of an element.
Transparent Image
The
opacity
property can take a value from 0.0 - 1.0. The lower 
the value, the more transparent:
opacity 0.2
opacity 0.5
opacity 1
(default)
Example
img {
opacity: 0.5;
}
Try it Yourself 
Transparent Hover Effect
The
opacity
property is often used together with the
:hover
selector to change the opacity on mouse-over:
Example
img {
opacity: 0.5;
}
img:hover {
opacity: 1.0;
}
Try it Yourself 
Example explained
The first CSS block is similar to the code in Example 1. In addition, we have added what should happen when a user hovers over one of the images. In this case we want the image to NOT be transparent when the user hovers over it. The CSS for this is
opacity:1;
.
When the mouse pointer moves away from the image, the image will be transparent again.
An example of reversed hover effect:
Example
img:hover {
opacity: 0.5;
}
Try it Yourself 
Transparent Box
When using the
opacity
property to add transparency to the background of an element, all of its child elements 
inherit the same transparency. This can make the text inside a fully transparent element hard to read:
opacity 1
opacity 0.6
opacity 0.3
opacity 0.1
Example
div {
opacity: 0.3;
}
Try it Yourself 
Transparency using RGBA
If you do not want to apply opacity to child elements, like in our example above, use
RGBA
color values. 
The following example sets the opacity for the background color and not the text:
100% opacity
60% opacity
30% opacity
10% opacity
You learned from our
CSS Colors Chapter
, that you can use RGB as a color value. In addition to RGB, 
you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.
An RGBA color value is specified with: rgba(red, green, blue,
alpha
). The
alpha
parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
Tip:
You will learn more about RGBA Colors in our
CSS Colors Chapter
.
Example
div {
background: rgba(76, 175, 80, 0.3) /* Green background with 30% 
opacity */
}
Try it Yourself 
Text in Transparent Box
This is some text that is placed in the transparent box.
Example
<html>
<head>
<style>
div.background {
background: url(klematis.jpg) repeat;
border: 2px solid black;
}
div.transbox {
margin: 30px;
background-color: #ffffff;
border: 1px solid black;
opacity: 0.6;
}
div.transbox p {
margin: 5%;
font-weight: bold;
color: #000000;
}
</style>
</head>
<body>
<div class="background">
<div class="transbox">
<p>This is some text that is placed in the transparent box.</p>
</div>
</div>
</body>
</html>
Try it Yourself 
Example explained
First, we create a <div> element (class="background") with a background image, and a border.
Then we create another <div> (class="transbox") inside the first <div>.
The 
<div class="transbox"> have a background color, and a border - 
the div is transparent.
Inside the transparent 
<div>, we add some text inside a <p> element.
Test Yourself With Exercises
Exercise:
Use CSS to set the transparency of the image to 50%.
<style>
img {
:
;
}
</style>

<body>
  <img src="klematis.jpg" width="150" height="113">
</body>
Submit Answer 
Start the Exercise
CSS
Introduction
CSS is the language we use to style a Web page.
What is CSS?
CSS stands for Cascading Style Sheets
CSS describes how HTML elements are to be displayed on screen,  
  paper, or in other media
CSS saves a lot of work. It can control the layout of 
  multiple web pages all at once
External stylesheets are stored in CSS files
CSS Demo - One HTML Page - Multiple Styles!
Here we will show one HTML page displayed with four different stylesheets. 
Click on the "Stylesheet 1", "Stylesheet 2", "Stylesheet 3", "Stylesheet 4" 
links below to see the different styles:
Why Use CSS?
CSS is used to define styles for your web pages, including the design, layout 
and variations in display for different devices and screen sizes.
CSS Example
body
{
background-color: lightblue;
}
h1
{
color: white;
text-align: center;
}
p
{
font-family: verdana;
font-size: 20px;
}
Try it Yourself 
CSS Solved a Big Problem
HTML was NEVER intended to contain tags for formatting a web page!
HTML was 
created to describe the content of a web page, like:
<h1>This is a heading</h1>
<p>This is a paragraph.</p>
When tags like <font>, and color attributes were added to the HTML 3.2 
specification, it started a nightmare for web developers. Development of large 
websites, where fonts and color information were added to every single  
page, became a long and expensive process.
To solve this problem, the World Wide Web Consortium (W3C) created CSS.
CSS removed the style formatting from the HTML page!
CSS Saves a Lot of Work!
The style definitions are normally saved in external .css files.
With an external stylesheet file, you can change the look of an entire website by changing just one file!
Video: CSS Introduction
CSS
Borders
The CSS border properties allow you to specify the style, 
width, and color of an element's border.
I have borders on all sides.
I have a red bottom border.
I have rounded borders.
I have a blue left border.
CSS Border Style
The
border-style
property specifies what kind of border to display.
The following values are allowed:
dotted
- Defines a dotted border
dashed
- Defines a dashed border
solid
- Defines a solid border
double
- Defines a double border
groove
- Defines a 3D grooved border. The effect depends on the border-color value
ridge
- Defines a 3D ridged border. The effect depends on the border-color value
inset
- Defines a 3D inset border. The effect depends on the border-color value
outset
- Defines a 3D outset border. The effect depends on the border-color value
none
- Defines no border
hidden
- Defines a hidden border
The
border-style
property can have from one to four values (for 
the top border, right border, bottom border, and the left border).
Example
Demonstration of the different border styles:
p.dotted {border-style: dotted;}
p.dashed 
{border-style: dashed;}
p.solid {border-style: solid;}
p.double 
{border-style: double;}
p.groove {border-style: groove;}
p.ridge 
{border-style: ridge;}
p.inset {border-style: inset;}
p.outset 
{border-style: outset;}
p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}
Result:
A dotted border.
A dashed border.
A solid border.
A double border.
A groove border. The effect depends on the border-color value.
A ridge border. The effect depends on the border-color value.
An inset border. The effect depends on the border-color value.
An outset border. The effect depends on the border-color value.
No border.
A hidden border.
A mixed border.
Try it Yourself 
CSS
Background Image
CSS background-image
The
background-image
property specifies an image to use as the background of an element.
By default, the image is repeated so it covers the entire element.
Example
Set the background image for a page:
body {
background-image: url("paper.gif");
}
Try it Yourself 
Example
This example shows a
bad combination
of text and background image. The text is 
hardly readable:
body {
background-image: url("bgdesert.jpg");
}
Try it Yourself 
The background image can also be set for specific elements, like the <p> element:
Example
p {
background-image: url("paper.gif");
}
Try it Yourself 
The CSS Background Image Property
Property
Description
background-image
Sets the background image for an element
Video: CSS Background Images
How To Add CSS
When a browser reads a style sheet, it will format the HTML document according to 
the information in the style sheet.
Three Ways to Insert CSS
There are three ways of inserting a style sheet:
External CSS
Internal CSS
Inline CSS
External CSS
With an
external style sheet, you can change the look of an entire website by changing 
just one file!
Each HTML page must include a reference to the external style sheet file inside 
the <link> element, inside the head section.
Example
External styles are defined within the <link> element, inside the <head> section of an HTML page:
<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="mystyle.css">
</head>
<body>
<h1>This is a heading</h1>
<p>This is a paragraph.</p>
</body>
</html>
Try it Yourself 
An external style sheet can be written in any text editor, and must be saved with a .css extension.
The external .css file should not contain any HTML tags.
Here is how the "mystyle.css" file looks:
"mystyle.css"
body {
background-color: lightblue;
}
h1 {
color: navy;
margin-left: 20px;
}
Internal CSS
An internal style sheet may be used if one single HTML page has a unique style.
The internal style is defined inside the <style> element, inside the head 
section.
Example
Internal styles are defined within the <style> element, inside the <head> section of an HTML page:
<!DOCTYPE html>
<html>
<head>
<style>
body {
background-color: linen;
}
h1 {
color: maroon;
margin-left: 40px;
}
</style>
</head>
<body>
<h1>This is a 
  heading</h1>
<p>This is a paragraph.</p>
</body>
</html>
Try it Yourself 
Inline CSS
An inline style may be used to apply a unique style for a single element.
To use inline styles, add the style attribute to the relevant element. The
style attribute can contain any CSS property.
Example
Inline styles are defined within the "style" attribute of the relevant 
  element:
<!DOCTYPE html>
<html>
<body>
<h1 style="color:blue;text-align:center;">This 
  is a heading</h1>
<p style="color:red;">This is a paragraph.</p>
</body>
</html>
Try it Yourself 
Multiple Style Sheets
If some properties have been defined for the same selector (element) in different style sheets,
the value from the last read style sheet will be used.
Assume that an
external style sheet
has the following style for the <h1> element:
h1
{
color: navy;
}
Then, assume that an
internal style sheet
also has the following style for the <h1> element:
h1
{
color: orange;
}
Example
If the internal style is defined
after
the link to the external style sheet, the <h1> elements will be 
"orange":
<head>
<link rel="stylesheet" type="text/css" href="mystyle.css">
<style>
h1 {
color: orange;
}
</style>
</head>
Try it Yourself 
Example
However, if the internal style is defined
before
the link to the external style sheet, the <h1> elements will be 
"navy":
<head>
<style>
h1 {
color: orange;
}
</style>
<link rel="stylesheet" type="text/css" href="mystyle.css">
</head>
Try it Yourself 
Cascading Order
What style will be used when there is more than one style specified for an HTML element?
All the styles in a page will "cascade" into a new "virtual" style
sheet by the following rules, where number one has the highest priority:
Inline style (inside an HTML element)
External and internal style sheets (in the head section)
Browser default
So, an inline style has the highest priority, and will override external and 
internal styles and browser defaults.
Try it Yourself 
Test Yourself With Exercises
Exercise:
Add an external style sheet with the URL: "mystyle.css".
<head>
</head>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
Video: How to add CSS to HTML
CSS
Shorthand Border Property
CSS Border - Shorthand Property
Like you saw in the previous page, there are many properties to consider when dealing with borders.
To shorten the code, it is also possible to specify all the individual border properties in 
one property.
The
border
property is a shorthand property for the following individual border properties:
border-width
border-style
(required)
border-color
Example
p {
border: 5px solid red;
}
Result:
Some text
Try it Yourself 
You can also specify all the individual border properties for just one side:
Left Border
p {
border-left: 6px solid red;
}
Result:
Some text
Try it Yourself 
Bottom Border
p {
border-bottom: 6px solid red;
}
Result:
Some text
Try it Yourself 
CSS
Padding
Padding is used to create space around an element's content, inside of any defined borders.
This element has a padding of 70px.
Try it Yourself 
CSS Padding
The CSS
padding
properties are used to generate space around 
an element's content, inside of any defined borders.
With CSS, you have full control over the padding. There are properties 
for setting the padding for each side of an element (top, right, bottom, and left).
Padding - Individual Sides
CSS has properties for specifying the padding for each 
side of an element:
padding-top
padding-right
padding-bottom
padding-left
All the padding properties can have the following values:
length
- specifies a padding in px, pt, cm, etc.
%
- specifies a padding in % of the width of the containing element
inherit - specifies that the padding should be inherited from the parent element
Note:
Negative values are not allowed.
Example
Set different padding for all four sides of a <div> element:
div {
padding-top: 50px;
padding-right: 30px;
padding-bottom: 50px;
padding-left: 80px;
}
Try it Yourself 
Padding - Shorthand Property
To shorten the code, it is possible to specify all the padding properties in 
one property.
The
padding
property is a shorthand property for the following individual 
padding properties:
padding-top
padding-right
padding-bottom
padding-left
So, here is how it works:
If the
padding
property has four values:
padding: 25px 50px 75px 100px;
top padding is 25px
right padding is 50px
bottom padding is 75px
left padding is 100px
Example
Use the padding shorthand property with four values:
div {
padding: 25px 50px 75px 100px;
}
Try it Yourself 
If the
padding
property has three values:
padding: 25px 50px 75px;
top padding is 25px
right and left paddings are 50px
bottom padding is 75px
Example
Use the padding shorthand property with three values:
div {
padding: 25px 50px 75px;
}
Try it Yourself 
If the
padding
property has two values:
padding: 25px 50px;
top and bottom paddings are 25px
right and left paddings are 50px
Example
Use the padding shorthand property with two values:
div {
padding: 25px 50px;
}
Try it Yourself 
If the
padding
property has one value:
padding: 25px;
all four paddings are 25px
Example
Use the padding shorthand property with one value:
div {
padding: 25px;
}
Try it Yourself 
Padding and Element Width
The CSS
width
property specifies the width of the element's content area. The 
content area is the portion inside the padding, border, and margin of an element 
(
the box model
).
So, if an element has a specified width, the padding added to that element will 
be added to the total width of the element. This is often an undesirable result.
Example
Here, the <div> element is given a width of 300px. 
However, the actual width of the <div> element will be 350px (300px + 
25px of left padding + 25px of right padding):
div {
width: 300px;
padding: 25px;
}
Try it Yourself 
To keep the width at 300px, no matter the amount of padding, you can use the
box-sizing
property. This causes the element to maintain its actual width; if 
you increase the padding, the available content space will decrease.
Example
Use the box-sizing property to keep the width at 300px, no matter the 
  amount of padding:
div {
width: 300px;
padding: 25px;
box-sizing: border-box;
}
Try it Yourself 
More Examples
Set the left padding
This example demonstrates how to set the left padding of a <p> element.
Set the right padding
This example demonstrates how to set the right padding of a <p> element.
Set the top padding
This example demonstrates how to set the top padding of a <p> element.
Set the bottom padding
This example demonstrates how to set the bottom padding of a <p> element.
Test Yourself With Exercises
Exercise:
Set the top padding of the <h1> element to 30 pixels.
<style>
h1 {
: 30px;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Padding Properties
Property
Description
padding
A shorthand property for setting all the padding properties in one declaration
padding-bottom
Sets the bottom padding of an element
padding-left
Sets the left padding of an element
padding-right
Sets the right padding of an element
padding-top
Sets the top padding of an element
CSS
Font Fallbacks
Commonly Used Font Fallbacks
Below are some commonly used font fallbacks, organized by the 5 generic font families:
Serif
Sans-serif
Monospace
Cursive
Fantasy
Serif Fonts
font-family
Example text
Code
"Times New Roman", Times, serif
This is a Heading
This is a paragraph.
Try it
Georgia, serif
This is a Heading
This is a paragraph.
Try it
Garamond, serif
This is a Heading
This is a paragraph.
Try it
Sans-Serif Fonts
font-family
Example text
Code
Arial, Helvetica, sans-serif
This is a Heading
This is a paragraph.
Try it
Tahoma, Verdana, sans-serif
This is a Heading
This is a paragraph.
Try it
"Trebuchet MS", Helvetica, sans-serif
This is a Heading
This is a paragraph.
Try it
Geneva, Verdana, sans-serif
This is a Heading
This is a paragraph.
Try it
Monospace Fonts
font-family
Example text
Code
"Courier New", Courier, monospace
This is a Heading
This is a paragraph.
Try it
Cursive Fonts
font-family
Example text
Code
"Brush Script MT", cursive
This is a Heading
This is a paragraph.
Try it
Fantasy Fonts
font-family
Example text
Code
Copperplate, Papyrus, fantasy
This is a Heading
This is a paragraph.
Try it
CSS
Colors
Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.
CSS Color Names
In CSS, a color can be specified by using a predefined color name:
Tomato
Orange
DodgerBlue
MediumSeaGreen
Gray
SlateBlue
Violet
LightGray
Try it Yourself 
CSS/HTML support
140 standard color names
.
CSS Background Color
You can set the background color for HTML elements:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.
Example
<h1 style="background-color:DodgerBlue;">Hello World</h1>
<p style="background-color:Tomato;">Lorem 
  ipsum...</p>
Try it Yourself 
CSS Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.
Example
<h1 style="color:Tomato;">Hello 
  World</h1>
<p style="color:DodgerBlue;">Lorem 
  ipsum...</p>
<p style="color:MediumSeaGreen;">Ut wisi 
  enim...</p>
Try it Yourself 
CSS Border Color
You can set the color of borders:
Hello World
Hello World
Hello World
Example
<h1 style="border:2px 
  solid Tomato;">Hello 
  World</h1>
<h1 style="border:2px 
  solid DodgerBlue;">Hello 
  World</h1>
<h1 style="border:2px 
  solid Violet;">Hello 
  World</h1>
Try it Yourself 
CSS Color Values
In CSS, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values:
Same as color name "Tomato":
rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)
Same as color name "Tomato", but 50% transparent:
rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)
Example
<h1 style="background-color:rgb(255, 
  99, 71);">...</h1>
<h1 style="background-color:#ff6347;">...</h1>
<h1 style="background-color:hsl(9, 
  100%, 64%);">...</h1>
<h1 style="background-color:rgba(255, 
  99, 71, 0.5);">...</h1>
<h1 style="background-color:hsla(9, 
  100%, 64%, 0.5);">...</h1>
Try it Yourself 
Video: CSS Colors Introduction
CSS
Responsive Table
Responsive Table
A responsive table will display a horizontal scroll bar if the screen is too 
small to display the full content:
First Name
Last Name
Points
Points
Points
Points
Points
Points
Points
Points
Points
Points
Points
Points
Jill
Smith
50
50
50
50
50
50
50
50
50
50
50
50
Eve
Jackson
94
94
94
94
94
94
94
94
94
94
94
94
Adam
Johnson
67
67
67
67
67
67
67
67
67
67
67
67
Add a container element (like <div>) with
overflow-x:auto
around the <table> element to make it responsive:
Example
<div style="overflow-x:auto;">
<table>
... table content ...
</table>
</div>
Try it Yourself 
More Examples
Make a fancy table
This example demonstrates how to create a fancy table.
Set the position of the table caption
This example demonstrates how to position the table caption.
Test Yourself With Exercises
Exercise:
Set the border to "2px solid green" for table, th and td elements.
<style>
{
: 2px solid green;
}
</style>

<body>
<table>
  <tr>
    <th>Firstname</th>
    <th>Lastname</th>
  </tr>
  <tr>
    <td>Peter</td>
    <td>Griffin</td>
  </tr>
  <tr>
    <td>Lois</td>
    <td>Griffin</td>
  </tr>
</table>
</body>
Submit Answer 
Start the Exercise
CSS Table Properties
Property
Description
border
Sets all the border properties in one declaration
border-collapse
Specifies whether or not table borders should be collapsed
border-spacing
Specifies the distance between the borders of adjacent cells
caption-side
Specifies the placement of a table caption
empty-cells
Specifies whether or not to display borders and background on empty cells in a table
table-layout
Sets the layout algorithm to be used for a table
CSS
Links
With CSS, links can be styled in many different ways.
Text Link
Text Link
Link Button
Link Button
Styling Links
Links can be styled with any CSS property (e.g.
color
,
font-family
,
background
, etc.).
Example
a {
color: hotpink;
}
Try it Yourself 
In addition, links can be styled 
differently depending on what
state
they are in.
The four links states are:
a:link
- a normal, unvisited link
a:visited
- a link the user has visited
a:hover
- a link when the user mouses over it
a:active
- a link the moment it is clicked
Example
/* unvisited link */
a:link {
color: red;
}
/* visited 
link */
a:visited {
color: green;
}
/* mouse over link */
a:hover {
color: hotpink;
}
/* selected link */
a:active {
color: blue;
}
Try it Yourself 
When setting the style for several link states, there are some order rules:
a:hover MUST come after a:link and a:visited
a:active MUST come after a:hover
Text Decoration
The
text-decoration
property is mostly used to remove underlines from links:
Example
a:link {
text-decoration: none;
}
a:visited {
text-decoration: none;
}
a:hover {
text-decoration: underline;
}
a:active {
text-decoration: underline;
}
Try it Yourself 
Background Color
The
background-color
property can be used to specify a background color for links:
Example
a:link {
background-color: yellow;
}
a:visited {
background-color: cyan;
}
a:hover {
background-color: lightgreen;
}
a:active {
background-color: hotpink;
}
Try it Yourself 
Link Buttons
This example demonstrates a more advanced example where we combine several CSS properties to display links as boxes/buttons:
Example
a:link, a:visited {
background-color: #f44336;
color: white;
padding: 14px 25px;
text-align: center;
text-decoration: none;
display: inline-block;
}
a:hover, a:active {
background-color: red;
}
Try it Yourself 
More Examples
Example
This example demonstrates how to add other styles to hyperlinks:
a.one:link {color: #ff0000;}
a.one:visited {color: #0000ff;}
a.one:hover 
  {color: #ffcc00;}
a.two:link {color: #ff0000;}
a.two:visited {color: 
  #0000ff;}
a.two:hover {font-size: 150%;}
a.three:link {color: 
  #ff0000;}
a.three:visited {color: #0000ff;}
a.three:hover {background: 
  #66ff66;}
a.four:link {color: #ff0000;}
a.four:visited {color: 
  #0000ff;}
a.four:hover {font-family: monospace;}
a.five:link {color: 
  #ff0000; text-decoration: none;}
a.five:visited {color: #0000ff; 
  text-decoration: none;}
a.five:hover {text-decoration: underline;}
Try it Yourself 
Example
Another example of how to create link boxes/buttons:
a:link, a:visited {
background-color: white;
color: black;
border: 2px solid green;
padding: 10px 20px;
text-align: 
  center;
text-decoration: none;
display: inline-block;
}
a:hover, a:active 
  {
background-color: green;
color: white;
}
Try it Yourself 
Example
This example demonstrates the different types of cursors (can be useful for links):
<span style="cursor: auto">auto</span><br>
<span style="cursor: 
  crosshair">crosshair</span><br>
<span style="cursor: 
  default">default</span><br>
<span style="cursor: e-resize">e-resize</span><br>
<span style="cursor: help">help</span><br>
<span style="cursor: 
  move">move</span><br>
<span style="cursor: n-resize">n-resize</span><br>
<span style="cursor: ne-resize">ne-resize</span><br>
<span style="cursor: 
  nw-resize">nw-resize</span><br>
<span style="cursor: 
  pointer">pointer</span><br>
<span style="cursor: progress">progress</span><br>
<span style="cursor: s-resize">s-resize</span><br>
<span style="cursor: 
  se-resize">se-resize</span><br>
<span style="cursor: sw-resize">sw-resize</span><br>
<span style="cursor: text">text</span><br>
<span style="cursor: 
  w-resize">w-resize</span><br>
<span style="cursor: wait">wait</span>
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set the color of links to "red".
<style>
{
  color: red;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <a href="http://w3schools.com">This is a link</a>
</body>
Submit Answer 
Start the Exercise
CSS
Fonts
Choosing the right font for your website is important!
Font Selection is Important
Choosing the right font has a huge impact on how the readers experience a 
website.
The right font can create a strong identity for your brand.
Using a font that is easy to read is important. The font adds 
value to your text. It is also important to choose the correct color and text size 
for the font.
Generic Font Families
In CSS there are five generic font families:
Serif
fonts have a small stroke at the edges of each letter. They create a sense of formality and elegance.
Sans-serif
fonts have clean lines (no small strokes attached). They create a modern and minimalistic look.
Monospace
fonts - here all the letters have the same fixed width. They create a mechanical look.
Cursive
fonts imitate human handwriting.
Fantasy
fonts are decorative/playful fonts.
All the different font names belong to one of the generic font families.
Difference Between Serif and Sans-serif Fonts
Some Font Examples
Generic Font Family
Examples of Font Names
Serif
Times New Roman
Georgia
Garamond
Sans-serif
Arial
Verdana
Helvetica
Monospace
Courier New
Lucida Console
Monaco
Cursive
Brush Script MT
Lucida Handwriting
Fantasy
Copperplate
Papyrus
The CSS font-family Property
In CSS, we use the
font-family
property to specify the font of a text.
Tip:
The
font-family
property should hold several font names as a "fallback" system, 
to ensure maximum compatibility between browsers/operating systems. Start with the font you want, and end with a generic family 
(to let the 
browser pick a similar font in the generic family, if no other fonts are 
available). The font names should be separated with a comma. Read more about 
fallback fonts in the
next chapter
.
Example
Specify some different fonts for three paragraphs:
.p1 {
font-family: "Times New Roman", Times, serif;
}
.p2 {
font-family: Arial, Helvetica, sans-serif;
}
.p3 {
font-family: "Lucida Console", "Courier New", monospace;
}
Try it Yourself 
CSS
Font Property
The CSS Font Property
To shorten the code, it is also possible to specify all the individual font properties in one property.
The
font
property is a shorthand property for:
font-style
font-variant
font-weight
font-size/line-height
font-family
Note:
The
font-size
and
font-family
values are required. If one of the other values is missing, their default value are used.
Example
Use
font
to set several font properties in 
one declaration:
p.a
 {
font: 20px Arial, sans-serif;
}
p.b
 {
font: italic small-caps bold 12px/30px Georgia, serif;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set the font for <h1> to "Verdana".
<style>
h1 {
: Verdana;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Font Properties
Property
Description
font
Sets all the font properties in one declaration
font-family
Specifies the font family for text
font-size
Specifies the font size of text
font-style
Specifies the font style for text
font-variant
Specifies whether or not a text should be displayed in a small-caps font
font-weight
Specifies the weight of a font
CSS
Google Fonts
Google Fonts
If you do not want to use any of the standard fonts in HTML, you can use Google Fonts.
Google Fonts are free to use, and have more than 1000 fonts to choose from.
How To Use Google Fonts
Just add a special style sheet link in the <head> section and then refer to the font in the CSS.
Example
Here, we want to use a font named "Sofia" from Google Fonts:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Sofia">
<style>
body {
font-family: "Sofia", sans-serif;
}
</style>
</head>
Result:
Sofia Font
Lorem ipsum dolor sit amet.
123456790
Try it Yourself 
Example
Here, we want to use a font named "Trirong" from Google Fonts:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Trirong">
<style>
body {
font-family: "Trirong", serif;
}
</style>
</head>
Result:
Trirong Font
Lorem ipsum dolor sit amet.
123456790
Try it Yourself 
Example
Here, we want to use a font named "Audiowide" from Google Fonts:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Audiowide">
<style>
body {
font-family: "Audiowide", sans-serif;
}
</style>
</head>
Result:
Audiowide Font
Lorem ipsum dolor sit amet.
123456790
Try it Yourself 
For a list of all available Google Fonts, visit our
How To - Google Fonts Tutorial
.
Use Multiple Google Fonts
To use multiple Google fonts, just separate the font names with a pipe 
character (
|
), like this:
Example
Request multiple fonts:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong">
<style>
h1.a {font-family: "Audiowide", sans-serif;}
h1.b {font-family: "Sofia", 
  sans-serif;}
h1.c {font-family: "Trirong", serif;}
</style>
</head>
Result:
Audiowide Font
Sofia Font
Trirong Font
Try it Yourself 
Styling Google Fonts
Of course you can style Google Fonts as you like, with CSS!
Example
Style the "Sofia" font:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Sofia">
<style>
body {
font-family: "Sofia", sans-serif;
font-size: 30px;
text-shadow: 3px 3px 3px #ababab;
}
</style>
</head>
Result:
Sofia Font
Lorem ipsum dolor sit amet.
123456790
Try it Yourself 
Enabling Font Effects
Google has also enabled different font effects that you can use.
First add
effect=
effectname
to the Google API, 
then add a special class name to the element that is going to use the special 
effect. The class name always starts with
font-effect-
and ends with the
effectname
.
Example
Add the fire effect to the "Sofia" font:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">
<style>
body {
font-family: "Sofia", sans-serif;
font-size: 30px;
}
</style>
</head>
<body>
<h1 class="font-effect-fire">Sofia on 
  Fire</h1>
</body>
Result:
Sofia on Fire
Try it Yourself 
To request multiple font effects, just separate the effect names with a pipe character 
(
|
), like this:
Example
Add multiple effects to the "Sofia" font:
<head>
<link rel="stylesheet" 
  href="https://fonts.googleapis.com/css?family=Sofia&effect=neon|outline|emboss|shadow-multiple">
<style>
body {
font-family: "Sofia", sans-serif;
font-size: 30px;
}
</style>
</head>
<body>
<h1 class="font-effect-neon">Neon Effect</h1>
<h1 class="font-effect-outline">Outline 
  Effect</h1>
<h1 class="font-effect-emboss">Emboss 
  Effect</h1>
<h1 class="font-effect-shadow-multiple">Multiple 
  Shadow Effect</h1>
</body>
Result:
Neon Effect
Outline Effect
Emboss Effect
Multiple Shadow Effect
Try it Yourself 
CSS
Outline Shorthand
CSS Outline - Shorthand property
The
outline
property is a shorthand property for 
setting the following individual outline properties:
outline-width
outline-style
(required)
outline-color
The
outline
property is specified as one, 
two, or three values from the list above. The order of the values does not 
matter.
The following example shows some outlines specified with the shorthand
outline
property:
A dashed outline.
A dotted red outline.
A 5px solid yellow outline.
A thick ridge pink outline.
Example
p.ex1
{outline: dashed;}
p.ex2
{outline: dotted red;}
p.ex3
{outline: 5px solid yellow;}
p.ex4
{outline: thick ridge pink;}
Try it Yourself 
CSS
Rounded Borders
CSS Rounded Borders
The
border-radius
property is used to add rounded borders to an element:
Normal border
Round border
Rounder border
Roundest border
Example
p {
border: 2px solid red;
border-radius: 5px;
}
Try it Yourself 
More Examples
All the top border properties in one declaration
This example demonstrates a shorthand property for setting all of the properties for the top border in one declaration.
Set the style of the bottom border
This example demonstrates how to set the style of the bottom border.
Set the width of the left border
This example demonstrates how to set the width of the left border.
Set the color of the four borders
This example demonstrates how to set the color of the four borders. It can have from one to four colors.
Set the color of the right border
This example demonstrates how to set the color of the right border.
Test Yourself With Exercises
Exercise:
Use the border shorthand property to set a "4px", "dotted", "red" border for the <p> elements.
<style>
p {
:
;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Border Properties
Property
Description
border
Sets all the border properties in one declaration
border-bottom
Sets all the bottom border properties in one declaration
border-bottom-color
Sets the color of the bottom border
border-bottom-style
Sets the style of the bottom border
border-bottom-width
Sets the width of the bottom border
border-color
Sets the color of the four borders
border-left
Sets all the left border properties in one declaration
border-left-color
Sets the color of the left border
border-left-style
Sets the style of the left border
border-left-width
Sets the width of the left border
border-radius
Sets all the four border-*-radius properties for rounded corners
border-right
Sets all the right border properties in one declaration
border-right-color
Sets the color of the right border
border-right-style
Sets the style of the right border
border-right-width
Sets the width of the right border
border-style
Sets the style of the four borders
border-top
Sets all the top border properties in one declaration
border-top-color
Sets the color of the top border
border-top-style
Sets the style of the top border
border-top-width
Sets the width of the top border
border-width
Sets the width of the four borders
CSS
Great Font Pairings
Great font pairings are essential to great design.
Font Pairing Rules
Here are some basic rules to create great font pairings:
1. Complement
It is always safe to find font pairings that complement one another.
A great font combination should harmonize, without being too similar or too different.
2. Use Font Superfamilies
A font superfamily is a set of fonts designed to work well together. So, using different fonts within the same superfamily is safe.
For example, the Lucida superfamily contains the following fonts: Lucida 
Sans, Lucida Serif, Lucida Typewriter Sans, Lucida Typewriter Serif and Lucida Math.
3. Contrast is King
Two fonts that are too similar will often conflict. However, contrasts, done 
the right way, brings out the best in each font.
Example: Combining serif with sans serif is a well known combination.
A strong superfamily includes both serif and sans serif variations of the same font (e.g. Lucida and Lucida Sans).
4. Choose Only One Boss
One font should be the boss. This establishes a hierarchy for the fonts on 
your page. This can be achieved by varying the size, weight and color.
Example
No doubt "Georgia" is the boss here:
body {
background-color: black;
font-family: Verdana, 
  sans-serif;
font-size: 16px;
color: gray;
}
h1 
  {
font-family: Georgia, serif;
font-size: 60px;
color: white;
}
Try it Yourself 
Below, we have shown some popular font pairings that will suit many brands and contexts.
Georgia and Verdana
Georgia and Verdana is a classic combination. It also sticks to the web safe font standards:
Example
Use the "Georgia" font for headings, and "Verdana" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Helvetica and Garamond
Helvetica and Garamond is another classic combination that uses web safe fonts:
Example
Use the "Helvetica" font for headings, and "Garamond" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Popular Google Font Pairings
If you do not want to use standard fonts in HTML, you can use Google Fonts.
Google Fonts are free to use, and have more than 1000 fonts to choose from.
Below are some popular Google Web Font Pairings.
Merriweather and Open Sans
Example
Use the "Merriweather" font for headings, and "Open Sans" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Ubuntu and Lora
Example
Use the "Ubuntu" font for headings, and "Lora" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Abril Fatface and Poppins
Example
Use the "Abril Fatface" font for headings, and "Poppins" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Cinzel and Fauna One
Example
Use the "Cinzel" font for headings, and "Fauna One" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Fjalla One and Libre Baskerville
Example
Use the "Fjalla One" font for headings, and "Libre Baskerville" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Space Mono and Muli
Example
Use the "Space Mono" font for headings, and "Muli" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Spectral and Rubik
Example
Use the "Spectral" font for headings, and "Rubik" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
Oswald and Noto Sans
Example
Use the "Oswald" font for headings, and "Noto Sans" for text:
Beautiful Norway
Norway has a total area of 385,252 square 
kilometers and a population of 5,438,657 (December 2020). Norway is bordered by 
Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.
Norway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.
Try it Yourself 
For a list of all free Google Fonts, visit our
How To - Google Fonts Tutorial
.
CSS
Border Sides
CSS Border - Individual Sides
From the examples on the previous pages, you have seen that it is possible to specify a 
different border for each side.
In CSS, there are also properties for specifying each of the borders (top, 
right, bottom, and left):
Example
p
{
border-top-style: dotted;
border-right-style: solid;
border-bottom-style: dotted;
border-left-style: solid;
}
Result:
Different Border Styles
Try it Yourself 
The example above gives the same result as this:
Example
p {
border-style: dotted solid;
}
Try it Yourself 
So, here is how it works:
If the
border-style
property has four values:
border-style: dotted solid double dashed;
top border is dotted
right border is solid
bottom border is double
left border is dashed
If the
border-style
property has three values:
border-style: dotted solid double;
top border is dotted
right and left borders are solid
bottom border is double
If the
border-style
property has two values:
border-style: dotted solid;
top and bottom borders are dotted
right and left borders are solid
If the
border-style
property has one value:
border-style: dotted;
all four borders are dotted
Example
/* Four values */
p {
border-style: dotted solid double dashed;
}
/* Three 
  values */
p {
border-style: dotted solid double;
}
/* Two values */
p {
border-style: dotted solid;
}
/* One value */
p {
border-style: dotted;
}
Try it Yourself 
CSS
Forms
The look of an HTML form can be greatly improved with CSS:
First Name
Last Name
Country
Australia
Canada
USA
Try it Yourself 
Styling Input Fields
Use the
width
property to determine the width of the input field:
First Name
Example
input
{
width: 100%;
}
Try it Yourself 
The example above applies to all <input> elements. If you only want to 
style a specific input type, you can use attribute selectors:
input[type=text]
- will only select text fields
input[type=password]
- will only select password fields
input[type=number]
- will only select number fields
etc..
Padded Inputs
Use the
padding
property to add space inside the text field.
Tip:
When you have many inputs after each other, you might 
also want to add some
margin
, to add more space 
outside of them:
First Name
Last Name
Example
input[type=text]
{
width: 100%;
padding: 12px 20px;
margin: 8px 0;
box-sizing: border-box;
}
Try it Yourself 
Bordered Inputs
Use the
border
property to change the border size and color, and 
use the
border-radius
property to add rounded corners:
First Name
Example
input[type=text]
{
border: 2px solid red;
border-radius: 4px;
}
Try it Yourself 
If you only want a bottom border, use the
border-bottom
property:
First Name
Example
input[type=text]
{
border: none;
border-bottom: 2px solid red;
}
Try it Yourself 
Colored Inputs
Use the
background-color
property to add a background color to the input, and 
the
color
property to change the text color:
Example
input[type=text]
{
background-color: #3CBC8D;
color: white;
}
Try it Yourself 
Focused Inputs
By default, some browsers will add a blue outline around the input when it gets 
focus (clicked on). You can remove this behavior by adding
outline: none;
to the input.
Use the
:focus
selector to do something with the input field when it gets focus:
Example
input[type=text]:focus
{
background-color: lightblue;
}
Try it Yourself 
Example
input[type=text]:focus
{
border: 3px solid #555;
}
Try it Yourself 
Input with icon/image
If you want an icon inside the input, use the
background-image
property and 
position it with the
background-position
property. Also notice that we 
add a 
large left padding to reserve the space of the icon:
Example
input[type=text]
{
background-color: white;
background-image: url('searchicon.png');
background-position: 10px 10px;
background-repeat: 
no-repeat;
padding-left: 40px;
}
Try it Yourself 
Animated Search Input
In this example we use the CSS
transition
property to animate 
the width of the search input when it gets focus. You will learn more about the
transition
property later, in our
CSS Transitions
chapter.
Example
input[type=text] {
transition: width 0.4s ease-in-out;
}
input[type=text]:focus {
width: 100%;
}
Try it Yourself 
Styling Textareas
Tip:
Use the
resize
property to prevent textareas from being resized (disable the "grabber" in the bottom right corner):
Some text...
Example
textarea
{
width: 100%;
height: 150px;
padding: 12px 20px;
box-sizing: border-box;
border: 2px solid #ccc;
border-radius: 4px;
background-color: #f8f8f8;
resize: none;
}
Try it Yourself 
Styling Select Menus
Australia
Canada
USA
Example
select
{
width: 100%;
padding: 16px 20px;
border: none;
border-radius: 4px;
background-color: #f1f1f1;
}
Try it Yourself 
Styling Input Buttons
Example
input[type=button], input[type=submit], input[type=reset]
{
background-color: #04AA6D;
border: 
none;
color: white;
padding: 
16px 32px;
text-decoration: none;
margin: 4px 2px;
cursor: pointer;
}
/* Tip: use
width: 100%
for full-width buttons */
Try it Yourself 
For more information about how to style buttons with CSS, read our
CSS Buttons Tutorial
.
Responsive Form
Resize the browser window to see the effect. When the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other.
Try it Yourself 
CSS
Dropdowns
Create a hoverable dropdown with CSS.
Demo: Dropdown Examples
Move the mouse over the examples below:
Dropdown Text
Hello World!
Dropdown Menu
Link 1
Link 2
Link 3
Other:
Beautiful Cinque Terre
Basic Dropdown
Create a dropdown box that appears when the user moves the mouse over an 
element.
Example
<style>
.dropdown {
position: relative;
display: inline-block;
}
.dropdown-content {
display: 
none;
position: absolute;
background-color: #f9f9f9;
min-width: 160px;
box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
padding: 
12px 16px;
z-index: 1;
}
.dropdown:hover 
.dropdown-content {
display: block;
}
</style>
<div class="dropdown">
<span>Mouse over me</span>
<div class="dropdown-content">
<p>Hello World!</p>
</div>
</div>
Try it Yourself 
Example Explained
HTML)
Use any element to open the dropdown content, e.g. a 
<span>, or a <button> element.
Use a container element (like <div>) to create the dropdown content and add 
whatever you want inside of it.
Wrap a <div> element around the elements to position the dropdown content 
correctly with CSS.
CSS)
The
.dropdown
class uses
position:relative
, which is needed when we want the 
dropdown content to be placed right below the dropdown button (using
position:absolute
).
The
.dropdown-content
class holds the actual dropdown content. It is hidden by 
default, and will be displayed on hover (see below). Note the
min-width
is set to 160px. Feel free to change 
this.
Tip:
If you want the width of the dropdown content to be 
as wide as the dropdown button, set the
width
to 100% (and
overflow:auto
to 
enable scroll on small screens).
Instead of using a border, we have used the CSS
box-shadow
property to make the 
dropdown menu look like a "card".
The
:hover
selector is used to show the dropdown menu when the user moves the 
mouse over the dropdown button.
Dropdown Menu
Create a dropdown menu that allows the user to choose an option from a list:
Dropdown Menu
Link 1
Link 2
Link 3
This example is similar to the previous one, except that we add links inside the dropdown box and style them to fit a styled dropdown button:
Example
<style>
/* Style The Dropdown Button */
.dropbtn {
background-color: #4CAF50;
color: white;
padding: 16px;
font-size: 16px;
border: none;
cursor: pointer;
}
/* The 
container <div> - needed to position the dropdown content */
.dropdown {
position: relative;
display: 
inline-block;
}
/* Dropdown Content (Hidden by Default) */
.dropdown-content {
display: none;
position: 
absolute;
background-color: #f9f9f9;
min-width: 160px;
box-shadow: 
0px 8px 16px 0px rgba(0,0,0,0.2);
z-index: 1;
}
/* Links inside the dropdown */
.dropdown-content a {
color: black;
padding: 12px 16px;
text-decoration: none;
display: block;
}
/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #f1f1f1}
/* Show the 
dropdown menu on hover */
.dropdown:hover .dropdown-content {
display: block;
}
/* Change the background color of the dropdown 
button when the dropdown content is shown */
.dropdown:hover .dropbtn {
background-color: #3e8e41;
}
</style>
<div class="dropdown">
<button class="dropbtn">Dropdown</button>
<div class="dropdown-content">
<a href="#">Link 
1</a>
<a href="#">Link 2</a>
<a href="#">Link 3</a>
</div>
</div>
Try it Yourself 
Right-aligned Dropdown Content
Left
Link 1
Link 2
Link 3
Right
Link 1
Link 2
Link 3
If you want the dropdown menu to go from right to left, instead of left to right, add
right: 0;
Example
.dropdown-content {
right: 0;
}
Try it Yourself 
More Examples
Dropdown Image
How to add an image and other content inside the dropdown box.
Hover over the image:
Beautiful Cinque Terre
Try it Yourself 
Dropdown Navbar
How to add a dropdown menu inside a navigation bar.
Try it Yourself 
CSS
Layout - The position
Property
The
position
property specifies the type of 
positioning method used for an element (static, relative, fixed, absolute or 
sticky).
The position Property
The
position
property specifies the type of positioning method used for an element.
There are five different position values:
static
relative
fixed
absolute
sticky
Elements are then positioned using the top, bottom, left, and right 
properties. However, these properties will not work unless the
position
property is set first. They also work differently depending on the position 
value.
position: static;
HTML elements are positioned static by default.
Static positioned elements are not affected by the top, bottom, left, and right properties.
An element with
position: static;
is not positioned in any special way; it is 
always positioned according to the normal flow of the page:
This <div> element has position: static;
Here is the CSS that is used:
Example
div.static {
position: static;
border: 3px solid #73AD21;
}
Try it Yourself 
position: relative;
An element with
position: relative;
is positioned relative to its normal position.
Setting the top, right, bottom, and left properties of a relatively-positioned element will cause
it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the 
element.
This <div> element has position: relative;
Here is the CSS that is used:
Example
div.relative {
position: relative;
left: 30px;
border: 3px solid #73AD21;
}
Try it Yourself 
position: fixed;
An element with
position: fixed;
is positioned relative to the viewport, which means it always 
stays in the same place even if the page is scrolled. The top, 
right, bottom, and left properties are used to position the element.
A fixed element does not leave a gap in the page where it would normally have been located.
Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:
Example
div.fixed {
position: fixed;
bottom: 0;
right: 0;
width: 
300px;
border: 3px solid #73AD21;
}
Try it Yourself 
This <div> element has
position: fixed;
position: absolute;
An element with
position: absolute;
is positioned relative to the nearest positioned ancestor 
(instead of positioned relative to the viewport, like fixed).
However; if an absolute positioned element has no positioned ancestors, 
it uses the document body, and moves along with page scrolling.
Note:
Absolute positioned elements are removed from the normal flow, and can overlap elements.
Here is a simple example:
This <div> element has position: relative;
This <div> element has position: absolute;
Here is the CSS that is used:
Example
div.relative {
position: relative;
width: 400px;
height: 200px;
border: 3px solid #73AD21;
}
div.absolute {
position: absolute;
top: 80px;
right: 0;
width: 200px;
height: 100px;
border: 3px solid #73AD21;
}
Try it Yourself 
position: sticky;
An element with
position: sticky;
is positioned based on the user's scroll position.
A sticky element toggles between
relative
and
fixed
, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
In this example, the sticky element sticks to the top of the page (
top: 0
), when you reach its scroll position.
Example
div.sticky {
position: 
  sticky;
top: 0;
background-color: green;
border: 2px solid #4CAF50;
}
Try it Yourself 
Positioning Text In an Image
How to position text over an image:
Example
Bottom Left
Top Left
Top Right
Bottom Right
Centered
Try it Yourself:
Top Left 
Top Right 
Bottom Left 
Bottom Right 
Centered 
More Examples
Set the shape of an element
This example demonstrates how to set the shape of an element. The element is clipped into this shape, and displayed.
Test Yourself With Exercises
Exercise:
Position the <h1> element to always be 50px from the top,
and 10px from the right, relative to the window/frame edges.
<style>
h1 {
:
;
: 50px;
: 10px;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Positioning Properties
Property
Description
bottom
Sets the bottom margin edge for a positioned box
clip
Clips an absolutely positioned element
left
Sets the left margin edge for a positioned box
position
Specifies the type of positioning for an element
right
Sets the right margin edge for a positioned box
top
Sets the top margin edge for a positioned box
CSS
Outline Offset
CSS Outline Offset
The
outline-offset
property adds space 
between an outline and the edge/border of an element. The space between an 
element and its outline is transparent.
The following example specifies an outline 15px outside the border edge:
This paragraph has an outline 15px outside the border edge.
Example
p {
margin: 30px;
border: 1px solid black;
outline: 
  1px solid red;
outline-offset: 15px;
}
Try it Yourself 
The following example shows that the space between an element and its outline 
is transparent:
This paragraph has an outline of 15px outside the border edge.
Example
p {
margin: 30px;
background: 
  yellow;
border: 1px solid black;
outline: 
  1px solid red;
outline-offset: 15px;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set a solid, 5px
outline
border for the <div> element.
<style>
div {
: solid;
: 5px;
}
</style>

<body>

<div>
Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.
</div>

</body>
Submit Answer 
Start the Exercise
All CSS Outline Properties
Property
Description
outline
A shorthand property for setting outline-width, outline-style, and 
    outline-color in one declaration
outline-color
Sets the color of an outline
outline-offset
Specifies the space between an outline and the edge or border of an element
outline-style
Sets the style of an outline
outline-width
Sets the width of an outline
CSS
Text
CSS has a lot of properties for formatting text.
text formatting
This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties.
The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored
"Try it Yourself"
link.
Try it Yourself 
Text Color
The
color
property is used to set the color of the text. 
The color is specified by:
a color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at
CSS Color Values
for a complete list of possible color values.
The default text color for a page is defined in the body selector.
Example
body {
color: blue;
}
h1 {
color: green;
}
Try it Yourself 
Text Color and Background Color
In this example, we define both the
background-color
property and the
color
property:
Example
body {
background-color: lightgrey;
color: blue;
}
h1 {
background-color: black;
color: white;
}
div {
background-color: blue;
color: white;
}
Try it Yourself 
The CSS Text Color Property
Property
Description
color
Specifies the color of text
CSS
Combinators
CSS Combinators
A CSS selector can contain more than one simple selector. Between the simple 
selectors, we can include a combinator.
There are four different combinators in CSS:
descendant selector (space)
child selector (>)
adjacent sibling selector (+)
general sibling selector (~)
Descendant Selector
The descendant selector matches all elements that are descendants of a specified 
element.
The following example selects all <p> elements inside <div> elements:
Example
div p {
background-color: yellow;
}
Try it Yourself 
Child Selector (>)
The child selector selects all elements that are the children of a 
specified element.
The following example selects all <p> elements that are  
children of a <div> 
element:
Example
div > p {
background-color: yellow;
}
Try it Yourself 
Adjacent Sibling Selector (+)
The adjacent sibling selector is used to select an element that is directly 
after another specific element.
Sibling elements must have the same parent element, and "adjacent" means 
"immediately following".
The following example selects the first <p> element that are placed immediately after <div> elements:
Example
div + p {
background-color: yellow;
}
Try it Yourself 
General Sibling Selector (~)
The general sibling selector selects all elements that are next siblings of a specified element.
The following example selects all <p> elements that are next siblings of <div> elements:
Example
div ~ p {
background-color: yellow;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Change the color of all <p> elements, that are descendants of <div> elements, to "red".
<style>
{
  color: red;
}
</style>

<body>

<div>
  <p>This is a paragraph.</p>
  <p>This is a paragraph.</p>
</div>
<p>This is a paragraph.</p>
<p>This is a paragraph.</p>

</body>
Submit Answer 
Start the Exercise
All CSS Combinator Selectors
Selector
Example
Example description
element element
div p
Selects all <p> elements inside <div> elements
element>element
div > p
Selects all <p> elements where the parent is a <div> element
element+element
div + p
Selects the first <p> element that are placed immediately after <div> elements
element1~element2
p ~ ul
Selects every <ul> element that are preceded by a <p> element
CSS
Navigation Bar
Demo: Navigation Bars
Vertical
Home
News
Contact
About
Horizontal
Home
News
Contact
About
Home
News
Contact
About
Navigation Bars
Having easy-to-use navigation is important for any web site.
With CSS you can transform boring HTML menus into good-looking navigation bars.
Navigation Bar = List of Links
A navigation bar needs standard HTML as a base.
In our examples we will build the navigation bar from a standard HTML list.
A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect 
sense:
Example
<ul>
<li><a href="default.asp">Home</a></li>
<li><a href="news.asp">News</a></li>
<li><a href="contact.asp">Contact</a></li>
<li><a href="about.asp">About</a></li>
</ul>
Try it Yourself 
Now let's remove the bullets and the margins and padding from the list:
Example
ul
{
list-style-type: none;
margin: 0;
padding: 0;
}
Try it Yourself 
Example explained:
list-style-type: none;
- Removes the bullets. A navigation bar 
does not need list markers
Set
margin: 0;
and
padding: 0;
to remove browser default settings
The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters.
CSS
Outline
An outline is a line drawn outside the element's border.
This element has a black border and a green outline with a width of 10px.
Try it Yourself 
CSS Outline
An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
CSS has the following outline properties:
outline-style
outline-color
outline-width
outline-offset
outline
CSS Outline Style
The
outline-style
property specifies the style of the outline, 
and can have one of the following values:
dotted
- Defines a dotted outline
dashed
- Defines a dashed outline
solid
- Defines a solid outline
double
- Defines a double outline
groove
- Defines a 3D grooved outline
ridge
- Defines a 3D ridged outline
inset
- Defines a 3D inset outline
outset
- Defines a 3D outset outline
none
- Defines no outline
hidden
- Defines a hidden outline
The following example shows the different
outline-style
values:
Example
Demonstration of the different outline styles:
p.dotted {outline-style: dotted;}
p.dashed {outline-style: dashed;}
p.solid {outline-style: solid;}
p.double {outline-style: double;}
p.groove {outline-style: groove;}
p.ridge {outline-style: ridge;}
p.inset {outline-style: inset;}
p.outset {outline-style: outset;}
Result:
A dotted outline.
A dashed outline.
A solid outline.
A double outline.
A groove outline. The effect depends on the outline-color value.
A ridge outline. The effect depends on the outline-color value.
An inset outline. The effect depends on the outline-color value.
An outset outline. The effect depends on the outline-color value.
Try it Yourself 
CSS
Text Alignment
Text Alignment and Text Direction
In this chapter you will learn about the following properties:
text-align
text-align-last
direction
unicode-bidi
vertical-align
Text Alignment
The
text-align
property is used to set the horizontal alignment of a text.
A text can be left or right aligned, centered, or justified.
The following example shows center aligned, and left and right aligned text 
(left alignment is default if text direction is left-to-right, and right 
alignment is default if text direction is right-to-left):
Example
h1 {
text-align: center;
}
h2 {
text-align: left;
}
h3 {
text-align: right;
}
Try it Yourself 
When the
text-align
property is set to "justify", each line is 
stretched so that every line has equal width, and the left and right margins are 
straight (like in magazines and newspapers):
Example
div {
text-align: justify;
}
Try it Yourself 
Text Align Last
The
text-align-last
property specifies how to align the last line of a text.
Example
Align the last line of text in three <p> elements:
p.a
{
text-align-last: right;
}
p.b
{
text-align-last: center;
}
p.c
{
text-align-last: justify;
}
Try it Yourself 
Text Direction
The
direction
and
unicode-bidi
properties can be used to change the text direction of an element:
Example
p {
direction: rtl;
unicode-bidi: bidi-override;
}
Try it Yourself 
Vertical Alignment
The
vertical-align
property sets the vertical alignment of an element.
Example
Set the vertical alignment of an image in a text:
img.a {
vertical-align: baseline;
}
img.b {
vertical-align: text-top;
}
img.c {
vertical-align: 
  text-bottom;
}
img.d {
vertical-align: sub;
}
img.e {
vertical-align: super;
}
Try it Yourself 
The CSS Text Alignment/Direction Properties
Property
Description
direction
Specifies the text direction/writing direction
text-align
Specifies the horizontal alignment of text
text-align-last
Specifies how to align the last line of a text
unicode-bidi
Used together with the
direction
property to set or return whether the text should be overridden to support multiple languages in the same document
vertical-align
Sets the vertical alignment of an element
CSS
Background Shorthand
CSS background - Shorthand property
To shorten the code, it is also possible to specify all the background properties in one 
single property. This is called a shorthand property.
Instead of writing:
body {
background-color: #ffffff;
background-image: 
  url("img_tree.png");
background-repeat: no-repeat;
background-position: right top;
}
You can use the shorthand property
background
:
Example
Use the shorthand property to set the background properties in one 
  declaration:
body {
background: #ffffff url("img_tree.png") no-repeat right top;
}
Try it Yourself 
When using the shorthand property the order of the property values is:
background-color
background-image
background-repeat
background-attachment
background-position
It does not matter if one of the property values is missing, as long as the 
other ones are in this order. Note that we do not use the background-attachment property in the examples above, as it does not have a value.
Test Yourself With Exercises
Exercise:
Set the background color of the <h1> element to "lightblue".
<style>
h1 {
: lightblue;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Background Properties
Property
Description
background
Sets all the background properties in one declaration
background-attachment
Sets whether a background image is fixed or scrolls with the rest of the page
background-clip
Specifies the painting area of the background
background-color
Sets the background color of an element
background-image
Sets the background image for an element
background-origin
Specifies where the background image(s) is/are positioned
background-position
Sets the starting position of a background image
background-repeat
Sets how a background image will be repeated
background-size
Specifies the size of the background image(s)
Video: CSS Background Shorthand
CSS
Pseudo-elements
What are Pseudo-Elements?
A CSS pseudo-element is used to style specified parts of an element.
For example, it can be used to:
Style the first letter, or line, of an element
Insert content before, or after, the content of an element
Syntax
The syntax of pseudo-elements:
selector::pseudo-element {
property: value;
}
The ::first-line Pseudo-element
The
::first-line
pseudo-element is used to add a special style 
to the first line of a text.
The following example formats the first line of the text in all <p> 
elements:
Example
p::first-line 
{
color: #ff0000;
font-variant: small-caps;
}
Try it Yourself 
Note:
The
::first-line
pseudo-element can only be applied to block-level 
elements.
The following properties apply to the
::first-line
pseudo-element:
font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear
The ::first-letter Pseudo-element
The
::first-letter
pseudo-element is used to add a special style to the first 
letter of a text.
The following example formats the first letter of the text in all <p> 
elements:
Example
p::first-letter 
{
color: #ff0000;
font-size: xx-large;
}
Try it Yourself 
Note:
The
::first-letter
pseudo-element can only be applied to block-level 
elements.
The following properties apply to the ::first-letter pseudo- element:
font properties
color properties
background properties
margin properties
padding properties
border properties
text-decoration
vertical-align (only if "float" is "none")
text-transform
line-height
float
clear
Pseudo-elements and HTML Classes
Pseudo-elements can be combined with HTML classes:
Example
p.intro::first-letter {
color: #ff0000;
font-size: 200%;
}
Try it Yourself 
The example above will display the first letter of paragraphs with class="intro", in 
red and in a larger size.
Multiple Pseudo-elements
Several pseudo-elements can also be combined.
In the following example, the first letter of a paragraph will be red, in 
an xx-large font size. The rest of the first line will be blue, and in 
small-caps. The rest of the paragraph will be the default font size and color:
Example
p::first-letter
{
color: #ff0000;
font-size: xx-large;
}
p::first-line 
{
color: #0000ff;
font-variant: small-caps;
}
Try it Yourself 
CSS - The ::before Pseudo-element
The
::before
pseudo-element can be used to insert some content before the content of an element.
The following example inserts an image before the content of each <h1> element:
Example
h1::before 
{
content: url(smiley.gif);
}
Try it Yourself 
CSS - The ::after Pseudo-element
The
::after
pseudo-element can be used to insert some content after the content of an element.
The following example inserts an image after the content of each <h1> element:
Example
h1::after
{
content: url(smiley.gif);
}
Try it Yourself 
CSS - The ::marker Pseudo-element
The
::marker
pseudo-element selects the 
markers of list items.
The following example styles the markers of list items:
Example
::marker {
color: red;
font-size: 23px;
}
Try it Yourself 
CSS - The ::selection Pseudo-element
The
::selection
pseudo-element matches the portion of an element that is 
selected by a user.
The following CSS properties can be applied to
::selection
:
color
,
background
,
cursor
, and
outline
.
The following example makes the selected text red on a yellow background:
Example
::selection {
color: red;
background: yellow;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set the background-color to red, of the first line of the paragraph.
<style>
{
  background-color: red;
}
</style>

<body>

<p class="intro">
In my younger and more vulnerable years
my father gave me some advice that I've
been turning over in my mind ever since.
'Whenever you feel like criticizing anyone,' he told me,
'just remember that all the people in this world
haven't had the advantages that you've had.'
</p>

</body>
Submit Answer 
Start the Exercise
All CSS Pseudo Elements
Selector
Example
Example description
::after
p::after
Insert something after the content of each <p> element
::before
p::before
Insert something before the content of each <p> element
::first-letter
p::first-letter
Selects the first letter of each <p> element
::first-line
p::first-line
Selects the first line of each <p> element
::marker
::marker
Selects the markers of list items
::selection
p::selection
Selects the portion of an element that is selected by a user
All CSS Pseudo Classes
Selector
Example
Example description
:active
a:active
Selects the active link
:checked
input:checked
Selects every checked <input> element
:disabled
input:disabled
Selects every disabled <input> element
:empty
p:empty
Selects every <p> element that has no children
:enabled
input:enabled
Selects every enabled <input> element
:first-child
p:first-child
Selects every <p> elements that is the first child of its parent
:first-of-type
p:first-of-type
Selects every <p> element that is the first <p> element of its parent
:focus
input:focus
Selects the <input> element that has focus
:hover
a:hover
Selects links on mouse over
:in-range
input:in-range
Selects <input> elements with a value within a specified range
:invalid
input:invalid
Selects all <input> elements with an invalid value
:lang(
language
)
p:lang(it)
Selects every <p> element with a lang attribute value starting with "it"
:last-child
p:last-child
Selects every <p> elements that is the last child of its parent
:last-of-type
p:last-of-type
Selects every <p> element that is the last <p> element of its parent
:link
a:link
Selects all unvisited links
:not(selector)
:not(p)
Selects every element that is not a <p> element
:nth-child(n)
p:nth-child(2)
Selects every <p> element that is the second child of its parent
:nth-last-child(n)
p:nth-last-child(2)
Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)
p:nth-last-of-type(2)
Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)
p:nth-of-type(2)
Selects every <p> element that is the second <p> element of its parent
:only-of-type
p:only-of-type
Selects every <p> element that is the only <p> element of its parent
:only-child
p:only-child
Selects every <p> element that is the only child of its parent
:optional
input:optional
Selects <input> elements with no "required" attribute
:out-of-range
input:out-of-range
Selects <input> elements with a value outside a specified range
:read-only
input:read-only
Selects <input> elements with a "readonly" attribute specified
:read-write
input:read-write
Selects <input> elements with no "readonly" attribute
:required
input:required
Selects <input> elements with a "required" attribute specified
:root
root
Selects the document's root element
:target
#news:target
Selects the current active #news element (clicked on a URL containing that anchor name)
:valid
input:valid
Selects all <input> elements with a valid value
:visited
a:visited
Selects all visited links
CSS
Backgrounds
The CSS background properties are used to add background effects 
for elements.
In these chapters, you will learn about the following CSS background properties:
background-color
background-image
background-repeat
background-attachment
background-position
background
(shorthand property)
CSS background-color
The
background-color
property specifies the background color of an element.
Example
The background color of a page is set like this:
body {
background-color: lightblue;
}
Try it Yourself 
With CSS, a color is most often specified by:
a valid color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at
CSS Color Values
for a complete 
list of possible color values.
Other Elements
You can set the background color for any HTML elements:
Example
Here, the <h1>, <p>, and <div> elements will have different background colors:
h1 {
background-color: green;
}
div {
background-color: lightblue;
}
p {
background-color: 
yellow;
}
Try it Yourself 
Opacity / Transparency
The
opacity
property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent:
opacity 1
opacity 0.6
opacity 0.3
opacity 0.1
Example
div {
background-color: green;
opacity: 0.3;
}
Try it Yourself 
Transparency using RGBA
If you do not want to apply opacity to child elements, like in our example above, use
RGBA
color values. 
The following example sets the opacity for the background color and not the text:
100% opacity
60% opacity
30% opacity
10% opacity
You learned from our
CSS Colors Chapter
, that you can use RGB as a color value. In addition to RGB, 
you can use an RGB color value with an
alpha
channel (RGB
A
) - which specifies the opacity for a color.
An RGBA color value is specified with: rgba(red, green, blue,
alpha
). The
alpha
parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
Tip:
You will learn more about RGBA Colors in our
CSS Colors Chapter
.
Example
div {
background: rgba(0, 128, 0, 0.3) /* Green background with 30% opacity */
}
Try it Yourself 
The CSS Background Color Property
Property
Description
background-color
Sets the background color of an element
Video: CSS Background Color
CSS
Table Style
Table Padding
To control the space between the border and the content in a table, use the
padding
property on 
<td> and <th> elements:
First Name
Last Name
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
th, td
{
padding: 15px;
text-align: left;
}
Try it Yourself 
Horizontal Dividers
First Name
Last Name
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Add the
border-bottom
property to <th> and <td> for horizontal dividers:
Example
th, td {
border-bottom: 1px solid #ddd;
}
Try it Yourself 
Hoverable Table
Use the
:hover
selector on <tr> to highlight table rows on mouse 
over:
First Name
Last Name
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
tr:hover {background-color: coral;}
Try it Yourself 
Striped Tables
First Name
Last Name
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
For zebra-striped tables, use the
nth-child()
selector and add a
background-color
to all even (or odd) table rows:
Example
tr:nth-child(even) {background-color: #f2f2f2;}
Try it Yourself 
Table Color
The example below specifies the background color 
and text color of 
<th> elements:
First Name
Last Name
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
th {
background-color: #04AA6D;
color: white;
}
Try it Yourself 
CSS
Layout - Float Examples
This page contains common float examples.
Grid of Boxes / Equal Width Boxes
Box 1
Box 2
Box 1
Box 2
Box 3
With the
float
property, it is easy to float boxes of content side by side:
Example
* {
box-sizing: border-box;
}
.box {
float: left;
width: 33.33%; /* three 
  boxes (use 25% for four, and 50% for two, etc) */
padding: 
  50px; /* if you want space between the images */
}
Try it Yourself 
Images Side By Side
The grid of boxes can also be used to display images side by side:
Example
.img-container {
float: left;
width: 33.33%; /* three 
  containers (use 25% for four, and 50% for two, etc) */
padding: 
  5px; /* if you want space between the images */
}
Try it Yourself 
Equal Height Boxes
In the previous example, you learned how to float boxes side by side with an equal width. However, it is not easy to create floating boxes with equal heights. A quick fix 
however, is to set a fixed height, like in the example below:
Box 1
Some content, some content, some content
Box 2
Some content, some content, some content
Some content, some content, some content
Some content, some content, some content
Example
.box {
height: 500px;
}
Try it Yourself 
However
, this is not very flexible. It is ok if you can guarantee that the boxes will always have the same amount of content in them. 
But many times, the content is not the same. If you try the example above on a mobile phone, you will see that the second 
box's content will be displayed outside of the box. 
This is where CSS3 Flexbox comes in handy - as it can automatically stretch 
boxes to be as long as the longest box:
Example
Using
Flexbox
to create flexible boxes:
Box 1 - This is some text to make sure that the content gets really tall. This is some text to make sure that the content gets really tall. This is some text to make sure that the content gets really tall.
Box 2 - My height will follow Box 1.
Try it Yourself 
Navigation Menu
You can also use
float
with a list of hyperlinks to create a horizontal menu:
Example
Home
News
Contact
About
Try it Yourself 
Web Layout Example
It is also common to do entire web layouts using the
float
property:
Example
.header, .footer {
background-color: grey;
color: white;
padding: 15px;
}
.column {
float: left;
padding: 15px;
}
.clearfix::after {
content: 
  "";
clear: both;
display: table;
}
.menu {
width: 25%;
}
.content {
width: 75%;
}
Try it Yourself 
More Examples
An image with border and margins that floats to the right in a paragraph
Let an image float to the right in a paragraph. Add border and margins to the image.
An image with a caption that floats to the right
Let an image with a caption float to the right.
Let the first letter of a paragraph float to the left
Let the first letter of a paragraph float to the left and style the letter.
Creating a website with float
Use float to create a homepage with a navbar, header, footer, left content and main content.
All CSS Float Properties
Property
Description
box-sizing
Defines how the width and height of an element are calculated: should they include padding and borders, or not
clear
Specifies what should happen with the element that is next to a floating 
    element
float
Specifies whether an element should float to the left, right, or not at 
    all
overflow
Specifies what happens if content overflows an element's box
overflow-x
Specifies what to do with the left/right edges of the content if it overflows the element's content area
overflow-y
Specifies what to do with the top/bottom edges of the content if it overflows the element's content area
CSS
Layout - Overflow
The CSS
overflow
property controls what 
happens to content that is too big to fit into an area.
This text is really long and the height of its container is only 100 pixels. Therefore, a scrollbar is added to help the reader to scroll the content. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem.
Try it Yourself 
CSS Overflow
The
overflow
property specifies whether to clip 
the content or 
to add scrollbars when the content of an element is too big to fit in the specified 
area.
The
overflow
property has the following values:
visible
- Default. The overflow is not clipped. 
The content renders outside the element's box
hidden
- The overflow is clipped, and the rest of the content will be invisible
scroll
- The overflow is clipped, and a scrollbar is added to see the rest of the content
auto
- Similar to
scroll
, 
but it adds scrollbars only when necessary
overflow: visible
By default, the overflow is
visible
, meaning that it is not clipped and it 
renders outside the element's box:
You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.
Example
div {
width: 200px;
height: 
  65px;
background-color: coral;
overflow: visible;
}
Try it Yourself 
overflow: hidden
With the
hidden
value, the overflow is clipped, and the rest of the content is hidden:
You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.
Example
div {
overflow: hidden;
}
Try it Yourself 
overflow: scroll
Setting the value to
scroll
, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it):
You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.
Example
div {
overflow: scroll;
}
Try it Yourself 
overflow: auto
The
auto
value is similar to
scroll
, 
but it adds scrollbars only when necessary:
You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.
Example
div {
overflow: auto;
}
Try it Yourself 
overflow-x and overflow-y
The
overflow-x
and
overflow-y
properties specifies 
whether to change the overflow of content just horizontally or vertically (or 
both):
overflow-x
specifies what to do with the left/right edges of the 
content.
overflow-y
specifies what to do with the top/bottom edges of the 
content.
You can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.
Example
div {
overflow-x: hidden; /* Hide horizontal scrollbar 
*/
overflow-y: scroll; /* Add vertical scrollbar */
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Force a scroll bar to the <div> element with class="intro".
<style>
.intro {
  width: 200px;
  height: 70px;
:
;
}
</style>

<body>

<div class="intro">
Lorem ipsum dolor sit amet,
consectetur adipiscing elit.
Phasellus imperdiet, nulla et dictum interdum,
nisi lorem egestas odio,
vitae scelerisque enim ligula venenatis dolor.
</div>

</body>
Submit Answer 
Start the Exercise
All CSS Overflow Properties
Property
Description
overflow
Specifies what happens if content overflows an element's box
overflow-wrap
Specifies whether or not the browser can break lines with long words, if 
    they overflow its container
overflow-x
Specifies what to do with the left/right edges of the content if it overflows the element's content area
overflow-y
Specifies what to do with the top/bottom edges of the content if it overflows the element's content area
CSS
Layout - Horizontal & Vertical Align




Center elements
horizontally and vertically
Center Align Elements
To horizontally center a block element (like <div>), use
margin: auto;
Setting the width of the element will prevent it from stretching out to the 
edges of its container.
The element will then take up the specified width, and the remaining space 
will be split equally between the two margins:
This div element is centered.
Example
.center
{
margin: auto;
width: 50%;
border: 3px solid green;
padding: 10px;
}
Try it Yourself 
Note:
Center aligning has no effect if the
width
property is not set 
(or set to 100%).
Center Align Text
To just center the text inside an element, use
text-align: center;
This text is centered.
Example
.center {
text-align: center;
border: 3px solid green;
}
Try it Yourself 
Tip:
For more examples on how to align text, see the
CSS Text
chapter.
Center an Image
To center an image, set left and right margin to
auto
and make it into a
block
element:
Example
img
{
display: block;
margin-left: auto;
margin-right: auto;
width: 40%;
}
Try it Yourself 
Left and Right Align - Using position
One method for aligning elements is to use
position: absolute;
:
In my younger and more vulnerable years my father gave me some advice that I've been turning over in my mind ever since.
Example
.right
{
position: absolute;
right: 0px;
width: 300px;
border: 3px solid #73AD21;
padding: 10px;
}
Try it Yourself 
Note:
Absolute positioned elements are removed from the normal flow, and can overlap elements.
Left and Right Align - Using float
Another method for aligning elements is to use the
float
property:
Example
.right
{
float: right;
width: 300px;
border: 3px solid #73AD21;
padding: 10px;
}
Try it Yourself 
The clearfix Hack
Without Clearfix
With Clearfix
Then we can add the clearfix hack to the containing element to fix 
this problem:
Example
.clearfix::after {
content: "";
clear: both;
display: table;
}
Try it Yourself 
Center Vertically - Using padding
There are many ways to center an element vertically in CSS. A simple solution is to use top and bottom
padding
:
I am vertically centered.
Example
.center {
padding: 70px 0;
border: 3px solid 
green;
}
Try it Yourself 
To center both vertically and horizontally, use
padding
and
text-align: center
:
I am vertically and horizontally centered.
Example
.center {
padding: 70px 0;
border: 3px solid 
green;
text-align: center;
}
Try it Yourself 
Center Vertically - Using line-height
Another trick is to use the
line-height
property with a value that is equal 
to the
height
property:
I am vertically and horizontally centered.
Example
.center {
line-height: 200px;
height: 200px;
border: 3px solid green;
text-align: center;
}
/* If the text has multiple lines, add the 
following: */
.center p {
line-height: 1.5;
display: inline-block;
vertical-align: middle;
}
Try it Yourself 
Center Vertically - Using position & transform
If
padding
and
line-height
are not options, another solution is to use positioning and the
transform
property:
I am vertically and horizontally centered.
Example
.center {
height: 200px;
position: relative;
border: 3px solid green;
}
.center p {
margin: 0;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
}
Try it Yourself 
Tip:
You will learn more about the transform property in our
2D Transforms 
Chapter
.
Center Vertically - Using Flexbox
You can also use flexbox to center things. Just note that flexbox is not supported in IE10 and earlier versions:
I am vertically and horizontally centered.
Example
.center {
display: flex;
justify-content: center;
align-items: center;
height: 200px;
border: 3px solid 
  green;
}
Try it Yourself 
Tip:
You will learn more about Flexbox in our
CSS Flexbox Chapter
.
Test Yourself With Exercises
Exercise:
Use the margin property to make sure that the <div> element is center aligned according to its parent element.
<style>
.intro {
  width: 200px;
:
;
}
</style>

<body>

<div class="intro">
Lorem ipsum dolor sit amet,
consectetur adipiscing elit.
Phasellus imperdiet, nulla et dictum interdum,
nisi lorem egestas odio,
vitae scelerisque enim ligula venenatis dolor.
</div>

</body>
Submit Answer 
Start the Exercise
CSS
Color Keywords
This page will explain the
transparent
,
currentcolor
, 
and
inherit
keywords.
The transparent Keyword
The
transparent
keyword is used to make a 
color transparent. This is often used to make a transparent background color for 
an element.
Example
Here, the background color of the <div> element will be fully 
 transparent, and the background image will show through:
body {
background-image: url("paper.gif");
}
div {
background-color: transparent;
}
Try it Yourself 
The currentcolor Keyword
The
currentcolor
keyword is like a variable 
that holds the current value of the color property of an element.
This keyword can be useful if you want a specific color to be consistent in an 
element or a page.
Example
In this example the border color of the <div> element will be blue, because the 
 text color of the <div> element is blue:
div {
color: blue;
border: 10px solid currentcolor;
}
Try it Yourself 
Example
In this example the <div>'s background color is set to the current color 
 value of the body element:
body {
color: purple;
}
div {
background-color: 
  currentcolor;
}
Try it Yourself 
Example
In this example the <div>'s border color and shadow color is set to 
 the current color value of the body element:
body {
color: green;
}
div {
box-shadow: 0px 0px 
  15px currentcolor;
border: 5px solid currentcolor;
}
Try it Yourself 
The inherit Keyword
The
inherit
keyword specifies that a 
property should inherit its value from its parent element.
The
inherit
keyword can be used for any CSS 
property, and on any HTML element.
Example
In this example the <span>'s border settings will be inherited from 
 the parent element:
div {
border: 2px solid red;
}
span {
border: 
  inherit;
}
Try it Yourself 
CSS
Text Shadow
Text Shadow
The
text-shadow
property adds shadow to text.
In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px;
}
Try it Yourself 
Next, add a color (red) to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px red;
}
Try it Yourself 
Then, add a blur effect (5px) to the shadow:
Text shadow effect!
Example
h1
{
text-shadow: 2px 2px 5px red;
}
Try it Yourself 
More Text Shadow Examples
Example 1
Text-shadow on a white text:
h1 {
color: white;
text-shadow: 2px 2px 4px #000000;
}
Try it Yourself 
Example 2
Text-shadow with red neon glow:
h1 {
text-shadow: 0 0 3px #ff0000;
}
Try it Yourself 
Example 3
Text-shadow with red and blue neon glow:
h1 {
text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
}
Try it Yourself 
Example 4
h1 {
color: white;
text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 
  0 5px darkblue;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Change the text color of all <p> elements to "red".
<style>
p {
: red;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
The CSS Text Shadow Property
Property
Description
text-shadow
Specifies the shadow effect added to text
CSS
Web Safe Fonts
What are Web Safe Fonts?
Web safe fonts are fonts that are universally installed across all browsers and devices.
Fallback Fonts
However, there are no 100% completely web safe fonts. There is always a 
chance that a font is not found or is not installed properly.
Therefore, it is very important to always use fallback fonts.
This means that you should add a list of similar "backup fonts" in 
the
font-family
property. If the 
first font does not work, the browser will try the next one, and the next one, and so on. 
Always end the list with a generic font family name.
Example
Here, there are three font types: Tahoma, Verdana, and 
sans-serif. The second and third fonts are backups, in case the first one is not found.
p {
font-family: Tahoma, Verdana, sans-serif;
}
Try it Yourself 
Best Web Safe Fonts for HTML and CSS
The following list are the best web safe fonts for HTML and CSS:
Arial (sans-serif)
Verdana (sans-serif)
Tahoma (sans-serif)
Trebuchet MS (sans-serif)
Times New Roman (serif)
Georgia (serif)
Garamond (serif)
Courier New (monospace)
Brush Script MT (cursive)
Arial (sans-serif)
Arial is the most widely used font for both online and printed media. Arial 
is also the default font in Google Docs.
Arial is one of the safest web fonts, and it is available on all major operating systems.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Verdana (sans-serif)
Verdana is a very popular font. Verdana is easily readable even for small font sizes.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Tahoma (sans-serif)
The Tahoma font has less space between the characters.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Trebuchet MS (sans-serif)
Trebuchet MS was designed by Microsoft in 1996. Use this font carefully. Not 
supported by all mobile operating systems.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Times New Roman (serif)
Times New Roman is one of the most recognizable fonts in the world. It looks 
professional and is used in many newspapers and "news" websites. It is also the 
primary font for Windows devices and applications.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Georgia (serif)
Georgia is an elegant serif font. It is very readable at different font sizes, so it is a good candidate for mobile-responsive design.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Garamond (serif)
Garamond is a classical font used for many printed books. It has a timeless 
look and good readability.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Courier New (monospace)
Courier New is the most widely used monospace serif font. 
Courier New is often used with coding displays, and many email providers 
use it as their default font. Courier New is also the standard font for movie 
screenplays.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Brush Script MT (cursive)
The Brush Script MT font was designed to mimic handwriting.
It is elegant and sophisticated, but can be hard to read. Use it carefully.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
CSS
Table Alignment
Horizontal Alignment
The
text-align
property sets the horizontal alignment (like left, right, or center) 
of the content in <th> or <td>.
By default, the content of <th> elements are center-aligned and the 
content of <td> elements are left-aligned.
To center-align the content of <td> elements as well, use
text-align: center
:
Firstname
Lastname
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
td
{
text-align: center;
}
Try it Yourself 
To left-align the content, force the alignment of <th> elements to be 
left-aligned, with the
text-align: left
property:
Firstname
Lastname
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
th
{
text-align: left;
}
Try it Yourself 
Vertical Alignment
The
vertical-align
property sets the vertical alignment (like top, bottom, or middle) 
of the content in <th> or <td>.
By default, the vertical alignment of the content in a table is middle (for both <th> 
and <td> elements).
The following example sets the vertical text alignment to bottom for <td> elements:
Firstname
Lastname
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
td
{
height: 50px;
vertical-align: bottom;
}
Try it Yourself 
CSS
Conic Gradients
CSS Conic Gradients
A conic gradient is a gradient with color transitions rotated around a center point.
To create a conic gradient you must define at least two colors.
Syntax
background-image: conic-gradient([from
angle
] [at
position
,]
color
[
degree
]
, color
[
degree
]
, ...
);
By default,
angle
is 0deg and
position
is center.
If no
degree
is specified, the colors will be spread equally around 
the center point.
Conic Gradient: Three Colors
The following example shows a conic gradient with three colors:
Example
A conic gradient with three colors:
#grad {
background-image: conic-gradient(red, yellow, green);
}
Try it Yourself 
Conic Gradient: Five Colors
The following example shows a conic gradient with five colors:
Example
A conic gradient with five colors:
#grad {
background-image: conic-gradient(red, yellow, green, blue, black);
}
Try it Yourself 
Conic Gradient: Three Colors and Degrees
The following example shows a conic gradient with three colors and a degree for each color:
Example
A conic gradient with three colors and a degree for each color:
#grad {
background-image: conic-gradient(red 45deg, yellow 
    90deg, green 210deg);
}
Try it Yourself 
Create Pie Charts
Just add
border-radius: 50%
to make the conic gradient look like a pie:
Example
#grad {
background-image: conic-gradient(red, yellow, green, blue, 
    black);
border-radius: 50%;
}
Try it Yourself 
Here is another pie chart with defined degrees for all the colors:
Example
#grad {
background-image: conic-gradient(red 0deg, red 90deg, yellow 90deg, yellow 
    180deg, green 180deg, green 270deg, blue 270deg);
border-radius: 50%;
}
Try it Yourself 
Conic Gradient With Specified From Angle
The [from
angle
] specifies an angle that the entire conic gradient is 
rotated by.
The following example shows a conic gradient with a from angle of 90deg:
Example
A conic gradient with a from angle:
#grad {
background-image: conic-gradient(from 90deg, red, yellow, 
    green);
}
Try it Yourself 
Conic Gradient With Specified Center Position
The [at
position
] specifies the center of the conic gradient.
The following example shows a conic gradient with a center position of 60% 
45%:
Example
A conic gradient with a specified center position:
#grad {
background-image: conic-gradient(at 60% 45%, red, yellow, 
    green);
}
Try it Yourself 
Repeating a Conic Gradient
The
repeating-conic-gradient()
function is used to repeat conic gradients:
Example
A repeating conic gradient:
#grad {
background-image: 
repeating-conic-gradient(red 10%, yellow 20%);
border-radius: 50%;
}
Try it Yourself 
Here is a repeating conic gradient with defined color-starts and color-stops:
Example
A repeating conic gradient with defined color-starts and color-stops:
#grad {
background-image: 
repeating-conic-gradient(red 0deg 10deg, yellow 10deg 20deg, blue 20deg 30deg);
border-radius: 50%;
}
Try it Yourself 
CSS Gradient Functions
The following table lists the CSS gradient functions:
Function
Description
conic-gradient()
Creates a conic gradient. Define at least two 
    colors (around a center point)
linear-gradient()
Creates a linear gradient. Define at least two 
    colors (top to bottom)
radial-gradient()
Creates a radial gradient. Define at least two 
    colors (center to edges)
repeating-conic-gradient()
Repeats a conic gradient
repeating-linear-gradient()
Repeats a linear gradient
repeating-radial-gradient()
Repeats a radial gradient
CSS
Gradients
Gradient Backgrounds
CSS gradients let you display smooth transitions between two or more specified colors.
CSS defines three types of gradients:
Linear Gradients (goes down/up/left/right/diagonally)
Radial Gradients (defined by their center)
Conic Gradients (rotated around a center point)
CSS Linear Gradients
To create a linear gradient you must define 
at least two color stops. Color stops are the colors you want to render smooth transitions 
among. You can also set a starting point and a direction (or an angle) along 
with the gradient effect.
Syntax
background-image: linear-gradient(
direction
,
color-stop1
,
color-stop2, ...
);
Direction - Top to Bottom (this is default)
The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:
top to bottom (default)
Example
#grad {
background-image: linear-gradient(red, yellow);
}
Try it Yourself 
Direction - Left to Right
The following example shows a linear gradient that starts from the left. It starts red, transitioning to 
yellow:
left to right
Example
#grad {
background-image: linear-gradient(to right, red , yellow);
}
Try it Yourself 
Direction - Diagonal
You can make a gradient diagonally by specifying both the horizontal and vertical starting positions.
The following example shows a linear gradient that starts at top left (and 
goes to bottom right). It starts red, transitioning to yellow:
top left to bottom right
Example
#grad {
background-image: linear-gradient(to bottom right, red, yellow);
}
Try it Yourself 
Using Angles
If you want more control over the direction of the gradient, 
you can define an angle, instead of the predefined directions (to bottom, to 
top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to 
"to top". A value of 90deg is equivalent to "to right". A value of 
180deg is equivalent to "to bottom".
Syntax
background-image: linear-gradient(
angle
,
color-stop1
,
color-stop2
);
The following example shows how to use angles on linear gradients:
180deg
Example
#grad {
background-image: linear-gradient(180deg, red, yellow);
}
Try it Yourself 
Using Multiple Color Stops
The following example shows a linear gradient (from top to bottom) with 
multiple color stops:
Example
#grad {
background-image: linear-gradient(red, yellow, green);
}
Try it Yourself 
The following example shows how to create a linear gradient (from left to 
right) with the color of the rainbow and some text:
Rainbow Background
Example
#grad {
background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
}
Try it Yourself 
Using Transparency
CSS gradients also support transparency, which can be used to create fading effects.
To add transparency, we use the rgba() function to define the color stops. 
The last parameter in the rgba() function can be a value from 0 to 1, and it 
defines the transparency of the color: 0 indicates full transparency, 1 
indicates full color (no transparency).
The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:
Example
#grad {
background-image: linear-gradient(to right, rgba(255,0,0,0), 
rgba(255,0,0,1));
}
Try it Yourself 
Repeating a linear-gradient
The repeating-linear-gradient() function is used to repeat linear gradients:
Example
A repeating linear gradient:
#grad {
background-image: 
repeating-linear-gradient(red, yellow 10%, green 20%);
}
Try it Yourself 
CSS
Image Sprites
Image Sprites
An image sprite is a collection of images put into a single image.
A web page with many images can take a long time to load and generates 
multiple server requests.
Using image sprites will reduce the number of server requests and save 
bandwidth.
Image Sprites - Simple Example
Instead of using three separate images, we use this single image ("img_navsprites.gif"):
With CSS, we can show just the part of the image we need.
In the following example the CSS specifies which part of the "img_navsprites.gif" 
image to show:
Example
#home
{
width: 46px;
height: 44px;
background: url(img_navsprites.gif) 0 0;
}
Try it Yourself 
Example explained:
<img id="home" src="img_trans.gif">
- Only defines a small transparent image 
because the src attribute cannot be empty. The displayed image will be the background image we specify in CSS
width: 46px; height: 44px;
- Defines the portion of the image we want to use
background: url(img_navsprites.gif) 0 0;
- Defines the background image and its position (left 0px, top 0px)
This is the easiest way to use image sprites, now we want to expand it by 
using links and hover effects.
Image Sprites - Create a Navigation List
We want to use the sprite image ("img_navsprites.gif") to create a navigation list.
We will use an HTML list, because it can be a link and also supports a background image:
Example
#navlist {
position: relative;
}
#navlist li {
margin: 0;
padding: 0;
list-style: none;
position: absolute;
top: 0;
}
#navlist li, #navlist a {
height: 44px;
display: block;
}
#home {
left: 0px;
width: 46px;
background: url('img_navsprites.gif') 
0 0;
}
#prev {
left: 63px;
width: 43px;
background: url('img_navsprites.gif') -47px 0;
}
#next {
left: 129px;
width: 43px;
background: url('img_navsprites.gif') 
-91px 0;
}
Try it Yourself 
Example explained:
#navlist {position:relative;}
- position is set to relative to allow 
absolute positioning inside it
#navlist li {margin:0;padding:0;list-style:none;position:absolute;top:0;}
- margin and padding are set to 0, list-style is removed, and all list items 
are absolute positioned
#navlist li, #navlist a {height:44px;display:block;}
- the height of all 
the images is 44px
Now start to position and style for each specific part:
#home {left:0px;width:46px;}
- Positioned all the way to the left, and 
the width of the image is 46px
#home {background:url(img_navsprites.gif) 0 0;}
- 
Defines the background image and its position (left 0px, top 0px)
#prev {left:63px;width:43px;}
- Positioned 63px to the right (#home width 
46px + some extra space between items), and the width is 43px
#prev {background:url('img_navsprites.gif') -47px 0;}
- Defines the background 
image 47px to the right (#home width 46px + 1px line 
divider)
#next {left:129px;width:43px;}
- Positioned 129px to 
the right (start of #prev is 63px + #prev width 43px + extra space), and the width is 43px
#next {background:url('img_navsprites.gif') -91px 0;}
- 
Defines the background image 91px to the right (#home width 46px + 1px 
line divider + #prev width 43px + 1px line divider)
Image Sprites - Hover Effect
Now we want to add a hover effect to our navigation list.
Our new image ("img_navsprites_hover.gif") contains three navigation images 
and three images to use for hover effects:
Because this is one single image, and not six separate files, there will be
no 
loading delay
when a user hovers over the image.
We only add three lines of code to add the hover effect:
Example
#home a:hover {
background: url('img_navsprites_hover.gif') 0 -45px;
}
#prev a:hover {
background: url('img_navsprites_hover.gif') -47px 
-45px;
}
#next a:hover {
background: url('img_navsprites_hover.gif') -91px 
-45px;
}
Try it Yourself 
Example explained:
#home a:hover {background: url('img_navsprites_hover.gif') 0 -45px;}
- For all three hover images we specify the same background position, only 45px further down
CSS
Colors
CSS supports
140+ color names, HEX values, RGB values
, RGBA 
values, HSL values, HSLA values, and opacity.
RGBA Colors
RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity 
for a color.
An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 
(fully transparent) and 1.0 (fully opaque).
rgba(255, 0, 0, 0.2);
rgba(255, 0, 0, 0.4);
rgba(255, 0, 0, 0.6);
rgba(255, 0, 0, 0.8);
The following example defines different RGBA colors:
Example
#p1 {background-color: rgba(255, 0, 0, 0.3);} /* red 
with opacity */
#p2 {background-color: rgba(0, 255, 0, 0.3);}/* green with opacity */
#p3 {background-color: rgba(0, 0, 255, 0.3);}/* blue 
with opacity */
Try it Yourself 
HSL Colors
HSL stands for Hue, Saturation and Lightness.
An HSL color value is specified with: hsl(hue, saturation, lightness).
Hue is a degree on the color wheel (from 0 to 360):
0 (or 360) is red
120 is green
240 is blue
Saturation is a percentage value: 100% is the full color.
Lightness is also a percentage; 0% is dark (black) and 100% is white.
hsl(0, 100%, 30%);
hsl(0, 100%, 50%);
hsl(0, 100%, 70%);
hsl(0, 100%, 90%);
The following example defines different HSL colors:
Example
#p1 {background-color: hsl(120, 100%, 50%);} /* green */
#p2 {background-color: hsl(120, 100%, 75%);}/* light green */
#p3 {background-color: hsl(120, 100%, 25%);}/* dark 
green */
#p4 {background-color: hsl(120, 60%, 70%);}/* pastel green */
Try it Yourself 
HSLA Colors
HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity 
for a color.
An HSLA color value is specified with: hsla(hue, saturation, lightness, alpha), where the 
alpha parameter defines the opacity. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
hsla(0, 100%, 30%, 0.3);
hsla(0, 100%, 50%, 0.3);
hsla(0, 100%, 70%, 0.3);
hsla(0, 100%, 90%, 0.3);
The following example defines different HSLA colors:
Example
#p1 {background-color: hsla(120, 100%, 50%, 0.3);} /* green with opacity */
#p2 {background-color: hsla(120, 100%, 75%, 0.3);}/* light green with opacity */
#p3 {background-color: hsla(120, 100%, 25%, 0.3);}/* dark 
green with opacity */
#p4 {background-color: hsla(120, 60%, 70%, 0.3);}/* pastel green 
with opacity */
Try it Yourself 
Opacity
The CSS
opacity
property sets the opacity for 
the whole element (both background color and text will be opaque/transparent).
The
opacity
property value must be a number between 0.0 (fully transparent) and 1.0 (fully opaque).
rgb(255, 0, 0);opacity:0.2;
rgb(255, 0, 0);opacity:0.4;
rgb(255, 0, 0);opacity:0.6;
rgb(255, 0, 0);opacity:0.8;
Notice that the text above will also be 
transparent/opaque!
The following example shows different elements with opacity:
Example
#p1 {background-color:rgb(255,0,0);opacity:0.6;} /* red with opacity 
*/
#p2 {background-color:rgb(0,255,0);opacity:0.6;} /* green with 
opacity */
#p3 {background-color:rgb(0,0,255);opacity:0.6;} /* blue 
with opacity */
Try it Yourself 
Test Yourself With Exercises
Exercise:
Insert the RGBA color value for a full red background color of the <h1> element, with no transparency.
<style>
h1 {
  background-color:
;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS
Radial Gradients
CSS Radial Gradients
A radial gradient is defined by its center.
To create a radial gradient you must also define at least two color stops.
Syntax
background-image: radial-gradient(
shape size
at
position, start-color, ..., last-color
);
By default, shape is ellipse, size is farthest-corner, and position is center.
Radial Gradient - Evenly Spaced Color Stops (this is default)
The following example shows a radial gradient with evenly spaced color stops:
Example
#grad {
background-image: radial-gradient(red, yellow, green);
}
Try it Yourself 
Radial Gradient - Differently Spaced Color Stops
The following example shows a radial gradient with differently spaced color stops:
Example
#grad {
background-image: radial-gradient(red 5%, yellow 15%, green 60%);
}
Try it Yourself 
Set Shape
The shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse.
The following example shows a radial gradient with the shape of a circle:
Example
#grad {
background-image: radial-gradient(circle, red, yellow, green);
}
Try it Yourself 
Use of Different Size Keywords
The size parameter defines the size of the gradient. It can take four values:
closest-side
farthest-side
closest-corner
farthest-corner
Example
A radial gradient with different size keywords:
#grad1 {
background-image: radial-gradient(closest-side at 60% 55%, red, yellow, 
black);
}
#grad2 {
background-image: radial-gradient(farthest-side at 60% 
55%, red, yellow, black);
}
Try it Yourself 
Repeating a radial-gradient
The repeating-radial-gradient() function is used to repeat radial gradients:
Example
A repeating radial gradient:
#grad {
background-image: 
repeating-radial-gradient(red, yellow 10%, green 15%);
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set a linear gradient background for the <div> element, going from the top to bottom, transitioning from "white" to "green".
<style>
div {
:
(white, green);
}
</style>

<body>
  <div style="height:200px"></div>
</body>
Submit Answer 
Start the Exercise
CSS
Layout - width and max-width
Using width, max-width and margin: auto;
As mentioned in the previous chapter; a block-level element always takes up the full width available 
(stretches out to the left and right as far as it can).
Setting the
width
of a block-level element will prevent it from stretching 
out to the edges of its container. Then, you can set the 
margins to auto, to horizontally center the element within its container. The 
element will take up the specified width, and the remaining space will be split 
equally between the two margins:
This <div> element has a width of 500px, and margin set to auto.
Note:
The problem with the
<div>
above occurs when the browser window is 
smaller than the width of 
the element. The browser then adds a horizontal scrollbar to the page.
Using
max-width
instead, in this situation, will improve the 
browser's handling of small windows. This is important when making a site usable 
on small devices:
This <div> element has a max-width of 500px, and margin set to auto.
Tip:
Resize the browser window to less than 500px wide, to see the difference between 
the two divs!
Here is an example of the two divs above:
Example
div.ex1 {
width: 500px;
margin: 
auto;
border: 3px solid #73AD21;
}
div.ex2 {
max-width: 500px;
margin: auto;
border: 3px solid #73AD21;
}
Try it Yourself 
CSS
Layout - display: inline-block
The display: inline-block Value
Compared to
display: inline
, the major 
difference is that
display: inline-block
allows 
to set a width and height on the element.
Also, with
display: inline-block
, the top and bottom margins/paddings are respected, 
but with
display: inline
they are not.
Compared to
display: block
, the major 
difference is that
display: inline-block
does 
not add a line-break after the element, so the element can sit next to other 
elements.
The following example shows the different behavior of
display: inline
,
display: inline-block
and
display: block
:
Example
span.a {
display: inline; /* the default for span */
width: 100px;
height: 100px;
padding: 5px;
border: 1px solid blue;
background-color: yellow;
}
span.b {
display: 
  inline-block;
width: 100px;
height: 
  100px;
padding: 5px;
border: 1px 
  solid blue;
background-color: yellow;
}
span.c {
display: block;
width: 
  100px;
height: 100px;
padding: 5px;
border: 1px solid blue;
background-color: yellow;
}
Try it Yourself 
Using inline-block to Create Navigation Links
One common use for
display: inline-block
is to display list items horizontally instead of vertically. The following 
example creates horizontal navigation links:
Example
.nav {
background-color: yellow;
list-style-type: none;
text-align: 
  center;
padding: 0;
margin: 0;
}
.nav li {
display: inline-block;
font-size: 20px;
padding: 
  20px;
}
Try it Yourself 
CSS
Multiple Backgrounds
In this chapter you will learn how to add multiple background images to one 
element.
You will also learn about the following properties:
background-size
background-origin
background-clip
CSS Multiple Backgrounds
CSS allows you to add multiple background images for an element, through the
background-image
property.
The different background images are separated by commas, and the images are 
stacked on top of each other, where the first image is closest to the viewer.
The following example has two background images, the first image is a flower 
(aligned to the bottom and right) and the second image is a paper background (aligned to the top-left corner):
Example
#example1 {
background-image: url(img_flwr.gif), url(paper.gif);
background-position: right bottom, left top;
background-repeat: no-repeat, repeat;
}
Try it Yourself 
Multiple background images can be specified using either the individual 
background properties (as above) or the
background
shorthand property.
The following example uses the
background
shorthand property (same result as 
example above):
Example
#example1 {
background: url(img_flwr.gif) right bottom 
no-repeat, url(paper.gif) left top repeat;
}
Try it Yourself 
CSS Background Size
The CSS
background-size
property allows you to specify the size of background images.
The size can be specified in lengths, percentages, or by using one of the two 
keywords: contain or cover.
The following example resizes a background image to much smaller than the original image (using pixels):
Lorem Ipsum Dolor
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.
Here is the code:
Example
#div1
{
background: url(img_flower.jpg);
background-size: 100px 80px;
background-repeat: no-repeat;
}
Try it Yourself 
The two other possible values for
background-size
are
contain
and
cover
.
The
contain
keyword scales the background image to be as large as possible 
(but both its width and its height must fit inside the content area). As such, depending on the proportions of the background 
image and the background positioning area, there may be some areas of 
the background which are not covered by the background image.
The
cover
keyword scales the background image so that the content area is 
completely covered by the background image (both its width and height are equal to or 
exceed the content area). As such, some parts of the background image may not be 
visible in the background positioning area.
The following example illustrates the use of
contain
and
cover
:
Example
#div1
{
background: url(img_flower.jpg);
background-size: contain;
background-repeat: no-repeat;
}
#div2
{
background: url(img_flower.jpg);
background-size: cover;
background-repeat: no-repeat;
}
Try it Yourself 
Define Sizes of Multiple Background Images
The
background-size
property also accepts multiple values for background size 
(using a comma-separated list), when working with multiple backgrounds.
The following example has three background images specified, with different 
background-size value for each image:
Example
#example1 {
background: url(img_tree.gif) left top 
no-repeat, url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top 
repeat;
background-size: 50px, 130px, auto;
}
Try it Yourself 
Full Size Background Image
Now we want to have a background image on a website that covers the entire 
browser window at all times.
The requirements are as follows:
Fill the entire page with the image (no white space)
Scale image as needed
Center image on page
Do not cause scrollbars
The following example shows how to do it; Use the <html> element 
(the <html> element is always at least the height of the browser window). Then set a fixed and centered background on it. 
Then adjust its size with the 
background-size property:
Example
html {
background: url(img_man.jpg) no-repeat 
center fixed;
background-size: cover;
}
Try it Yourself 
Hero Image
You could also use different background properties on a <div> to create a hero image (a large image with text), and place it where you want.
Example
.hero-image {
background: url(img_man.jpg) no-repeat center;
background-size: cover;
height: 500px;
position: 
   relative;
}
Try it Yourself 
CSS background-origin Property
The CSS
background-origin
property specifies where the background image is 
positioned.
The property takes three different values:
border-box - the background image starts from the upper left corner of the border
padding-box - (default) the background image starts from the upper left corner of the padding edge
content-box - the background image starts from the upper left corner of the content
The following example illustrates the
background-origin
property:
Example
#example1
{
border: 10px solid black;
padding: 35px;
background: url(img_flwr.gif);
background-repeat: no-repeat;
background-origin: content-box;
}
Try it Yourself 
CSS background-clip Property
The CSS
background-clip
property specifies the painting area of the background.
The property takes three different values:
border-box - (default) the background is painted to the outside edge of the border
padding-box - the background is painted to the outside edge of the padding
content-box - the background is painted within the content box
The following example illustrates the
background-clip
property:
Example
#example1
{
border: 10px dotted black;
padding: 35px;
background: yellow;
background-clip: content-box;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Add two background images to the <body> element.
img1.gif
and
img2.gif
.
Make sure that
img2.gif
is displayed on top of
img1.gif
.
<style>
body {
  background-image:
;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS Advanced Background Properties
Property
Description
background
A shorthand property for setting all the background properties in one declaration
background-clip
Specifies the painting area of the background
background-image
Specifies one or more background images for an element
background-origin
Specifies where the background image(s) is/are positioned
background-size
Specifies the size of the background image(s)
CSS
Vertical Navigation Bar
Vertical Navigation Bar
Home
News
Contact
About
To build a vertical navigation bar, you can style the <a> elements 
inside the list, in addition to the code from the previous page:
Example
li a
{
display: block;
width: 60px;
}
Try it Yourself 
Example explained:
display: block;
- Displaying the links as block elements makes the whole 
link area clickable (not just the text), and it allows us to specify the width 
(and padding, margin, height, etc. if you want)
width: 60px;
- Block elements take up the full width available by default. We want to specify a 60 pixels width
You can also set the width of <ul>, and remove the width of <a>, 
as they will take up the full width available when displayed as block elements. 
This will produce the same result as our previous example:
Example
ul
{
list-style-type: none;
margin: 0;
padding: 0;
width: 60px;
}
li
a
{
display: block;
}
Try it Yourself 
Vertical Navigation Bar Examples
Create a basic vertical navigation bar with a gray background color and 
change the background color of the links when the user moves the mouse over 
them:
Home
News
Contact
About
Example
ul {
list-style-type: none;
margin: 0;
padding: 0;
width: 
200px;
background-color: #f1f1f1;
}
li a {
display: 
block;
color: #000;
padding: 8px 16px;
text-decoration: none;
}
/* 
Change the link color on hover */
li a:hover {
background-color: #555;
color: white;
}
Try it Yourself 
Active/Current Navigation Link
Add an "active" class to the current link to let the user know which page he/she is on:
Home
News
Contact
About
Example
.active {
background-color: #04AA6D;
color: white;
}
Try it Yourself 
Center Links & Add Borders
Add
text-align:center
to <li> or <a> to center the links.
Add the
border
property to <ul> add a border around the navbar. If you also want 
borders inside the navbar, add a
border-bottom
to all <li> elements, except for the 
last one:
Home
News
Contact
About
Example
ul {
border: 1px solid #555;
}
li {
text-align: center;
border-bottom: 1px solid #555;
}
li:last-child {
border-bottom: none;
}
Try it Yourself 
Full-height Fixed Vertical Navbar
Create a full-height, "sticky" side navigation:
Example
ul {
list-style-type: none;
margin: 0;
padding: 0;
width: 
25%;
background-color: #f1f1f1;
height: 100%; /* Full height */
position: fixed; /* 
Make it stick, even on scroll */
overflow: auto; /* Enable scrolling if the sidenav has too much content */
}
Try it Yourself 
Note:
This example might not work properly on mobile devices.
CSS
Layout - float and clear
The CSS
float
property specifies 
how an element should float.
The CSS
clear
property 
specifies what elements can float beside the cleared element and on which side.
The float Property
The
float
property is used for 
positioning and formatting content e.g. let an image float left to the text in a 
container.
The
float
property can have one of the 
following values:
left
- The element floats to the left of its container
right
- The element floats to the right of its container
none
- The element does not float (will be displayed just where it occurs in the text). This is default
inherit
- The element inherits the float value of its parent
In its simplest use, the
float
property can be used to wrap text around images.
Example - float: right;
The following example specifies that an image should float to the
right
in a text:
Example
img {
float: right;
}
Try it Yourself 
Example - float: left;
The following example specifies that an image should float to the
left
in a text:
Example
img {
float: left;
}
Try it Yourself 
Example - No float
In the following example the image will be displayed just where it occurs in 
the text (float: none;):
Example
img {
float: none;
}
Try it Yourself 
Example - Float Next To Each Other
Normally div elements will be displayed on top of each other. However, if we 
use
float: left
we can let elements float next to each other:
Example
div {
float: left;
padding: 15px;
}
.div1 {
background: red;
}
.div2 {
background: yellow;
}
.div3 {
background: green;
}
Try it Yourself 
CSS
Layout - The z-index
Property
The
z-index
property specifies the 
stack order of an element.
The z-index Property
When elements are positioned, they can overlap other elements.
The
z-index
property specifies the stack order of an element (which element should be placed in front of, or behind, the others).
An element can have a positive or negative stack order:
This is a heading
Because the image has a z-index of -1, it will be placed behind the text.
Example
img
{
position: absolute;
left: 0px;
top: 0px;
z-index: -1;
}
Try it Yourself 
Note:
z-index
only works on
positioned elements
(position: absolute, 
position: relative, position: fixed, or position: sticky) and
flex items
(elements that are direct children of display: flex elements).
Another z-index Example
Example
Here we see that an element with greater stack order is always above an element with a lower stack order:
<html>
<head>
<style>
.container {
position: relative;
}
.black-box {
position: relative;
z-index: 1;
border: 2px solid black;
height: 100px;
margin: 30px;
}
.gray-box {
position: absolute;
z-index: 3;
background: lightgray;
height: 60px;
width: 70%;
left: 50px;
top: 50px;
}
.green-box {
position: absolute;
z-index: 2;
background: lightgreen;
width: 35%;
left: 270px;
top: -15px;
height: 
  100px;
}
</style>
</head>
<body>
<div class="container">
<div 
  class="black-box">Black box</div>
<div class="gray-box">Gray 
  box</div>
<div class="green-box">Green box</div>
</div>
</body>
</html>
Try it Yourself 
Without z-index
If two positioned elements overlap each other without a
z-index
specified, the element defined
last in the HTML code
will be shown on top.
Example
Same example as above, but here with no z-index specified:
<html>
<head>
<style>
.container {
position: relative;
}
.black-box {
position: relative;
border: 2px solid black;
height: 100px;
margin: 30px;
}
.gray-box {
position: absolute;
background: lightgray;
height: 60px;
width: 70%;
left: 50px;
top: 50px;
}
.green-box {
position: absolute;
background: lightgreen;
width: 35%;
left: 270px;
top: -15px;
height: 
  100px;
}
</style>
</head>
<body>
<div class="container">
<div 
  class="black-box">Black box</div>
<div class="gray-box">Gray 
  box</div>
<div class="green-box">Green box</div>
</div>
</body>
</html>
Try it Yourself 
Test Yourself With Exercises
Exercise:
Both the header and the paragraph are positioned at the top of the page.
Make sure that the header is placed on top of the paragraph.
<style>
{
  position: absolute;
  top: 0;
: 1;  
}
{
  position: absolute;
  top: 0;
: 0;
}
</style>

<body>
  <h1 id="mytitle">This is a heading</h1>
  <p id="myintro">This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS Property
Property
Description
z-index
Sets the stack order of an element
CSS
Attribute
Selectors
Style HTML Elements With Specific Attributes
It is possible to style HTML elements that have specific attributes or attribute values.
CSS [attribute] Selector
The
[attribute]
selector is used to select elements with a specified 
attribute.
The following example selects all <a> elements with a target attribute:
Example
a[target] {
background-color: yellow;
}
Try it Yourself 
CSS [attribute="value"] Selector
The
[attribute="value"]
selector is used to select elements with a specified 
attribute and value.
The following example selects all <a> elements with a target="_blank" attribute:
Example
a[target="_blank"] {
background-color: yellow;
}
Try it Yourself 
CSS [attribute~="value"] Selector
The
[attribute~="value"]
selector is used to select elements with an attribute 
value containing a specified word.
The following example selects all elements with a title attribute that 
contains a space-separated list of words, one of which is "flower":
Example
[title~="flower"] {
border: 5px solid yellow;
}
Try it Yourself 
The example above will match elements with title="flower", title="summer 
flower", and title="flower new", but not title="my-flower" or title="flowers".
CSS [attribute|="value"] Selector
The
[attribute|="value"]
selector 
is used to select elements with the specified attribute, whose value can be 
exactly the specified value, or the specified value followed by a hyphen (-).
Note:
The value has to be a whole word, either alone, like 
class="top", or followed by a hyphen( - ), like class="top-text".
Example
[class|="top"] {
background: yellow;
}
Try it Yourself 
CSS [attribute^="value"] Selector
The
[attribute^="value"]
selector 
is used to select elements with the specified attribute, whose value starts with 
the specified value.
The following example selects all elements with a class attribute value that 
starts with "top":
Note:
The value does not have to be a whole word!
Example
[class^="top"] {
background: yellow;
}
Try it Yourself 
CSS [attribute$="value"] Selector
The
[attribute$="value"]
selector is used to select elements whose attribute 
value ends with a specified value.
The following example selects all elements with a class attribute value that 
ends with "test":
Note:
The value does not have to be a whole word!
Example
[class$="test"] {
background: yellow;
}
Try it Yourself 
CSS [attribute*="value"] Selector
The
[attribute*="value"]
selector is used to select elements whose attribute 
value contains a specified value.
The following example selects all elements with a class attribute value that 
contains "te":
Note:
The value does not have to be a whole word!
Example
[class*="te"] {
background: yellow;
}
Try it Yourself 
Styling Forms
The attribute selectors can be useful for styling forms without class or ID:
Example
input[type="text"]
{
width: 150px;
display: block;
margin-bottom: 10px;
background-color: yellow;
}
input[type="button"]
{
width: 120px;
margin-left: 35px;
display: block;
}
Try it Yourself 
Tip:
Visit our
CSS Forms Tutorial
for more examples on how to style forms with CSS.
Test Yourself With Exercises
Exercise:
Set the background color to "red" for <a> elements that have a
target
attribute.
<style>
{
  background-color: red;
}
</style>

<body>
  <a href="https://w3schools.com">w3schools.com</a>
  <a href="http://disney.com" target="_blank">Disney.com</a>
  <a href="http://wikipedia.org" target="_top">wikipedia.org</a>
</body>
Submit Answer 
Start the Exercise
All CSS Attribute Selectors
Selector
Example
Example description
[
attribute
]
[target]
Selects all elements with a target attribute
[
attribute
=
value
]
[target="_blank"]
Selects all elements with target="_blank"
[
attribute
~=
value
]
[title~="flower"]
Selects all elements with a title attribute that contains a 
    space-separated list of words, one of which is "flower"
[
attribute
|=
value
]
[lang|="en"]
Selects all elements with a lang attribute value starting with "en"
[
attribute
^=
value
]
a[href^="https"]
Selects all <a> elements with a href attribute value starting with "https"
[
attribute
$=
value
]
a[href$=".pdf"]
Selects all <a> elements with a href attribute value ending with ".pdf"
[
attribute
*=
value
]
a[href*="w3schools"]
Selects all <a> elements with a href attribute value containing the substring "w3schools"
CSS
Math Functions
The CSS math functions allow mathematical expressions to be 
used as property values. Here, we will explain the
calc()
,
max()
and
min()
functions.
The calc() Function
The
calc()
function performs a calculation to be used as the property value.
CSS Syntax
calc(
expression
)
Value
Description
expression
Required. A mathematical expression. The result will be used as the value.
The following operators can be used: + - * /
Let us look at an example:
Example
Use calc() to calculate the width of a <div> element:
#div1 {
position: absolute;
left: 50px;
width: calc(100% - 100px);
border: 1px solid black;
background-color: yellow;
padding: 5px;
}
Try it Yourself 
The max() Function
The
max()
function uses the largest value, 
from a comma-separated list of values, as the property value.
CSS Syntax
max(
value1
,
value2
, ...)
Value
Description
value1
,
value2
, ...
Required. A list of comma-separated values - where the largest value is 
    chosen
Let us look at an example:
Example
Use max() to set the width of #div1 to whichever value is largest, 50% or 
300px:
#div1 {
background-color: yellow;
height: 100px;
width: max(50%, 300px);
}
Try it Yourself 
The min() Function
The
min()
function uses the smallest value, 
from a comma-separated list of values, as the property value.
CSS Syntax
min(
value1
,
value2
, ...)
Value
Description
value1
,
value2
, ...
Required. A list of comma-separated values - where the smallest value is 
    chosen
Let us look at an example:
Example
Use min() to set the width of #div1 to whichever value is smallest, 50% or 
300px:
#div1 {
background-color: yellow;
height: 100px;
width: min(50%, 300px);
}
Try it Yourself 
All CSS Math Functions
Function
Description
calc()
Allows you to perform calculations to determine CSS property values
max()
Uses the largest value, from a comma-separated list of values, as the 
    property value
min()
Uses the smallest value, from a comma-separated list of values, as the 
    property value
CSS
Specificity
What is Specificity?
If there are two or more CSS rules that point to the same 
element, the selector with the highest specificity value will "win", and its 
style declaration will be applied to that HTML element.
Think of specificity as a score/rank that determines which style declaration 
is ultimately applied to an element.
Look at the following examples:
Example 1
In this example, we have used the "p" element as selector, and specified a red color 
for this element. The text will be red:
<html>
<head>
<style>
p {color: red;}
</style>
</head>
<body>
<p>Hello World!</p>
</body>
</html>
Try it Yourself 
Now, look at example 2:
Example 2
In this example, we have added a class selector (named "test"), and 
specified a green 
color for this class. The text will now be green (even though we have specified 
a red 
color for the element selector "p"). This is because the class selector is given 
higher priority:
<html>
<head>
<style>
.test {color: green;}
p {color: red;}
</style>
</head>
<body>
<p class="test">Hello World!</p>
</body>
</html>
Try it Yourself 
Now, look at example 3:
Example 3
In this example, we have added the id selector (named "demo"). The text will now be 
blue, because the id selector is given higher priority:
<html>
<head>
<style>
#demo {color: blue;}
.test {color: green;}
p {color: red;}
</style>
</head>
<body>
<p id="demo" class="test">Hello 
  World!</p>
</body>
</html>
Try it Yourself 
Now, look at example 4:
Example 4
In this example, we have added an inline style for the "p" element. The 
text will now be pink, because the inline style is given the highest priority:
<html>
<head>
<style>
#demo {color: blue;}
.test {color: green;}
p {color: red;}
</style>
</head>
<body>
<p id="demo" class="test" 
  style="color: pink;">Hello World!</p>
</body>
</html>
Try it Yourself 
Specificity Hierarchy
Every CSS selector has its place in the specificity hierarchy.
There are four categories which define the specificity level of a selector:
Inline styles
- Example: 
<h1 style="color: pink;">
IDs
- Example: 
#navbar
Classes, pseudo-classes, attribute selectors
- Example: .test, 
  :hover, [href]
Elements and pseudo-elements
- Example: h1, ::before
How to Calculate Specificity?
Memorize how to calculate specificity!
Start at 0, add 100 for each ID value, add 10 for each 
class value (or 
pseudo-class or attribute selector), add 1 for each element selector or pseudo-element.
The table below shows some examples on how to calculate specificity values:
Selector
Specificity Value
Calculation
p
1
1
p.test
11
1 + 10
p#demo
101
1 + 100
<p style="color: pink;">
1000
1000
#demo
100
100
.test
10
10
p.test1.test2
21
1 + 10 + 10
#navbar p#demo
201
100 + 1 + 100
*
0
0 (the universal selector is ignored)
The selector with the highest specificity value will win and take effect!
Consider these three code fragments:
Example
A: h1
B: h1#content
C: <h1 id="content" style="color: 
  pink;">Heading</h1>
The specificity of A is 1 (one element selector)
The specificity of B is 
101 (one ID reference + one element selector)
The specificity of C is 1000 (inline styling)
Since the third rule (C) has the highest specificity value (1000), this style 
declaration will be applied.
More Specificity Rules Examples
Equal specificity: the latest rule wins
- 
If the same rule is written twice into the external style sheet, then 
the latest rule wins:
Example
h1 {background-color: yellow;}
h1 {background-color: red;}
Try it Yourself 
ID selectors have a higher specificity than attribute selectors
- Look at the following three code lines:
Example
div#a {background-color: green;}
#a {background-color: yellow;}
div[id=a] {background-color: blue;}
Try it Yourself 
the first rule is more specific than the other two, and will therefore be applied.
Contextual selectors are more specific than a single element 
selector -
The embedded style sheet is closer to the element to be styled. So in the 
following situation
Example
/*From external CSS file:*/
#content h1 {background-color: red;}
/*In HTML file:*/
<style>
#content h1 {background-color: 
yellow;}
</style>
the latter rule will be applied.
A class selector beats any number of element selectors
- a class selector such as .intro beats h1, p, div, etc:
Example
.intro {background-color: yellow;}
h1 {background-color: 
  red;}
Try it Yourself 
The universal selector (*) and inherited values have a specificity of 0
- 
The universal selector (*) and inherited values are ignored!
CSS
Horizontal Navigation Bar
Horizontal Navigation Bar
Home
News
Contact
About
There are two ways to create a horizontal navigation bar. Using
inline
or
floating
list items.
Inline List Items
One way to build a horizontal navigation bar is to specify the <li> elements 
as inline, in addition to the "standard" code from the previous page:
Example
li
{
display: inline;
}
Try it Yourself 
Example explained:
display: inline;
- By default, <li> elements are block elements. Here, we 
remove the line breaks before and after each list item, to display them on one line
Floating List Items
Another way of creating a horizontal navigation bar is to float the <li> 
elements, and specify a layout for the navigation links:
Example
li
{
float: left;
}
a
{
display: block;
padding: 8px;
background-color: 
#dddddd;
}
Try it Yourself 
Example explained:
float: left;
- Use float to get block elements to 
float next to each other
display: block;
-  
Allows us to specify padding (and 
height, width, margins, etc. if you want)
padding: 8px;
- Specify some padding 
between each <a> element, to make 
them look good
background-color: #dddddd;
- Add a gray background-color to each 
<a> element
Tip:
Add the background-color to <ul> instead of each <a> element if you want 
a full-width background color:
Example
ul
{
background-color: #dddddd;
}
Try it Yourself 
Horizontal Navigation Bar Examples
Create a basic horizontal navigation bar with a dark background color and 
change the background color of the links when the user moves the mouse over 
them:
Home
News
Contact
About
Example
ul {
list-style-type: none;
margin: 0;
padding: 0;
overflow: 
hidden;
background-color: #333;
}
li {
float: left;
}
li a {
display: block;
color: white;
text-align: center;
padding: 14px 16px;
text-decoration: none;
}
/* Change the link color to #111 (black) on hover */
li a:hover {
background-color: 
#111;
}
Try it Yourself 
Active/Current Navigation Link
Add an "active" class to the current link to let the user know which page he/she is on:
Home
News
Contact
About
Example
.active {
background-color: #04AA6D;
}
Try it Yourself 
Right-Align Links
Right-align links by floating the list items to the right (
float:right;
):
Home
News
Contact
About
Example
<ul>
<li><a href="#home">Home</a></li>
<li><a href="#news">News</a></li>
<li><a href="#contact">Contact</a></li>
<li style="float:right"><a 
class="active" href="#about">About</a></li>
</ul>
Try it Yourself 
Border Dividers
Add the
border-right
property to <li> to create link dividers:
Home
News
Contact
About
Example
/* Add a gray right border to all list items, except the last item 
(last-child) */
li {
border-right: 1px solid #bbb;
}
li:last-child {
border-right: none;
}
Try it Yourself 
Fixed Navigation Bar
Make the navigation bar stay at the top or the bottom of the page, even when the user scrolls the page:
Fixed Top
ul {
position: fixed;
top: 0;
width: 100%;
}
Try it Yourself 
Fixed Bottom
ul {
position: fixed;
bottom: 0;
width: 100%;
}
Try it Yourself 
Gray Horizontal Navbar
An example of a gray horizontal navigation bar with a thin gray border:
Home
News
Contact
About
Example
ul {
border: 1px solid #e7e7e7;
background-color: #f3f3f3;
}
li a {
color: 
#666;
}
Try it Yourself 
Sticky Navbar
Add
position: sticky;
to <ul> to create a sticky navbar.
A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
Example
ul {
position: -webkit-sticky; /* Safari */
position: sticky;
top: 0;
}
Try it Yourself 
More Examples
Responsive Topnav
How to use CSS media queries to create a responsive top navigation.
Try it Yourself 
Responsive Sidenav
How to use CSS media queries to create a responsive side navigation.
Try it Yourself 
Dropdown Navbar
How to add a dropdown menu inside a navigation bar.
Try it Yourself 
CSS
Gradients
Gradient Backgrounds
CSS gradients let you display smooth transitions between two or more specified colors.
CSS defines three types of gradients:
Linear Gradients (goes down/up/left/right/diagonally)
Radial Gradients (defined by their center)
Conic Gradients (rotated around a center point)
CSS Linear Gradients
To create a linear gradient you must define 
at least two color stops. Color stops are the colors you want to render smooth transitions 
among. You can also set a starting point and a direction (or an angle) along 
with the gradient effect.
Syntax
background-image: linear-gradient(
direction
,
color-stop1
,
color-stop2, ...
);
Direction - Top to Bottom (this is default)
The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:
top to bottom (default)
Example
#grad {
background-image: linear-gradient(red, yellow);
}
Try it Yourself 
Direction - Left to Right
The following example shows a linear gradient that starts from the left. It starts red, transitioning to 
yellow:
left to right
Example
#grad {
background-image: linear-gradient(to right, red , yellow);
}
Try it Yourself 
Direction - Diagonal
You can make a gradient diagonally by specifying both the horizontal and vertical starting positions.
The following example shows a linear gradient that starts at top left (and 
goes to bottom right). It starts red, transitioning to yellow:
top left to bottom right
Example
#grad {
background-image: linear-gradient(to bottom right, red, yellow);
}
Try it Yourself 
Using Angles
If you want more control over the direction of the gradient, 
you can define an angle, instead of the predefined directions (to bottom, to 
top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to 
"to top". A value of 90deg is equivalent to "to right". A value of 
180deg is equivalent to "to bottom".
Syntax
background-image: linear-gradient(
angle
,
color-stop1
,
color-stop2
);
The following example shows how to use angles on linear gradients:
180deg
Example
#grad {
background-image: linear-gradient(180deg, red, yellow);
}
Try it Yourself 
Using Multiple Color Stops
The following example shows a linear gradient (from top to bottom) with 
multiple color stops:
Example
#grad {
background-image: linear-gradient(red, yellow, green);
}
Try it Yourself 
The following example shows how to create a linear gradient (from left to 
right) with the color of the rainbow and some text:
Rainbow Background
Example
#grad {
background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
}
Try it Yourself 
Using Transparency
CSS gradients also support transparency, which can be used to create fading effects.
To add transparency, we use the rgba() function to define the color stops. 
The last parameter in the rgba() function can be a value from 0 to 1, and it 
defines the transparency of the color: 0 indicates full transparency, 1 
indicates full color (no transparency).
The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:
Example
#grad {
background-image: linear-gradient(to right, rgba(255,0,0,0), 
rgba(255,0,0,1));
}
Try it Yourself 
Repeating a linear-gradient
The repeating-linear-gradient() function is used to repeat linear gradients:
Example
A repeating linear gradient:
#grad {
background-image: 
repeating-linear-gradient(red, yellow 10%, green 20%);
}
Try it Yourself 
CSS
The !important Rule
What is !important?
The
!important
rule in CSS is used to add more importance to a property/value than normal.
In fact, if you use the
!important
rule, it will override ALL previous styling rules for that 
specific property on that element!
Let us look at an example:
Example
#myid {
background-color: blue;
}
.myclass {
background-color: gray;
}
p {
background-color: red !important;
}
Try it Yourself 
Example Explained
In the example above, all three paragraphs will get a red background 
color, even though the ID selector and the class selector have a higher 
specificity. The
!important
rule overrides the
background-color
property in both cases.
Important About !important
The only way to override an
!important
rule is to include another
!important
rule on a declaration with the same (or higher) specificity in the source code - and here the problem starts!
This makes the CSS code confusing and the debugging will be hard, especially if 
you have a large style sheet!
Here we have created a simple example. It is not very clear, when you look at 
the CSS source code, which color is considered most important:
Example
#myid {
background-color: blue !important;
}
.myclass {
background-color: gray !important;
}
p {
background-color: red !important;
}
Try it Yourself 
Tip:
It is good to know about the
!important
rule. You might see it in some CSS source code. 
However, do not use it unless you absolutely have to.
Maybe One or Two Fair Uses of !important
One way to use
!important
is if you have to override 
a style that cannot be overridden in any other way. This could be if you are 
working on a Content Management System (CMS) and cannot edit the CSS code. 
Then you can set some custom styles to override some of the CMS styles.
Another way to use
!important
is: Assume you 
want a special look for all buttons on a page. Here, buttons are styled with a gray 
background color, white text, and some padding and border:
Example
.button {
background-color: #8c8c8c;
color: white;
padding: 5px;
border: 1px solid black;
}
Try it Yourself 
The look of a button can sometimes change if we put it inside another element with 
higher specificity, and the properties get in conflict. Here is an example of this:
Example
.button {
background-color: #8c8c8c;
color: white;
padding: 5px;
border: 1px solid black;
}
#myDiv a {
color: red;
background-color: yellow;
}
Try it Yourself 
To "force" all buttons to have the same look, no matter what, we can add the
!important
rule to the properties of the button, like this:
Example
.button {
background-color: #8c8c8c !important;
color: white 
  !important;
padding: 5px !important;
border: 1px solid black !important;
}
#myDiv a {
color: red;
background-color: yellow;
}
Try it Yourself 
CSS
Layout - float and clear
The CSS
float
property specifies 
how an element should float.
The CSS
clear
property 
specifies what elements can float beside the cleared element and on which side.
The float Property
The
float
property is used for 
positioning and formatting content e.g. let an image float left to the text in a 
container.
The
float
property can have one of the 
following values:
left
- The element floats to the left of its container
right
- The element floats to the right of its container
none
- The element does not float (will be displayed just where it occurs in the text). This is default
inherit
- The element inherits the float value of its parent
In its simplest use, the
float
property can be used to wrap text around images.
Example - float: right;
The following example specifies that an image should float to the
right
in a text:
Example
img {
float: right;
}
Try it Yourself 
Example - float: left;
The following example specifies that an image should float to the
left
in a text:
Example
img {
float: left;
}
Try it Yourself 
Example - No float
In the following example the image will be displayed just where it occurs in 
the text (float: none;):
Example
img {
float: none;
}
Try it Yourself 
Example - Float Next To Each Other
Normally div elements will be displayed on top of each other. However, if we 
use
float: left
we can let elements float next to each other:
Example
div {
float: left;
padding: 15px;
}
.div1 {
background: red;
}
.div2 {
background: yellow;
}
.div3 {
background: green;
}
Try it Yourself 
CSS
Rounded Corners
CSS Rounded Corners
With the CSS
border-radius
property, you can give any element "rounded corners".
CSS border-radius Property
The CSS
border-radius
property defines the radius of an 
element's corners.
Tip:
This property allows you to add rounded corners to 
elements!
Here are three examples:
1. Rounded corners for an element with a specified background color:
Rounded corners!
2. Rounded corners for an element with a border:
Rounded corners!
3. Rounded corners for an element with a background image:
Rounded corners!
Here is the code:
Example
#rcorners1 {
border-radius: 25px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners2 {
border-radius: 25px;
border: 2px solid #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners3 {
border-radius: 25px;
background: url(paper.gif);
background-position: left top;
background-repeat: 
repeat;
padding: 20px;
width: 
200px;
height: 150px;
}
Try it Yourself 
CSS border-radius - Specify Each Corner
The
border-radius
property can have from one 
to four values. Here are the rules:
Four values - border-radius: 15px 50px 30px 5px;
(first 
value applies to top-left corner, second value applies to top-right corner, 
third value applies to bottom-right corner, and fourth value applies to 
bottom-left corner):
Three values - border-radius: 15px 50px 30px;
(first value 
applies to top-left corner, second value applies to top-right and bottom-left 
corners, and third value applies to bottom-right corner):
Two values - border-radius: 15px 50px;
(first value applies 
to top-left and bottom-right corners, and the second value applies to top-right 
and bottom-left corners):
One value - border-radius: 15px;
(the value applies to all 
four corners, which are rounded equally:
Here is the code:
Example
#rcorners1 {
border-radius: 15px 50px 30px 5px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners2 {
border-radius: 15px 50px 30px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners3 {
border-radius: 15px 50px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners4 {
border-radius: 15px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
Try it Yourself 
You could also create elliptical corners:
Example
#rcorners1 {
border-radius: 50px / 15px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners2 {
border-radius: 15px / 50px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
#rcorners3 {
border-radius: 50%;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Give the div element rounded corners.
<style>
div {
  background: red;
: 10px;  
}
</style>

<body>
  <div>This is a div element. It has some text.</div>
</body>
Submit Answer 
Start the Exercise
CSS Rounded Corners Properties
Property
Description
border-radius
A shorthand property for setting all the four border-*-*-radius properties
border-top-left-radius
Defines the shape of the border of the top-left corner
border-top-right-radius
Defines the shape of the border of the top-right corner
border-bottom-right-radius
Defines the shape of the border of the bottom-right corner
border-bottom-left-radius
Defines the shape of the border of the bottom-left corner
CSS
Image Gallery
Image Gallery
The following image gallery is created with CSS:
Example
<html>
<head>
<style>
div.gallery {
margin: 5px;
border: 1px solid #ccc;
float: left;
width: 180px;
}
div.gallery:hover {
border: 1px solid #777;
}
div.gallery img {
width: 100%;
height: auto;
}
div.desc {
padding: 15px;
text-align: center;
}
</style>
</head>
<body>
<div class="gallery">
<a target="_blank" href="img_5terre.jpg">
<img src="img_5terre.jpg" alt="Cinque Terre" width="600" height="400">
</a>
<div class="desc">Add a description of the image here</div>
</div>
<div class="gallery">
<a target="_blank" href="img_forest.jpg">
<img src="img_forest.jpg" alt="Forest" width="600" height="400">
</a>
<div class="desc">Add a description of the image here</div>
</div>
<div class="gallery">
<a target="_blank" href="img_lights.jpg">
<img src="img_lights.jpg" alt="Northern Lights" width="600" height="400">
</a>
<div class="desc">Add a description of the image here</div>
</div>
<div class="gallery">
<a target="_blank" href="img_mountains.jpg">
<img src="img_mountains.jpg" alt="Mountains" width="600" height="400">
</a>
<div class="desc">Add a description of the image here</div>
</div>
</body>
</html>
Try it Yourself 
More Examples
Responsive Image Gallery
How to use CSS media queries to create a responsive image gallery that will 
look good on desktops, tablets and smart phones.
Try it Yourself 
CSS
Outline Width
CSS Outline Width
The
outline-width
property specifies the width of the outline, 
and can have one of the following values:
thin (typically 1px)
medium (typically 3px)
thick (typically 5px)
A specific size (in px, pt, cm, em, etc)
The following example shows some outlines with different widths:
A thin outline.
A medium outline.
A thick outline.
A 4px thick outline.
Example
p.ex1
{
border: 1px solid black;
outline-style: solid;
outline-color: red;
outline-width: thin;
}
p.ex2
{
border: 1px solid black;
outline-style: solid;
outline-color: red;
outline-width: medium;
}
p.ex3
{
border: 1px solid black;
outline-style: solid;
outline-color: red;
outline-width: thick;
}
p.ex4
{
border: 1px solid black;
outline-style: solid;
outline-color: red;
outline-width: 4px;
}
Try it Yourself 
CSS
HSL Colors
HSL stands for hue, saturation, and lightness.
HSL Value
In CSS, a color can be specified using hue, saturation, and lightness (HSL) in 
the form:
hsl(
hue
,
saturation
,
lightness
)
Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color.
Lightness is also a percentage. 0% is black, 50% is neither light or dark, 100% is white
Experiment by mixing the HSL values below:
HUE
0
SATURATION
100%
LIGHTNESS
50%
Example
hsl(0, 100%, 50%)
hsl(240, 100%, 50%)
hsl(147, 50%, 47%)
hsl(300, 76%, 72%)
hsl(39, 100%, 50%)
hsl(248, 53%, 58%)
Try it Yourself 
Saturation
Saturation can be described as the intensity of a color.
100% is pure color, no shades of gray.
50% is 50% gray, but you can still see the color.
0% is completely gray; you can no longer see the color.
Example
hsl(0, 100%, 50%)
hsl(0, 80%, 50%)
hsl(0, 60%, 50%)
hsl(0, 40%, 50%)
hsl(0, 20%, 50%)
hsl(0, 0%, 50%)
Try it Yourself 
Lightness
The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 
and 100% means full lightness (white).
Example
hsl(0, 100%, 0%)
hsl(0, 100%, 25%)
hsl(0, 100%, 50%)
hsl(0, 100%, 75%)
hsl(0, 100%, 90%)
hsl(0, 100%, 100%)
Try it Yourself 
Shades of Gray
Shades of gray are often defined by setting the hue and saturation to 0, and 
adjust the lightness from 0% to 100% to get darker/lighter shades:
Example
hsl(0, 0%, 0%)
hsl(0, 0%, 24%)
hsl(0, 0%, 47%)
hsl(0, 0%, 71%)
hsl(0, 0%, 94%)
hsl(0, 0%, 100%)
Try it Yourself 
HSLA Value
HSLA color values are an extension of HSL color values with an alpha channel 
- which specifies the opacity for a color.
An HSLA color value is 
specified with:
hsla(
hue,
saturation
,
lightness, 
alpha
)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the HSLA values below:
HUE
0
SATURATION
100%
LIGHTNESS
50%
ALPHA
0.5
Example
hsla(9, 100%, 64%, 0)
hsla(9, 100%, 64%, 0.2)
hsla(9, 100%, 64%, 0.4)
hsla(9, 100%, 64%, 0.6)
hsla(9, 100%, 64%, 0.8)
hsla(9, 100%, 64%, 1)
Try it Yourself 
Video: CSS Colors HSL
CSS
Borders
The CSS border properties allow you to specify the style, 
width, and color of an element's border.
I have borders on all sides.
I have a red bottom border.
I have rounded borders.
I have a blue left border.
CSS Border Style
The
border-style
property specifies what kind of border to display.
The following values are allowed:
dotted
- Defines a dotted border
dashed
- Defines a dashed border
solid
- Defines a solid border
double
- Defines a double border
groove
- Defines a 3D grooved border. The effect depends on the border-color value
ridge
- Defines a 3D ridged border. The effect depends on the border-color value
inset
- Defines a 3D inset border. The effect depends on the border-color value
outset
- Defines a 3D outset border. The effect depends on the border-color value
none
- Defines no border
hidden
- Defines a hidden border
The
border-style
property can have from one to four values (for 
the top border, right border, bottom border, and the left border).
Example
Demonstration of the different border styles:
p.dotted {border-style: dotted;}
p.dashed 
{border-style: dashed;}
p.solid {border-style: solid;}
p.double 
{border-style: double;}
p.groove {border-style: groove;}
p.ridge 
{border-style: ridge;}
p.inset {border-style: inset;}
p.outset 
{border-style: outset;}
p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}
Result:
A dotted border.
A dashed border.
A solid border.
A double border.
A groove border. The effect depends on the border-color value.
A ridge border. The effect depends on the border-color value.
An inset border. The effect depends on the border-color value.
An outset border. The effect depends on the border-color value.
No border.
A hidden border.
A mixed border.
Try it Yourself 
CSS
Lists
Unordered Lists:
Coffee
Tea
Coca Cola
Coffee
Tea
Coca Cola
Ordered Lists:
Coffee
Tea
Coca Cola
Coffee
Tea
Coca Cola
HTML Lists and CSS List Properties
In HTML, there are two main types of lists:
unordered lists (<ul>) - the list items are marked with bullets
ordered lists (<ol>) - the list items are marked with numbers or letters
The CSS list properties allow you to:
Set different list item markers for ordered lists
Set different list item markers for unordered lists
Set an image as the list item marker
Add background colors to lists and list items
Different List Item Markers
The
list-style-type
property specifies the type of list item 
marker.
The following example shows some of the available list item markers:
Example
ul.a {
list-style-type: circle;
}
ul.b {
list-style-type: square;
}
ol.c {
list-style-type: upper-roman;
}
ol.d {
list-style-type: lower-alpha;
}
Try it Yourself 
Note: Some of the values are for unordered lists, and some for ordered lists.
An Image as The List Item Marker
The
list-style-image
property specifies an image as the list 
item marker:
Example
ul
{
list-style-image: url('sqpurple.gif');
}
Try it Yourself 
Position The List Item Markers
The
list-style-position
property specifies the position of the list-item markers 
(bullet points).
"list-style-position: outside;" means that the bullet points will be outside 
the list item. The start of each line of a list item will be aligned vertically. 
This is default:
Coffee -
A brewed drink prepared from roasted coffee beans...
Tea
Coca-cola
"list-style-position: inside;" means that the bullet points will be inside 
the list item. As it is part of the list item, it will be part of the text and 
push the text at the start:
Coffee -
A brewed drink prepared from roasted coffee beans...
Tea
Coca-cola
Example
ul.a {
list-style-position: outside;
}
ul.b {
list-style-position: inside;
}
Try it Yourself 
Remove Default Settings
The
list-style-type:none
property can also be 
used to remove the markers/bullets. Note that the list also has default margin 
and padding. To remove this, add
margin:0
and
padding:0
to <ul> or <ol>:
Example
ul
{
list-style-type: none;
margin: 0;
padding: 0;
}
Try it Yourself 
List - Shorthand property
The
list-style
property is a shorthand property. It is used to set all the 
list properties in one declaration:
Example
ul
{
list-style: square inside url("sqpurple.gif");
}
Try it Yourself 
When using the shorthand property, the order of the property values are:
list-style-type
(if a list-style-image is specified, 
the value of this property will be displayed if the image for some reason 
cannot be displayed)
list-style-position
(specifies whether the list-item markers should appear inside or outside the content flow)
list-style-image
(specifies an image as the list item 
marker)
If one of the property values above is missing, the default value for the 
missing property will be inserted, if any.
Styling List With Colors
We can also style lists with colors, to make them look a little more 
interesting.
Anything added to the <ol> or <ul> tag, affects the entire list, while 
properties added to the <li> tag will affect the individual list items:
Example
ol {
background: #ff9999;
padding: 20px;
}
ul {
background: #3399ff;
padding: 20px;
}
ol li {
background: 
#ffe5e5;
color: darkred;
padding: 5px;
margin-left: 35px;
}
ul li {
background: 
#cce5ff;
color: darkblue;
margin: 5px;
}
Result:
Coffee
Tea
Coca Cola
Coffee
Tea
Coca Cola
Try it Yourself 
More Examples
Customized list with a red left border
This example demonstrates how to create a list with a red left border.
Full-width bordered list
This example demonstrates how to create a bordered list without bullets.
All the different list-item markers for lists
This example demonstrates all the different list-item markers in CSS.
Test Yourself With Exercises
Exercise:
Set the list style for unordered lists to "square".
<style>
ul {
:
;
}
</style>

<body>
<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Coca Cola</li>
</ul>
</body>
Submit Answer 
Start the Exercise
All CSS List Properties
Property
Description
list-style
Sets all the properties for a list in one declaration
list-style-image
Specifies an image as the list-item marker
list-style-position
Specifies the position of the list-item markers (bullet points)
list-style-type
Specifies the type of list-item marker
CSS
Text Transformation
Text Transformation
The
text-transform
property is used to specify uppercase and lowercase letters in a text.
It can be used to turn everything into uppercase or lowercase letters, or 
capitalize the first letter of each word:
Example
p.uppercase {
text-transform: uppercase;
}
p.lowercase {
text-transform: lowercase;
}
p.capitalize {
text-transform: capitalize;
}
Try it Yourself 
The CSS Text Transformation Property
Property
Description
text-transform
Controls the capitalization of text
CSS
Table Size
Table Width and Height
The width and height of a table are defined by the
width
and
height
properties.
The example below sets the width of the table to 100%, and the height of the 
<th> elements to 70px:
Firstname
Lastname
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
table 
{
width: 100%;
}
th
{
height: 70px;
}
Try it Yourself 
To create a table that should only span half the page, use
width: 50%
:
Firstname
Lastname
Savings
Peter
Griffin
$100
Lois
Griffin
$150
Joe
Swanson
$300
Example
table 
{
width: 50%;
}
Try it Yourself 
CSS
Text Spacing
Text Spacing
In this chapter you will learn about the following properties:
text-indent
letter-spacing
line-height
word-spacing
white-space
Text Indentation
The
text-indent
property is used to specify the indentation of the first line of a text:
Example
p {
text-indent: 50px;
}
Try it Yourself 
Letter Spacing
The
letter-spacing
property is used to specify the space between the characters in a text.
The following example demonstrates how to increase or decrease the space between characters:
Example
h1 {
letter-spacing: 5px;
}
h2 {
letter-spacing: -2px;
}
Try it Yourself 
Line Height
The
line-height
property is used to specify the space between lines:
Example
p.small {
line-height: 0.8;
}
p.big {
line-height: 1.8;
}
Try it Yourself 
Word Spacing
The
word-spacing
property is used to specify the space between 
the words in a text.
The following example demonstrates how to increase or decrease the space between 
words:
Example
p.one {
word-spacing: 10px;
}
p.two {
word-spacing: -2px;
}
Try it Yourself 
White Space
The
white-space
property specifies how white-space inside an element is handled.
This example demonstrates how to disable text wrapping inside an element:
Example
p {
white-space: nowrap;
}
Try it Yourself 
The CSS Text Spacing Properties
Property
Description
letter-spacing
Specifies the space between characters in a text
line-height
Specifies the line height
text-indent
Specifies the indentation of the first line in a text-block
white-space
Specifies how to handle white-space inside an element
word-spacing
Specifies the space between words in a text
CSS
Tables
The look of an HTML table can be greatly improved with CSS:
Company
Contact
Country
Alfreds Futterkiste
Maria Anders
Germany
Berglunds snabbkp
Christina Berglund
Sweden
Centro comercial Moctezuma
Francisco Chang
Mexico
Ernst Handel
Roland Mendel
Austria
Island Trading
Helen Bennett
UK
Kniglich Essen
Philip Cramer
Germany
Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada
Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy
Try it Yourself 
Table Borders
To specify table borders in CSS, use the
border
property.
The example below specifies a solid border for <table>, <th>, and <td> elements:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table, th, td {
border: 1px solid;
}
Try it Yourself 
Full-Width Table
The table above might seem small in some cases. If you need a table that should span the entire screen (full-width), add
width: 100%
to the 
<table> element:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table {
width: 100%;
}
Try it Yourself 
Collapse Table Borders
The
border-collapse
property sets whether the table borders 
should be collapsed into a single border:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table
{
border-collapse: collapse;
}
Try it Yourself 
If you only want a border around the table, only specify the
border
property for 
<table>:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table
{
border: 1px solid;
}
Try it Yourself 
CSS
Margins
Margins are used to create space around elements, outside of any defined borders.
This element has a margin of 70px.
Try it Yourself 
CSS Margins
The CSS
margin
properties are used to create space around elements, 
outside of any defined borders.
With CSS, you have full control over the margins. There are properties 
for setting the margin for each side of an element (top, right, bottom, and left).
Margin - Individual Sides
CSS has properties for specifying the margin for each 
side of an element:
margin-top
margin-right
margin-bottom
margin-left
All the margin properties can have the following values:
auto - the browser calculates the margin
length
- specifies a margin in px, pt, cm, etc.
%
- specifies a margin in % of the width of the containing element
inherit - specifies that the margin should be inherited from the parent element
Tip:
Negative values are allowed.
Example
Set different margins for all four sides of a <p> element:
p {
margin-top: 100px;
margin-bottom: 100px;
margin-right: 150px;
margin-left: 80px;
}
Try it Yourself 
Margin - Shorthand Property
To shorten the code, it is possible to specify all the margin properties in 
one property.
The
margin
property is a shorthand property for the following individual margin properties:
margin-top
margin-right
margin-bottom
margin-left
So, here is how it works:
If the
margin
property has four values:
margin: 25px 50px 75px 100px;
top margin is 25px
right margin is 50px
bottom margin is 75px
left margin is 100px
Example
Use the margin shorthand property with four values:
p {
margin: 25px 50px 75px 100px;
}
Try it Yourself 
If the
margin
property has three values:
margin: 25px 50px 75px;
top margin is 25px
right and left margins are 50px
bottom margin is 75px
Example
Use the margin shorthand property with three values:
p {
margin: 25px 50px 75px;
}
Try it Yourself 
If the
margin
property has two values:
margin: 25px 50px;
top and bottom margins are 25px
right and left margins are 50px
Example
Use the margin shorthand property with two values:
p {
margin: 25px 50px;
}
Try it Yourself 
If the
margin
property has one value:
margin: 25px;
all four margins are 25px
Example
Use the margin shorthand property with one value:
p {
margin: 25px;
}
Try it Yourself 
The auto Value
You can set the margin property to
auto
to horizontally center the element within its container.
The element will then take up the specified width, and the remaining space 
will be split equally between the left and right margins.
Example
Use margin: auto:
div {
width: 300px;
margin: 
auto;
border: 1px solid red;
}
Try it Yourself 
The inherit Value
This example lets the left margin of the <p class="ex1"> element be inherited from the parent element 
(<div>):
Example
Use of the inherit value:
div {
border: 1px solid red;
margin-left: 100px;
}
p.ex1 {
margin-left: 
inherit;
}
Try it Yourself 
All CSS Margin Properties
Property
Description
margin
A shorthand property for setting all the margin properties in one declaration
margin-bottom
Sets the bottom margin of an element
margin-left
Sets the left margin of an element
margin-right
Sets the right margin of an element
margin-top
Sets the top margin of an element
CSS
Background Attachment
CSS background-attachment
The
background-attachment
property specifies 
whether the background image should scroll or be fixed (will not scroll with the 
rest of the page):
Example
Specify that the background image should be fixed:
body
{
background-image: url("img_tree.png");
background-repeat: no-repeat;
background-position: right top;
background-attachment: fixed;
}
Try it Yourself 
Example
Specify that the background image should scroll with the rest of the page:
body
{
background-image: url("img_tree.png");
background-repeat: no-repeat;
background-position: right top;
background-attachment: scroll;
}
Try it Yourself 
The CSS Background Attachment Property
Property
Description
background-attachment
Sets whether a background image is fixed or scrolls with the rest of the page
Video: CSS Background Attachment
CSS
RGB Colors
An RGB color value represents RED, GREEN, and BLUE light 
sources.
RGB Value
In CSS, a color can be specified as an RGB value, using this formula:
rgb(
red,
green
,
blue
)
Each parameter (red, green, and 
blue) defines the intensity of the color between 0 and 255.
For example, rgb(255, 0, 0) is displayed as red, 
because red is set to its highest value (255) and the others are 
set to 0.
To display black, set all color parameters to 0, like this: rgb(0, 0, 0).
To display white, set all color parameters to 255, like 
this: rgb(255, 255, 255).
Experiment by mixing the RGB values below:
RED
255
GREEN
0
BLUE
0
Example
rgb(255, 0, 0)
rgb(0, 0, 255)
rgb(60, 179, 113)
rgb(238, 130, 238)
rgb(255, 165, 0)
rgb(106, 90, 205)
Try it Yourself 
Shades of gray are often defined using equal values for all the 3 light sources:
Example
rgb(60, 60, 60)
rgb(90, 90, 90)
rgb(120, 120, 120)
rgb(180, 180, 180)
rgb(210, 210, 210)
rgb(240, 240, 240)
Try it Yourself 
RGBA Value
RGBA color values are an extension of RGB color values with an alpha channel 
- which specifies the opacity for a color.
An RGBA color value is 
specified with:
rgba(
red,
green
,
blue, 
alpha
)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the RGBA values below:
RED
255
GREEN
0
BLUE
0
ALPHA
0
Example
rgba(255, 99, 71, 0)
rgba(255, 99, 71, 0.2)
rgba(255, 99, 71, 0.4)
rgba(255, 99, 71, 0.6)
rgba(255, 99, 71, 0.8)
rgba(255, 99, 71, 1)
Try it Yourself 
Video: CSS Colors RGB & RGBA
CSS
Tables
The look of an HTML table can be greatly improved with CSS:
Company
Contact
Country
Alfreds Futterkiste
Maria Anders
Germany
Berglunds snabbkp
Christina Berglund
Sweden
Centro comercial Moctezuma
Francisco Chang
Mexico
Ernst Handel
Roland Mendel
Austria
Island Trading
Helen Bennett
UK
Kniglich Essen
Philip Cramer
Germany
Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada
Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy
Try it Yourself 
Table Borders
To specify table borders in CSS, use the
border
property.
The example below specifies a solid border for <table>, <th>, and <td> elements:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table, th, td {
border: 1px solid;
}
Try it Yourself 
Full-Width Table
The table above might seem small in some cases. If you need a table that should span the entire screen (full-width), add
width: 100%
to the 
<table> element:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table {
width: 100%;
}
Try it Yourself 
Collapse Table Borders
The
border-collapse
property sets whether the table borders 
should be collapsed into a single border:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table
{
border-collapse: collapse;
}
Try it Yourself 
If you only want a border around the table, only specify the
border
property for 
<table>:
Firstname
Lastname
Peter
Griffin
Lois
Griffin
Example
table
{
border: 1px solid;
}
Try it Yourself 
CSS
Selectors
A CSS selector selects the HTML element(s) you 
want to style.
CSS Selectors
CSS selectors are used to "find" (or select) the HTML elements you 
want to style.
We can divide CSS selectors into five categories:
Simple selectors (select elements based on name, id, class)
Combinator selectors
(select  
  elements based on a specific relationship between them)
Pseudo-class selectors
(select elements based on a certain state)
Pseudo-elements selectors
(select 
  and style a part of an element)
Attribute selectors
(select elements based on 
  an attribute or attribute value)
This page will explain the most basic CSS selectors.
The CSS element Selector
The element selector selects HTML elements based on the element name.
Example
Here, all <p> elements on the page will be 
center-aligned, with a red text color:
p
{
text-align: center;
color: red;
}
Try it Yourself 
The CSS id Selector
The id selector uses the id attribute of an HTML element to select a specific element.
The id of an element is unique within a page, so the id selector is 
used to 
select one unique element!
To select an element with a specific id, write a hash (#) character, followed by 
the id of the element.
Example
The CSS rule below will be applied to the HTML element with id="para1":
#para1
{
text-align: center;
color: red;
}
Try it Yourself 
The CSS class Selector
The class selector selects HTML elements with a specific class attribute.
To select elements with a specific class, write a period (.) character, followed by the 
class name.
Example
In this example all HTML elements with class="center" will be red and center-aligned:
.center {
text-align: center;
color: red;
}
Try it Yourself 
You can also specify that only specific HTML elements should be affected by a class.
Example
In this example only <p> elements with class="center" will be 
red and center-aligned:
p.center {
text-align: center;
color: red;
}
Try it Yourself 
HTML elements 
can also refer to more than one class.
Example
In this example the <p> element will be styled according to class="center" 
and to class="large":
<p class="center large">This paragraph refers to two classes.</p>
Try it Yourself 
The CSS Universal Selector
The universal selector (*) selects all HTML 
elements on the page.
Example
The CSS rule below will affect every HTML element on the page:
*
{
text-align: center;
color: blue;
}
Try it Yourself 
The CSS Grouping Selector
The grouping selector selects all the HTML elements with the same style 
definitions.
Look at the following CSS code (the h1, h2, and p elements have the same 
style definitions):
h1
{
text-align: center;
color: red;
}
h2
{
text-align: center;
color: red;
}
p
{
text-align: center;
color: red;
}
It will be better to group the selectors, to minimize the code.
To group selectors, separate each selector with a comma.
Example
In this example we have grouped the selectors from the code above:
h1, h2, p
{
text-align: center;
color: red;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Set the text color of all <p> elements to red.
<style>
{
red;
}
</style>
Submit Answer 
Start the Exercise
All CSS Simple Selectors
Selector
Example
Example description
#
id
#firstname
Selects the element with id="firstname"
.
class
.intro
Selects all elements with class="intro"
element.class
p.intro
Selects only <p> elements with class="intro"
*
*
Selects all elements
element
p
Selects all <p> elements
element,element,..
div, p
Selects all <div> elements and all <p> elements
Video: CSS Simple Selectors
CSS
Backgrounds
The CSS background properties are used to add background effects 
for elements.
In these chapters, you will learn about the following CSS background properties:
background-color
background-image
background-repeat
background-attachment
background-position
background
(shorthand property)
CSS background-color
The
background-color
property specifies the background color of an element.
Example
The background color of a page is set like this:
body {
background-color: lightblue;
}
Try it Yourself 
With CSS, a color is most often specified by:
a valid color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at
CSS Color Values
for a complete 
list of possible color values.
Other Elements
You can set the background color for any HTML elements:
Example
Here, the <h1>, <p>, and <div> elements will have different background colors:
h1 {
background-color: green;
}
div {
background-color: lightblue;
}
p {
background-color: 
yellow;
}
Try it Yourself 
Opacity / Transparency
The
opacity
property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent:
opacity 1
opacity 0.6
opacity 0.3
opacity 0.1
Example
div {
background-color: green;
opacity: 0.3;
}
Try it Yourself 
Transparency using RGBA
If you do not want to apply opacity to child elements, like in our example above, use
RGBA
color values. 
The following example sets the opacity for the background color and not the text:
100% opacity
60% opacity
30% opacity
10% opacity
You learned from our
CSS Colors Chapter
, that you can use RGB as a color value. In addition to RGB, 
you can use an RGB color value with an
alpha
channel (RGB
A
) - which specifies the opacity for a color.
An RGBA color value is specified with: rgba(red, green, blue,
alpha
). The
alpha
parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
Tip:
You will learn more about RGBA Colors in our
CSS Colors Chapter
.
Example
div {
background: rgba(0, 128, 0, 0.3) /* Green background with 30% opacity */
}
Try it Yourself 
The CSS Background Color Property
Property
Description
background-color
Sets the background color of an element
Video: CSS Background Color
CSS
Font Style
Font Style
The
font-style
property is mostly used to specify italic text.
This property has three values:
normal - The text is shown normally
italic - The text is shown in italics
oblique - The text is "leaning"
(oblique is very similar to italic, but less supported)
Example
p.normal {
font-style: normal;
}
p.italic {
font-style: italic;
}
p.oblique {
font-style: oblique;
}
Try it Yourself 
Font Weight
The
font-weight
property specifies the weight of a font:
Example
p.normal {
font-weight: normal;
}
p.thick {
font-weight: bold;
}
Try it Yourself 
Font Variant
The
font-variant
property specifies whether or not a text should 
be displayed in a small-caps font.
In a small-caps font, all lowercase letters are converted to uppercase 
letters. However, the converted uppercase letters appears in a smaller font size 
than the original uppercase letters in the text.
Example
p.normal {
font-variant: normal;
}
p.small {
font-variant: small-caps;
}
Try it Yourself 
CSS
Text Decoration
Text Decoration
In this chapter you will learn about the following properties:
text-decoration-line
text-decoration-color
text-decoration-style
text-decoration-thickness
text-decoration
Add a Decoration Line to Text
The
text-decoration-line
property is used to add 
a decoration line to text.
Tip:
You can combine more than one value, like overline and 
underline to display lines both over and under a text.
Example
h1 {
text-decoration-line: overline;
}
h2 {
text-decoration-line: line-through;
}
h3 {
text-decoration-line: underline;
}
p {
text-decoration-line: 
  overline underline;
}
Try it Yourself 
Specify a Color for the Decoration Line
The
text-decoration-color
property is used to 
set the color of the decoration line.
Example
h1 {
text-decoration-line: overline;
text-decoration-color: 
  red;
}
h2 {
text-decoration-line: line-through;
text-decoration-color: 
  blue;
}
h3 {
text-decoration-line: underline;
text-decoration-color: 
  green;
}
p {
text-decoration-line: 
  overline underline;
text-decoration-color: purple;
}
Try it Yourself 
Specify a Style for the Decoration Line
The
text-decoration-style
property is used to 
set the style of the decoration line.
Example
h1 {
text-decoration-line: underline;
text-decoration-style: 
  solid;
}
h2 {
text-decoration-line: underline;
text-decoration-style: double;
}
h3 {
text-decoration-line: underline;
text-decoration-style: dotted;
}
p.ex1 {
text-decoration-line: underline;
text-decoration-style: dashed;
}
p.ex2 {
text-decoration-line: underline;
text-decoration-style: wavy;
}
p.ex3 {
text-decoration-line: 
  underline;
text-decoration-color: red;
text-decoration-style: wavy;
}
Try it Yourself 
Specify the Thickness for the Decoration Line
The
text-decoration-thickness
property is used to 
set the thickness of the decoration line.
Example
h1 {
text-decoration-line: underline;
text-decoration-thickness: auto;
}
h2 {
text-decoration-line: 
  underline;
text-decoration-thickness: 5px;
}
h3 {
text-decoration-line: underline;
text-decoration-thickness: 25%;
}
p {
text-decoration-line: underline;
text-decoration-color: red;
text-decoration-style: double;
text-decoration-thickness: 5px;
}
Try it Yourself 
The Shorthand Property
The
text-decoration
property is a shorthand 
property for:
text-decoration-line
(required)
text-decoration-color
(optional)
text-decoration-style
(optional)
text-decoration-thickness
(optional)
Example
h1 {
text-decoration: underline;
}
h2 {
text-decoration: underline red;
}
h3 {
text-decoration: underline 
  red double;
}
p {
text-decoration: underline red double 5px;
}
Try it Yourself 
A Small Tip
All links in HTML are underlined by default. Sometimes you 
see that links are styled with no underline. The
text-decoration: none;
is used to remove 
the underline from links, 
like this:
Example
a {
text-decoration: none;
}
Try it Yourself 
All CSS text-decoration Properties
Property
Description
text-decoration
Sets all the text-decoration properties in one declaration
text-decoration-color
Specifies the color of the text-decoration
text-decoration-line
Specifies the kind of text decoration to be used (underline, overline, 
    etc.)
text-decoration-style
Specifies the style of the text decoration (solid, dotted, etc.)
text-decoration-thickness
Specifies the thickness of the text decoration line
CSS
Layout - The display
Property
The
display
property is the most important CSS property for controlling layout.
The display Property
The
display
property is used to specify how an element is shown on a web page.
Every HTML element has a default display value, depending on what type of element it is. The default display value for most elements is
block
or
inline
.
The
display
property is used to change the default display behavior of HTML elements.
Block-level Elements
A block-level element ALWAYS starts on a new line and takes up the full width available 
(stretches out to the left and right as far as it can).
The <div> element is a block-level element.
Examples of block-level elements:
<div>
<h1> - <h6>
<p>
<form>
<header>
<footer>
<section>
Inline Elements
An inline element DOES NOT start on a new line and only takes up as much width as necessary.
This is
an inline <span> element 
inside
a paragraph.
Examples of inline elements:
<span>
<a>
<img>
The display Property Values
The
display
property has many values:
Value
Description
inline
Displays an element as an inline element
block
Displays an element as a block element
contents
Makes the container disappear, making the child elements children of the 
    element the next level up in the DOM
flex
Displays an element as a block-level flex container
grid
Displays an element as a block-level grid container
inline-block
Displays an element as an inline-level block container. The element itself is formatted as an inline 
    element, but you can apply height and width values
inline-flex
Displays an element as an inline-level flex container
inline-grid
Displays an element as an inline-level grid container
inline-table
The element is displayed as an inline-level table
list-item
Let the element behave like a <li> element
run-in
Displays an element as either block or inline, depending on context
table
Let the element behave like a <table> element
table-caption
Let the element behave like a <caption> element
table-column-group
Let the element behave like a <colgroup> element
table-header-group
Let the element behave like a <thead> element
table-footer-group
Let the element behave like a <tfoot> element
table-row-group
Let the element behave like a <tbody> element
table-cell
Let the element behave like a <td> element
table-column
Let the element behave like a <col> element
table-row
Let the element behave like a <tr> element
none
The element is completely removed
initial
Sets this property to its default value
inherit
Inherits this property from its parent element
Display: none;
display: none;
is commonly used with JavaScript to hide 
and show elements without deleting and recreating them. Take a look at our last 
example on this page if you want to know how this can be achieved.
The
<script>
element uses
display: none;
as default.
Click to show panel
This panel contains a <div> element, which is hidden by default (
display: none;
).
It is styled with CSS, and we use JavaScript to show it (change it to (
display: block;
).
Override The Default Display Value
As mentioned, every element has a default display value. However, you can 
override this.
Changing an inline element to a block element, or vice versa, can be useful for 
making the page look a specific way, and still follow the web standards.
A common example is making inline
<li>
elements for horizontal menus:
Example
li {
display: inline;
}
Try it Yourself 
The following example displays <span> elements as block elements:
Example
span {
display: block;
}
Try it Yourself 
The following example displays <a> elements as block elements:
Example
a {
display: block;
}
Try it Yourself 
Hide an Element - display:none or visibility:hidden?
display:none
Remove
visibility:hidden
Hide
Reset
Reset All
Hiding an element can be done by setting the
display
property to
none
. 
The element will be hidden, and the page will be displayed as if the element is not 
there:
Example
h1.hidden {
display: none;
}
Try it Yourself 
visibility:hidden;
also hides an element.
However, the element will still take up the same space 
as before. The element will be hidden, but still affect the layout:
Example
h1.hidden {
visibility: hidden;
}
Try it Yourself 
More Examples
Differences between display: none; and visibility: hidden;
This example demonstrates display: none; versus visibility: hidden;
Showing more display types
This example demonstrates some more display types.
Using CSS together with JavaScript to show content
This example demonstrates how to use CSS and JavaScript to show an element on click.
Test Yourself With Exercises
Exercise:
Hide the <h1> element. It should still take up the same space as before.
<style>
h1 {
:
;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS Display/Visibility Properties
Property
Description
display
Specifies how an element should be displayed
visibility
Specifies whether or not an element should be visible
CSS
Height, Width and Max-width
The CSS
height
and
width
properties are used to set the 
height and width of an element.
The CSS
max-width
property is used to set the maximum width of an element.
This element has a height of 50 pixels and a width of 100%.
Try it Yourself 
CSS Setting height and width
The
height
and
width
properties are used to set the 
height and width of an element.
The height and width properties do not include padding, borders, or margins. 
It sets the height/width of the area inside the padding, border, and margin of 
the element.
CSS height and width Values
The
height
and
width
properties 
may have the following values:
auto
- This is default. The browser 
calculates the height and width
length
- Defines the height/width in px, cm, 
etc.
%
- Defines the height/width in percent of 
the containing block
initial
- Sets the height/width to its 
default value
inherit
- The height/width will be 
  inherited from its parent value
CSS height and width Examples
This element has a height of 200 pixels and a width of 50%
Example
Set the height and width of a <div> element:
div {
height: 
200px;
width: 50%;
background-color: powderblue;
}
Try it Yourself 
This element has a height of 100 pixels and a width of 500 pixels.
Example
Set the height and width of another <div> element:
div {
height: 
100px;
width: 500px;
background-color: powderblue;
}
Try it Yourself 
Note:
Remember that the
height
and
width
properties do not include padding, borders, 
or margins! They set the height/width of the area inside the padding, border, 
and margin of the element!
Setting max-width
The
max-width
property is used to set the maximum width of an element.
The
max-width
can be specified in
length values
, like px, cm, etc., or in percent (%) of the 
containing block, or set to none (this is 
default. Means that there is no maximum width).
The problem with the
<div>
above occurs when the browser window is smaller than the width of 
the element (500px). The browser then adds a horizontal scrollbar to the page.
Using
max-width
instead, in this situation, will improve the browser's handling of small windows.
Tip:
Drag the browser window to smaller than 500px wide, to see the difference between 
the two divs!
This element has a height of 100 pixels and a max-width of 500 pixels.
Note:
If you for some reason use both the
width
property and the
max-width
property on the same element, and the value of the
width
property is larger than the
max-width
property; the
max-width
property will be used (and the
width
property will be ignored).
Example
This <div> element has a height of 100 pixels and a 
max-width of 500 pixels:
div {
max-width: 500px;
height: 
100px;
background-color: powderblue;
}
Try it Yourself 
Try it Yourself - Examples
Set the height and width of elements
This example demonstrates how to set the height and width of different elements.
Set the height and width of an image using percent
This example demonstrates how to set the height and width of an image using a percent value.
Set min-width and max-width of an element
This example demonstrates how to set a minimum width and a maximum width of an element using a pixel value.
Set min-height and max-height of an element
This example demonstrates how to set a minimum height and a maximum height of an element using a pixel value.
Test Yourself With Exercises
Exercise:
Set the height of the <h1> element to "100px".
<style>
h1 {
: 100px;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Dimension Properties
Property
Description
height
Sets the height of an element
max-height
Sets the maximum height of an element
max-width
Sets the maximum width of an element
min-height
Sets the minimum height of an element
min-width
Sets the minimum width of an element
width
Sets the width of an element
CSS
Fonts
Choosing the right font for your website is important!
Font Selection is Important
Choosing the right font has a huge impact on how the readers experience a 
website.
The right font can create a strong identity for your brand.
Using a font that is easy to read is important. The font adds 
value to your text. It is also important to choose the correct color and text size 
for the font.
Generic Font Families
In CSS there are five generic font families:
Serif
fonts have a small stroke at the edges of each letter. They create a sense of formality and elegance.
Sans-serif
fonts have clean lines (no small strokes attached). They create a modern and minimalistic look.
Monospace
fonts - here all the letters have the same fixed width. They create a mechanical look.
Cursive
fonts imitate human handwriting.
Fantasy
fonts are decorative/playful fonts.
All the different font names belong to one of the generic font families.
Difference Between Serif and Sans-serif Fonts
Some Font Examples
Generic Font Family
Examples of Font Names
Serif
Times New Roman
Georgia
Garamond
Sans-serif
Arial
Verdana
Helvetica
Monospace
Courier New
Lucida Console
Monaco
Cursive
Brush Script MT
Lucida Handwriting
Fantasy
Copperplate
Papyrus
The CSS font-family Property
In CSS, we use the
font-family
property to specify the font of a text.
Tip:
The
font-family
property should hold several font names as a "fallback" system, 
to ensure maximum compatibility between browsers/operating systems. Start with the font you want, and end with a generic family 
(to let the 
browser pick a similar font in the generic family, if no other fonts are 
available). The font names should be separated with a comma. Read more about 
fallback fonts in the
next chapter
.
Example
Specify some different fonts for three paragraphs:
.p1 {
font-family: "Times New Roman", Times, serif;
}
.p2 {
font-family: Arial, Helvetica, sans-serif;
}
.p3 {
font-family: "Lucida Console", "Courier New", monospace;
}
Try it Yourself 
CSS
Margins
Margins are used to create space around elements, outside of any defined borders.
This element has a margin of 70px.
Try it Yourself 
CSS Margins
The CSS
margin
properties are used to create space around elements, 
outside of any defined borders.
With CSS, you have full control over the margins. There are properties 
for setting the margin for each side of an element (top, right, bottom, and left).
Margin - Individual Sides
CSS has properties for specifying the margin for each 
side of an element:
margin-top
margin-right
margin-bottom
margin-left
All the margin properties can have the following values:
auto - the browser calculates the margin
length
- specifies a margin in px, pt, cm, etc.
%
- specifies a margin in % of the width of the containing element
inherit - specifies that the margin should be inherited from the parent element
Tip:
Negative values are allowed.
Example
Set different margins for all four sides of a <p> element:
p {
margin-top: 100px;
margin-bottom: 100px;
margin-right: 150px;
margin-left: 80px;
}
Try it Yourself 
Margin - Shorthand Property
To shorten the code, it is possible to specify all the margin properties in 
one property.
The
margin
property is a shorthand property for the following individual margin properties:
margin-top
margin-right
margin-bottom
margin-left
So, here is how it works:
If the
margin
property has four values:
margin: 25px 50px 75px 100px;
top margin is 25px
right margin is 50px
bottom margin is 75px
left margin is 100px
Example
Use the margin shorthand property with four values:
p {
margin: 25px 50px 75px 100px;
}
Try it Yourself 
If the
margin
property has three values:
margin: 25px 50px 75px;
top margin is 25px
right and left margins are 50px
bottom margin is 75px
Example
Use the margin shorthand property with three values:
p {
margin: 25px 50px 75px;
}
Try it Yourself 
If the
margin
property has two values:
margin: 25px 50px;
top and bottom margins are 25px
right and left margins are 50px
Example
Use the margin shorthand property with two values:
p {
margin: 25px 50px;
}
Try it Yourself 
If the
margin
property has one value:
margin: 25px;
all four margins are 25px
Example
Use the margin shorthand property with one value:
p {
margin: 25px;
}
Try it Yourself 
The auto Value
You can set the margin property to
auto
to horizontally center the element within its container.
The element will then take up the specified width, and the remaining space 
will be split equally between the left and right margins.
Example
Use margin: auto:
div {
width: 300px;
margin: 
auto;
border: 1px solid red;
}
Try it Yourself 
The inherit Value
This example lets the left margin of the <p class="ex1"> element be inherited from the parent element 
(<div>):
Example
Use of the inherit value:
div {
border: 1px solid red;
margin-left: 100px;
}
p.ex1 {
margin-left: 
inherit;
}
Try it Yourself 
All CSS Margin Properties
Property
Description
margin
A shorthand property for setting all the margin properties in one declaration
margin-bottom
Sets the bottom margin of an element
margin-left
Sets the left margin of an element
margin-right
Sets the right margin of an element
margin-top
Sets the top margin of an element
CSS
Text
CSS has a lot of properties for formatting text.
text formatting
This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties.
The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored
"Try it Yourself"
link.
Try it Yourself 
Text Color
The
color
property is used to set the color of the text. 
The color is specified by:
a color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at
CSS Color Values
for a complete list of possible color values.
The default text color for a page is defined in the body selector.
Example
body {
color: blue;
}
h1 {
color: green;
}
Try it Yourself 
Text Color and Background Color
In this example, we define both the
background-color
property and the
color
property:
Example
body {
background-color: lightgrey;
color: blue;
}
h1 {
background-color: black;
color: white;
}
div {
background-color: blue;
color: white;
}
Try it Yourself 
The CSS Text Color Property
Property
Description
color
Specifies the color of text
CSS
Icons
Icons can easily be added to your HTML page, by using an icon library.
How To Add Icons
The simplest way to add an icon to your HTML page, is with an icon library, 
such as Font Awesome.
Add the name of the specified icon class to any inline HTML element (like
<i>
or
<span>
).
All the icons in the icon libraries below, are scalable vectors that can 
be customized with CSS (size, color, shadow, etc.)
Font Awesome Icons
To use the Font Awesome icons, go to
fontawesome.com
, sign in, and get a code to add in the
<head>
section of your HTML page:
<script src="https://kit.fontawesome.com/
yourcode
.js" crossorigin="anonymous"></script>
Read more about how to get started with Font Awesome in our
Font 
Awesome 5 tutorial
.
Note:
No downloading or installation is required!
Example
<!DOCTYPE html>
<html>
<head>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body>
<i class="fas fa-cloud"></i>
<i  class="fas fa-heart"></i>
<i class="fas fa-car"></i>
<i class="fas fa-file"></i>
<i class="fas fa-bars"></i>
</body>
</html>
Result:
Try It Yourself 
Bootstrap Icons
To use the Bootstrap glyphicons, add the following line inside the
<head>
section of your HTML page:
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
Note:
No downloading or installation is required!
Example
<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
</head>
<body>
<i class="glyphicon glyphicon-cloud"></i>
<i class="glyphicon  glyphicon-remove"></i>
<i class="glyphicon glyphicon-user"></i>
<i  class="glyphicon glyphicon-envelope"></i>
<i class="glyphicon glyphicon-thumbs-up"></i>
</body>
</html>
Result:
Try It Yourself 
Google Icons
To use the Google icons, add the following line inside the
<head>
section of your HTML page:
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
Note:
No downloading or installation is required!
Example
<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
</head>
<body>
<i class="material-icons">cloud</i>
<i  class="material-icons">favorite</i>
<i  class="material-icons">attachment</i>
<i  class="material-icons">computer</i>
<i  class="material-icons">traffic</i>
</body>
</html>
Result:
Try It Yourself 
CSS
Outline
An outline is a line drawn outside the element's border.
This element has a black border and a green outline with a width of 10px.
Try it Yourself 
CSS Outline
An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
CSS has the following outline properties:
outline-style
outline-color
outline-width
outline-offset
outline
CSS Outline Style
The
outline-style
property specifies the style of the outline, 
and can have one of the following values:
dotted
- Defines a dotted outline
dashed
- Defines a dashed outline
solid
- Defines a solid outline
double
- Defines a double outline
groove
- Defines a 3D grooved outline
ridge
- Defines a 3D ridged outline
inset
- Defines a 3D inset outline
outset
- Defines a 3D outset outline
none
- Defines no outline
hidden
- Defines a hidden outline
The following example shows the different
outline-style
values:
Example
Demonstration of the different outline styles:
p.dotted {outline-style: dotted;}
p.dashed {outline-style: dashed;}
p.solid {outline-style: solid;}
p.double {outline-style: double;}
p.groove {outline-style: groove;}
p.ridge {outline-style: ridge;}
p.inset {outline-style: inset;}
p.outset {outline-style: outset;}
Result:
A dotted outline.
A dashed outline.
A solid outline.
A double outline.
A groove outline. The effect depends on the outline-color value.
A ridge outline. The effect depends on the outline-color value.
An inset outline. The effect depends on the outline-color value.
An outset outline. The effect depends on the outline-color value.
Try it Yourself 
CSS
Margin Collapse
Sometimes two margins collapse into a single margin.
Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single 
margin that is equal to the largest of the two margins.
This does not happen on left and right margins! Only top and bottom margins!
Look at the following example:
Example
Demonstration of margin collapse:
h1 {
margin: 0 0 50px 0;
}
h2 {
margin: 20px 0 0 0;
}
Try it Yourself 
In the example above, the <h1> element has a bottom margin of 50px and 
the <h2> 
element has a top margin set to 20px.
Common sense would seem to suggest that the vertical margin between the <h1> 
and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, 
the actual margin ends up being 50px.
Test Yourself With Exercises
Exercise:
Add a 20 pixels left margin to the <h1> element.
<style>
h1 {
: 20px;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
All CSS Margin Properties
Property
Description
margin
A shorthand property for setting all the margin properties in one declaration
margin-bottom
Sets the bottom margin of an element
margin-left
Sets the left margin of an element
margin-right
Sets the right margin of an element
margin-top
Sets the top margin of an element
CSS
Syntax
A CSS rule consists of a selector and a declaration block.
CSS Syntax
The selector points to the HTML element you want to style.
The declaration block contains one or more declarations separated by 
semicolons.
Each declaration includes a CSS property name and a value, separated by a colon.
Multiple CSS declarations are separated with semicolons, and declaration 
blocks are surrounded by curly braces.
Example
In this example all <p> elements will be center-aligned, with a red 
text color:
p
{
color: red;
text-align: center;
}
Try it Yourself 
Example Explained
p
is a selector in CSS (it points to the HTML element you want to style: 
<p>).
color
is a property, and
red
is the property value
text-align
is a property, and
center
is the property value
Video: CSS Syntax
CSS
Border Color
CSS Border Color
The
border-color
property is used to set the color of the four borders.
The color can be set by:
name - specify a color name, like "red"
HEX - specify a HEX value, like "#ff0000"
RGB - specify a RGB value, like "rgb(255,0,0)"
HSL - specify a HSL value, like "hsl(0, 100%, 50%)"
transparent
Note:
If
border-color
is not set, it inherits the color of the element.
Example
Demonstration of the different border colors:
p.one
{
border-style: solid;
border-color: red;
}
p.two
{
border-style: solid;
border-color: green;
}
p.three {
border-style: dotted;
border-color: 
  blue;
}
Result:
Red border
Green border
Blue border
Try it Yourself 
Specific Side Colors
The
border-color
property can have from one to four values (for 
the top border, right border, bottom border, and the left border).
Example
p.one {
border-style: solid;
border-color: red green blue yellow; 
  /* red top, green right, blue bottom and yellow left */
}
Try it Yourself 
HEX Values
The color of the border can also be specified using a hexadecimal value (HEX):
Example
p.one {
border-style: solid;
border-color: #ff0000; /* red 
  */
}
Try it Yourself 
RGB Values
Or by using RGB values:
Example
p.one {
border-style: solid;
border-color: rgb(255, 0, 0); 
  /* red */
}
Try it Yourself 
HSL Values
You can also use HSL values:
Example
p.one {
border-style: solid;
border-color: hsl(0, 100%, 50%); 
  /* red */
}
Try it Yourself 
CSS
Units
CSS Units
CSS has several different units for expressing a length.
Many CSS properties take "length" values, such as
width
,
margin
,
padding
,
font-size
, etc.
Length
is a number followed by a length unit, such as
10px
,
2em
, etc.
Example
Set different length values, using px (pixels):
h1 {
font-size: 60px;
}
p {
font-size: 25px;
line-height: 50px;
}
Try it Yourself 
Note:
A whitespace cannot appear between the number and the unit. However, if the value is
0
, the unit can be omitted.
For some CSS properties, negative lengths are allowed.
There are two types of length units:
absolute
and
relative
.
Absolute Lengths
The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.
Absolute length units are not recommended for use on screen, because screen sizes vary so much. 
However, they can be used if the output medium is known, such 
as for print layout.
Unit
Description
cm
centimeters
Try it
mm
millimeters
Try it
in
inches (1in = 96px = 2.54cm)
Try it
px *
pixels (1px = 1/96th of 1in)
Try it
pt
points (1pt = 1/72 of 1in)
Try it
pc
picas (1pc = 12 pt)
Try it
* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution 
screens 1px implies multiple device pixels.
Relative Lengths
Relative length units specify a length relative to another length property. 
Relative length units scale better between different rendering mediums.
Unit
Description
em
Relative to the font-size of the element (2em means 2 times the size of the current font)
Try it
ex
Relative to the x-height of the current font (rarely used)
Try it
ch
Relative to width of the "0" (zero)
Try it
rem
Relative to font-size of the root element
Try it
vw
Relative to 1% of the width of the viewport*
Try it
vh
Relative to 1% of the height of the viewport*
Try it
vmin
Relative to 1% of viewport's* smaller dimension
Try it
vmax
Relative to 1% of viewport's* larger dimension
Try it
%
Relative to the parent element
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the 
length unit.
Length Unit
em, ex, %, px, cm, mm, in, pt, pc
1.0
3.0
1.0
1.0
3.5
ch
27.0
9.0
1.0
7.0
20.0
rem
4.0
9.0
3.6
4.1
11.6
vh, vw
20.0
9.0
19.0
6.0
20.0
vmin
20.0
12.0
19.0
6.0
20.0
vmax
26.0
16.0
19.0
7.0
20.0
CSS
2D Transforms
CSS 2D Transforms
CSS transforms allow you to move, rotate, scale, and skew elements.
Mouse over the element below to see a 2D transformation:
2D rotate
In this chapter you will learn about the following CSS property:
transform
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform
36.0
10.0
16.0
9.0
23.0
CSS 2D Transforms Methods
With the CSS
transform
property you can use 
the following 2D transformation methods:
translate()
rotate()
scaleX()
scaleY()
scale()
skewX()
skewY()
skew()
matrix()
The translate() Method
The
translate()
method moves an element from its current position (according 
to the parameters given for the X-axis and the Y-axis).
The following example moves the <div> element 50 pixels to the right, 
and 100 pixels down from its current position:
Example
div
{
transform: translate(50px, 100px);
}
Try it Yourself 
The rotate() Method
The
rotate()
method rotates an element clockwise or counter-clockwise according to a given degree.
The following example rotates the <div> element clockwise with 20 degrees:
Example
div
{
transform: rotate(20deg);
}
Try it Yourself 
Using negative values will rotate the element counter-clockwise.
The following example rotates the <div> element counter-clockwise with 20 degrees:
Example
div
{
transform: rotate(-20deg);
}
Try it Yourself 
The scale() Method
The
scale()
method increases or decreases the size of an element (according to the parameters given for the width and height).
The following example increases the <div> element to be two times of its original width, and three times of its original height:
Example
div
{
transform: scale(2, 3);
}
Try it Yourself 
The following example decreases the <div> element to be half of its original width and height:
Example
div
{
transform: scale(0.5, 0.5);
}
Try it Yourself 
The scaleX() Method
The
scaleX()
method increases or decreases the 
width of an element.
The following example increases the <div> element to be two times of its original width:
Example
div
{
transform: scaleX(2);
}
Try it Yourself 
The following example decreases the <div> element to be half of its original width:
Example
div
{
transform: scaleX(0.5);
}
Try it Yourself 
The scaleY() Method
The
scaleY()
method increases or decreases the 
height of an element.
The following example increases the <div> element to be three times of its original 
height:
Example
div
{
transform: scaleY(3);
}
Try it Yourself 
The following example decreases the <div> element to be half of its original 
height:
Example
div
{
transform: scaleY(0.5);
}
Try it Yourself 
The skewX() Method
The
skewX()
method skews an element along the X-axis by the given angle.
The following example skews the <div> element 20 degrees along the 
X-axis:
Example
div
{
transform: skewX(20deg);
}
Try it Yourself 
The skewY() Method
The
skewY()
method skews an element along the Y-axis by the given angle.
The following example skews the <div> element 20 degrees along the Y-axis:
Example
div
{
transform: skewY(20deg);
}
Try it Yourself 
The skew() Method
The
skew()
method skews an element along the X and Y-axis by the given angles.
The following example skews the <div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis:
Example
div
{
transform: skew(20deg, 10deg);
}
Try it Yourself 
If the second parameter is not specified, it has a zero value. So, the following example skews the <div> element 20 degrees along the X-axis:
Example
div
{
transform: skew(20deg);
}
Try it Yourself 
The matrix() Method
The
matrix()
method combines all the 2D transform methods into one.
The matrix() method take six parameters, containing mathematic functions, 
which allows you to rotate, scale, move (translate), and skew elements.
The parameters are as follow: matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
Example
div
{
transform: matrix(1, -0.3, 0, 1, 0, 0);
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
With the
transform
property, move the <div> element 100px to the right, and 200px down.
<style>
div {
  width: 100px;
  height: 100px;
  background-color: lightblue;
  border: 1px solid black;
:
;
}
</style>

<body>
  <div>This is a div</div>
</body>
Submit Answer 
Start the Exercise
CSS Transform Properties
The following table lists all the 2D transform properties:
Property
Description
transform
Applies a 2D or 3D transformation to an element
transform-origin
Allows you to change the position on transformed elements
CSS 2D Transform Methods
Function
Description
matrix(
n,n,n,n,n,n
)
Defines a 2D transformation, using a matrix of six values
translate(
x,y
)
Defines a 2D translation, moving the element along the X- and the Y-axis
translateX(
n
)
Defines a 2D translation, moving the element along the X-axis
translateY(
n
)
Defines a 2D translation, moving the element along the Y-axis
scale(
x,y
)
Defines a 2D scale transformation, changing the elements width and height
scaleX(
n
)
Defines a 2D scale transformation, changing the element's width
scaleY(
n
)
Defines a 2D scale transformation, changing the element's height
rotate(
angle
)
Defines a 2D rotation, the angle is specified in the parameter
skew(
x-angle,y-angle
)
Defines a 2D skew transformation along the X- and the Y-axis
skewX(
angle
)
Defines a 2D skew transformation along the X-axis
skewY(
angle
)
Defines a 2D skew transformation along the Y-axis
CSS
3D Transforms
CSS 3D Transforms
CSS also supports 3D transformations.
Mouse over the elements below to see the difference between a 2D 
and a 3D transformation:
2D rotate
3D rotate
In this chapter you will learn about the following CSS property:
transform
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform
36.0
10.0
16.0
9.0
23.0
CSS 3D Transforms Methods
With the CSS
transform
property you can use 
the following 3D transformation methods:
rotateX()
rotateY()
rotateZ()
The rotateX() Method
The
rotateX()
method rotates an element around its X-axis at a given degree:
Example
#myDiv
{
transform: rotateX(150deg);
}
Try it Yourself 
The rotateY() Method
The
rotateY()
method rotates an element around its Y-axis at a given degree:
Example
#myDiv
{
transform: rotateY(150deg);
}
Try it Yourself 
The rotateZ() Method
The
rotateZ()
method rotates an element around its Z-axis at a given degree:
Example
#myDiv
{
transform: rotateZ(90deg);
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
With the
transform
property, rotate the <div> element 150deg around its X-axis..
<style>
div {
  width: 100px;
  height: 100px;
  background-color: lightblue;
  border: 1px solid black;
:
;
}
</style>

<body>
  <div>This is a div</div>
</body>
Submit Answer 
Start the Exercise
CSS Transform Properties
The following table lists all the 3D transform properties:
Property
Description
transform
Applies a 2D or 3D transformation to an element
transform-origin
Allows you to change the position on transformed elements
transform-style
Specifies how nested elements are rendered in 3D space
perspective
Specifies the perspective on how 3D elements are viewed
perspective-origin
Specifies the bottom position of 3D elements
backface-visibility
Defines whether or not an element should be visible when not facing the screen
CSS 3D Transform Methods
Function
Description
matrix3d
(
n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n
)
Defines a 3D transformation, using a 4x4 matrix of 16 values
translate3d(
x,y,z
)
Defines a 3D translation
translateX(
x
)
Defines a 3D translation, using only the value for the X-axis
translateY(
y
)
Defines a 3D translation, using only the value for the Y-axis
translateZ(
z
)
Defines a 3D translation, using only the value for the Z-axis
scale3d(
x,y,z
)
Defines a 3D scale transformation
scaleX(
x
)
Defines a 3D scale transformation by giving a value for the X-axis
scaleY(
y
)
Defines a 3D scale transformation by giving a value for the Y-axis
scaleZ(
z
)
Defines a 3D scale transformation by giving a value for the Z-axis
rotate3d(
x,y,z,angle
)
Defines a 3D rotation
rotateX(
angle
)
Defines a 3D rotation along the X-axis
rotateY(
angle
)
Defines a 3D rotation along the Y-axis
rotateZ(
angle
)
Defines a 3D rotation along the Z-axis
perspective(
n
)
Defines a perspective view for a 3D transformed element
CSS
The object-fit Property
The CSS
object-fit
property is used to specify how an
<img> or <video> should be resized to fit its container.
The CSS object-fit Property
The CSS
object-fit
property is used to specify how an <img> or <video> should 
be resized to fit its container.
This property tells the content to fill the container in a variety of ways; such as 
"preserve that aspect ratio" or "stretch up and take up as much space as 
possible".
Look at the following image from Paris. This image is 400 pixels wide and 300 pixels high:
However, if we style the image above to be half its width (200 pixels) and 
same height (300 pixels), it will look like this:
Example
img {
width: 200px;
height: 
  300px;
}
Try it Yourself 
We see that the image is being squished to fit the container of 200x300 pixels 
(its original aspect ratio is destroyed).
Here is where the
object-fit
property comes 
in. The
object-fit
property can take one of the 
following values:
fill
- This is default. The image is resized to fill the 
  given dimension. If necessary, the image will be stretched or squished to fit
contain
- The image 
keeps its aspect ratio, but is resized to fit within the given dimension
cover
- The image keeps its aspect ratio 
  and fills the given dimension. The image will be clipped to fit
none
- The image is not resized
scale-down
- the image is 
  scaled down to the smallest version of
none
or
contain
Using object-fit: cover;
If we use
object-fit: cover;
the image keeps its aspect ratio 
and fills the given dimension. The image will be clipped to fit:
Example
img {
width: 200px;
height: 
  300px;
object-fit: cover;
}
Try it Yourself 
Using object-fit: contain;
If we use
object-fit: contain;
the image 
keeps its aspect ratio, but is resized to fit within the given dimension:
Example
img {
width: 200px;
height: 
  300px;
object-fit: contain;
}
Try it Yourself 
Using object-fit: fill;
If we use
object-fit: fill;
the image is 
resized to fill the given dimension. If necessary, the image will be 
stretched or squished to fit:
Example
img {
width: 200px;
height: 
  300px;
object-fit: fill;
}
Try it Yourself 
Using object-fit: none;
If we use
object-fit: none;
the image is not 
resized:
Example
img {
width: 200px;
height: 
  300px;
object-fit: none;
}
Try it Yourself 
Using object-fit: scale-down;
If we use
object-fit: scale-down;
the image is 
scaled down to the smallest version of
none
or
contain
:
Example
img {
width: 200px;
height: 
  300px;
object-fit: scale-down;
}
Try it Yourself 
Another Example
Here we have two images and we want them to fill the width of 50% of the browser window and 100% of the height.
In the following example we do NOT use
object-fit
, so when we resize the browser window, the aspect ratio of the images will be destroyed:
Example
Try it Yourself 
In the next example, we use
object-fit: cover;
, so when we resize the browser window, the aspect ratio of the images 
is preserved:
Example
Try it Yourself 
CSS object-fit More Examples
The following example demonstrates all the possible values of the
object-fit
property 
in one example:
Example
.fill {object-fit: fill;}
.contain {object-fit: contain;}
.cover {object-fit: cover;}
.scale-down {object-fit: scale-down;}
.none {object-fit: none;}
Try it Yourself 
CSS Object-* Properties
The following table lists the CSS object-* properties:
Property
Description
object-fit
Specifies how an <img> or <video> should be resized to fit its container
object-position
Specifies how an <img> or <video> should be positioned with x/y 
    coordinates inside its "own content box"
CSS
Transitions
CSS Transitions
CSS transitions allows you to change property values smoothly, over a given duration.
Mouse over the element below to see a CSS transition effect:
CSS
In this chapter you will learn about the following properties:
transition
transition-delay
transition-duration
transition-property
transition-timing-function
Browser Support for Transitions
The numbers in the table specify the first browser version that fully supports the property.
Property
transition
26.0
10.0
16.0
6.1
12.1
transition-delay
26.0
10.0
16.0
6.1
12.1
transition-duration
26.0
10.0
16.0
6.1
12.1
transition-property
26.0
10.0
16.0
6.1
12.1
transition-timing-function
26.0
10.0
16.0
6.1
12.1
How to Use CSS Transitions?
To create a transition effect, you must specify two things:
the CSS property you want to add an effect to
the duration of the effect
Note:
If the duration part is not specified, the transition will have no effect, because the default value is 0.
The following example shows a 100px * 100px red <div> element. The <div> 
element has also specified a transition effect for the width property, with a duration of 2 seconds:
Example
div
{
width: 100px;
height: 100px;
background: red;
transition: width 2s;
}
The transition effect will start when the specified CSS property (width) changes value.
Now, let us specify a new value for the width property when a user mouses over the <div> element:
Example
div:hover
{
width: 300px;
}
Try it Yourself 
Notice that when the cursor mouses out of the element, it will gradually change back to its original style.
Change Several Property Values
The following example adds a transition effect for both the width and height property, with a duration 
of 2 seconds for the width and 4 seconds for the height:
Example
div
{
transition: width 2s, height 4s;
}
Try it Yourself 
Specify the Speed Curve of the Transition
The
transition-timing-function
property specifies the speed curve of the transition effect.
The transition-timing-function property can have the following values:
ease
- specifies a transition effect with a slow start, then fast, then end slowly (this is default)
linear
- specifies a transition effect with the same speed from start to end
ease-in
- specifies a transition effect with a slow start
ease-out
- specifies a transition effect with a slow end
ease-in-out
- specifies a transition effect with a slow start and end
cubic-bezier(n,n,n,n)
- lets you define your own values in a cubic-bezier function
The following example shows some of the different speed curves that can be used:
Example
#div1 {transition-timing-function: linear;}
#div2 
{transition-timing-function: ease;}
#div3 {transition-timing-function: 
ease-in;}
#div4 {transition-timing-function: ease-out;}
#div5 
{transition-timing-function: ease-in-out;}
Try it Yourself 
Delay the Transition Effect
The
transition-delay
property specifies a delay (in seconds) for the transition effect.
The following example has a 1 second delay before starting:
Example
div {
transition-delay: 1s;
}
Try it Yourself 
Transition + Transformation
The following example adds a transition effect to the transformation:
Example
div {
transition: 
width 2s, height 2s, transform 2s;
}
Try it Yourself 
More Transition Examples
The CSS transition properties can be specified one by one, like this:
Example
div
{
transition-property: width;
transition-duration: 2s;
transition-timing-function: linear;
transition-delay: 1s;
}
Try it Yourself 
or by using the shorthand property
transition
:
Example
div
{
transition: width 2s linear 1s;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Add a 2 second transition effect for width changes of the <div> element.
<style>
div {
  width: 100px;
  height: 100px;
  background: red;
:
;
}

div:hover {
  width: 300px;
}
</style>

<body>
  <div>This is a div</div>
</body>
Submit Answer 
Start the Exercise
CSS Transition Properties
The following table lists all the CSS transition properties:
Property
Description
transition
A shorthand property for setting the four transition properties into a single property
transition-delay
Specifies a delay (in seconds) for the transition effect
transition-duration
Specifies how many seconds or milliseconds a transition effect takes to complete
transition-property
Specifies the name of the CSS property the transition effect is for
transition-timing-function
Specifies the speed curve of the transition effect
CSS
Image Reflection
In this chapter you will learn how to reflect an image.
CSS Image Reflections
The
box-reflect
property is used to create an image reflection.
The value of the
box-reflect
property 
can be:
below
,
above
,
left
, or
right
.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a 
prefix.
Property
box-reflect
4.0-webkit-
79.0-webkit-
Not supported
4.0-webkit-
15.0-webkit-
Examples
Example
Here we want the reflection below the image:
img {
-webkit-box-reflect: below;
}
Try it Yourself 
Example
Here we want the reflection to the right of the image:
img {
-webkit-box-reflect: right;
}
Try it Yourself 
CSS Reflection Offset
To specify the gap between the image and the reflection, add the size of the 
gap to the
box-reflect
property.
Example
Here we want the reflection below the image, with a 20px offset:
img {
-webkit-box-reflect: below 20px;
}
Try it Yourself 
CSS Reflection With Gradient
We can also create a fade-out effect on the reflection.
Example
Create a fade-out effect on the reflection:
img {
-webkit-box-reflect: below 0px linear-gradient(to bottom, rgba(0,0,0,0.0), 
   rgba(0,0,0,0.4));
}
Try it Yourself 
CSS
Tooltip
Create tooltips with CSS.
Demo: Tooltip Examples
A tooltip is often used to specify extra information about something when the 
user moves the mouse pointer over an element:
Top
Tooltip text
Right
Tooltip text
Bottom
Tooltip text
Left
Tooltip text
Basic Tooltip
Create a tooltip that appears when the user moves the mouse over an element:
Example
<style>
/* Tooltip container */
.tooltip {
position: relative;
display: inline-block;
border-bottom: 1px dotted 
black; /* If you want dots under the hoverable text */
}
/* Tooltip text 
*/
.tooltip .tooltiptext {
visibility: hidden;
width: 120px;
background-color: black;
color: #fff;
text-align: center;
padding: 5px 0;
border-radius: 6px;
/* Position the tooltip text - see examples below! */
position: absolute;
z-index: 1;
}
/* Show 
the tooltip text when you mouse over the tooltip container */
.tooltip:hover 
.tooltiptext {
visibility: visible;
}
</style>
<div class="tooltip">
Hover 
over me
<span class="tooltiptext">
Tooltip 
text
</span>
</div>
Try it Yourself 
Example Explained
HTML:
Use a container element (like <div>) and add the
"tooltip"
class to it. When the user mouse over this <div>, it will show the 
tooltip text.
The tooltip text is placed inside an inline element (like <span>) with
class="tooltiptext"
.
CSS:
The
tooltip
class use
position:relative
, 
which is needed to position the tooltip text (
position:absolute
).
Note:
See examples below on how to position the tooltip.
The
tooltiptext
class holds the actual tooltip text. It is 
hidden by default, and will be visible on hover (see below). We have also added 
some basic styles to it: 120px width, black background color, white text color, 
centered text, and 5px top and bottom padding.
The CSS
border-radius
property is used to add rounded corners to the tooltip 
text.
The
:hover
selector is used to show the tooltip text when the user moves the 
mouse over the <div> with
class="tooltip"
.
Positioning Tooltips
In this example, the tooltip is placed to the right (
left:105%
) of the "hoverable" 
text (<div>). Also note that
top:-5px
is used to place it in the middle of its container element. 
We use the number
5
because the tooltip text has a top and 
bottom padding of 
5px. If you increase its padding, also increase the value of the
top
property to 
ensure that it stays in the middle (if this is something you want). The same 
applies if you want the tooltip placed to the left.
Right Tooltip
.tooltip .tooltiptext {
top: -5px;
left: 
105%;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
Left Tooltip
.tooltip .tooltiptext {
top: -5px;
right: 
105%;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
If you want the tooltip to appear on top or on the bottom, see examples 
below. Note that we use the
margin-left
property with a value of minus 60 
pixels. This is to center the tooltip above/below the hoverable text. It is set 
to the half of the tooltip's width (120/2 = 60).
Top Tooltip
.tooltip .tooltiptext {
width: 120px;
bottom: 100%;
left: 
50%;
margin-left: -60px; /* Use half of the width 
(120/2 = 60), to center the tooltip */
}
Result:
Hover over me
Tooltip text
Try it Yourself 
Bottom Tooltip
.tooltip .tooltiptext {
width: 120px;
top: 100%;
left: 
50%;
margin-left: -60px; /* Use half of the width 
(120/2 = 60), to center the tooltip */
}
Result:
Hover over me
Tooltip text
Try it Yourself 
Tooltip Arrows
To create an arrow that should appear from a specific side of the tooltip, add "empty" 
content after 
tooltip, with the pseudo-element class
::after
together with the
content
property. The arrow itself is created using borders. This will make the tooltip 
look like a speech bubble.
This example demonstrates how to add an arrow to the bottom of the tooltip:
Bottom Arrow
.tooltip .tooltiptext::after {
content: " ";
position: absolute;
top: 100%; 
/* At the bottom of the tooltip */
left: 50%;
margin-left: -5px;
border-width: 5px;
border-style: solid;
border-color: black transparent transparent transparent;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
Example Explained
Position the arrow inside the tooltip:
top: 100%
will place the arrow at the 
bottom of the tooltip.
left: 50%
will center the arrow.
Note:
The
border-width
property specifies the size of the 
arrow. If you change this, also change the
margin-left
value to the same. This 
will keep the arrow centered.
The
border-color
is used to transform the content into an arrow. We set the 
top border to black, and the rest to transparent. If all sides were black, you 
would end up with a black square box.
This example demonstrates how to add an arrow to the top of the tooltip. 
Notice that we set the bottom border color this time:
Top Arrow
.tooltip .tooltiptext::after {
content: " ";
position: absolute;
bottom: 100%; /* At the top of the tooltip */
left: 50%;
margin-left: -5px;
border-width: 5px;
border-style: solid;
border-color: transparent transparent black transparent;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
This example demonstrates how to add an arrow to the left of the tooltip:
Left Arrow
.tooltip .tooltiptext::after {
content: " ";
position: absolute;
top: 50%;
right: 100%; /* To the left of the tooltip 
*/
margin-top: -5px;
border-width: 5px;
border-style: solid;
border-color: transparent black transparent transparent;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
This example demonstrates how to add an arrow to the right of the tooltip:
Right Arrow
.tooltip .tooltiptext::after {
content: " ";
position: absolute;
top: 50%;
left: 100%; /* To the right of the 
tooltip */
margin-top: -5px;
border-width: 5px;
border-style: solid;
border-color: transparent transparent transparent black;
}
Result:
Hover over me
Tooltip text
Try it Yourself 
Fade In Tooltips (Animation)
If you want to fade in the tooltip text when it is about to be visible, you 
can use the CSS
transition
property together with the
opacity
property, and go from being completely invisible to 100% visible, in a number of specified seconds 
(1 second in our example):
Example
.tooltip .tooltiptext {
opacity: 0;
transition: opacity 1s;
}
.tooltip:hover 
.tooltiptext {
opacity: 1;
}
Try it Yourself 
CSS
The object-position Property
The CSS
object-position
property 
is used to specify how an <img> or <video> should be positioned 
within its container.
The Image
Look at the following image from Paris, which is 400x300 pixels:
Next, we use
object-fit: cover;
to keep the 
aspect ratio and to fill the given dimension. However, the image will be clipped to fit, 
like this:
Example
img {
width: 200px;
height: 
  300px;
object-fit: cover;
}
Try it Yourself 
Using the object-position Property
Let's say that the part of the image that is shown, is not positioned as we want. To 
position the image, we will use the
object-position
property.
Here we will use the
object-position
property 
to position the image so that the great old building is in 
center:
Example
img {
width: 200px;
height: 
  300px;
object-fit: cover;
object-position: 80% 100%;
}
Try it Yourself 
Here we will use the
object-position
property 
to position the image so that the famous Eiffel Tower is in 
center:
Example
img {
width: 200px;
height: 
  300px;
object-fit: cover;
object-position: 15% 100%;
}
Try it Yourself 
CSS Object-* Properties
The following table lists the CSS object-* properties:
Property
Description
object-fit
Specifies how an <img> or <video> should be resized to fit its container
object-position
Specifies how an <img> or <video> should be positioned with x/y 
    coordinates inside its "own content box"
CSS
Background Image Repeat
CSS background-repeat
By default, the
background-image
property repeats an image both horizontally and vertically.
Some images should be repeated only horizontally or vertically, or they will look strange, like this:
Example
body
{
background-image: url("gradient_bg.png");
}
Try it Yourself 
If the image above is repeated only horizontally (
background-repeat: repeat-x;
), the background will look 
better:
Example
body
{
background-image: url("gradient_bg.png");
background-repeat: repeat-x;
}
Try it Yourself 
CSS background-repeat: no-repeat
Showing the background image only once is also specified by the
background-repeat
property:
Example
Show the background image only once:
body
{
background-image: url("img_tree.png");
background-repeat: no-repeat;
}
Try it Yourself 
In the example above, the background image is placed in the same place as the text. We want to change the position of the image, so that it does not 
disturb the text too much.
CSS background-position
The
background-position
property is used to 
specify the position of the background image.
Example
Position the background image in the top-right corner:
body
{
background-image: url("img_tree.png");
background-repeat: no-repeat;
background-position: right top;
}
Try it Yourself 
The CSS Background Repeat and Position Properties
Property
Description
background-position
Sets the starting position of a background image
background-repeat
Sets how a background image will be repeated
Video: CSS Background Repeat and Position
CSS
Web Fonts
The CSS @font-face Rule
Web fonts allow Web designers to use fonts that are not installed on the user's computer.
When you have found/bought the font you wish to use, just include the font 
file on your web server, and it will be automatically downloaded to the user when needed.
Your "own" fonts are defined within the CSS
@font-face
rule.
Different Font Formats
TrueType Fonts (TTF)
TrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft 
Windows operating systems.
OpenType Fonts (OTF)
OpenType is a format for scalable computer fonts. It was built on TrueType, 
and is a registered trademark of 
Microsoft. OpenType fonts are used commonly today on the major 
computer platforms.
The Web Open Font Format (WOFF)
WOFF is a font format for use in web pages. It was developed in 2009, and is 
now a W3C Recommendation. WOFF is essentially OpenType or TrueType with 
compression and additional metadata. The goal is to support font distribution 
from a server to a client over a network with bandwidth constraints.
The Web Open Font Format (WOFF 2.0)
TrueType/OpenType font that provides better compression than WOFF 1.0.
SVG Fonts/Shapes
SVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 
specification define a font module that allows the creation of fonts within an 
SVG document. You can also apply CSS to SVG documents, and the @font-face rule 
can be applied to text in SVG documents.
Embedded OpenType Fonts (EOT)
EOT fonts are a compact form of OpenType fonts designed by Microsoft for use 
as embedded fonts on web pages.
Browser Support for Font Formats
The numbers in the table specifies the first browser version that fully supports the 
font format.
Font format
TTF/OTF
9.0*
4.0
3.5
3.1
10.0
WOFF
9.0
5.0
3.6
5.1
11.1
WOFF2
14.0
36.0
39.0
10.0
26.0
SVG
Not supported
Not supported
Not supported
3.2
Not supported
EOT
6.0
Not supported
Not supported
Not supported
Not supported
*IE: The font format only works when set to be "installable".
Using The Font You Want
In the
@font-face
rule; first define a name for the font (e.g. myFirstFont) and then point to the font file.
To use the font for an HTML element, refer to the name of the font (myFirstFont) through the
font-family
property:
Example
@font-face
{
font-family: myFirstFont;
src: url(sansation_light.woff);
}
div
{
font-family: myFirstFont;
}
Try it Yourself 
Using Bold Text
You must add another
@font-face
rule containing descriptors for bold text:
Example
@font-face
{
font-family: myFirstFont;
src: url(sansation_bold.woff);
font-weight: bold;
}
Try it Yourself 
The file "sansation_bold.woff" is another font file, that contains the bold characters for the Sansation font.
Browsers will use this whenever a piece of text with the font-family "myFirstFont" should render as bold.
This way you can have many
@font-face
rules for the same font.
Test Yourself With Exercises
Exercise:
Add a web font with the name "sansation" and the URL "sansation_light.woff".
<style>
{
  font-family:
;
:
;
}

body {
  font-family: sansation;
}
</style>

<body>
  <h1>This is a heading</h1>
  <p>This is a paragraph</p>
  <p>This is a paragraph</p>
</body>
Submit Answer 
Start the Exercise
CSS Font Descriptors
The following table lists all the font descriptors that can be defined inside the
@font-face
rule:
Descriptor
Values
Description
font-family
name
Required. Defines a name for the font
src
URL
Required. Defines the URL of the font file
font-stretch
normal
condensed
ultra-condensed
extra-condensed
semi-condensed
expanded
semi-expanded
extra-expanded
ultra-expanded
Optional. Defines how the font should be stretched. Default is 
"normal"
font-style
normal
italic
oblique
Optional. Defines how the font should be styled. Default is 
"normal"
font-weight
normal
bold
100
200
300
400
500
600
700
800
900
Optional. Defines the boldness of the font. Default is "normal"
unicode-range
unicode-range
Optional. Defines the range of UNICODE characters the font supports. 
Default is "U+0-10FFFF"
CSS
Colors
Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.
CSS Color Names
In CSS, a color can be specified by using a predefined color name:
Tomato
Orange
DodgerBlue
MediumSeaGreen
Gray
SlateBlue
Violet
LightGray
Try it Yourself 
CSS/HTML support
140 standard color names
.
CSS Background Color
You can set the background color for HTML elements:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.
Example
<h1 style="background-color:DodgerBlue;">Hello World</h1>
<p style="background-color:Tomato;">Lorem 
  ipsum...</p>
Try it Yourself 
CSS Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.
Example
<h1 style="color:Tomato;">Hello 
  World</h1>
<p style="color:DodgerBlue;">Lorem 
  ipsum...</p>
<p style="color:MediumSeaGreen;">Ut wisi 
  enim...</p>
Try it Yourself 
CSS Border Color
You can set the color of borders:
Hello World
Hello World
Hello World
Example
<h1 style="border:2px 
  solid Tomato;">Hello 
  World</h1>
<h1 style="border:2px 
  solid DodgerBlue;">Hello 
  World</h1>
<h1 style="border:2px 
  solid Violet;">Hello 
  World</h1>
Try it Yourself 
CSS Color Values
In CSS, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values:
Same as color name "Tomato":
rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)
Same as color name "Tomato", but 50% transparent:
rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)
Example
<h1 style="background-color:rgb(255, 
  99, 71);">...</h1>
<h1 style="background-color:#ff6347;">...</h1>
<h1 style="background-color:hsl(9, 
  100%, 64%);">...</h1>
<h1 style="background-color:rgba(255, 
  99, 71, 0.5);">...</h1>
<h1 style="background-color:hsla(9, 
  100%, 64%, 0.5);">...</h1>
Try it Yourself 
Video: CSS Colors Introduction
CSS
Box Model
All HTML elements can be considered as boxes.
The CSS Box Model
In CSS, the term "box model" is used when talking about design and layout.
The CSS box model is essentially a box that wraps around every HTML element. 
It consists of: content, padding, borders and margins. The image below illustrates the box model:
Explanation of the different parts:
Content
- The content of the box, where text and images appear
Padding
- Clears an area around the content. The padding is transparent
Border
- A border that goes around the padding and content
Margin
- Clears an area outside the border. The margin is 
transparent
The box model allows us to add a border around elements, and to define space 
between elements.
Example
Demonstration of the box model:
div {
width: 300px;
border: 15px solid 
green;
padding: 50px;
margin: 20px;
}
Try it Yourself 
Width and Height of an Element
In order to set the width and height of an element correctly in all browsers, you need to know how the box model works.
Example
This <div> element will have a total width of 350px and a total height 
of 80px:
div {
width: 320px;
height: 50px;
padding: 10px;
border: 5px solid gray;
margin: 0;
}
Try it Yourself 
Here is the calculation:
320px (width of content area)
+ 20px (left padding + right padding)
+ 10px (left border + right border)
= 350px (total width)
50px (height of content area)
+ 20px (top padding + bottom padding)
+ 10px (top border + bottom border)
= 80px (total height)
The total width of an element should be calculated like this:
Total element width = width + left padding + right padding + left border + right border
The total height of an element should be calculated like this:
Total element height = height + top padding + bottom padding + top border + bottom border
Test Yourself With Exercises
Exercise:
Set the width of the <div> element to "200px".
<style>
{
:
;
}
</style>

<body>

<div>
Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.
</div>

</body>
Submit Answer 
Start the Exercise
CSS Change Variables With JavaScript
Change Variables With JavaScript
CSS variables have access to the DOM, which means that you can change them with JavaScript.
Here is an example of how you can create a script to display and change the --blue variable from the example used in the previous pages. 
For now, do not worry if you are not familiar with JavaScript. You can learn 
more about JavaScript in our
JavaScript Tutorial
:
Example
<script>
// Get the root element
var r = document.querySelector(':root');
// Create a function for getting a variable value
function 
  myFunction_get() {
// Get the styles (properties and values) for the 
  root
var rs = getComputedStyle(r);
// Alert the value of 
  the --blue variable
alert("The value of --blue is: " + 
  rs.getPropertyValue('--blue'));
}
// Create a function for setting a 
  variable value
function myFunction_set() {
// Set the value of 
  variable --blue to another value (in this case "lightblue")
r.style.setProperty('--blue', 'lightblue');
}
</script>
Try it Yourself 
Browser Support
The numbers in the table specify the first browser version that fully supports the
var()
function.
Function
var()
49.0
15.0
31.0
9.1
36.0
CSS var() Function
Property
Description
var()
Inserts the value of a CSS variable
CSS Overriding Variables
Override Global Variable With Local Variable
From the previous page we have learned that global variables can be accessed/used through the entire document, while 
local variables can be used only inside the selector where it is declared.
Look at the example from the previous page:
Example
:root {
--blue: #1e90ff;
--white: #ffffff;
}
body {
background-color: var(--blue);
}
h2 {
border-bottom: 2px solid var(--blue);
}
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Sometimes we want the variables to change only in a specific section of the page.
Assume we want a different color of blue for button elements. Then, we can 
re-declare the --blue variable inside the button selector. When we use var(--blue) 
inside this selector, it will use the local --blue variable value declared here.
We see that the local --blue variable will override the global --blue 
variable for the button elements:
Example
:root {
--blue: #1e90ff;
--white: #ffffff;
}
body {
background-color: var(--blue);
}
h2 {
border-bottom: 2px solid var(--blue);
}
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
--blue: #0000ff; /* local variable will 
  override global */
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Add a New Local Variable
If a variable is to be used at only one single place, we could also have declared a new local variable, like this:
Example
:root {
--blue: #1e90ff;
--white: #ffffff;
}
body {
background-color: var(--blue);
}
h2 {
border-bottom: 2px solid var(--blue);
}
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
--button-blue: #0000ff; /* new local 
  variable */
background-color: var(--white);
color: var(--button-blue);
border: 1px solid var(--button-blue);
padding: 5px;
}
Try it Yourself 
Browser Support
The numbers in the table specify the first browser version that fully supports the
var()
function.
Function
var()
49.0
15.0
31.0
9.1
36.0
CSS var() Function
Property
Description
var()
Inserts the value of a CSS variable
CSS Variables - The var() Function
CSS Variables
The
var()
function is used to insert the value of a 
CSS variable.
CSS variables have access to the DOM, which means that you can create 
variables with local or global scope, change the variables with JavaScript, and 
change the variables based on media queries.
A good way to use CSS variables is when it comes to the colors of your 
design. Instead of copy and paste the same colors over and over again, you can 
place them in variables.
The Traditional Way
The following example shows the traditional way of defining some colors in a style sheet 
(by defining the colors to use, for each specific element):
Example
body { background-color: #1e90ff; }
h2 { border-bottom: 2px solid #1e90ff; }
.container {
color: 
  #1e90ff;
background-color: #ffffff;
padding: 15px;
}
button {
background-color: #ffffff;
color: #1e90ff;
border: 1px 
  solid #1e90ff;
padding: 5px;
}
Try it Yourself 
Syntax of the var() Function
The
var()
function is used to insert the value of a 
CSS variable.
The syntax of the
var()
function is as follows:
var(--
name, value
)
Value
Description
name
Required. The variable name (must start with two 
    dashes)
value
Optional. The fallback value (used if the variable is not found)
Note:
The variable name must begin with two dashes (--) and it is case sensitive!
How var() Works
First of all: CSS variables can have a global or local scope.
Global variables can be accessed/used through the entire document, while 
local variables can be used only inside the selector where it is declared.
To create a variable with global scope, declare it inside the
:root
selector. The
:root
selector matches the document's root element.
To create a variable with local scope, declare it inside the selector that is going to use it.
The following example is equal to the example above, but here we use the
var()
function.
First, we declare two global variables (--blue and --white). Then, we use the
var()
function to insert the value of the variables later in the style sheet:
Example
:root {
--blue: #1e90ff;
--white: #ffffff;
}
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Advantages of using var() are:
makes the code easier to read (more understandable)
makes it much easier to change the color values
To change the blue and white color to a softer blue and white, you just need 
to change the two variable values:
Example
:root {
--blue: #6495ed;
--white: #faf0e6;
}
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Browser Support
The numbers in the table specify the first browser version that fully supports the
var()
function.
Function
var()
49.0
15.0
31.0
9.1
36.0
CSS var() Function
Property
Description
var()
Inserts the value of a CSS variable
CSS
Pagination Examples
Learn how to create a responsive pagination using CSS.
Simple Pagination
If you have a website with lots of pages, you may wish to add some sort of 
pagination to each page:

1
2
3
4
5
6



Example
.pagination {
display: inline-block;
}
.pagination a {
color: 
black;
float: left;
padding: 8px 
16px;
text-decoration: none;
}
Try it Yourself 
Active and Hoverable Pagination

1
2
3
4
5
6
7

Highlight the current page with an
.active
class, and use the
:hover
selector to change the color of each page link when moving the mouse over them:
Example
.pagination a.active {
background-color: 
#4CAF50;
color: white;
}
.pagination a:hover:not(.active) {background-color: #ddd;}
Try it Yourself 
Rounded Active and Hoverable Buttons

1
2
3
4
5
6
7

Add the
border-radius
property if you want a rounded "active" and "hover" button:
Example
.pagination a {
border-radius: 5px;
}
.pagination a.active {
border-radius: 5px;
}
Try it Yourself 
Hoverable Transition Effect

1
2
3
4
5
6
7

Add the
transition
property to the page links to create a transition effect on hover:
Example
.pagination a {
transition: background-color .3s;
}
Try it Yourself 
Bordered Pagination

1
2
3
4
5
6
7

Use the
border
property to add borders to the pagination:
Example
.pagination a {
border: 1px solid #ddd; /* Gray 
*/
}
Try it Yourself 
Rounded Borders
Tip:
Add rounded borders to your first and last link in the 
pagination:

1
2
3
4
5
6
7

Example
.pagination a:first-child {
border-top-left-radius: 
5px;
border-bottom-left-radius: 5px;
}
.pagination 
  a:last-child {
border-top-right-radius: 5px;
border-bottom-right-radius: 5px;
}
Try it Yourself 
Space Between Links
Tip:
Add the
margin
property if you do not want to group the page links:

1
2
3
4
5
6
7

Example
.pagination a {
margin: 0 4px; /* 0 is for top 
and bottom. Feel free to change it */
}
Try it Yourself 
Pagination Size

1
2
3
4
5
6
7

Change the size of the pagination with the
font-size
property:
Example
.pagination a {
font-size: 22px;
}
Try it Yourself 
Centered Pagination

1
2
3
4
5
6
7

To center the pagination, wrap a container element (like <div>) around it with
text-align:center
Example
.center {
text-align: center;
}
Try it Yourself 
More Examples
Example
Try it Yourself 
Breadcrumbs
Home
Pictures
Summer 15
Italy
Another variation of pagination is so-called "breadcrumbs":
Example
ul.breadcrumb {
padding: 8px 16px;
list-style: none;
background-color: #eee;
}
ul.breadcrumb li {display: inline;}
ul.breadcrumb li+li:before {
padding: 8px;
color: black;
content: "/\00a0";
}
Try it Yourself 
CSS
Flexbox
1
2
3
4
5
6
7
8
Try it Yourself 
CSS Flexbox Layout Module
Before the Flexbox Layout module, there were four layout modes:
Block, for sections in a webpage
Inline, for text
Table, for two-dimensional table data
Positioned, for explicit position of an element
The Flexible Box Layout Module, makes it easier to design 
flexible responsive layout structure without using float or positioning.
Browser Support
The flexbox properties are supported in all modern browsers.
29.0
11.0
22.0
10
48
Flexbox Elements
To start using the Flexbox model, you need to first define a flex container.
1
2
3
The element above represents a flex container (the blue area) with three flex items.
Example
A flex container with three flex items:
<div 
  class="flex-container">
<div>1</div>
<div>2</div>
<div>3</div>
</div>
Try it Yourself 
CSS
Multiple Columns
CSS Multi-column Layout
The CSS multi-column layout allows easy definition of multiple columns of 
text - just like in newspapers:
Daily Ping
Lorem ipsum
dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet
dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit
lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit
esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim
qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta
nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum.
CSS Multi-column Properties
In this chapter you will learn about the following multi-column properties:
column-count
column-gap
column-rule-style
column-rule-width
column-rule-color
column-rule
column-span
column-width
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-count
50.0
10.0
52.0
9.0
37.0
column-gap
50.0
10.0
52.0
9.0
37.0
column-rule
50.0
10.0
52.0
9.0
37.0
column-rule-color
50.0
10.0
52.0
9.0
37.0
column-rule-style
50.0
10.0
52.0
9.0
37.0
column-rule-width
50.0
10.0
52.0
9.0
37.0
column-span
50.0
10.0
71.0
9.0
37.0
column-width
50.0
10.0
52.0
9.0
37.0
CSS Create Multiple Columns
The
column-count
property specifies the number of columns an element should 
be divided into.
The following example will divide the text in the <div> element into 3 
columns:
Example
div
{
column-count: 3;
}
Try it Yourself 
CSS Specify the Gap Between Columns
The
column-gap
property specifies the gap between the columns.
The following example specifies a 40 pixels gap between the columns:
Example
div
{
column-gap: 40px;
}
Try it Yourself 
CSS Column Rules
The
column-rule-style
property specifies the style of the rule between 
columns:
Example
div
{
column-rule-style: solid;
}
Try it Yourself 
The
column-rule-width
property specifies the width of the rule between columns:
Example
div
{
column-rule-width: 1px;
}
Try it Yourself 
The
column-rule-color
property specifies the color of the rule between columns:
Example
div
{
column-rule-color: lightblue;
}
Try it Yourself 
The
column-rule
property is a shorthand property for setting all the column-rule-* properties above.
The following example sets the width, style, and color of the rule between columns:
Example
div
{
column-rule: 1px solid lightblue;
}
Try it Yourself 
Specify How Many Columns an Element Should Span
The
column-span
property specifies how many columns an element should span across.
The following example specifies that the <h2> element should span across all columns:
Example
h2 {
column-span: all;
}
Try it Yourself 
Specify The Column Width
The
column-width
property specifies a suggested, optimal width for the columns.
The following example specifies that the suggested, optimal width for the columns 
should be 100px:
Example
div {
column-width: 100px;
}
Try it Yourself 
CSS Multi-columns Properties
The following table lists all the multi-columns properties:
Property
Description
column-count
Specifies the number of columns an element should be divided into
column-fill
Specifies how to fill columns
column-gap
Specifies the gap between the columns
column-rule
A shorthand property for setting all the column-rule-* properties
column-rule-color
Specifies the color of the rule between columns
column-rule-style
Specifies the style of the rule between columns
column-rule-width
Specifies the width of the rule between columns
column-span
Specifies how many columns an element should span across
column-width
Specifies a suggested, optimal width for the columns
columns
A shorthand property for setting column-width and column-count
CSS Using Variables in Media Queries
Using Variables in Media Queries
Now we want to change a variable value inside a media query.
Here, we first declare a new local variable named --fontsize for the
.container
class. We set its value to 25 pixels. Then we use it in the
.container
class further down. Then, we create a
@media
rule that says "When the browser's width 
is 450px or wider, change the --fontsize variable value of the
.container
class to 50px."
Here is the complete example:
Example
/* Variable declarations */
:root {
--blue: #1e90ff;
--white: #ffffff;
}
.container {
--fontsize: 25px;
}
/* Styles */
body {
background-color: var(--blue);
}
h2 {
border-bottom: 2px solid var(--blue);
}
.container 
  {
color: var(--blue);
background-color: var(--white);
padding: 15px;
font-size: var(--fontsize);
}
@media screen and (min-width: 
  450px) {
.container {
--fontsize: 50px;
}
}
Try it Yourself 
Here is another example where we also change the value of the --blue variable 
in the
@media
rule:
Example
/* Variable declarations */
:root {
--blue: #1e90ff;
--white: #ffffff;
}
.container {
--fontsize: 25px;
}
/* Styles */
body {
background-color: var(--blue);
}
h2 {
border-bottom: 2px solid var(--blue);
}
.container 
  {
color: var(--blue);
background-color: var(--white);
padding: 15px;
font-size: var(--fontsize);
}
@media screen and (min-width: 
  450px) {
.container {
--fontsize: 50px;
}
:root {
--blue: lightblue;
}
}
Try it Yourself 
Browser Support
The numbers in the table specify the first browser version that fully supports the
var()
function.
Function
var()
49.0
15.0
31.0
9.1
36.0
CSS var() Function
Property
Description
var()
Inserts the value of a CSS variable
CSS
Box Sizing
CSS Box Sizing
The CSS
box-sizing
property allows us to include the padding and border in 
an element's total width and height.
Without the CSS box-sizing Property
By default, the width and height of an element is calculated like this:
width + padding + border = actual width of an element
height + padding + border = actual height of an element
This means: When you set the width/height of an element, the element often appears 
bigger than you have set (because the element's border and padding are added to the element's specified width/height).
The following illustration shows two <div> elements with the same 
specified width and height:
This div is smaller (width is 300px and height is 100px).
This div is bigger (width is also 300px and height is 100px).
The two <div> elements above end up with different sizes in the result 
(because div2 has a padding 
specified):
Example
.div1 {
width: 300px;
height: 
100px;
border: 1px solid blue;
}
.div2 {
width: 300px;
height: 100px;
padding: 50px;
border: 1px solid red;
}
Try it Yourself 
The
box-sizing
property solves 
this problem.
With the CSS box-sizing Property
The
box-sizing
property allows us to include the padding and border in 
an element's total width and height.
If you set
box-sizing: border-box;
on an element, padding and border are 
included in the width and height:
Both divs are the same size now!
Hooray!
Here is the same example as above, with
box-sizing: border-box;
added to both <div> elements:
Example
.div1 {
width: 300px;
height: 
100px;
border: 1px solid blue;
box-sizing: border-box;
}
.div2 {
width: 300px;
height: 100px;
padding: 50px;
border: 1px solid red;
box-sizing: border-box;
}
Try it Yourself 
Since the result of using the
box-sizing: border-box;
is so much better, many developers want all elements on their 
pages to work this way.
The code below ensures that all elements are sized in this more intuitive way. 
Many browsers already use
box-sizing: border-box;
for 
many form elements (but not all - which is why 
inputs and text areas look different at width: 100%;).
Applying this to all elements is safe and wise:
Example
* {
box-sizing: border-box;
}
Try it Yourself 
CSS Box Sizing Property
Property
Description
box-sizing
Defines how the width and height of an element are calculated: should 
    they include padding and borders, or not
CSS
Buttons
Learn how to style buttons using CSS.
Basic Button Styling
Default Button
CSS Button
Example
.button {
background-color: #04AA6D; /* Green */
border: none;
color: white;
padding: 15px 32px;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 16px;
}
Try it Yourself 
Button Colors
Green
Blue
Red
Gray
Black
Use the
background-color
property to change the background color of 
a 
button:
Example
.button1 {background-color: #04AA6D;} /* Green */
.button2 
{background-color: #008CBA;} /* Blue */
.button3 {background-color: 
#f44336;} /* Red */
.button4 {background-color: #e7e7e7; color: black;} /* Gray */
.button5 
{background-color: #555555;} /* Black */
Try it Yourself 
Button Sizes
10px
12px
16px
20px
24px
Use the
font-size
property to change the font size of a button:
Example
.button1 {font-size: 10px;}
.button2 {font-size: 12px;}
.button3 
{font-size: 16px;}
.button4 {font-size: 20px;}
.button5 {font-size: 24px;}
Try it Yourself 
Use the
padding
property to change the padding of a button:
10px 24px
12px 28px
14px 40px
32px 16px
16px
Example
.button1 {padding: 10px 
24px;}
.button2 {padding: 12px 28px;}
.button3 {padding: 14px 40px;}
.button4 {padding: 32px 16px;}
.button5 {padding: 16px;}
Try it Yourself 
Rounded Buttons
2px
4px
8px
12px
50%
Use the
border-radius
property to add rounded corners to a button:
Example
.button1 {border-radius: 2px;}
.button2 {border-radius: 4px;}
.button3 
{border-radius: 8px;}
.button4 {border-radius: 12px;}
.button5 {border-radius: 50%;}
Try it Yourself 
Colored Button Borders
Green
Blue
Red
Gray
Black
Use the
border
property to add a colored border to a button:
Example
.button1 {
background-color: white;
color: black;
border: 2px solid #04AA6D; /* Green */
}
...
Try it Yourself 
Hoverable Buttons
Green
Blue
Red
Grey
Black
Green
Blue
Red
Grey
Black
Use the
:hover
selector to change the style of a button when you move the 
mouse over it.
Tip:
Use the
transition-duration
property to determine the 
speed of the "hover" effect:
Example
.button {
transition-duration: 0.4s;
}
.button:hover {
background-color: #04AA6D; /* Green */
color: white;
}
...
Try it Yourself 
Shadow Buttons
Shadow Button
Shadow on hover
Use the
box-shadow
property to add shadows to a button:
Example
.button1 {
box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 
rgba(0,0,0,0.19);
}
.button2:hover {
box-shadow: 0 12px 
16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
}
Try it Yourself 
Disabled Buttons
Normal Button
Disabled Button
Use the
opacity
property to add transparency to a button (creates a 
"disabled" look).
Tip:
You can also add the
cursor
property with a value of 
"not-allowed", which will display a "no parking sign" when you mouse over the 
button:
Example
.disabled {
opacity: 0.6;
cursor: not-allowed;
}
Try it Yourself 
Button Width
250px
50%
100%
By default, the size of the button is determined by its text content (as wide as its 
content). Use the
width
property to change the width of a button:
Example
.button1 {width: 250px;}
.button2 {width: 50%;}
.button3 {width: 
100%;}
Try it Yourself 
Button Groups
Button
Button
Button
Button
Remove margins and add
float:left
to each button to create a button group:
Example
.button {
float: left;
}
Try it Yourself 
Bordered Button Group
Button
Button
Button
Button
Use the
border
property to create a bordered button 
group:
Example
.button {
float: left;
border: 1px 
solid green;
}
Try it Yourself 
Vertical Button Group
Button
Button
Button
Button
Use
display:block
instead of
float:left
to group the buttons below each other, instead of side by side:
Example
.button {
display: block;
}
Try it Yourself 
Button on Image
Button
Try it Yourself 
Animated Buttons
Example
Add an arrow on hover:
Hover
Try it Yourself 
Example
Add a "pressed" effect on click:
Click
Try it Yourself 
Example
Fade in on hover:
Fade In
Try it Yourself 
Example
Add a "ripple" effect on click:
Click
Try it Yourself 
CSS
Flexbox
1
2
3
4
5
6
7
8
Try it Yourself 
CSS Flexbox Layout Module
Before the Flexbox Layout module, there were four layout modes:
Block, for sections in a webpage
Inline, for text
Table, for two-dimensional table data
Positioned, for explicit position of an element
The Flexible Box Layout Module, makes it easier to design 
flexible responsive layout structure without using float or positioning.
Browser Support
The flexbox properties are supported in all modern browsers.
29.0
11.0
22.0
10
48
Flexbox Elements
To start using the Flexbox model, you need to first define a flex container.
1
2
3
The element above represents a flex container (the blue area) with three flex items.
Example
A flex container with three flex items:
<div 
  class="flex-container">
<div>1</div>
<div>2</div>
<div>3</div>
</div>
Try it Yourself 
Responsive Web Design -
Grid-View
What is a Grid-View?
Many web pages are based on a grid-view, which means that the page is divided into columns:
Using a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page.
A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.
Example: Responsive Grid View
Building a Responsive Grid-View
Lets start building a responsive grid-view.
First ensure that all HTML elements have the
box-sizing
property set to
border-box
. 
This makes sure that the padding and border are included in the total width and height of 
the elements.
Add the following code in your CSS:
* {
box-sizing: border-box;
}
Read more about the
box-sizing
property in our
CSS Box Sizing
chapter.
The following example shows a simple responsive web page, with two columns:
25%
75%
Example
.menu {
width: 25%;
float: left;
}
.main {
width: 75%;
float: left;
}
Try it Yourself 
The example above is fine if the web page only contains two columns.
However, we want to use a responsive grid-view with 12 columns, to have more 
control over the web page.
First we must calculate the percentage for one column: 100% / 12 columns = 
8.33%.
Then we 
make one class for each of the 12 columns,
class="col-"
and a number 
defining how many columns the section should span:
CSS:
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 
100%;}
Try it Yourself 
All these columns should be floating to the left, and have a padding of 15px:
CSS:
[class*="col-"] {
float: left;
padding: 15px;
border: 1px solid red;
}
Each row should be wrapped in a
<div>
. The number of columns 
inside a row should always add up to 12:
HTML:
<div class="row">
<div class="col-3">...</div> <!-- 25% -->
<div class="col-9">...</div> <!-- 75% -->
</div>
The columns inside a row are all floating to the left, and are therefore 
taken out of the flow of the page, and other elements will be placed as if the columns do not exist. To prevent this, we will 
add a style that clears the flow:
CSS:
.row::after {
content: "";
clear: both;
display: table;
}
We also want to add some styles and colors to make it look better:
Example
html {
font-family: "Lucida Sans", sans-serif;
}
.header {
background-color: #9933cc;
color: #ffffff;
padding: 15px;
}
.menu ul {
list-style-type: none;
margin: 0;
padding: 0;
}
.menu li {
padding: 8px;
margin-bottom: 7px;
background-color :#33b5e5;
color: #ffffff;
box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}
.menu li:hover {
background-color: #0099cc;
}
Try it Yourself 
Responsive Web Design -
Introduction
What is Responsive Web Design?
Responsive web design makes your web page look good on all devices.
Responsive web design uses only HTML and CSS.
Responsive web design is not a program or a JavaScript.
Designing For The Best Experience For All Users
Web pages can be viewed using many different devices: desktops, tablets, and phones.
Your web page should look good, and be easy to use, regardless of the device.
Web pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device:
Desktop
Tablet
Phone
It is called responsive web design when you use CSS and HTML to resize, hide, shrink, enlarge, or move the content to make it look good on any screen.
Don't worry if you don't understand the example below, we will break down the code, step-by-step, in the next chapters:
Try it Yourself 
CSS
Flex
Responsive
Responsive Flexbox
You learned from the
CSS Media Queries
chapter that you can use media queries to create different layouts for different screen sizes and devices.
Laptop and Desktops:
1
2
3
Mobile
phones
and Tablets:
1
2
3
For example, if you want to create a two-column layout for most screen sizes, and 
a one-column layout for small screen sizes (such as phones 
and tablets), you can change the
flex-direction
from
row
to
column
at a specific breakpoint (800px in the example below):
Example
.flex-container {
display: flex;
flex-direction: row;
}
/* Responsive layout - makes a one column layout instead of a two-column 
  layout */
@media (max-width: 800px) {
.flex-container {
flex-direction: column;
}
}
Try it Yourself 
Another way is to change the percentage of the
flex
property of the flex items 
to create different layouts for different screen sizes. Note that we 
also have to include
flex-wrap: wrap;
on the flex container for this example to 
work:
Example
.flex-container {
display: flex;
flex-wrap: wrap;
}
.flex-item-left {
flex: 50%;
}
.flex-item-right {
flex: 50%;
}
/* Responsive layout - makes a one column layout instead of a two-column 
  layout */
@media (max-width: 800px) {
.flex-item-right, 
  .flex-item-left {
flex: 100%;
}
}
Try it Yourself 
Responsive Image Gallery using Flexbox
Use flexbox to create a responsive image gallery that varies between four, 
two or full-width images, depending on screen size:
Try it Yourself 
Responsive Website using Flexbox
Use flexbox to create a responsive website, containing a flexible navigation bar and flexible content:
Try it Yourself 
CSS
Flex
Items
Child Elements (Items)
The direct child elements of a flex container automatically becomes flexible (flex) items.
1
2
3
4
The element above represents four blue flex items inside a grey flex container.
Example
<div class="flex-container">
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
</div>
Try it Yourself 
The flex item properties are:
order
flex-grow
flex-shrink
flex-basis
flex
align-self
The order Property
The
order
property specifies the order of 
the flex items.
1
2
3
4
The first flex item in the code does not have to appear as the first item in the layout.
The order value must be a number, default value is 0.
Example
The
order
property can change the order of the flex items:
<div class="flex-container">
<div style="order: 3">1</div>
<div style="order: 2">2</div>
<div style="order: 4">3</div>
<div style="order: 1">4</div>
</div>
Try it Yourself 
The flex-grow Property
The
flex-grow
property specifies how much a flex item will grow relative to the rest of the flex items.
1
2
3
The value must be a number, default value is 0.
Example
Make the third flex item grow eight times faster than the other flex items:
<div class="flex-container">
<div style="flex-grow: 1">1</div>
<div style="flex-grow: 1">2</div>
<div style="flex-grow: 
  8">3</div>
</div>
Try it Yourself 
The flex-shrink Property
The
flex-shrink
property specifies how much a flex item will shrink relative to the rest of the flex items.
1
2
3
4
5
6
7
8
9
10
The value must be a number, default value is 1.
Example
Do not let the third flex item shrink as much as the other flex items:
<div class="flex-container">
<div>1</div>
<div>2</div>
<div style="flex-shrink: 
  0">3</div>
<div>4</div>
<div>5</div>
<div>6</div>
<div>7</div>
<div>8</div>
<div>9</div>
<div>10</div>
</div>
Try it Yourself 
The flex-basis Property
The
flex-basis
property specifies the initial length of a flex item.
1
2
3
4
Example
Set the initial length of the third flex item to 200 pixels:
<div class="flex-container">
<div>1</div>
<div>2</div>
<div style="flex-basis: 200px">3</div>
<div>4</div>
</div>
Try it Yourself 
The flex Property
The
flex
property is a shorthand property for the
flex-grow
,
flex-shrink
, and
flex-basis
properties.
Example
Make the third flex item not growable (0), not shrinkable (0), and with an 
initial length of 200 pixels:
<div class="flex-container">
<div>1</div>
<div>2</div>
<div style="flex: 
  0 0 200px">3</div>
<div>4</div>
</div>
Try it Yourself 
The align-self Property
The
align-self
property specifies the 
alignment for the selected item inside the flexible container.
The
align-self
property overrides the default alignment set by the 
container's
align-items
property.
1
2
3
4
In these examples we use a 200 pixels high container, to better demonstrate the
align-self
property:
Example
Align the third flex item in the middle of the container:
<div class="flex-container">
<div>1</div>
<div>2</div>
<div style="align-self: 
  center">3</div>
<div>4</div>
</div>
Try it Yourself 
Example
Align the second flex item at the top of the container, and the third flex item at the 
bottom of the container:
<div class="flex-container">
<div>1</div>
<div style="align-self: 
  flex-start">2</div>
<div style="align-self: 
  flex-end">3</div>
<div>4</div>
</div>
Try it Yourself 
The CSS Flexbox Items Properties
The following table lists all the CSS Flexbox Items properties:
Property
Description
align-self
Specifies the alignment for a flex item (overrides the flex container's align-items property)
flex
A shorthand property for the flex-grow, flex-shrink, and the flex-basis 
    properties
flex-basis
Specifies the initial length of a flex item
flex-grow
Specifies how much a flex item will grow relative to the rest of the flex items inside the same container
flex-shrink
Specifies how much a flex item will shrink relative to the rest of the flex items inside the same container
order
Specifies the order of the flex items inside the same container
CSS
Flex
Container
Parent Element (Container)
Like we specified in the previous chapter, this is a flex
container
(the blue area) with three flex
items
:
1
2
3
The flex container becomes flexible by setting the
display
property to
flex
:
Example
.flex-container {
display: flex;
}
Try it Yourself 
The flex container properties are:
flex-direction
flex-wrap
flex-flow
justify-content
align-items
align-content
The flex-direction Property
The
flex-direction
property defines in which direction the container 
wants to stack the flex items.
1
2
3
Example
The
column
value stacks the flex items vertically (from top to bottom):
.flex-container {
display: flex;
flex-direction: column;
}
Try it Yourself 
Example
The
column-reverse
value stacks the flex items vertically (but from bottom to top):
.flex-container {
display: flex;
flex-direction: column-reverse;
}
Try it Yourself 
Example
The
row
value stacks the flex items horizontally (from left to right):
.flex-container {
display: flex;
flex-direction: row;
}
Try it Yourself 
Example
The
row-reverse
value stacks the flex items horizontally (but from right to left):
.flex-container {
display: flex;
flex-direction: row-reverse;
}
Try it Yourself 
The flex-wrap Property
The
flex-wrap
property specifies whether the 
flex items should wrap or not.
The examples below have 12 flex items, to better demonstrate the
flex-wrap
property.
1
2
3
4
5
6
7
8
9
10
11
12
Example
The
wrap
value specifies that the flex items will wrap if necessary:
.flex-container {
display: flex;
flex-wrap: wrap;
}
Try it Yourself 
Example
The
nowrap
value specifies that the flex items will not wrap (this 
is default):
.flex-container {
display: flex;
flex-wrap: nowrap;
}
Try it Yourself 
Example
The
wrap-reverse
value specifies that the flexible items will wrap 
if necessary, in reverse order:
.flex-container {
display: flex;
flex-wrap: wrap-reverse;
}
Try it Yourself 
The flex-flow Property
The
flex-flow
property is a shorthand property for setting both the
flex-direction
and
flex-wrap
properties.
Example
.flex-container {
display: flex;
flex-flow: row wrap;
}
Try it Yourself 
The justify-content Property
The
justify-content
property is used to 
align the flex items:
1
2
3
Example
The
center
value aligns the flex items at the center of the container:
.flex-container {
display: flex;
justify-content: center;
}
Try it Yourself 
Example
The
flex-start
value aligns the flex items at the beginning of the container 
(this is default):
.flex-container {
display: flex;
justify-content: flex-start;
}
Try it Yourself 
Example
The
flex-end
value aligns the flex items at the end of the container:
.flex-container {
display: flex;
justify-content: flex-end;
}
Try it Yourself 
Example
The
space-around
value displays the flex items with space before, between, 
and after the lines:
.flex-container {
display: flex;
justify-content: space-around;
}
Try it Yourself 
Example
The
space-between
value displays the flex items with space between the 
lines:
.flex-container {
display: flex;
justify-content: space-between;
}
Try it Yourself 
The align-items Property
The
align-items
property is used to align 
the flex items.
1
2
3
In these examples we use a 200 pixels high container, to better demonstrate the
align-items
property.
Example
The
center
value aligns the flex items in the middle of the 
container:
.flex-container {
display: flex;
height: 200px;
align-items: center;
}
Try it Yourself 
Example
The
flex-start
value aligns the flex items at the top of the container:
.flex-container {
display: flex;
height: 200px;
align-items: flex-start;
}
Try it Yourself 
Example
The
flex-end
value aligns the flex items at the bottom of the container:
.flex-container {
display: flex;
height: 200px;
align-items: flex-end;
}
Try it Yourself 
Example
The
stretch
value stretches the flex items to fill the container 
(this is default):
.flex-container {
display: flex;
height: 200px;
align-items: stretch;
}
Try it Yourself 
Example
The
baseline
value aligns the flex items such as their baselines aligns:
.flex-container {
display: flex;
height: 200px;
align-items: baseline;
}
Note:
the example uses different font-size to demonstrate that the items gets aligned by the text baseline:
1
2
3
4
Try it Yourself 
The align-content Property
The
align-content
property is used to align the flex lines.
1
2
3
4
5
6
7
8
9
10
11
12
In these examples we use a 600 pixels high container, with the
flex-wrap
property set to
wrap
, to better demonstrate the
align-content
property.
Example
The
space-between
value displays the flex lines with equal space between them:
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: space-between;
}
Try it Yourself 
Example
The
space-around
value displays the flex lines with space before, 
between, and after them:
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: space-around;
}
Try it Yourself 
Example
The
stretch
value stretches the flex lines to take up the remaining 
space (this is default):
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: stretch;
}
Try it Yourself 
Example
The
center
value displays the flex lines in the middle of the container:
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: center;
}
Try it Yourself 
Example
The
flex-start
value displays the flex lines at the start of the container:
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: flex-start;
}
Try it Yourself 
Example
The
flex-end
value displays the flex lines at the end of the container:
.flex-container {
display: flex;
height: 600px;
flex-wrap: wrap;
align-content: flex-end;
}
Try it Yourself 
Perfect Centering
In the following example we will solve a very common style problem: perfect 
centering.
SOLUTION:
Set both the
justify-content
and
align-items
properties to
center
, and the flex item will be perfectly centered:
Example
.flex-container {
display: flex;
height: 300px;
justify-content: 
  center;
align-items: center;
}
Try it Yourself 
The CSS Flexbox Container Properties
The following table lists all the CSS Flexbox Container properties:
Property
Description
align-content
Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
align-items
Vertically aligns the flex items when the items do not use all available space on the cross-axis
display
Specifies the type of box used for an HTML element
flex-direction
Specifies the direction of the flexible items inside a flex container
flex-flow
A shorthand property for flex-direction and flex-wrap
flex-wrap
Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
justify-content
Horizontally aligns the flex items when the items do not use all available space on the main-axis
CSS
Media Queries
CSS Media Queries
The
@media
rule, introduced in CSS2, made it possible to define different style rules for different media types.
Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, 
they look at the capability of the 
device.
Media queries can be used to check many things, such as:
width and height of the viewport
orientation of the viewport (landscape or portrait)
resolution
Using media queries are a popular technique for delivering a tailored style 
sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).
CSS Media Types
Value
Description
all
Used for all media type devices
print
Used for print preview mode
screen
Used for computer screens, tablets, smart-phones etc.
CSS Common Media Features
Here are some commonly used media features:
Value
Description
orientation
Orientation of the viewport. Landscape or portrait
max-height
Maximum height of the viewport
min-height
Minimum height of the viewport
height
Height of the viewport (including scrollbar)
max-width
Maximum width of the viewport
min-width
Minimum width of the viewport
width
Width of the viewport (including scrollbar)
Media Query Syntax
A media query consists of a media type and can contain one or more 
media features, which resolve to either true or false.
@media not|only
mediatype
and
(
media feature
) 
  and
(
media feature
) {
CSS-Code;
}
The
mediatype
is optional (if omitted, it will be set to all). However, if you use
not
or
only
, you must also specify a
mediatype
.
The result of the query is 
true if the specified media type matches the type of device the document is 
being displayed on and all media features in the media query are true. When a media query is true, the corresponding style sheet or style rules are 
applied, following the normal cascading rules.
You can also link to different stylesheets for different media and different 
widths of the browser window (viewport):
<link rel="stylesheet" media="print" href="print.css">
<link rel="stylesheet" media="screen" href="screen.css">
<link rel="stylesheet" media="screen and (min-width: 
  480px)" 
href="example1.css">
<link rel="stylesheet" media="screen and (min-width: 
  701px) and (max-width: 900px)" href="example2.css">
etc....
Media Queries Simple Examples
One way to use media queries is to have an alternate CSS section right inside your style sheet.
The following example changes the background-color to lightgreen if the 
viewport is 480 pixels wide or wider (if the viewport is less than 
480 pixels, the background-color will be pink):
Example
@media screen and (min-width: 480px) {
body {
background-color: lightgreen;
}
}
Try it Yourself 
The following example shows a menu that will float to the left of the page if 
the viewport is 480 pixels wide or wider (if the viewport is less than 
480 pixels, the menu will be on top of the content):
Example
@media screen and (min-width: 480px) {
#leftsidebar 
{width: 200px; float: left;}
#main 
{margin-left: 216px;}
}
Try it Yourself 
CSS @media Reference
For a full overview of all the media types and features/expressions, please look at the
@media rule in our CSS reference
.
CSS
Media Queries - Examples
CSS Media Queries - More Examples
Let us look at some more examples of using media queries.
Media queries are a popular technique for delivering a tailored style sheet to different devices. To demonstrate a simple example, we can change the background color for different devices:
Example
/* Set the background color of body to tan */
body {
background-color: tan;
}
/* On 
  screens that are 992px or less, set the background color to blue */
@media 
  screen and (max-width: 992px) {
body {
background-color: blue;
}
}
/* On screens that are 600px or less, 
  set the 
  background color to olive */
@media screen and (max-width: 600px) {
body {
background-color: olive;
}
}
Try it Yourself 
Media Queries For Menus
In this example, we use media queries to create a responsive navigation menu, that varies 
in design on different screen sizes.
Large screens:
Home
Link 1
Link 2
Link 3
Small screens:
Home
Link 1
Link 2
Link 3
Example
/* The navbar container */
.topnav {
overflow: hidden;
background-color: #333;
}
/* Navbar links */
.topnav a {
float: 
   left;
display: block;
color: 
   white;
text-align: center;
padding: 14px 16px;
text-decoration: none;
}
/* On screens that are 600px wide or less, make the menu links stack on top 
   of each other instead of next to each other */
@media screen and (max-width: 600px) {
.topnav a {
float: none;
width: 
   100%;
}
}
Try it Yourself 
Media Queries For Columns
A common use of media queries, is to create a flexible layout. In this example, we create a layout that varies between four, two and full-width columns, depending on different screen sizes:
Large screens:
Medium screens:
Small screens:
Example
/* Create four equal columns that floats next to each other */
.column {
float: left;
width: 25%;
}
/* On screens that are 992px 
  wide or less, go from 
  four columns to two columns */
@media screen and (max-width: 992px) {
.column {
width: 50%;
}
}
/* On screens that are 
  600px wide or less, make 
  the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
.column {
width: 
  100%;
}
}
Try it Yourself 
Example
/* Container for flexboxes */
.row {
display: flex;
flex-wrap: wrap;
}
/* Create four equal columns */
.column {
flex: 25%;
padding: 20px;
}
/* On screens that are 992px wide or less, go from 
  four columns to two columns */
@media screen and (max-width: 992px) {
.column {
flex: 50%;
}
}
/* On screens that are 600px wide or less, make 
  the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
.row {
flex-direction: column;
}
}
Try it Yourself 
Hide Elements With Media Queries
Another common use of media queries, is to hide elements on different screen sizes:
I will be hidden on small screens.
Example
/* If the screen size is 600px wide or less, hide the element */
@media 
  screen and (max-width: 600px) {
div.example {
display: none;
}
}
Try it Yourself 
Change Font Size With Media Queries
You can also use media queries to change the font size of an element on 
different screen sizes:
Variable Font Size.
Example
/* If screen size is more than 600px wide, set the font-size of <div> to 80px */
@media screen and (min-width: 
  600px) {
div.example {
font-size: 80px;
}
}
/* If screen size is 600px wide, or less, 
  set the font-size of <div> to 30px */
@media screen and (max-width: 600px) {
div.example {
font-size: 30px;
}
}
Try it Yourself 
Flexible Image Gallery
In this example, we use media queries together with flexbox to create a responsive image gallery:
Example
Try it Yourself 
Flexible Website
In this example, we use media queries together with flexbox to create a responsive website, containing a flexible navigation bar and flexible content.
Example
Try it Yourself 
Orientation: Portrait / Landscape
Media queries can also be used to change layout of a page depending on the 
orientation of the browser.
You can have a set of CSS properties that will only 
apply when the browser window is wider than its height, a so called "Landscape" 
orientation:
Example
Use a lightblue background color if the orientation is in landscape mode:
@media only screen and (orientation: 
landscape) {
body {
background-color: lightblue;
}
}
Try it Yourself 
Min Width to Max Width
You can also use the
(max-width:
..
) and (min-width:
..
)
values to set a minimum width and a maximum width.
For example, when the browser's width is between 600 and 900px, change the 
appearance of a <div> element:
Example
@media screen and (max-width: 900px) and (min-width: 600px) {
div.example {
font-size: 50px;
padding: 50px;
border: 8px solid black;
background: yellow;
}
}
Try it Yourself 
Using an additional value:
In the example below, we add an additional media query to our already 
existing one using a comma:
Example
/* When the width is between 600px and 900px or above 1100px 
  - change the appearance of <div> */
@media screen and (max-width: 900px) and (min-width: 
  600px), (min-width: 
1100px) {
div.example {
font-size: 50px;
padding: 50px;
border: 8px solid black;
background: yellow;
}
}
Try it Yourself 
CSS @media Reference
For a full overview of all the media types and features/expressions, please look at the
@media rule in our CSS reference
.
Tip:
To learn more about responsive web design (how to target different devices and screens), using media query breakpoints, read our
Responsive Web Design Tutorial
.
Responsive Web Design -
Images
Resize the browser window to see how the image scales to fit the page.
Using The width Property
If the
width
property is set to a percentage 
and the
height
property is set to "auto", the image will be 
responsive and scale up and down:
Example
img {
width: 100%;
height: auto;
}
Try it Yourself 
Notice that in the example above, the image can be scaled up to be larger 
than its original size. A better solution, in many cases, will be to use the
max-width
property instead.
Using The max-width Property
If the
max-width
property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its 
original size:
Example
img {
max-width: 100%;
height: auto;
}
Try it Yourself 
Add an Image to The Example Web Page
Example
img {
width: 100%;
height: auto;
}
Try it Yourself 
Background Images
Background images can also respond to resizing and scaling.
Here we will show three different methods:
1. If the
background-size
property is set to "contain", the 
background 
image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship 
between the image's width and height):
Here is the CSS code:
Example
div {
width: 100%;
height: 400px;
background-image: url('img_flowers.jpg');
background-repeat: no-repeat;
background-size: contain;
border: 1px solid red;
}
Try it Yourself 
2. If the
background-size
property is set to "100% 100%", the background image will stretch to cover the entire content area:
Here is the CSS code:
Example
div {
width: 100%;
height: 400px;
background-image: url('img_flowers.jpg');
background-size: 100% 100%;
border: 1px solid red;
}
Try it Yourself 
3. If the
background-size
property is set to "cover", the background image will scale 
to cover the entire content area. Notice that the "cover" value keeps the aspect 
ratio, and some part of the background image may be 
clipped:
Here is the CSS code:
Example
div {
width: 100%;
height: 400px;
background-image: url('img_flowers.jpg');
background-size: cover;
border: 1px solid red;
}
Try it Yourself 
Different Images for Different Devices
A large image can be perfect on a big computer 
screen, but useless on a small device. Why load a large image when 
you have to scale it down anyway? To reduce the load, or for any other reasons, you can use media queries to display different images on different devices.
Here is one large image and one smaller image that will be displayed on different devices:
Example
/* For width smaller than 400px: */
body {
background-image: 
url('img_smallflower.jpg');
}
/* 
For width 400px and larger: */
@media only screen and (min-width: 400px) 
{
body {
background-image: url('img_flowers.jpg');
}
}
Try it Yourself 
You can use the media query
min-device-width
, instead of
min-width
, which
checks the device width, instead of the browser width. Then the image will not change when you resize the browser window:
Example
/* For devices smaller than 400px: */
body {
background-image: 
url('img_smallflower.jpg');
}
/* 
For devices 400px and larger: */
@media only screen and (min-device-width: 400px) 
{
body {
background-image: url('img_flowers.jpg');
}
}
Try it Yourself 
The HTML <picture> Element
The HTML
<picture>
element gives web 
developers more flexibility in specifying image resources.
The most common use of the
<picture>
element will be for images used in responsive designs. Instead of having one 
image that is scaled up or down based on the viewport width, multiple images can 
be designed to more nicely fill the browser viewport.
The
<picture>
element works similar to the
<video>
and
<audio>
elements. You set up different sources, and the first source that fits the 
preferences is the one being used:
Example
<picture>
<source srcset="img_smallflower.jpg" media="(max-width: 
400px)">
<source srcset="img_flowers.jpg">
<img 
src="img_flowers.jpg" alt="Flowers">
</picture>
Try it Yourself 
The
srcset
attribute is required, and defines the source of the image.
The
media
attribute is optional, and accepts the media queries you find in
CSS @media rule
.
You should also define an
<img>
element for browsers that do not support the
<picture>
element.
Responsive Web Design -
The Viewport
What is The Viewport?
The viewport is the user's visible area of a web page.
The viewport varies with the device, and will be smaller on a mobile phone than on a computer screen.
Before tablets and mobile phones, web pages were designed only for computer screens, and it was common for
web pages to have a static design and a fixed size.
Then, when we started surfing the internet using tablets and mobile phones, fixed 
size web pages were too large to fit the viewport.
To fix this, browsers on those devices scaled down the entire web page to fit the screen.
This was not perfect!! But a quick fix.
Setting The Viewport
HTML5 introduced a method to let web designers take control over the viewport, through the
<meta>
tag.
You should include the following
<meta>
viewport element in all your web pages:
<meta name="viewport" content="width=device-width, initial-scale=1.0">
This gives the browser instructions on how 
to control the page's dimensions and scaling.
The
width=device-width
part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).
The
initial-scale=1.0
part sets the initial zoom level when the page is first loaded by the browser.
Here is an example of a web page
without
the viewport meta tag, and the same web page
with
the viewport meta tag:
Without the 
viewport meta tag
With the 
viewport meta tag
Size Content to The Viewport
Users are used to scroll websites vertically on both desktop and mobile 
devices - but not horizontally!
So, if the user is forced to scroll horizontally, or zoom out, to see the 
whole web page it results in a poor user experience.
Some additional rules to follow:
1. Do NOT use large fixed width elements -
For example, if 
an image is displayed at a width wider than the viewport it can cause the 
viewport to scroll horizontally. Remember to adjust this content to fit within 
the width of the viewport.
2. Do NOT let the content rely on a particular viewport width to 
render well
- Since screen dimensions and width in CSS pixels vary 
widely between devices, content should not rely on a particular viewport width 
to render well.
3. Use CSS media queries to apply different styling for small and 
large screens
- Setting large absolute CSS widths for page elements 
will cause the element to be too wide for the viewport on a smaller device. 
Instead, consider using relative width values, such as width: 100%. Also, be 
careful of using large absolute positioning values. It may cause the element to 
fall outside the viewport on small devices.
Responsive Web Design
- Media Queries
What is a Media Query?
Media query is a CSS technique introduced in CSS3.
It uses the
@media
rule to include a block of CSS properties only if a 
certain condition is true.
Example
If the browser window is 600px or smaller, the background color will be lightblue:
@media only screen and (max-width: 600px) {
body {
background-color: lightblue;
}
}
Try it Yourself 
Add a Breakpoint
Earlier in this tutorial we made a web page with rows and columns, and it 
was responsive, but it did not look good on a small screen.
Media queries can help with that. We can add a breakpoint where 
certain parts of the design will behave differently on each side of the 
breakpoint.
Desktop
Phone
Use a media query to add a breakpoint at 768px:
Example
When the screen (browser window) gets smaller than 768px, each column should have a width of 100%:
/* For desktop: */
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 
100%;}
@media only screen and (max-width: 768px) {
/* For mobile phones: */
[class*="col-"] {
width: 100%;
}
}
Try it Yourself 
Always Design for Mobile First
Mobile First means designing for mobile before designing for desktop or any 
other device (This will make the page display faster on smaller devices).
This means that we must make some changes in our CSS.
Instead of changing styles when the width gets
smaller
than 
768px, we should change the design when the width gets
larger
than 
768px. This will make our design Mobile First:
Example
/* For mobile phones: */
[class*="col-"] {
width: 100%;
}
@media only screen and (min-width: 
768px) {
/* For desktop: */
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}
}
Try it Yourself 
Another Breakpoint
You can add as many breakpoints as you like.
We will also insert a breakpoint between tablets and mobile phones.
Desktop
Tablet
Phone
We do this by adding one more media query (at 600px), and a set of new classes for devices larger than 600px 
(but smaller than 768px):
Example
Note that the two sets of classes are almost identical, the only 
difference is the name (
col-
and
col-s-
):
/* For mobile phones: */
[class*="col-"] {
width: 100%;
}
@media only screen and (min-width: 600px) {
/* For tablets: */
.col-s-1 {width: 8.33%;}
.col-s-2 {width: 16.66%;}
.col-s-3 {width: 25%;}
.col-s-4 {width: 33.33%;}
.col-s-5 {width: 41.66%;}
.col-s-6 {width: 50%;}
.col-s-7 {width: 58.33%;}
.col-s-8 {width: 66.66%;}
.col-s-9 {width: 75%;}
.col-s-10 {width: 83.33%;}
.col-s-11 {width: 91.66%;}
.col-s-12 {width: 100%;}
}
@media only screen and (min-width: 
768px) {
/* For desktop: */
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}
}
It might seem odd that we have two sets of identical classes, but it gives us the 
opportunity
in HTML
, to decide what will happen with the columns at each 
breakpoint:
HTML Example
For desktop:
The first and the third section will both span 3 columns each. The middle section will span 6 columns.
For tablets:
The first section will span 3 columns, the second will span 9, and the third section will be displayed below the first two sections, and it will span 12 columns:
<div class="row">
<div class="col-3 col-s-3">...</div>
<div 
class="col-6 col-s-9">...</div>
<div 
class="col-3 col-s-12">...</div>
</div>
Try it Yourself 
Typical Device Breakpoints
There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target 
five groups:
Example
/* 
  Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) 
  {...}
/* Small devices (portrait tablets and large phones, 600px and up) 
  */
@media only screen and (min-width: 600px) {...}
/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {...}
/* Large devices (laptops/desktops, 992px and up) 
  */
@media only screen and (min-width: 992px) {...}
/* Extra large devices (large 
  laptops and desktops, 
  1200px and up) */
@media only screen and (min-width: 1200px) {...}
Try it Yourself 
Orientation: Portrait / Landscape
Media queries can also be used to change layout of a page depending on the 
orientation of the browser.
You can have a set of CSS properties that will only 
apply when the browser window is wider than its height, a so called "Landscape" 
orientation:
Example
The web page will have a lightblue background if the orientation is in landscape mode:
@media only screen and (orientation: 
landscape) {
body {
background-color: lightblue;
}
}
Try it Yourself 
Hide Elements With Media Queries
Another common use of media queries, is to hide elements on different screen sizes:
I will be hidden on small screens.
Example
/* If the screen size is 600px wide or less, hide the element */
@media 
  only screen and (max-width: 600px) {
div.example {
display: none;
}
}
Try it Yourself 
Change Font Size With Media Queries
You can also use media queries to change the font size of an element on 
different screen sizes:
Variable Font Size.
Example
/* If the screen size is 601px or 
  more, set the font-size of <div> to 80px */
@media only screen and (min-width: 
  601px) {
div.example {
font-size: 80px;
}
}
/* If the screen size is 600px or 
  less, 
  set the font-size of <div> to 30px */
@media only screen and (max-width: 600px) {
div.example {
font-size: 30px;
}
}
Try it Yourself 
CSS @media Reference
For a full overview of all the media types and features/expressions, please look at the
@media rule in our CSS reference
.
Responsive Web Design -
Videos
Using The width Property
If the
width
property is set to 100%, the video player will be 
responsive and scale up and down:
Example
video {
width: 100%;
height: auto;
}
Try it Yourself 
Notice that in the example above, the video player can be scaled up to be larger 
than its original size. A better solution, in many cases, will be to use the
max-width
property instead.
Using The max-width Property
If the
max-width
property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its 
original size:
Example
video {
max-width: 100%;
height: auto;
}
Try it Yourself 
Add a Video to the Example Web Page
We want to add a video in our example web page. The video will be resized to always take up all the available space:
Example
video {
width: 100%;
height: auto;
}
Try it Yourself 
Responsive Web Design -
Frameworks
There are many free CSS Frameworks that offer Responsive Design.
Using W3.CSS
A great way to create a responsive design, is to use a 
responsive 
style sheet, like
W3.CSS
W3.CSS makes it easy to develop sites that look nice at any size!
W3.CSS Demo
Resize the page to see the responsiveness!
London
London is the capital city of England.
It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.
Paris
Paris is the capital of France.
The Paris area is one of the largest population centers in Europe,
with more than 12 million inhabitants.
Tokyo
Tokyo is the capital of Japan.
It is the center of the Greater Tokyo Area,
and the most populous metropolitan area in the world.
Example
<!DOCTYPE html>
<html>
<meta name="viewport" 
 content="width=device-width, initial-scale=1">
<link rel="stylesheet" 
 href="https://www.w3schools.com/w3css/4/w3.css">
<body>
<div 
 class="w3-container w3-blue">
<h1>W3Schools Demo</h1>
<p>Resize this responsive page!</p>
</div>
<div 
 class="w3-row-padding">
<div class="w3-third">
<h2>London</h2>
<p>London is the capital city of England.</p>
<p>It is the most populous city in the United Kingdom,
with a 
 metropolitan area of over 13 million inhabitants.</p>
</div>
<div 
 class="w3-third">
<h2>Paris</h2>
<p>Paris is 
 the capital of France.</p>
<p>The Paris area is one of the largest 
 population centers in Europe,
with more than 12 million 
 inhabitants.</p>
</div>
<div class="w3-third">
<h2>Tokyo</h2>
<p>Tokyo is the capital of Japan.</p>
<p>It 
 is the center of the Greater Tokyo Area,
and the most populous 
 metropolitan area in the world.</p>
</div>
</div>
</body>
</html>
Try it Yourself 
To learn more about W3.CSS, read our
W3.CSS Tutorial
.
Bootstrap
Another popular framework is Bootstrap. It uses HTML and CSS to make 
responsive web pages:
Example
<!DOCTYPE html>
<html lang="en">
<head>
<title>Bootstrap 5 Example</title>
<meta charset="utf-8">
<meta 
  name="viewport" content="width=device-width, initial-scale=1">
<link 
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
  rel="stylesheet">
<script 
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
<div class="container-fluid p-5 bg-primary text-white 
  text-center">
<h1>My First Bootstrap Page</h1>
<p>Resize 
  this responsive page to see the effect!</p>
</div>
<div class="container mt-5">
<div class="row">
<div class="col-sm-4">
<h3>Column 1</h3>
<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
</div>
<div class="col-sm-4">
<h3>Column 2</h3>
<p>Lorem ipsum dolor sit 
  amet, consectetur adipisicing elit...</p>
<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
</div>
<div class="col-sm-4">
<h3>Column 3</h3>
<p>Lorem ipsum dolor sit 
  amet, consectetur adipisicing elit...</p>
<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
</div>
</div>
</div>
</body>
</html>
Try it Yourself 
To learn more about Bootstrap, go to our
Bootstrap Tutorial
.
Responsive Web Design -
Templates
W3.CSS Web Site Templates
We have created some responsive templates with the
W3.CSS framework
.
You are free to modify, save, share, and use them in all your projects.
Tip:
All templates below can be
hosted for free
with
W3Schools Spaces
.
Band Template
Demo
Try it Yourself
Art Template
Demo
Try it Yourself
Architect Template
Demo
Try it Yourself
Coming Soon Template
Demo
Try it Yourself
Blog Template
Demo
Try it Yourself
Food Blog Template
Demo
Try it Yourself
Fashion Blog Template
Demo
Try it Yourself
Gourmet Catering Template
Demo
Try it Yourself
CV Template
Demo
Try it Yourself
Wedding Invitation Template
Demo
Try it Yourself
Photo Template
Demo
Try it Yourself
Black & White Photo Template
Demo
Try it Yourself
Photo III Template
Demo
Try it Yourself
Nature Portfolio Template
Demo
Try it Yourself
People Portfolio Template
Demo
Try it Yourself
People Portfolio II Template
Demo
Try it Yourself
Dark Portfolio Template
Demo
Try it Yourself
Black & White Portfolio Template
Demo
Try it Yourself
Parallax Template
Demo
Try it Yourself
Clothing Store Template
Demo
Try it Yourself
Interior Design Template
Demo
Try it Yourself
Cafe Template
Demo
Try it Yourself
Pizza Restaurant Template
Demo
Try it Yourself
Modal Restaurant Template
Demo
Try it Yourself
Start Page Template
Demo
Try it Yourself
Startup Template
Demo
Try it Yourself
App Launch Template
Demo
Try it Yourself
Marketing Template
Demo
Try it Yourself
Marketing / Website Template
Demo
Try it Yourself
Web Page Template
Demo
Try it Yourself
Social Media Template
Demo
Try it Yourself
Analytics Template
Demo
Try it Yourself
Apartment Rental Template
Demo
Try it Yourself
Hotel Template
Demo
Try it Yourself
Travel Template
Demo
Try it Yourself
Travel Agency Template
Demo
Try it Yourself
House Design Template
Demo
Try it Yourself
Screen 50/50 Template
Demo
Try it Yourself
Mail Template
Demo
Try it Yourself
Kitchen Sink/Demo Template
Black
Red
Teal
Try it Yourself
CSS
Grid Layout Module
Header
Menu
Main
Right
Footer
Try it Yourself 
Grid Layout
The CSS Grid Layout Module offers a grid-based layout system, with rows and 
columns, making it easier to design web pages without having to use floats and 
positioning.
Browser Support
The grid properties are supported in all modern browsers.
57.0
16.0
52.0
10
44
Grid Elements
A grid layout consists of a parent element, with one or more child elements.
Example
<div 
  class="grid-container">
<div class="grid-item">1</div>
<div 
  class="grid-item">2</div>
<div class="grid-item">3</div>
<div class="grid-item">4</div>
<div 
  class="grid-item">5</div>
<div class="grid-item">6</div>
<div class="grid-item">7</div>
<div 
  class="grid-item">8</div>
<div class="grid-item">9</div>
</div>
1
2
3
4
5
6
7
8
9
Try it Yourself 
Display Property
An HTML element becomes a grid container when its
display
property 
is set to
grid
or
inline-grid
.
Example
.grid-container {
display: grid;
}
Try it Yourself 
Example
.grid-container {
display: inline-grid;
}
Try it Yourself 
All direct children of the grid container automatically become
grid items
.
Grid Columns
The vertical lines of grid items are called
columns
.
Grid Rows
The horizontal lines of grid items are called
rows
.
Grid Gaps
The spaces between each column/row are called
gaps
.
You can adjust the gap size by using one of the following properties:
column-gap
row-gap
gap
Example
The
column-gap
property sets the gap between the columns:
.grid-container {
display: grid;
column-gap: 50px;
}
Try it Yourself 
Example
The
row-gap
property sets the gap between the rows:
.grid-container {
display: grid;
row-gap: 50px;
}
Try it Yourself 
Example
The
gap
property is a shorthand property for the
row-gap
and the
column-gap
properties:
.grid-container {
display: grid;
gap: 50px 100px;
}
Try it Yourself 
Example
The
gap
property can also be used to set both the row gap and the 
column gap in one value:
.grid-container {
display: grid;
gap: 50px;
}
Try it Yourself 
Grid Lines
The lines between columns are called
column lines
.
The lines between rows are called
row lines
.
Refer to line numbers when placing a grid item in a grid container:
Example
Place a grid item at column line 1, and let it end on column line 3:
.item1 {
grid-column-start: 1;
grid-column-end: 3;
}
Try it Yourself 
Example
Place a grid item at row line 1, and let it end on row line 3:
.item1 {
grid-row-start: 1;
grid-row-end: 3;
}
Try it Yourself 
All CSS Grid Properties
Property
Description
column-gap
Specifies the gap between the columns
gap
A shorthand property for the
row-gap
and the
column-gap
properties
grid
A shorthand property for the
grid-template-rows, 
    grid-template-columns, grid-template-areas, grid-auto-rows, 
    grid-auto-columns
, and the
grid-auto-flow
properties
grid-area
Either specifies a name for the grid item, or this property is a shorthand property for the
grid-row-start
,
grid-column-start
,
grid-row-end
, and
grid-column-end
properties
grid-auto-columns
Specifies a default column size
grid-auto-flow
Specifies how auto-placed items are inserted in the grid
grid-auto-rows
Specifies a default row size
grid-column
A shorthand property for the
grid-column-start
and the
grid-column-end
properties
grid-column-end
Specifies where to end the grid item
grid-column-gap
Specifies the size of the gap between columns
grid-column-start
Specifies where to start the grid item
grid-gap
A shorthand property for the
grid-row-gap
and
grid-column-gap
properties
grid-row
A shorthand property for the
grid-row-start
and the
grid-row-end
properties
grid-row-end
Specifies where to end the grid item
grid-row-gap
Specifies the size of the gap between rows
grid-row-start
Specifies where to start the grid item
grid-template
A shorthand property for the
grid-template-rows
,
grid-template-columns
and
grid-areas
properties
grid-template-areas
Specifies how to display columns and rows, using named grid items
grid-template-columns
Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows
Specifies the size of the rows in a grid layout
row-gap
Specifies the gap between the grid rows
CSS
Animations
CSS Animations
CSS allows animation of HTML elements without using JavaScript!
CSS
In this chapter you will learn about the following properties:
@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation-fill-mode
animation
Browser Support for Animations
The numbers in the table specify the first browser version that fully supports the property.
Property
@keyframes
43.0
10.0
16.0
9.0
30.0
animation-name
43.0
10.0
16.0
9.0
30.0
animation-duration
43.0
10.0
16.0
9.0
30.0
animation-delay
43.0
10.0
16.0
9.0
30.0
animation-iteration-count
43.0
10.0
16.0
9.0
30.0
animation-direction
43.0
10.0
16.0
9.0
30.0
animation-timing-function
43.0
10.0
16.0
9.0
30.0
animation-fill-mode
43.0
10.0
16.0
9.0
30.0
animation
43.0
10.0
16.0
9.0
30.0
What are CSS Animations?
An animation lets an element gradually change from one style to another.
You can change as many CSS properties you want, as many times as you want.
To use CSS animation, you must first specify some keyframes for the 
animation.
Keyframes hold what styles the element will have at certain times.
The @keyframes Rule
When you specify CSS styles inside the
@keyframes
rule, the animation will gradually change from the current style to the new style 
at certain times.
To get an animation to work, you must bind the animation to an element.
The following example binds the "example" animation to the <div> element. 
The animation will last for 4 seconds, and it will gradually change the 
background-color of the <div> element from "red" to "yellow":
Example
/* The animation code */
@keyframes example {
from {background-color: red;}
to {background-color: yellow;}
}
/* The element to apply the animation to */
div {
width: 100px;
height: 100px;
background-color: red;
animation-name: example;
animation-duration: 4s;
}
Try it Yourself 
Note:
The
animation-duration
property 
defines how long an animation should take to complete. If the
animation-duration
property is not specified, 
no animation will occur, because 
the default value is 0s (0 seconds).
In the example above we have specified when the style will change by using 
the keywords "from" and "to" (which represents 0% (start) and 100% (complete)).
It is also possible to use percent. By using percent, you can add as many 
style changes as you like.
The following example will change the background-color of the <div> 
element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:
Example
/* The animation code */
@keyframes example
{
0% {background-color: red;}
25% {background-color: yellow;}
50% {background-color: blue;}
100% {background-color: green;}
}
/* The element to apply the animation to */
div {
width: 100px;
height: 100px;
background-color: red;
animation-name: example;
animation-duration: 4s;
}
Try it Yourself 
The following example will change both the background-color and the position of the <div> 
element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:
Example
/* The animation code */
@keyframes example
{
0% {background-color:red; left:0px; top:0px;}
25% {background-color:yellow; left:200px; top:0px;}
50% {background-color:blue; left:200px; top:200px;}
75% {background-color:green; left:0px; top:200px;}
100% {background-color:red; left:0px; top:0px;}
}
/* The element to apply the animation to */
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
}
Try it Yourself 
Delay an Animation
The
animation-delay
property specifies a delay for the start of an animation.
The following example has a 2 seconds delay before starting the animation:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-delay: 2s;
}
Try it Yourself 
Negative values are also allowed. If using negative values, the animation 
will start as if it had already been playing for
N
seconds.
In the following example, the animation will start as if it had already been 
playing for 2 seconds:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-delay: -2s;
}
Try it Yourself 
Set How Many Times an Animation Should Run
The
animation-iteration-count
property specifies the number of times an animation should run.
The following example will run the animation 3 times before it stops:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-iteration-count: 3;
}
Try it Yourself 
The following example uses the value "infinite" to make the animation 
continue for ever:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-iteration-count: 
infinite;
}
Try it Yourself 
Run Animation in Reverse Direction or Alternate Cycles
The
animation-direction
property specifies 
whether an animation should be played forwards, backwards or in alternate 
cycles.
The animation-direction property can have the following values:
normal
- The animation is played as normal 
(forwards). This is default
reverse
- The animation is played in 
reverse direction (backwards)
alternate
- The animation is played 
forwards first, then backwards
alternate-reverse
- The animation is played 
backwards first, then forwards
The following example will run the animation in reverse direction (backwards):
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-direction: 
reverse;
}
Try it Yourself 
The following example uses the value "alternate" to make the animation 
run forwards first, then backwards:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-iteration-count: 2;
animation-direction: 
alternate;
}
Try it Yourself 
The following example uses the value "alternate-reverse" to make the animation 
run backwards first, then forwards:
Example
div {
width: 100px;
height: 100px;
position: relative;
background-color: red;
animation-name: example;
animation-duration: 4s;
animation-iteration-count: 2;
animation-direction: 
alternate-reverse;
}
Try it Yourself 
Specify the Speed Curve of the Animation
The
animation-timing-function
property specifies the speed curve of the 
animation.
The animation-timing-function property can have the following values:
ease
- Specifies an animation with a slow start, then fast, then end slowly (this is default)
linear
- Specifies an animation with the same speed from start to end
ease-in
- Specifies an animation with a slow start
ease-out
- Specifies an animation with a slow end
ease-in-out
- Specifies an animation with a slow start and end
cubic-bezier(n,n,n,n)
- Lets you define your own values in a cubic-bezier function
The following example shows some of the different speed curves that can be used:
Example
#div1 {animation-timing-function: linear;}
#div2 
{animation-timing-function: ease;}
#div3 {animation-timing-function: 
ease-in;}
#div4 {animation-timing-function: ease-out;}
#div5 
{animation-timing-function: ease-in-out;}
Try it Yourself 
Specify the fill-mode For an Animation
CSS animations do not affect an element before the first keyframe is played 
or after the last keyframe is played. The animation-fill-mode property can 
override this behavior.
The
animation-fill-mode
property specifies a 
style for the target element when the animation is not playing (before it 
starts, after it ends, or both).
The animation-fill-mode property can have the following values:
none
- Default value. Animation will not 
apply any styles to the element before or after it is executing
forwards
- The element will retain the 
style values that is set by the last keyframe (depends on animation-direction 
and animation-iteration-count)
backwards
- The element will get the style 
values that is set by the first keyframe (depends on animation-direction), and 
retain this during the animation-delay period
both
- The animation will follow the rules 
for both forwards and backwards, extending the animation properties in both 
directions
The following example lets the <div> element retain the style values from the 
last keyframe when the animation ends:
Example
div {
width: 100px;
height: 100px;
background: red;
position: relative;
animation-name: example;
animation-duration: 3s;
animation-fill-mode: forwards;
}
Try it Yourself 
The following example lets the <div> element get the style values set by the 
first keyframe before the animation starts (during the animation-delay period):
Example
div {
width: 100px;
height: 100px;
background: red;
position: relative;
animation-name: example;
animation-duration: 3s;
animation-delay: 2s;
animation-fill-mode: backwards;
}
Try it Yourself 
The following example lets the <div> element get the style values set 
by the first keyframe before the animation starts, and retain the style values 
from the last keyframe when the animation ends:
Example
div {
width: 100px;
height: 100px;
background: red;
position: relative;
animation-name: example;
animation-duration: 3s;
animation-delay: 2s;
animation-fill-mode: both;
}
Try it Yourself 
Animation Shorthand Property
The example below uses six of the animation properties:
Example
div
{
animation-name: example;
animation-duration: 5s;
animation-timing-function: linear;
animation-delay: 2s;
animation-iteration-count: infinite;
animation-direction: alternate;
}
Try it Yourself 
The same animation effect as above can be achieved by using the shorthand
animation
property:
Example
div
{
animation: example 5s linear 2s infinite alternate;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Add a 2 second animation for the <div> element, which changes the color from red to blue. Call the animation "example".
<style>
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name:
;
: 2s;
}

@keyframes example {
  from {
: red;}
  to {
: blue;}
}
</style>

<body>
  <div>This is a div</div>
</body>
Submit Answer 
Start the Exercise
CSS Animation Properties
The following table lists the @keyframes rule and all the CSS animation properties:
Property
Description
@keyframes
Specifies the animation code
animation
A shorthand property for setting all the animation properties
animation-delay
Specifies a delay for the start of an animation
animation-direction
Specifies whether an animation should be played forwards, backwards or 
    in alternate cycles
animation-duration
Specifies how long time an animation should take to complete one cycle
animation-fill-mode
Specifies a style for the element when the animation is not playing 
   (before it starts, after it ends, or both)
animation-iteration-count
Specifies the number of times an animation should be played
animation-name
Specifies the name of the @keyframes animation
animation-play-state
Specifies whether the animation is running or paused
animation-timing-function
Specifies the speed curve of the animation
CSS
Grid Item
1
2
3
4
5
Try it Yourself 
Child Elements (Items)
A grid
container
contains grid
items
.
By default, a container has one grid item for each column, in each row, but you can style the grid items so that they 
will span multiple columns and/or rows.
The grid-column Property:
The
grid-column
property defines on which 
column(s) to place an item.
You define where the item will start, and where the item will end.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
To place an item, you can refer to
line numbers
, or use the keyword "span" to 
define how many columns the item will span.
Example
Make "item1" start on column 1 and end before column 5:
.item1 {
grid-column: 1 / 5;
}
Try it Yourself 
Example
Make "item1" start on column 1 and span 3 columns:
.item1 {
grid-column: 1 / span 3;
}
Try it Yourself 
Example
Make "item2" start on column 2 and span 3 columns:
.item2 {
grid-column: 2 / span 3;
}
Try it Yourself 
The grid-row Property:
The
grid-row
property defines on which row to 
place an item.
You define where the item will start, and where the item will end.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
To place an item, you can refer to
line numbers
, or use the keyword "span" to 
define how many rows the item will span:
Example
Make "item1" start on row-line 1 and end on row-line 4:
.item1 {
grid-row: 1 / 4;
}
Try it Yourself 
Example
Make "item1" start on row 1 and span 2 rows:
.item1 {
grid-row: 1 / span 2;
}
Try it Yourself 
The grid-area Property
The
grid-area
property can be used as a shorthand property for the
grid-row-start
,
grid-column-start
,
grid-row-end
and the
grid-column-end
properties.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Example
Make "item8" start on row-line 1 and column-line 2, and end on row-line 5 and column line 6:
.item8 {
grid-area: 1 / 2 / 5 / 6;
}
Try it Yourself 
Example
Make "item8" start on row-line 2 and column-line 1, and span 2 rows and 3 columns:
.item8 {
grid-area: 2 / 1 / span 2 / span 3;
}
Try it Yourself 
Naming Grid Items
The
grid-area
property can also be used to assign names to grid items.
Header
Menu
Main
Right
Footer
Named grid items can be referred to by the
grid-template-areas
property 
of the grid container.
Example
Item1 gets the name "myArea" and spans all five columns in a five columns grid layout:
.item1 {
grid-area: 
  myArea;
}
.grid-container {
grid-template-areas: 'myArea myArea 
  myArea myArea myArea';
}
Try it Yourself 
Each row is defined by apostrophes (' ')
The columns in each row is defined inside the apostrophes, separated by a 
space.
Example
Let "myArea" span two columns in a five columns grid layout (period signs 
  represent items with no name):
.item1 {
grid-area: 
  myArea;
}
.grid-container {
grid-template-areas: 'myArea myArea 
  . . .';
}
Try it Yourself 
To define two rows, define the column of the second row inside another set of apostrophes:
Example
Make "item1" span two columns
and
two rows:
.grid-container {
grid-template-areas: 'myArea myArea 
  . . .' 'myArea myArea . . .';
}
Try it Yourself 
Example
Name all items, and make a ready-to-use webpage template:
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { 
  grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: 
  footer; }
.grid-container {
grid-template-areas:
'header header header header header header'
'menu main 
  main main right right'
'menu footer footer footer footer 
  footer';
}
Try it Yourself 
The Order of the Items
The Grid Layout allows us to position the items anywhere we like.
1
2
3
4
5
6
Example
.item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; }
Try it Yourself 
You can re-arrange the order for certain screen sizes, by using media queries:
Example
@media only screen and (max-width: 500px) {
.item1 { grid-area: 1 / 
  span 3 / 2 / 4; }
.item2 { grid-area: 3 / 3 / 4 / 4; }
.item3 { grid-area: 2 / 1 / 3 / 2; }
.item4 { grid-area: 2 / 2 / 
  span 2 / 3; }
.item5 { grid-area: 3 / 1 / 4 / 2; }
.item6 
  { grid-area: 2 / 3 / 3 / 4; }
}
Try it Yourself 
CSS
Examples
CSS Syntax
CSS syntax
CSS syntax explained
CSS Selectors
The element selector
The id selector
The class selector (for all elements)
The class selector (for only <p> elements)
An HTML element that refer to two classes
The universal selector
Grouping selectors
CSS selectors explained
CSS How To / Where To
External CSS
Internal CSS
Inline CSS
Multiple style sheets
Cascading order
CSS how to explained
CSS Comments
Single-line comment
Multi-line comment
CSS comments explained
CSS Colors
Set the background color of an element
Set the text color
Set the border color
Set different color values
Set RGB values
Set HEX values
Set HSL values
CSS colors explained
CSS Backgrounds
Set the background color of a page
Set the background color of different elements
Set an image as the background of a page
How to repeat a background image only horizontally
How to position a background image
A fixed background image (this image will not scroll with the rest of the page)
All the background properties in one declaration
Advanced background example
CSS background properties explained
CSS Borders
Set the width of the four borders
Set the width of the top border
Set the width of the bottom border
Set the width of the left border
Set the width of the right border
Set the style of the four borders
Set the style of the top border
Set the style of the bottom border
Set the style of the left border
Set the style of the right border
Set the color of the four borders
Set the color of the top border
Set the color of the bottom border
Set the color of the left border
Set the color of the right border
All the border properties in one declaration
Add rounded borders to an element
Set different borders on each side
All the top border properties in one declaration
All the bottom border properties in one declaration
All the left border properties in one declaration
All the right border properties in one declaration
CSS border properties explained
CSS Margins
Specify different margins for each side of an element
Use shorthand margin property with four values
Use shorthand margin property with three values
Use shorthand margin property with two values
Use shorthand margin property with one value
Set margin to auto to center the element within its container
Let the left margin be inherited from the parent element
Margin collapse
Margin properties explained
CSS Padding
Specify different padding for each side of an element
Use shorthand padding property with four values
Use shorthand padding property with three values
Use shorthand padding property with two values
Use shorthand padding property with one value
Padding and element width (without box-sizing)
Padding and element width (with box-sizing)
Set padding-left of an element
Set padding-right of an element
Set padding-top of an element
Set padding-bottom of an element
CSS padding properties explained
CSS Height/Width
Set the height and width of an element
Set max-width of an element
Set the height and width of different elements
Set the height and width of an image using percent
Set min-width and max-width of an element
Set min-height and max-height of an element
CSS height/width properties explained
CSS Box Model
Demonstrating the box model
Specify an element with a total width of 250px
CSS box model explained
CSS Outline
Draw a line around an element (outline)
Set the style of an outline
Set the color of an outline
Set the width of an outline
Use the shorthand outline property
Add space between an outline and the edge/border of an element
CSS outline properties explained
CSS Text
Set the text color of different elements
Align the text
Remove the line under links
Decorate the text
Control the letters in a text
Indent text
Specify the space between characters
Specify the space between lines
Set the text direction of an element
Increase the white space between words
Specify a text shadow for an element
Disable text wrapping inside an element
Vertical alignment of an image inside text
CSS text properties explained
CSS Fonts
Set the font of a text
Set the size of the font
Set the size of the font in px
Set the size of the font in em
Set the size of the font in percent and em
Set the style of the font
Set the variant of the font
Set the boldness of the font
All the font properties in one declaration
Font properties explained
CSS Icons
Font Awesome icons
Bootstrap icons
Google icons
CSS icons explained
CSS Links
Add different colors to visited/unvisited links
Use of text-decoration on links
Specify a background color for links
Add other styles to hyperlinks
Different types of cursors
Advanced - Create link boxes
Advanced - Create link boxes with borders
CSS link properties explained
CSS Lists
All the different list item markers in lists
Set an image as the list-item marker
Position the list-item marker
Remove default list settings
All list properties in one declaration
Style lists with colors
Full-width bordered list
CSS list properties explained
CSS Tables
Specify a black border for table, th, and td elements
Use of border-collapse
Single border around the table
Specify the width and height of a table
Set the horizontal alignment of content (text-align)
Set the vertical alignment of content (vertical-align)
Specify the padding for th and td elements
Horizontal dividers
Hoverable table
Striped tables
Specify the color of the table borders
Set the position of the table caption
Responsive Table
Create a fancy table
CSS table properties explained
CSS Display
How to hide an element (visibility:hidden)
How to not display an element (display:none)
How to display a block-level element as an inline element
How to display an inline element as a block-level element
How to to use CSS together with JavaScript to show hidden content
CSS display properties explained
CSS Positioning
Position an element relative to the browser window
Position an element relative to its normal position
Position an element with an absolute value
Sticky positioning
Overlapping elements
Set the shape of an element
Set the top edge of an image using a pixel value
Set the bottom edge of an image using a pixel value
Set the left edge of an image using a pixel value
Set the right edge of an image using a pixel value
Position image text (top left corner)
Position image text (top right corner)
Position image text (bottom left corner)
Position image text (bottom right corner)
Position image text (centered)
CSS positioning properties explained
CSS Overflow
Using overflow: visible - The overflow is not clipped. It renders outside the element's box.
Using overflow: hidden - The overflow is clipped, and the rest of the content is hidden.
Using overflow: scroll - The overflow is clipped, but a scrollbar is added to see the rest of the content.
Using overflow: auto - If overflow is clipped, a scrollbar should be added to see the rest of the content.
Using overflow-x and overflow-y.
CSS overflow properties explained
CSS Floating
A simple use of the float property
An image with border and margins that floats to the right in a paragraph
An image with a caption that floats to the right
Let the first letter of a paragraph float to the left
Turning off float (using the clear property)
Turning off float (using the "clearfix" hack)
Create floating boxes
Create side-by-side images
Create equal-height boxes (with flexbox)
Creating a horizontal menu
Create a web layout example
CSS float properties explained
CSS Inline-block
Show the differences between inline, inline-block and block
Using inline-block to create navigation links
CSS inline-block explained
CSS Aligning Elements
Center aligning with margin
Center aligning text
Center an image
Left/Right aligning with position
Left/Right aligning with position - Crossbrowser solution
Left/Right aligning with float
Left/Right aligning with float - Crossbrowser solution
Center vertically with padding
Center vertically and horizontally
Center vertically with line-height
Center vertically and horizontally with position
CSS align properties explained
CSS Combinators
Descendant selector
Child selector
Adjacent Sibling selector
General Sibling selector
CSS combinators explained
CSS Pseudo-classes
Add different colors to a hyperlink
Add other styles to hyperlinks
Use of :focus
:first-child - match the first p element
:first-child - match the first i element in all p elements
:first-child - Match all i elements in all first child p elements
Use of :lang
CSS pseudo-classes explained
CSS Pseudo-elements
Make the first letter special in a text
Make the first line special in a text
Make the first letter and first line special
Use :before to insert some content before an element
Use :after to insert some content after an element
CSS pseudo-elements explained
CSS Opacity
Creating transparent images
Creating transparent images - mouseover effect
Reversed mouseover effect for transparent images
Transparent box/div
Transparent box/div with RGBA values
Creating a transparent box with text on a background image
CSS image opacity explained
CSS Navigation Bars
Fully styled vertical navigation bar
Fully styled horizontal navigation bar
Full-height fixed vertical navigation bar
Fixed horizontal navigation bar
Sticky navigation bar (does not work in IE or Edge 15 and earlier)
Responsive top navigation
Responsive side navigation
CSS navigation bars explained
CSS Dropdowns
Dropdown text
Dropdown menu
Right-aligned dropdown menu
Dropdown image
Dropdown navigation bar
CSS dropdowns explained
CSS Image Gallery
Image gallery
Responsive Image gallery
CSS image gallery explained
CSS Image Sprites
An image sprite
An image sprite - a navigation list
An image sprite with hover effect
CSS image sprites explained
CSS Attribute Selectors
Selects all <a> elements with a target attribute
Selects all <a> elements with a target="_blank" attribute
Selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower"
Selects all elements with a class attribute value that begins with "top" (must be whole word)
Selects all elements with a class attribute value that begins with "top" (must not be whole word)
Selects all elements with a class attribute value that ends with "test"
Selects all elements with a class attribute value that contains "te"
CSS attribute selectors explained
CSS Forms
Full-width input field
Padded input field
Bordered input field
Bottom bordered input field
Colored input fields
Focused input fields
Focused input fields 2
Input with icon/image
Animated search input
Styling textareas
Styling select menus
Styling input buttons
Responsive form
CSS forms explained
CSS Counters
Create a counter
Nested counters 1
Nested counters 2
CSS counters explained
CSS Website Layout
Simple, responsive website layout
A website example
CSS website layout explained
CSS Rounded Corners
Add rounded corners to elements
Round each corner separately
Create elliptical corners
CSS rounded corners explained
CSS Border Images
Create an image border around an element, using the round keyword
Create an image border around an element, using the stretch keyword
Image border - Different slice values
CSS border images explained
CSS Backgrounds
Add multiple background images for an element
Specify the size of a background image
Scale a background image using "contain" and "cover"
Define sizes of multiple background images
Full-size background image (completely fill the content area)
Use background-origin to specify where the background image is positioned
Use background-clip to specify the painting area of the background
CSS backgrounds explained
CSS Gradients
Linear Gradient - top to bottom
Linear Gradient - left to right
Linear Gradient - diagonal
Linear Gradient - with a specified angle
Linear Gradient - with multiple color stops
Linear Gradient - color of a rainbow + text
Linear Gradient - with transparency
Linear Gradient - a repeating linear gradient
Radial Gradient - evenly spaced color stops
Radial Gradient - differently spaced color stops
Radial Gradient - set shape
Radial Gradient - different size keywords
Radial Gradient - a repeating radial gradient
CSS gradients explained
CSS Shadow Effects
Simple shadow effect
Add a color to the shadow
Add a blur effect to the shadow
White text with black shadow
A red neon glow shadow
A red and blue neon glow shadow
White text with black, blue, and darkblue shadow
Add a simple box-shadow to an element
Add color to box-shadow
Add color and blur effect to box-shadow
Create paper-like cards (text)
Create paper-like cards (polaroid images)
CSS shadow effects explained
CSS Text Effects
Specify how hidden, overflowed content should be signaled to the user
How to display the overflowed content when hover over the element
Allow long words to be able to be broken and wrap onto the next line
Specify line breaking rules
CSS text explained
CSS Web Fonts
Use your "own" fonts in @font-face rule
Use your "own" fonts in @font-face rule (bold)
CSS web fonts explained
CSS 2D Transforms
translate() - move an element from its current position
rotate() - rotate an element clockwise
rotate() - rotate an element counter-clockwise
scale() - increase an element
scale() - decrease an element
skewX() - skews an element along the X-axis
skewY() - skews an element along the Y-axis
skew() - skews an element along the X and Y-axis
matrix() - rotate, scale, move, and skew an element
CSS 2D transforms explained
CSS 3D Transforms
rotateX() - rotate an element around its X-axis at a given degree
rotateY() - rotate an element around its Y-axis at a given degree
rotateZ() - rotate an element around its Z-axis at a given degree
CSS 3D transforms explained
CSS Transitions
Transition - change width of an element
Transition - change width and height of an element
Specify different speed curves for a transition
Specify a delay for a transition effect
Add a transformation to a transition effect
Specify all transition properties in one shorthand property
CSS transitions explained
CSS Animations
Bind an animation to an element
Animation - change background-color of an element
Animation - change background-color and position of an element
Delay an animation
Run animation 3 times before it stops
Run animation for ever
Run animation in reverse direction
Run animation in alternate cycles
Speed curves for animations
Animation shorthand property
CSS animations explained
CSS Tooltips
Right tooltip
Left tooltip
Top tooltip
Bottom tooltip
Tooltip with arrow
Animated tooltip
CSS tooltips explained
CSS Style Images
Rounded image
Circled image
Thumbnail image
Thumbnail image as link
Responsive image
Image text (top left corner)
Image text (top right corner)
Image text (bottom left corner)
Image text (bottom right corner)
Image text (centered)
Polaroid images
Grayscale image filter
Advanced - Image Modal with CSS and JavaScript
CSS images explained
CSS Image Reflection
Create reflection below the image
Create reflection to the right of the image
Create a gap between the image and the reflection
Create a fade-out effect on the reflection
CSS image reflection explained
CSS Object-fit
Use object-fit: cover
Use object-fit: contain
Use object-fit: fill
Use object-fit: none
Use object-fit: scale-down
All object-fit property values in one example
CSS object-fit explained
CSS Object-position
Position the image so that the great old building is in center
Position the image so that the famous Eiffel Tower is in center
CSS object-position explained
CSS Buttons
Basic CSS buttons
Button colors
Button sizes
Rounded buttons
Colored button borders
Hoverable buttons
Shadow buttons
Disabled buttons
Button width
Button groups
Bordered button group
Animated Button (Hover Effect)
Animated Button (Ripple Effect)
Animated Button (Pressed Effect)
CSS buttons explained
CSS Pagination
Simple pagination
Active and hoverable pagination
Rounded active and hoverable pagination
Hoverable transition effect
Bordered pagination
Rounded bordered pagination
Pagination with space between links
Pagination size
Pagination with space between links
Centered pagination
Breadcrumbs
CSS pagination explained
CSS Multiple Columns
Create multiple columns
Specify the gap between columns
Specify the style of the rule between columns
Specify the width of the rule between columns
Specify the color of the rule between columns
Specify the width, style and color of the rule between columns
Specify how many columns an element should span across
Specify a suggested, optimal width for the columns
CSS multiple columns explained
CSS User Interface
Let a user resize the width of an element
Let a user resize the height of an element
Let a user resize both the width and height of an element
Add space between an outline and the border of an element
CSS user interface explained
CSS Variables
Using the var() function
Using the var() function to insert several custom property values
CSS variables explained
CSS Box Sizing
Width of elements without box-sizing
Width of elements with box-sizing
Form elements + box-sizing
CSS box sizing explained
CSS Flexbox
Flexbox with three flex items
Flexbox with three flex items - rtl direction
flex-direction - row-reverse
flex-direction - column
flex-direction - column-reverse
justify-content - flex-end
justify-content - center
justify-content - space-between
justify-content - space-around
align-items - stretch
align-items - flex-start
align-items - flex-end
align-items - center
align-items - baseline
flex-wrap - nowrap
flex-wrap - wrap
flex-wrap - wrap-reverse
align-content - center
Order the flex items
Margin-right:auto;
Margin:auto; = perfect centering
align-self on flex items
Specify the length of the flex item, relative to the rest of the flex items
Create a responsive image gallery with flexbox
Create a responsive website with flexbox
CSS flexbox explained
CSS Media Queries
Change the background-color to lightgreen if the viewport is 480px wide or wider
Show a menu that will float to the left of the page if the viewport is 480px wide or wider
CSS media queries explained
CSS Media Queries - More Examples
Set different background colors depending on screen width
Responsive navigation menu
Responsive columns using float
Responsive columns using flexbox
Hide elements with media queries
Responsive font size
Responsive image gallery
Responsive website
Change layout of a page depending on the orientation of the browser
Min width to max width
CSS media queries examples explained
CSS Responsive Webdesign
Responsive grid view
Add breakpoints for desktops, laptops and phones
Typical breakpoints
Responsive image
Responsive video
Responsive framework: W3.CSS
Responsive framework: Bootstrap
CSS responsive webdesign explained
CSS Grid
Grid layout
Grid elements
Grid column gaps
Grid lines
Grid container
Grid items
CSS grid explained
PX to EM
Conversion
PX to EM Converter
Set a default font size (usually 16px)
Then, convert a pixel value to em, based on the default size
Or, convert an em value to pixels, based on the default size
Set a default font size:
px
Convert PX to EM:
px
Convert EM to PX:
em
Convert
Result:
Body Font Size
In the table below, select a body font size in pixels (px) to display a 
complete "px to em and percent" conversion table.
Tip:
The default font size is usually 16px.
CSS
Animatable
Definition and Usage
Some CSS properties are
animatable
, meaning that they can be used in animations and transitions.
Animatable properties can change gradually from one value to another, like size, numbers, percentage and color.
Browser Support
The numbers in the table specifies the first browser version that fully support CSS animations.
43
10
16
9
30
Example
Animate the background-color from red to blue:
@keyframes mymove
{
from {background-color: red;}
to {background-color: blue;}
}
Try it Yourself 
Animatable Properties
These properties are
animatable
in CSS:
Property
aspect-ratio
Try it
background
Try it
background-color
Try it
background-position
Try it
background-position-x
Try it
background-position-y
Try it
background-size
Try it
block-size
Try it
border
Try it
border-bottom
Try it
border-bottom-color
Try it
border-end-end-radius
Try it
border-end-start-radius
Try it
border-block
Try it
border-block-color
Try it
border-block-end-color
Try it
border-block-end-width
Try it
border-block-start-color
Try it
border-block-start-width
Try it
border-block-width
Try it
border-bottom-left-radius
Try it
border-bottom-right-radius
Try it
border-inline
Try it
border-inline-color
Try it
border-inline-end-color
Try it
border-inline-end-width
Try it
border-inline-start-color
Try it
border-inline-start-width
Try it
border-inline-width
Try it
border-start-end-radius
Try it
border-start-start-radius
Try it
border-bottom-width
Try it
border-color
Try it
border-left
Try it
border-left-color
Try it
border-left-width
Try it
border-right
Try it
border-right-color
Try it
border-right-width
Try it
border-spacing
Try it
border-top
Try it
border-top-color
Try it
border-top-left-radius
Try it
border-top-right-radius
Try it
border-top-width
Try it
bottom
Try it
box-shadow
Try it
clip
Try it
color
Try it
column-count
Try it
column-gap
Try it
column-rule
Try it
column-rule-color
Try it
column-rule-width
Try it
column-width
Try it
columns
Try it
filter
Try it
flex
Try it
flex-basis
Try it
flex-grow
Try it
flex-shrink
Try it
font
Try it
font-size
Try it
font-size-adjust
font-stretch
font-weight
Try it
grid
Try it
grid-area
Try it
grid-auto-columns
Try it
grid-auto-flow
Try it
grid-auto-rows
Try it
grid-column
Try it
grid-column-end
Try it
grid-column-gap
Try it
grid-column-start
Try it
grid-gap
Try it
grid-row
Try it
grid-row-end
Try it
grid-row-gap
Try it
grid-row-start
Try it
grid-template
Try it
grid-template-areas
Try it
grid-template-columns
Try it
grid-template-rows
Try it
height
Try it
inline-size
Try it
inset
Try it
inset-block
Try it
inset-block-end
Try it
inset-block-start
Try it
inset-inline
Try it
inset-inline-end
Try it
inset-inline-start
Try it
left
Try it
letter-spacing
Try it
line-height
Try it
margin
Try it
margin-block
Try it
margin-block-end
Try it
margin-block-start
Try it
margin-bottom
Try it
margin-inline
Try it
margin-inline-end
Try it
margin-inline-start
Try it
margin-left
Try it
margin-right
Try it
margin-top
Try it
max-height
Try it
max-width
Try it
max-block-size
Try it
max-inline-size
Try it
min-block-size
Try it
min-inline-size
Try it
min-height
Try it
min-width
Try it
object-position
Try it
offset-anchor
Try it
offset-distance
Try it
offset-path
Try it
offset-rotate
Try it
opacity
Try it
order
Try it
outline
Try it
outline-color
Try it
outline-offset
Try it
outline-width
Try it
padding
Try it
padding-block
Try it
padding-block-end
Try it
padding-block-start
Try it
padding-bottom
Try it
padding-inline
Try it
padding-inline-end
Try it
padding-inline-start
Try it
padding-left
Try it
padding-right
Try it
padding-top
Try it
perspective
Try it
perspective-origin
Try it
right
Try it
rotate
Try it
scale
Try it
text-decoration-color
Try it
text-indent
Try it
text-shadow
Try it
top
Try it
transform
Try it
transform-origin
Try it
translate
Try it
vertical-align
Try it
visibility
width
Try it
word-spacing
Try it
z-index
Try it
CSS
Fallback Fonts
Commonly Used Fallback Fonts
There are no 100% completely web safe fonts. There is always a chance that a 
font is not found or is not installed properly. Therefore, it is very important 
to always use fallback fonts.
This means that you should add a list of similar "backup fonts" in the 
font-family property. If the first font does not work, the browser will try the 
next one, and the next one, and so on. Always end the list with a generic font 
family name.
Below are some commonly used fallback fonts, organized by the 5 generic font families:
Serif
Sans-serif
Monospace
Cursive
Fantasy
Serif Fonts
font-family
Example text
Code
"Times New Roman", Times, serif
This is a Heading
This is a paragraph.
Try it
Georgia, serif
This is a Heading
This is a paragraph.
Try it
Garamond, serif
This is a Heading
This is a paragraph.
Try it
Sans-Serif Fonts
font-family
Example text
Code
Arial, Helvetica, sans-serif
This is a Heading
This is a paragraph.
Try it
Tahoma, Verdana, sans-serif
This is a Heading
This is a paragraph.
Try it
"Trebuchet MS", Helvetica, sans-serif
This is a Heading
This is a paragraph.
Try it
Geneva, Verdana, sans-serif
This is a Heading
This is a paragraph.
Try it
Monospace Fonts
font-family
Example text
Code
"Courier New", Courier, monospace
This is a Heading
This is a paragraph.
Try it
Cursive Fonts
font-family
Example text
Code
"Brush Script MT", cursive
This is a Heading
This is a paragraph.
Try it
Fantasy Fonts
font-family
Example text
Code
Copperplate, Papyrus, fantasy
This is a Heading
This is a paragraph.
Try it
CSS
Web Safe Fonts
Best Web Safe Fonts for HTML and CSS
The following fonts are the best web safe fonts for HTML and CSS:
Arial (sans-serif)
Verdana (sans-serif)
Tahoma (sans-serif)
Trebuchet MS (sans-serif)
Times New Roman (serif)
Georgia (serif)
Garamond (serif)
Courier New (monospace)
Brush Script MT (cursive)
Arial (sans-serif)
Arial is the most widely used font for both online and printed media. Arial 
is also the default font in Google Docs.
Arial is one of the safest web fonts, and it is available on all major operating systems.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Verdana (sans-serif)
Verdana is a very popular font. Verdana is easily readable even for small font sizes.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Tahoma (sans-serif)
The Tahoma font has less space between the characters.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Trebuchet MS (sans-serif)
Trebuchet MS was designed by Microsoft in 1996. Use this font carefully. Not 
supported by all mobile operating systems.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Times New Roman (serif)
Times New Roman is one of the most recognizable fonts in the world. It looks 
professional and is used in many newspapers and "news" websites. It is also the 
primary font for Windows devices and applications.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Georgia (serif)
Georgia is an elegant serif font. It is very readable at different font sizes, so it is a good candidate for mobile-responsive design.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Garamond (serif)
Garamond is a classical font used for many printed books. It has a timeless 
look and good readability.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Courier New (monospace)
Courier New is the most widely used monospace serif font. 
Courier New is often used with coding displays, and many email providers 
use it as their default font. Courier New is also the standard font for movie 
screenplays.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
Brush Script MT (cursive)
The Brush Script MT font was designed to mimic handwriting.
It is elegant and sophisticated, but can be hard to read. Use it carefully.
Example
Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet.
0 1 2 3 4 5 6 7 8 9
Try it Yourself 
CSS and HTML Website
Hosting
Create a Website with HTML and CSS
Host Websites with
W3Schools Spaces
Get Started for Free
Practice
Coding Skills
kAI
AI Tutor
Build
Projects
Host
Securely
Choose your Plan
By subscribing to a plan you support the W3Schools mission to make
learning available to everyone - no matter their background.
Monthly
Annually
Free
$0
/Forever
This is for you that are beginning to explore coding and web development
Build and host 1 static website
100 credits/month
Access various AI features like W3Schools kAI coding tutor and interview preparation.
No support
Get Free
W3Schools Plus
$14.99
/Month
This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.
Ad-free experience
Build and host 15 static websites
Build and host 1 full stack server
Choose from 18 frameworks / languages
Choose from 75+ templates
50000 credits/month
Access various AI features like W3Schools kAI coding tutor and interview preparation.
Priority Support
Cancel anytime
Get Plus
W3Schools Classroom
Contact us for information
W3Schools right to use and Plus for educational institutions or enterprise customers
Everything in W3Schools Plus
Certification Exams
And much more!
Get More Info
NEW SUBSCRIBER DEAL
25% OFF
FOR A YEAR
USE PROMO CODE:
SPACES25
Want custom domains?
You can also buy a domain or connect an existing one.
Looking to add multiple users?
Read here for how to get in touch
Powerful Code Editor
Front-end, Back-end or Full-stack - the choice is yours
Practice Makes Perfect
Sharpen and Master your development skills with these technologies using
Spaces
.
Get Started for Free
Save Time with Templates
Build powerful websites in just a few clicks
Portfolio
Blog
Webshop
Tutor
Explore All Templates
Get Started for Free
k
AI
Just landed in
Spaces
Learn to code more effectively
and intelligently with kAI - AI tutor
Get Started for Free
Hi! I'm kAI, W3Schools AI Tutor...
Feel free to ask me any coding-related questions, and I'll do my best to assist you.
I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...
I can even create complete websites for you based on your input, so what are you waiting for?
Super Simple to Share
Host and Publish Websites in no time
Included for free in all plans
W3Schools subdomain, hosting, and SSL certificate.
Want custom domains?
Buy a domain or transfer an existing one and connect it to your space.
How it works
1. Join W3Schools
- and create a space
2. Choose a template
- or start from scratch
3. Edit code directly
in your browser
4. Share your website
with the world
Coding Made Easy
All at your fingertips with our easy-to-use
code editor
Cloud-based
Terminal & Log
How To Libraries
Database
File Navigator
Package Manager
Analytics
Environment Manager
Get Started for Free
Cloud-Based
Save Time & Money.
No installation required. Access everything in your browser. Get started in seconds.
Get Started for Free
File Navigator
All Your Files in One Place.
Find and switch easily between your code files without leaving the code editor.
Get Started for Free
Terminal and Log
Fix Your Code Faster.
Monitor your code, debug and troubleshoot your work during the development process.
Get Started for Free
Database
Get Full Data Visibility.
Find and preview all the data stored in your website. Anytime, from anywhere.
Get Started for Free
Environment Manager
Increased Control and Security.
Control your website access points to establish secure connections.
Get Started for Free
Package Manager
Find What You Need Quicker.
Search and install frameworks and libraries in just one click.
Get Started for Free
User Analytics
Get Traffic Insights.
Learn from your website visitors to deliver a better user experience.
Get Started for Free
Get Inspired
Connect
and
share
your website with the community to get instant feedback
Get Started for Free
Frequently Asked Questions
What's the difference between 'Basic' and 'Full Stack' Spaces?
With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.
Which programming languages are included in 'Basic' and 'Full Stack' Spaces?
Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.
How are subscriptions renewed?
Your subscription will be automatically renewed every month.
What happens if I cancel my subscription?
Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.
Can I subscribe to multiple accounts at once?
To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com
Have some other questions?
Visit our support page
Subscribe for $14.99/Month
Cancel anytime.
CSS
Units
CSS Units
CSS has several different units for expressing a length.
Many CSS properties take "length" values, such as
width
,
margin
,
padding
,
font-size
, etc.
Length
is a number followed by a length unit, such as
10px
,
2em
, etc.
Example
Set different length values, using px (pixels):
h1 {
font-size: 60px;
}
p {
font-size: 25px;
line-height: 50px;
}
Try it Yourself 
Note:
A whitespace cannot appear between the number and the unit. However, if the value is
0
, the unit can be omitted.
For some CSS properties, negative lengths are allowed.
There are two types of length units:
absolute
and
relative
.
Absolute Lengths
The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.
Absolute length units are not recommended for use on screen, because screen sizes vary so much. 
However, they can be used if the output medium is known, such 
as for print layout.
Unit
Description
cm
centimeters
Try it
mm
millimeters
Try it
in
inches (1in = 96px = 2.54cm)
Try it
px *
pixels (1px = 1/96th of 1in)
Try it
pt
points (1pt = 1/72 of 1in)
Try it
pc
picas (1pc = 12 pt)
Try it
* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution 
screens 1px implies multiple device pixels.
Relative Lengths
Relative length units specify a length relative to another length property. 
Relative length units scale better between different rendering medium.
Unit
Description
em
Relative to the font-size of the element (2em means 2 times the size of the current font)
Try it
ex
Relative to the x-height of the current font (rarely used)
Try it
ch
Relative to the width of the "0" (zero)
Try it
rem
Relative to font-size of the root element
Try it
vw
Relative to 1% of the width of the viewport*
Try it
vh
Relative to 1% of the height of the viewport*
Try it
vmin
Relative to 1% of viewport's* smaller dimension
Try it
vmax
Relative to 1% of viewport's* larger dimension
Try it
%
Relative to the parent element
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the 
length unit.
Length Unit
em, ex, %, px, cm, mm, in, pt, pc
1.0
3.0
1.0
1.0
3.5
ch
27.0
9.0
1.0
7.0
20.0
rem
4.0
9.0
3.6
4.1
11.6
vh, vw
20.0
9.0
19.0
6.0
20.0
vmin
20.0
12.0
19.0
6.0
20.0
vmax
26.0
16.0
19.0
7.0
20.0
CSS
Browser Support Reference
CSS Reference With Browser Support
The table below lists all CSS properties and how each property is supported in the different browsers:
The number to the right of the browser icon indicates in which browser version the property was first supported.
Property
Edge
Firefox
Chrome
Safari
Opera
A
accent-color
93
92
93
15.4
79
align-content
16
52
57
10.1
44
align-items
16
52
57
10.1
44
align-self
16
52
57
10.1
44
all
79
27
37
9.1
24
animation
10
16
43
9
30
animation-delay
10
16
43
9
30
animation-direction
10
16
43
9
30
animation-duration
10
16
43
9
30
animation-fill-mode
10
16
43
9
30
animation-iteration-count
10
16
43
9
30
animation-name
10
16
43
9
30
animation-play-state
10
16
43
9
30
animation-timing-function
10
16
43
9
30
aspect-ratio
88
89
88
15
74
B
backdrop-filter
79
103
76
9
63
backface-visibility
12
16
36
15.4
23
background
4
1
1
1
3.5
background-attachment
4
1
1
1
3.5
background-blend-mode
79
30
35
7.1
22
background-clip
9
4
4
3
10.5
background-color
4
1
1
1
3.5
background-image
4
1
1
1
3.5
background-origin
9
4
4
3
10.5
background-position
4
1
1
1
3.5
background-position-x
12
49
1
1
15
background-position-y
12
49
1
1
15
background-repeat
4
1
1
1
3.5
background-size
9
4
4
4.1
10
block-size
79
41
57
12.1
44
border
4
1
1
1
3.5
border-block
87
66
87
14.1
73
border-block-color
87
66
87
14.1
73
border-block-end
79
41
69
12.1
56
border-block-end-color
79
41
69
12.1
56
border-block-end-style
79
41
69
12.1
56
border-block-end-width
79
41
69
12.1
56
border-block-start
79
41
69
12.1
56
border-block-start-color
79
41
69
12.1
56
border-block-start-style
79
41
69
12.1
56
border-block-start-width
79
41
69
12.1
56
border-block-style
87
66
87
14.1
73
border-block-width
87
66
87
14.1
73
border-bottom
4
1
1
1
3.5
border-bottom-color
4
1
1
1
3.5
border-bottom-left-radius
9
4
5
5
10.5
border-bottom-right-radius
9
4
5
5
10.5
border-bottom-style
5.5
1
1
1
9.2
border-bottom-width
4
1
1
1
3.5
border-collapse
5
1
1
1.2
4
border-color
4
1
1
1
3.5
border-end-end-radius
89
66
89
15
75
border-end-start-radius
89
66
89
15
75
border-image
11
15
16
6
15
border-image-outset
11
15
15
6
15
border-image-repeat
11
15
15
6
15
border-image-slice
11
15
15
6
15
border-image-source
11
15
15
6
15
border-image-width
11
13
15
6
15
border-inline
87
66
87
14.1
73
border-inline-color
87
66
87
14.1
73
border-inline-end
79
41
69
12.1
56
border-inline-end-color
79
41
69
12.1
56
border-inline-end-style
79
41
69
12.1
56
border-inline-end-width
79
41
69
12.1
56
border-inline-start
79
41
69
12.1
56
border-inline-start-color
79
41
69
12.1
56
border-inline-start-style
79
41
69
12.1
56
border-inline-start-width
79
41
69
12.1
56
border-inline-style
87
66
87
14.1
73
border-inline-width
87
66
87
14.1
73
border-left
4
1
1
1
3.5
border-left-color
4
1
1
1
3.5
border-left-style
5.5
1
1
1
9.2
border-left-width
4
1
1
1
3.5
border-radius
9
4
5
5
10.5
border-right
4
1
1
1
3.5
border-right-color
4
1
1
1
3.5
border-right-style
5.5
1
1
1
9.2
border-right-width
4
1
1
1
3.5
border-spacing
8
1
1
1
4
border-start-end-radius
89
66
89
15
75
border-start-start-radius
89
66
89
15
75
border-style
4
1
1
1
3.5
border-top
4
1
1
1
3.5
border-top-color
4
1
1
1
3.5
border-top-left-radius
9
4
5
5
10.5
border-top-right-radius
9
4
5
5
10.5
border-top-style
5.5
1
1
1
9.2
border-top-width
4
1
1
1
3.5
border-width
4
1
1
1
3.5
bottom
5
1
1
1
6
box-decoration-break
79
32
22
6.1
15
box-shadow
9
4
10
5.1
10.5
box-sizing
8
29
10
5.1
9.5
break-after
10
65
50
10
37
break-before
10
65
50
10
37
break-inside
10
65
50
10
37
C
caption-side
8
1
1
1
4
caret-color
79
53
57
11.1
44
@charset
12
1.5
2
4
9
clear
5
1
1
1
6
clip
8
1
1
1
7
clip-path
79
3.5
55
9.1
42
color
3
1
1
1
3.5
color-scheme
81
96
81
13
68
column-count
10
52
50
9
37
column-fill
10
52
50
10
37
column-gap
84
63
84
14.1
70
column-rule
10
52
50
9
37
column-rule-color
10
52
50
9
37
column-rule-style
10
52
50
9
37
column-rule-width
10
52
50
9
37
column-span
10
71
50
9
37
column-width
10
52
50
9
37
columns
10
52
50
9
37
content
8
1
1
1
4
counter-increment
8
2
4
3.1
9.6
counter-reset
8
2
4
3.1
9.6
counter-set
85
68
85
17.2
71
cursor
5.5
4
5
5
9.6
D
direction
5.5
1
2
1.3
9.2
display
8
3
4
3.1
7
E
empty-cells
8
1
1
1.2
4
F
filter
13
35
53
9.1
40
flex
11
28
29
9
17
flex-basis
11
28
29
9
17
flex-direction
11
28
29
9
17
flex-flow
11
28
29
9
17
flex-grow
11
28
29
9
17
flex-shrink
11
28
29
9
17
flex-wrap
11
28
29
9
17
float
4
1
1
1
7
font
4
1
1
1
3.5
@font-face
9
3.6
4
3
10
font-family
4
1
1
1
3.5
font-feature-settings
10
34
48
9.1
35
@font-feature-values
34
font-kerning
79
34
33
9.1
20.1
font-language-override
34
font-size
5.5
1
1
1
7
font-size-adjust
127
3
127
17
113
font-stretch
9
9
48
11
35
font-style
4
1
1
1
7
font-synthesis
97
34
97
10
83
font-variant
4
1
1
1
3.5
font-variant-alternates
111
34
111
9.1
97
font-variant-caps
79
34
52
9.1
39
font-variant-east-asian
79
34
63
9.1
50
font-variant-ligatures
79
34
34
9.1
21
font-variant-numeric
79
34
52
9.1
39
font-variant-position
117
34
117
9.1
103
font-weight
4
1
2
1.3
3.5
G
gap
84
63
84
14.1
70
grid
10
52
57
10
44
grid-area
10
52
57
10
44
grid-auto-columns
10
52
57
10
44
grid-auto-flow
10
52
57
10
44
grid-auto-rows
10
52
57
10
44
grid-column
10
52
57
10
44
grid-column-end
10
52
57
10
44
grid-column-start
10
52
57
10
44
grid-row
10
52
57
10
44
grid-row-end
10
52
57
10
44
grid-row-start
10
52
57
10
44
grid-template
10
52
57
10
44
grid-template-areas
10
52
57
10
44
grid-template-columns
10
52
57
10
44
grid-template-rows
10
52
57
10
44
H
hanging-punctuation
height
4
1
1
1
7
hyphens
79
43
55
17
44
hyphenate-character
106
98
106
17
92
I
image-rendering
79
65
41
10
28
@import
5.5
1
1
1
3.5
initial-letter
110
110
9
96
inline-size
79
41
57
12.1
44
inset
87
66
87
14.1
73
inset-block
87
63
87
14.1
73
inset-block-end
87
63
87
14.1
73
inset-block-start
87
63
87
14.1
73
inset-inline
87
63
87
14.1
73
inset-inline-end
87
63
87
14.1
73
inset-inline-start
87
63
87
14.1
73
isolation
79
36
41
7.1
30
J
justify-content
11
28
29
9
17
justify-items
16
45
57
10.1
44
justify-self
16
45
57
10.1
44
K
@keyframes
10
16
43
9
30
L
left
5.5
1
1
1
5
letter-spacing
4
1
1
1
3.5
line-break
14
69
58
11
45
line-height
4
1
1
1
7
list-style
4
1
1
1
7
list-style-image
4
1
1
1
7
list-style-position
4
1
1
1
3.5
list-style-type
4
1
1
1
3.5
M
margin
6
1
1
1
3.5
margin-block
87
66
87
14.1
73
margin-block-end
87
41
87
12.1
73
margin-block-start
87
41
87
12.1
73
margin-bottom
6
1
1
1
3.5
margin-inline
87
66
87
14.1
73
margin-inline-end
87
41
87
12.1
73
margin-inline-start
87
41
87
12.1
73
margin-left
6
1
1
1
3.5
margin-right
6
1
1
1
3.5
margin-top
6
1
1
1
3.5
marker
80
72
80
13.1
67
marker-end
80
72
80
13.1
67
marker-mid
80
72
80
13.1
67
marker-start
80
72
80
13.1
67
mask
120
53
120
15.4
106
mask-clip
120
53
120
15.4
106
mask-composite
120
53
120
15.4
106
mask-image
120
53
120
15.4
15
mask-mode
120
53
120
15.4
106
mask-origin
120
53
120
15.4
106
mask-position
120
53
120
15.4
106
mask-repeat
120
53
120
15.4
106
mask-size
120
53
120
15.4
106
mask-type
79
35
24
7
15
max-block-size
79
41
57
12.1
44
max-height
7
1
1
2
7
max-inline-size
79
41
57
12.1
44
max-width
7
1
1
2
7
@media
9
3.5
21
4
9
min-block-size
79
41
57
12.1
44
min-inline-size
79
41
57
12.1
44
min-height
7
1
1
2
4
min-width
7
1
1
2
4
mix-blend-mode
79
32
41
8
35
N
@namespace
9
1
1
1
8
O
object-fit
16
36
31
7.1
19
object-position
16
36
31
7.1
19
offset
79
72
55
16
42
offset-anchor
116
72
116
16
102
offset-distance
79
72
55
16
42
offset-path
79
72
55
15.4
45
offset-position
116
122
116
16
102
offset-rotate
79
72
56
16
43
opacity
9
2
4
3.1
9
order
11
28
29
9
17
orphans
8
25
3.1
10
outline
8
1.5
1
1.2
7
outline-color
8
1.5
1
1.2
7
outline-offset
15
3.5
4
3
10.5
outline-style
8
1.5
1
1.2
7
outline-width
8
1.5
1
1.2
7
overflow
4
1
1
1
7
overflow-anchor
79
66
56
43
overflow-wrap
18
49
23
6.1
12.1
overflow-x
9
3.5
4
3
9.5
overflow-y
9
1.5
4
3
9.5
overscroll-behavior
18
59
63
16
50
overscroll-behavior-block
79
73
77
16
64
overscroll-behavior-inline
79
73
77
16
64
overscroll-behavior-x
18
59
63
16
50
overscroll-behavior-y
18
59
63
16
50
P
padding
4
1
1
1
3.5
padding-block
87
66
87
14.1
73
padding-block-end
87
41
87
12.1
73
padding-block-start
87
41
87
12.1
73
padding-bottom
4
1
1
1
3.5
padding-inline
87
66
87
14.1
73
padding-inline-end
87
41
87
12.1
73
padding-inline-start
87
41
87
12.1
73
padding-left
4
1
1
1
3.5
padding-right
4
1
1
1
3.5
padding-top
4
1
1
1
3.5
@page
12
19
12
13.1
15
page-break-after
4
1
1
1.2
7
page-break-before
4
1
1
1.2
7
page-break-inside
8
19
1
1.3
7
paint-order
17
60
35
8
22
perspective
10
16
36
9
23
perspective-origin
10
16
36
9
23
place-content
79
53
59
11
46
place-items
79
45
59
11
46
place-self
79
45
59
11
46
pointer-events
11
3.6
2
4
9
position
7
1
1
1.2
4
Q
quotes
8
1.5
11
5.1
4
R
resize
79
5
4
4
15
right
5.5
1
1
1
5
rotate
104
72
104
14.1
90
row-gap
84
63
84
14.1
70
S
scale
104
72
104
14.1
90
scroll-behavior
79
36
61
14
48
scroll-margin
79
90
69
14.1
56
scroll-margin-block
79
68
69
14.1
56
scroll-margin-block-end
79
68
69
14.1
56
scroll-margin-block-start
79
68
69
14.1
56
scroll-margin-bottom
79
68
69
14.1
56
scroll-margin-inline
79
68
69
14.1
56
scroll-margin-inline-end
79
68
69
14.1
56
scroll-margin-inline-start
79
68
69
14.1
56
scroll-margin-left
79
68
69
14.1
56
scroll-margin-right
79
68
69
14.1
56
scroll-margin-top
79
68
69
14.1
56
scroll-padding
79
90
69
14.1
56
scroll-padding-block
79
68
69
14.1
56
scroll-padding-block-end
79
68
69
14.1
56
scroll-padding-block-start
79
68
69
14.1
56
scroll-padding-bottom
79
68
69
14.1
56
scroll-padding-inline
79
68
69
14.1
56
scroll-padding-inline-end
79
68
69
14.1
56
scroll-padding-inline-start
79
68
69
14.1
56
scroll-padding-left
79
68
69
14.1
56
scroll-padding-right
79
68
69
14.1
56
scroll-padding-top
79
68
69
14.1
56
scroll-snap-align
79
68
69
11
56
scroll-snap-stop
79
68
69
11
56
scroll-snap-type
79
68
69
11
56
scrollbar-color
121
64
121
107
scrollbar-gutter
94
97
94
80
scrollbar-width
121
64
121
107
shape-image-threshold
79
62
37
10.1
24
shape-margin
79
62
37
10.1
24
shape-outside
79
62
37
10.1
24
shape-rendering
80
72
80
13.1
67
@supports
12
22
28
9
12.1
T
tab-size
79
91
21
7
15
table-layout
5
1
14
1
7
text-align
3
1
1
1
3.5
text-align-last
12
49
47
16
34
text-combine-upright
79
48
48
15.4
35
text-decoration
3
1
1
1
3.5
text-decoration-color
79
36
57
12.1
44
text-decoration-line
79
36
57
12.1
44
text-decoration-style
79
36
57
12.1
44
text-decoration-thickness
89
70
89
12.1
75
text-emphasis
99
46
99
7
85
text-emphasis-color
99
46
99
7
85
text-emphasis-position
99
46
99
7
85
text-emphasis-style
99
46
99
7
85
text-indent
3
1
1
1
3.5
text-justify
55
text-orientation
79
41
48
14
35
text-overflow
6
7
4
3.1
11
text-shadow
10
3.5
4
4
9.6
text-transform
4
1
1
1
7
text-underline-offset
87
70
87
12.1
73
text-underline-position
79
74
33
12.1
20
top
5
1
1
1
6
touch-action
12
52
36
13
23
transform
12
16
36
9
23
transform-origin
12
16
36
9
23
transform-style
12
16
36
9
23
transition
10
16
26
6.1
12.1
transition-delay
10
16
26
6.1
12.1
transition-duration
10
16
26
6.1
12.1
transition-property
10
16
26
6.1
12.1
transition-timing-function
10
16
26
6.1
12.1
translate
104
72
104
14.1
90
U
unicode-bidi
5.5
1
2
1.3
9.2
user-select
79
69
54
3.1
41
V
vertical-align
4
1
1
1
4
visibility
4
1
1
1
4
W
white-space
8
3.5
1
3
9.5
widows
8
25
7
10
width
4
1
1
1
3.5
will-change
79
36
36
9.1
24
word-break
5.5
15
4
3.1
15
word-spacing
6
1
1
1
3.5
word-wrap
5.5
3.5
4
3.1
10.5
writing-mode
12
41
48
11
35
Z
z-index
4
3
1
1
4
zoom
12
126
1
3.1
15
Icon Explanations
Supported by Edge
Supported by Firefox
Supported by Chrome
Supported by Safari
Supported by Opera
Supported by Edge with prefix -webkit-
Supported by Firefox with prefix -moz-
Supported by Chrome with prefix -webkit-
Supported by Safari with prefix -webkit-
Supported by Opera with prefix -webkit-
CSS
Aural
Reference
Aural Style Sheets
Aural style sheets use a combination of speech synthesis and sound effects to make the user listen to information, instead of reading information.
Aural presentation can be used:
by blind people
to help users learning to read
to help users who have reading problems
for home entertainment
in the car
by print-impaired communities
The aural presentation converts the document to plain text and feed this to a
screen reader (a program that reads all the characters on the screen).
An example of an Aural style sheet:
@media aural {
h1, h2, h3, h4
{
voice-family: male;
richness: 80;
cue-before: url("beep.au")
}
}
The example above will make the speech synthesizer play a sound, then speak the headers in a very rich male voice.
CSS Aural Reference
Property
Description
Values
azimuth
Sets where the sound should come from
angle
left-side
far-left
left
center-left
center
center-right
right
far-right
right-side
behind
leftwards
rightwards
cue
Sets the cue properties
      in one declaration
cue-before
cue-after
cue-after
Specifies a sound to be played after speaking an element's
      content
none
url
cue-before
Specifies a sound to be played before speaking an element's
      content
none
url
elevation
Sets where the sound should come from
angle
below
level
above
higher
lower
pause
Sets the pause properties
      in one declaration
pause-before
pause-after
pause-after
Specifies a pause after speaking an element's content
time
%
pause-before
Specifies a pause before speaking an element's content
time
%
pitch
Specifies the speaking voice
frequency
x-low
low
medium
high
x-high
pitch-range
Specifies the variation in the speaking voice. (Monotone
      voice or animated voice?)
number
play-during
Specifies a sound to be played while speaking an element's
      content
auto
none
url
mix
repeat
richness
Specifies the richness of the speaking voice. (Rich voice
      or thin voice?)
number
speak
Specifies whether content will render aurally
normal
none
spell-out
speak-header
Specifies how to handle table headers. Should the headers
      be spoken before every cell, or only before a cell with a different header
      than the previous cell
always
once
speak-numeral
Specifies how to speak numbers
digits
continuous
speak-punctuation
Specifies how to speak punctuation characters
none
code
speech-rate
Specifies the speed of the speaking
number
x-slow
slow
medium
fast
x-fast
faster
slower
stress
Specifies the "stress" in the speaking voice
number
voice-family
Specifies the voice family of the speaking
specific-voice
generic-voice
volume
Specifies the volume of the speaking
number
%
silent
x-soft
soft
medium
loud
x-loud
W3Schools
CSS Bootcamp
HTML & CSS Bootcamp
Learn Front-end with W3Schools.
Self-paced online courses.
Duration
: Around 80 hours.
Learn More
w
3
s
c
h
o
o
l
s
B
O
O
T
C
A
M
P
.
2
0
2
4
What You Will Learn
HTML
How to use the latest HTML 5 standard to create your own Website.
How to format text, add graphics, create links, input forms, frames and tables, etc.
How to save it all in a text file that any browser can read and display.
CSS
How to control the style and layout of multiple web pages all at once.
How to change the appearance and layout of all the pages in a Web site.
JavaScript
How to program the behavior of web pages.
How to change the content and style of web pages.
Self-paced Courses
Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.
HTML is the standard markup language for Web pages. With HTML you can create your own Website.
CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.
JavaScript is the programming language of the Web.
This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the 
W3schools certification.
The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.
What You Get
4x Certifications:
Certified HTML Developer
Certified CSS Developer
Certified JavaScript Developer
Certified Front End Developer
Certificate of Completion
You get sharable certificates that can be added to your CV, Resume or LinkedIn.
Check out what it looks like in this example!
Three Reasons to Join the Program
1. Bite-sized learning
The training content is built to be easy to understand.
2. Increase your employability
Document your skills and knowledge with acknowledged certifications.
3. Save time and money
No deadlines. Study at your own pace.
Learn More
How it Works
Step 1. Course enrollment
Enroll by paying the enrollment fee and gain access to the course and final exam.
There is no deadline to take the exam. All questions in the exam are based on W3Schools content.
Step 2. Complete the course learning modules
The courses are self-paced with text based modules, practical interactive examples and exercises
to check your understanding as you progress. Complete the learning modules to unlock the final exam.
Step 3. Take the exams
The exams are taken at the end of each course after finishing the course learning modules.
Immediately after completing the exam, you will be informed of your score and of your pass/fail status.
You will get three attempts to pass each exam. You can use the new attempts to improve 
your score.
The best result of the attempts will count.
Step 4: Become certified
Pass the exams and get your certifications and your Certified Developer titles!
Each certificate gets a unique link that can be shared with others. Validate your certificates with 
a link or a QR code.
Learn More
CSS
animation-duration
Property
Example
Specify that the animation should complete one cycle in 3 seconds:
div {
animation-duration: 3s;
}
Try it Yourself 
Definition and Usage
The
animation-duration
property defines how long an animation should take to complete one cycle.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationDuration="3s"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-duration
43
10
16
9
30
CSS Syntax
animation-duration:
time
|initial|inherit;
Property Values
Value
Description
Demo
time
Specifies the length of time an 
animation should take to complete one cycle. This can be specified in seconds or 
    milliseconds. Default value is 0, which means that no animation will occur
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationDuration property
CSS
animation-iteration-count
Property
Example
Play the animation two times:
div {
animation-iteration-count: 2;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-iteration-count
property specifies the number of times an animation should be played.
Default value:
1
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationIterationCount="infinite"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-iteration-count
43
10
16
9
30
CSS Syntax
animation-iteration-count:
number
|infinite|initial|inherit;
Property Values
Value
Description
Demo
number
A number that defines how many times an animation should be played. Default value is 1
Play it 
infinite
Specifies that the animation should be played infinite times (for ever)
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Play the animation forever:
div {
animation-iteration-count: infinite;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationIterationCount property
CSS
align-self
Property
Example
Center the alignments for one of the items inside a flexible element:
#myBlueDiv
 {
align-self: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
align-self
property specifies the alignment in the block direction for the selected item inside a flexbox or grid container.
For pages in English, block direction is downward and inline direction is left to right.
Tip:
To align a grid item in the inline direction instead of the block direction, use
justify-self
or
justify-items
properties.
Note:
The
align-self
property overrides the grid or flexible container's
align-items
property.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.alignSelf="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
align-self
57.0
16.0
52.0
10.1
44.0
CSS Syntax
align-self: auto|stretch|center|flex-start|flex-end|baseline|initial|inherit;
Property Values
Value
Description
Play it
auto
Default. The element inherits its parent container's align-items property, or "stretch" if it has no parent container
Demo 
stretch
The element is positioned to fit the container
Demo 
center
The element is positioned at the center of the container
Demo 
flex-start
The element is positioned at the beginning of the container
Demo 
flex-end
The element is positioned at the end of the container
Demo 
baseline
The element is positioned at the baseline of the container
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
align-self in grid layout
Set alignment at the end in the block direction for a single grid item with the align-self property:
#container {
display: grid;
}
#myDiv {
align-self: end;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS grid
CSS Tutorial:
CSS flexbox
CSS Reference:
align-content property
CSS Reference:
align-items property
CSS Reference:
justify-self property
HTML DOM reference:
alignSelf property
CSS
Entities
Complete CSS Entity Reference
If you use CSS to display any of these characters in HTML, you can use the CSS entity found in the table below.
Example
<style>
h2:after {
content: ' \00A7';
}
</style>
All <h2> elements will be displayed with this character at the end:

CSS
all
Property
Example
Change all the properties applied to the element or the element's parent to their initial value:
div
 {
background-color: yellow;
color: red;
all: initial;
}
Try it Yourself 
Definition and Usage
The
all
property resets all properties, apart from unicode-bidi and 
direction, to their initial or inherited value.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.all="initial"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
all
37.0
79.0
27.0
9.1
24.0
CSS Syntax
all: initial|inherit|unset;
Property Values
Value
Description
initial
Changes all the properties applied to the element or the element's parent to their initial value
inherit
Changes all the properties applied to the element or the element's parent to their parent value
unset
Changes all the properties applied to the element or the element's parent to their parent value if they are inheritable or to their initial value if not
CSS
animation-name
Property
Example
Specify a name for the @keyframes animation:
div {
animation-name: mymove;
}
Try it Yourself 
Definition and Usage
The
animation-name
property specifies a name for the
@keyframes
animation.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationName="myNEWmove"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-name
43
10
16
9
30
CSS Syntax
animation-name:
keyframename
|none|initial|inherit;
Property Values
Value
Description
keyframename
Specifies the name of the keyframe you want to bind to the selector
none
Default value. Specifies that there will be no animation (can be used to override animations coming from the cascade)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationName property
CSS
animation-delay
Property
Example
Start the animation after 2 seconds:
div {
animation-delay: 2s;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-delay
property specifies a delay for the start of an animation.
The animation-delay value is defined in seconds (s) or milliseconds (ms).
Default value:
0s
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationDelay="1s"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-delay
43
10
16
9
30
CSS Syntax
animation-delay:
time
|initial|inherit;
Property Values
Value
Description
Demo
time
Optional. Defines the number of seconds (s) or milliseconds (ms) to wait before the animation will start. Default value is 0. Negative values are allowed. 
    If you use negative values, the animation will start as if it had already 
    been playing for
N
seconds/milliseconds.
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Using negative values. Here, the animation will start as if it had already 
been playing for 2 seconds:
div {
animation-delay: -2s;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationDelay property
CSS
Legal Color Values
CSS Colors
Colors in CSS can be specified by the following methods:
Hexadecimal colors
Hexadecimal colors with transparency
RGB colors
RGBA colors
HSL colors
HSLA colors
Predefined/Cross-browser color names
With the
currentcolor
keyword
Hexadecimal Colors
A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. 
All values must be between 00 and FF.
For example, the #0000ff value is rendered as blue, because the blue component is set to its highest value (ff) and the others are set to 
00.
Example
Define different HEX colors:
#p1 {background-color: #ff0000;} /* red */
#p2 {background-color: #00ff00;} /* green */
#p3 {background-color: #0000ff;} /* blue */
Try it Yourself 
Hexadecimal Colors With Transparency
A hexadecimal color is specified with: #RRGGBB. To add transparency, add two 
additional digits between 00 and FF.
Example
Define different HEX colors with transparency:
#p1a {background-color: #ff000080;} /* red transparency */
#p2a {background-color: #00ff0080;} /* green 
  transparency */
#p3a {background-color: #0000ff80;} /* blue 
  transparency */
Try it Yourself 
RGB Colors
An RGB color value is specified with the
rgb() function
, which has the following syntax:
rgb(red, green, blue)
Each parameter (red, green, and 
blue) defines the intensity of the color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).
For example, the rgb(0,0,255) value is rendered as blue, 
because the blue parameter is set to its highest value (255) and the others are 
set to 0.
Also, the following values define equal color: rgb(0,0,255) and rgb(0%,0%,100%).
Example
Define different RGB colors:
#p1 {background-color: rgb(255, 0, 0);} /* red */
#p2 {background-color: rgb(0, 255, 0);} /* green */
#p3 {background-color: rgb(0, 0, 255);} /* blue */
Try it Yourself 
RGBA Colors
RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity of the object.
An RGBA color is specified with the
rgba() function
, which has the following syntax:
rgba(red, green, blue, alpha)
The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
Example
Define different RGB colors with opacity:
#p1 {background-color: rgba(255, 0, 0, 0.3);} /* red with opacity */
#p2 {background-color: rgba(0, 255, 0, 0.3);} /* green with opacity */
#p3 {background-color: rgba(0, 0, 255, 0.3);} /* blue with opacity */
Try it Yourself 
HSL Colors
HSL stands for hue, saturation, and lightness - and represents a cylindrical-coordinate representation of colors.
An HSL color value is specified with the
hsl() 
function
, which has the following syntax:
hsl(hue, saturation, lightness)
Hue is a degree on the color wheel (from 0 to 360) - 0 (or 360) is red, 120 
is green, 240 is blue. Saturation is a percentage value; 0% means a shade of 
gray and 100% is the full color. Lightness is also a percentage; 0% is black, 
100% is white.
Example
Define different HSL colors:
#p1 {background-color: hsl(120, 100%, 50%);} /* green */
#p2 {background-color: hsl(120, 100%, 75%);} /* light green */
#p3 {background-color: hsl(120, 100%, 25%);} /* dark green */
#p4 {background-color: hsl(120, 60%, 70%);} /* pastel green */
Try it Yourself 
HSLA Colors
HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity of the object.
An HSLA color value is specified with the
hsla() 
function
, which has the following syntax:
hsla(hue, saturation, lightness, alpha)
The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
Example
Define different HSL colors with opacity:
#p1 {background-color: hsla(120, 100%, 50%, 0.3);} /* green with opacity */
#p2 {background-color: hsla(120, 100%, 75%, 0.3);} /* light green with opacity */
#p3 {background-color: hsla(120, 100%, 25%, 0.3);} /* dark green with opacity */
#p4 {background-color: hsla(120, 60%, 70%, 0.3);} /* pastel green with opacity */
Try it Yourself 
Predefined/Cross-browser Color Names
140 color names are predefined in the HTML and CSS color specification.
For example:
blue
,
red
,
coral
,
brown
, etc:
Example
Define different color names:
#p1 {background-color: blue;}
#p2 {background-color: red;}
#p3 {background-color: coral;}
#p4 {background-color: brown;}
Try it Yourself 
The currentcolor Keyword
The
currentcolor
keyword refers to the value of the color property of an element.
Example
The border color of the following <div> element will be blue, because the 
 text color of the <div> element is blue:
#myDIV {
color: blue; /* Blue text color */
border: 10px solid currentcolor; 
  /* Blue border color */
}
Try it Yourself 
CSS
accent-color
Property
Example
Set the accent color for different user-interface controls:
input[type=checkbox] {
accent-color: red;
}
input[type=radio] {
accent-color: green;
}
input[type=range] {
accent-color: 
    rgb(0, 0, 255);
}
progress {
accent-color: hsl(39, 100%, 50%);
}
Try it Yourself 
Definition and Usage
The
accent-color
property specifies the 
accent color for user-interface controls like: <input type="checkbox">, <input 
type="radio">, <input type="range"> and <progress>.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS4
JavaScript syntax:
object
.style.accentColor="red"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
accent-color
93.0
93.0
92.0
15.4
79.0
CSS Syntax
accent-color: 
  auto|
color
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default value. The browser choose the accent color
Demo 
color
Specifies the color to be used as the accent color. All legal color values can be used (rgb, 
    hex, named-color, etc). For more information on legal values, read our
CSS 
    Colors Tutorial
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
animation-timing-function
Property
Example
Play an animation with the same speed from beginning to end:
div {
animation-timing-function: linear;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-timing-function
specifies the speed curve of an animation.
The speed curve defines the TIME an animation uses to change from one set of CSS styles to another.
The speed curve is used to make the changes smoothly.
Default value:
ease
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationTimingFunction="linear"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-timing-function
43
10
16
9
30
CSS Syntax
animation-timing-function: linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start|end)|cubic-bezier(
n
,
n
,
n
,
n
)|initial|inherit;
The animation-timing-function uses a mathematical function, called the Cubic 
Bezier 
curve, to make the speed curve. You can use your own 
values in this function, or use one of the pre-defined values:
Property Values
Value
Description
Demo
linear
The animation has the same speed from start to end
Play it 
ease
Default value. The animation has a slow start, then fast, before it ends slowly
Play it 
ease-in
The animation has a slow start
Play it 
ease-out
The animation has a slow end
Play it 
ease-in-out
The animation has both a slow start and a slow end
Play it 
step-start
Equivalent to steps(1, start)
step-end
Equivalent to steps(1, end)
steps(int,start|end)
Specifies a stepping function, with two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value "start" or "end", and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value "end"
cubic-bezier(
n
,
n
,
n
,
n
)
Define your own values in the cubic-bezier function
Possible values are numeric values from 0 to 1
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Tip:
Try the different values in the "More Examples" section below.
More Examples
Example
To better understand the different timing function values;
Here are five different <div> elements with five different values:
#div1 {animation-timing-function: linear;}
#div2 {animation-timing-function: ease;}
#div3 {animation-timing-function: ease-in;}
#div4 {animation-timing-function: ease-out;}
#div5 {animation-timing-function: ease-in-out;}
Try it Yourself 
Example
Same as the example above, but the speed curves are defined with the 
cubic-bezier function:
#div1 {animation-timing-function: cubic-bezier(0,0,1,1);}
#div2 {animation-timing-function: cubic-bezier(0.25,0.1,0.25,1);}
#div3 {animation-timing-function: cubic-bezier(0.42,0,1,1);}
#div4 {animation-timing-function: cubic-bezier(0,0,0.58,1);}
#div5 {animation-timing-function: cubic-bezier(0.42,0,0.58,1);}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationTimingFunction property
CSS
animation-fill-mode
Property
Example
Let the <div> element retain the style values from the last keyframe 
when the animation ends:
div {
animation-fill-mode: forwards;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-fill-mode
property specifies a style for the element when the animation is not playing (before 
it starts, after it ends, or both).
CSS animations do not affect the element before the first keyframe is played 
or after the last keyframe is played. The
animation-fill-mode
property can override this 
behavior.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationFillMode="forwards"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-fill-mode
43
10
16
9
30
CSS Syntax
animation-fill-mode: none|forwards|backwards|both|initial|inherit;
Property Values
Value
Description
none
Default value. Animation will not apply any styles to the element before or after it is executing
forwards
The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
backwards
The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during 
    the 
    animation-delay period
both
The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Let the <div> element get the style values set by the first keyframe before 
the animation starts (during the animation-delay period):
div {
animation-fill-mode: backwards;
}
Try it Yourself 
Example
Let the <div> element get the style values set by the first keyframe before 
the animation starts, and retain the style values from the last keyframe when 
the animation ends:
div {
animation-fill-mode: both;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationFillMode property
CSS
Default Values
Reference
Default CSS Values for HTML Elements
The table below shows the default CSS browser values for all HTML elements.
Element
Default CSS Value
Try it
a:link
color: (internal value);
text-decoration: underline;
cursor: auto;
Try it 
a:visited
color: (internal value);
text-decoration: underline;
cursor: auto;
Try it 
a:link:active
color: (internal value);
Try it 
a:visited:active
color: (internal value);
Try it 
abbr
None.
address
display: block;
font-style: italic;
Try it 
area
display: none;
article
display: block;
aside
display: block;
audio
None.
b
font-weight: bold;
Try it 
base
None.
bdi
None.
bdo
unicode-bidi: bidi-override;
blockquote
display: block;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 40px;
margin-right: 40px;
Try it 
body
display: block;
margin: 8px;
Try it 
body:focus
outline: none;
Try it 
br
None.
button
None
canvas
None.
caption
display: table-caption;
text-align: center;
Try it 
cite
font-style: italic;
Try it 
code
font-family: monospace;
Try it 
col
display: table-column;
Try it 
colgroup
display: table-column-group
Try it 
datalist
display: none;
dd
display: block;
margin-left: 40px;
Try it 
del
text-decoration: line-through;
Try it 
details
display: block;
dfn
font-style: italic;
Try it 
dialog
None.
div
display: block;
Try it 
dl
display: block;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 0;
margin-right: 0;
Try it 
dt
display: block;
Try it 
em
font-style: italic;
Try it 
embed:focus
outline: none;
fieldset
display: block;
margin-left: 2px;
margin-right: 2px;
padding-top: 0.35em;
padding-bottom: 0.625em;
padding-left: 0.75em;
padding-right: 0.75em;
border: 2px groove (internal value);
Try it 
figcaption
display: block;
figure
display: block;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 40px;
margin-right: 40px;
Try it 
footer
display: block;
form
display: block;
margin-top: 0em;
Try it 
h1
display: block;
font-size: 2em;
margin-top: 0.67em;
margin-bottom: 0.67em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
h2
display: block;
font-size: 1.5em;
margin-top: 0.83em;
margin-bottom: 0.83em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
h3
display: block;
font-size: 1.17em;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
h4
display: block;
margin-top: 1.33em;
margin-bottom: 1.33em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
h5
display: block;
font-size: .83em;
margin-top: 1.67em;
margin-bottom: 1.67em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
h6
display: block;
font-size: .67em;
margin-top: 2.33em;
margin-bottom: 2.33em;
margin-left: 0;
margin-right: 0;
font-weight: bold;
Try it 
head
display: none;
header
display: block;
hr
display: block;
margin-top: 0.5em;
margin-bottom: 0.5em;
margin-left: auto;
margin-right: auto;
border-style: inset;
border-width: 1px;
Try it 
html
display: block;
html:focus
outline: none;
i
font-style: italic;
Try it 
iframe:focus
outline: none;
iframe[seamless]
display: block;
img
display: inline-block;
Try it 
input
None.
ins
text-decoration: underline;
Try it 
kbd
font-family: monospace;
Try it 
label
cursor: default;
Try it 
legend
display: block;
padding-left: 2px;
padding-right: 2px;
border: none;
Try it 
li
display: list-item;
link
display: none;
main
None.
map
display: inline;
mark
background-color: yellow;
color: black;
Try it 
menu
display: block;
list-style-type: disc;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 0;
margin-right: 0;
padding-left: 40px;
menuitem
None.
meta
None.
meter
None.
nav
display: block;
noscript
None.
object:focus
outline: none;
ol
display: block;
list-style-type: decimal;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 0;
margin-right: 0;
padding-left: 40px;
Try it 
optgroup
None.
option
None.
output
display: inline;
p
display: block;
margin-top: 1em;
margin-bottom: 1em;
margin-left: 0;
margin-right: 0;
Try it 
param
display: none;
picture
None.
pre
display: block;
font-family: monospace;
white-space: pre;
margin: 1em 0;
Try it 
progress
None.
q
display: inline;
Try it 
q::before
content: open-quote;
Try it 
q::after
content: close-quote;
Try it 
rp
None.
rt
line-height: normal;
ruby
None.
s
text-decoration: line-through;
Try it 
samp
font-family: monospace;
Try it 
script
display: none;
section
display: block;
Try it 
select
None.
small
font-size: smaller;
Try it 
source
None.
span
None.
strike
text-decoration: line-through;
Try it 
strong
font-weight: bold;
Try it 
style
display: none;
sub
vertical-align: sub;
font-size: smaller;
Try it 
summary
display: block;
sup
vertical-align: super;
font-size: smaller;
Try it 
table
display: table;
border-collapse: separate;
border-spacing: 2px;
border-color: gray;
Try it 
tbody
display: table-row-group;
vertical-align: middle;
border-color: inherit;
td
display: table-cell;
vertical-align: inherit;
template
None.
textarea
None.
tfoot
display: table-footer-group;
vertical-align: middle;
border-color: inherit;
th
display: table-cell;
vertical-align: inherit;
font-weight: bold;
text-align: center;
thead
display: table-header-group;
vertical-align: middle;
border-color: inherit;
time
None.
title
display: none;
tr
display: table-row;
vertical-align: inherit;
border-color: inherit;
track
None.
u
text-decoration: underline;
Try it 
ul
display: block;
list-style-type: disc;
margin-top: 1em;
margin-bottom: 1 em;
margin-left: 0;
margin-right: 0;
padding-left: 40px;
Try it 
var
font-style: italic;
Try it 
video
None.
wbr
None.
CSS
animation-play-state
Property
Example
Pause an animation:
div {
animation-play-state: paused;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-play-state
property specifies whether the animation is running or paused.
Note:
Use this property in a JavaScript to pause an animation in the middle of a cycle.
Default value:
running
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationPlayState="paused"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-play-state
43
10
16
9
30
CSS Syntax
animation-play-state: paused|running|initial|inherit;
Property Values
Value
Description
Demo
paused
Specifies that the animation is paused
Play it 
running
Default value. Specifies that the animation is running
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationPlayState property
More Examples
Example
Pause an animation on hover:
div:hover {
animation-play-state: paused;
}
Try it Yourself 
CSS
HEX Colors
A hexadecimal color is specified with: #RRGGBB, where the RR 
(red), GG (green) and BB (blue) hexadecimal integers specify the components of 
the color.
HEX Value
In CSS, a color can be specified using a hexadecimal value in the form:
#
rrggbb
Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).
For example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to 
the lowest value (00).
To display black, set all values to 00, like this: #000000.
To display white, set all values to ff, like 
this: #ffffff.
Experiment by mixing the HEX values below:
RED
ff
GREEN
0
BLUE
0
Example
#ff0000
#0000ff
#3cb371
#ee82ee
#ffa500
#6a5acd
Try it Yourself 
Shades of gray are often defined using equal values for all the 3 light sources:
Example
#3c3c3c
#616161
#787878
#b4b4b4
#f0f0f0
#f9f9f9
Try it Yourself 
3 Digit HEX Value
Sometimes you will see a 3-digit hex code in the CSS source.
The 3-digit hex code is a shorthand for some 6-digit hex codes.
The 3-digit hex code has the following form:
#
rgb
Where r, g, and b represent the red, green, and blue components with values between 0 and f.
The 3-digit hex code can only be used when both the values (RR, GG, and BB) are the same for 
each component. So, if we have #ff00cc, it can be written like this: #f0c.
Here is an example:
Example
body {
background-color: #fc9; /* same as #ffcc99 */
}
h1 {
color: #f0f; /* same as #ff00ff */
}
p {
color: #b58; /* same as #bb5588 */
}
Try it Yourself 
Video: CSS Colors Hex
CSS
Layout - clear and clearfix
The clear Property
When we use the
float
property, and we want 
the next element below (not on right or left), we will have to use the
clear
property.
The
clear
property specifies what 
should happen with the element that is next to a floating element.
The
clear
property can have one of the 
following values:
none
- The element is not pushed below 
  left or right floated elements. This is default
left
- The element is pushed below left 
  floated elements
right
- The element is pushed below 
  right floated elements
both
- The element is pushed below both 
  left and right floated elements
inherit
- The element inherits the clear value 
  from its parent
When clearing floats, you should match the clear to the float: If an element 
is floated to the left, then you should clear to the left. Your floated element 
will continue to float, but the cleared element will appear below it on the web 
page.
Example
This example clears the float to the left. Here, it means that the <div2> 
element is pushed below the left floated <div1> element:
div1 {
float: left;
}
div2 {
clear: left;
}
Try it Yourself 
The clearfix Hack
If a floated element is taller than the containing element, it 
will "overflow" outside of its container. We can then add a clearfix hack to 
solve this problem:
Without Clearfix
With Clearfix
Example
.clearfix {
overflow: auto;
}
Try it Yourself 
The
overflow: auto
clearfix works well as long as you are able to keep control of your margins and padding (else you 
might see scrollbars). The
new, modern clearfix hack
however, is safer to use, and the following code is used for most webpages:
Example
.clearfix::after {
content: "";
clear: both;
display: table;
}
Try it Yourself 
CSS Variables - The var() Function
CSS Variables
The
var()
function is used to insert the value of a 
CSS variable.
CSS variables have access to the DOM, which means that you can create 
variables with local or global scope, change the variables with JavaScript, and 
change the variables based on media queries.
A good way to use CSS variables is when it comes to the colors of your 
design. Instead of copy and paste the same colors over and over again, you can 
place them in variables.
The Traditional Way
The following example shows the traditional way of defining some colors in a style sheet 
(by defining the colors to use, for each specific element):
Example
body { background-color: #1e90ff; }
h2 { border-bottom: 2px solid #1e90ff; }
.container {
color: 
  #1e90ff;
background-color: #ffffff;
padding: 15px;
}
button {
background-color: #ffffff;
color: #1e90ff;
border: 1px 
  solid #1e90ff;
padding: 5px;
}
Try it Yourself 
Syntax of the var() Function
The
var()
function is used to insert the value of a 
CSS variable.
The syntax of the
var()
function is as follows:
var(--
name, value
)
Value
Description
name
Required. The variable name (must start with two 
    dashes)
value
Optional. The fallback value (used if the variable is not found)
Note:
The variable name must begin with two dashes (--) and it is case sensitive!
How var() Works
First of all: CSS variables can have a global or local scope.
Global variables can be accessed/used through the entire document, while 
local variables can be used only inside the selector where it is declared.
To create a variable with global scope, declare it inside the
:root
selector. The
:root
selector matches the document's root element.
To create a variable with local scope, declare it inside the selector that is going to use it.
The following example is equal to the example above, but here we use the
var()
function.
First, we declare two global variables (--blue and --white). Then, we use the
var()
function to insert the value of the variables later in the style sheet:
Example
:root {
--blue: #1e90ff;
--white: #ffffff;
}
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Advantages of using var() are:
makes the code easier to read (more understandable)
makes it much easier to change the color values
To change the blue and white color to a softer blue and white, you just need 
to change the two variable values:
Example
:root {
--blue: #6495ed;
--white: #faf0e6;
}
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }
.container {
color: var(--blue);
background-color: var(--white);
padding: 
  15px;
}
button {
background-color: var(--white);
color: var(--blue);
border: 1px solid var(--blue);
padding: 5px;
}
Try it Yourself 
Browser Support
The numbers in the table specify the first browser version that fully supports the
var()
function.
Function
var()
49.0
15.0
31.0
9.1
36.0
CSS var() Function
Property
Description
var()
Inserts the value of a CSS variable
CSS
Grid Container
1
2
3
4
5
6
7
8
Try it Yourself 
Grid Container
To make an HTML element behave as a grid container, you have to set the
display
property to
grid
or
inline-grid
.
Grid containers consist of grid items, placed inside columns and rows.
The grid-template-columns Property
The
grid-template-columns
property defines the 
number of columns in your grid layout, and it can define the width of each column.
The value is a space-separated-list, where each value defines the width 
of the respective column.
If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.
Example
Make a grid with 4 columns:
.grid-container {
display: grid;
grid-template-columns: auto auto auto auto;
}
Try it Yourself 
The
grid-template-columns
property can also be used to specify the size (width) of the columns.
Example
Set a size for the 4 columns:
.grid-container {
display: grid;
grid-template-columns: 80px 200px auto 40px;
}
Try it Yourself 
The grid-template-rows Property
The
grid-template-rows
property defines the height of each row.
1
2
3
4
5
6
7
8
The value is a space-separated-list, where each value defines the height of the respective row:
Example
.grid-container {
display: grid;
grid-template-rows: 80px 200px;
}
Try it Yourself 
The justify-content Property
The
justify-content
property is used to align the whole grid inside the container.
1
2
3
4
5
6
Example
.grid-container {
display: grid;
justify-content: space-evenly;
}
Try it Yourself 
Example
.grid-container {
display: grid;
justify-content: space-around;
}
Try it Yourself 
Example
.grid-container {
display: grid;
justify-content: space-between;
}
Try it Yourself 
Example
.grid-container {
display: grid;
justify-content: center;
}
Try it Yourself 
Example
.grid-container {
display: grid;
justify-content: start;
}
Try it Yourself 
Example
.grid-container {
display: grid;
justify-content: end;
}
Try it Yourself 
The align-content Property
The
align-content
property is used to
vertically
align the whole grid inside the container.
1
2
3
4
5
6
Example
.grid-container {
display: grid;
height: 400px;
align-content: center;
}
Try it Yourself 
Example
.grid-container {
display: grid;
height: 400px;
align-content: space-evenly;
}
Try it Yourself 
Example
.grid-container {
display: grid;
height: 400px;
align-content: space-around;
}
Try it Yourself 
Example
.grid-container {
display: grid;
height: 400px;
align-content: space-between;
}
Try it Yourself 
Example
.grid-container {
display: grid;
height: 400px;
align-content: start;
}
Try it Yourself 
Example
.grid-container {
display: grid;
height: 400px;
align-content: end;
}
Try it Yourself 
CSS
aspect-ratio
Property
Example
Add aspect-ratio to an element:
div
 {
aspect-ratio: 3 / 2;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
aspect-ratio
property allows you to define the ratio between width and height of an element.
If
aspect-ratio
and
width
properties are set, the height will follow in the defined aspect ratio.
To better understand the
aspect-ratio
property,
view a demo
.
Tip:
Use the
aspect-ratio
property in responsive layouts where elements often vary in size and you want to preserve the ratio between width and height.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.aspectRatio="16/9"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
aspect-ratio
88
88
89
15
74
CSS Syntax
aspect-ratio:
number/number
|initial|inherit;
Property Values
Property Value
Description
Demo
number
First number specifies the number for width in aspect ratio.
Demo 
number
Second number specifies the number for height in aspect ratio. Optional. If not set, number for height is 1 as default.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
The
aspect-ratio
property is good for controlling aspect ratio of div elements if the div elements are supposed to vary in size. This can be the case in an image gallery when you want div elements to be flexible in size to look good on all devices, but you also want ratio between width and height of the images to be preserved:
#container > div {
aspect-ratio: 3/2;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout Module
CSS object-fit property:
CSS Object-fit property
CSS object-position property:
CSS Object-position property
CSS
background
Property
Example
Set different background properties in one declaration:
body
 {
background: lightblue url("img_tree.gif") no-repeat fixed center;
}
Try it Yourself 
Definition and Usage
The
background
property is a shorthand property 
for:
background-color
background-image
background-position
background-size
background-repeat
background-origin
background-clip
background-attachment
It does not matter if one of the values above are missing, e.g. background:#ff0000 url(smiley.gif); is allowed.
Show demo 
Default value:
see individual properties
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1 + new properties in CSS3
JavaScript syntax:
object
.style.background="red url(smiley.gif) top left no-repeat"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background
1.0
4.0
1.0
1.0
3.5
Note:
See individual browser support for each value below.
CSS Syntax
background:
bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment
initial|inherit;
Note:
If one of the properties in the shorthand declaration is the bg-size property,
you must use a / (slash) to separate it from the bg-position property, e.g. background:url(smiley.gif) 10px 20px/50px 50px;
will result in a background image, positioned 10 pixels from the left, 20 pixels from the top, and the size of the image will be 50 pixels wide and 50 pixels high.
Note:
If using multiple background-image sources but also 
want a background-color, the background-color parameter needs to be last in the 
list.
Property Values
Value
Description
CSS
Demo
background-color
Specifies the background color to be used
1
Demo 
background-image
Specifies ONE or MORE background images to be used
1
Demo 
background-position
Specifies the position of the background images
1
Demo 
background-size
Specifies the size of the background images
3
Demo 
background-repeat
Specifies how to repeat the background images
1
Demo 
background-origin
Specifies the positioning area of the background images
3
Demo 
background-clip
Specifies the painting area of the background images
3
Demo 
background-attachment
Specifies whether the background images are fixed or scrolls with the rest of the page
1
initial
Sets this property to its default value.
Read about
initial
3
inherit
Inherits this property from its parent element.
Read about
inherit
2
Related Pages
CSS tutorial:
CSS Background
,
CSS Backgrounds (advanced)
HTML DOM reference:
background property
CSS
Templates
CSS Layout Templates
We have created some responsive starter templates with CSS.
You are free to modify, save, share, and use them in all your projects.
Header, equal columns and footer:
Try it (using float) 
Try it (using flexbox) 
Try it (using grid) 
Header, unequal columns and footer:
Try it (using float) 
Try it (using flexbox) 
Try it (using grid) 
Topnav, content and footer:
Try it Yourself 
Sidenav and content:
Try it Yourself 
CSS
Online Editor
CSS Editor
With our online CSS editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.
Run 
Size:
Example
body {
background-color: lightblue;
}
h1 {
color: 
  white;
text-align: center;
}
p {
font-family: verdana;
}
My First CSS Example
This is a paragraph.
Try it Yourself 
Click on the "Try it Yourself" button to see how it works.
Publish Your Code
If you want to save your HTML, CSS and JavaScript code, and create your own website, check out
W3Schools Spaces
.
W3Schools Spaces
is a website-building tool that lets you make and share your own website.
You can change the website's look and how it works by editing the code right in your web browser.
It's easy to use and doesn't require any setup:
The code editor is packed with features to help you achieve more:
Templates:
Start from scratch or use a template
Cloud-based:
no installations required. You only need your browser
Terminal & Log:
debug and troubleshoot your code easily
File Navigator:
switch between files inside the code editor
And much more!
Learn More
Learn Faster
Practice is key to mastering coding, and the best way to put your CSS knowledge into practice is by getting practical with code.
Use
W3Schools Spaces
to build, test and deploy code.
The code editor lets you write and practice different types of computer 
languages. It includes HTML/CSS/JavaScript, but you can use it for other 
languages too, such as PHP, Python, Node.js, etc.
Learn More
Build Powerful Websites
You can also use the code editor in
W3School Spaces
to build frontend or full-stack websites from scratch.
Or you can use the 60+ templates available and save time:
Create your Spaces account today and explore them all!
Learn More
Share It With The World
Host and publish your websites in no time with
W3School Spaces
.
W3Schools subdomain and SSL certificate are included for free with
W3School Spaces
. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.
Want a custom domain for your website?
You can buy a domain or transfer an existing one and connect it to your space.
Learn More
How Does It Work?
Get started in a few clicks with
W3School Spaces
.
CSS
Snippets
CSS Snippets
Have you ever seen a cool feature on a website and thought "How do they do that"?
We have collected a bunch of CSS snippets that you can use in your projects, for free:
Image Text Blocks
Nature
Beautiful sunrise
Learn How To 
Alert Buttons
Success
Info
Warning
Danger
Default
Learn How To 
Loaders
Learn How To 
Top Navigation
Home
News
Contact
Learn How To 
Animated Search Form
Learn How To 
Hover Dropdowns
Hover
Link 1
Link 2
Link 3
Learn How To 
Fixed Sidebar
Learn How To 
CSS
Quiz
You can test your CSS skills with W3Schools' Quiz.
The Test
The test contains 25 questions and there is no time limit.
The test is not official, it's just a nice way to see how much you know, or don't know, about CSS.
Count Your Score
You will get 1 point for each correct answer. At the end of the Quiz,
your total score will be displayed. Maximum score is 25 points.
Start the Quiz
Good luck!
Start the CSS Quiz 
CSS
Exercises
You can test your CSS skills with W3Schools' Exercises.
Exercises
We have gathered a variety of CSS exercises (with answers) for each CSS Chapter.
Try to solve an exercise by editing some code. Get a "hint" if you're stuck, or show the answer to see what you've done wrong.
Count Your Score
You will get 1 point for
each correct answer. Your score and total score will always be displayed.
Start CSS Exercises
Good luck!
Start CSS Exercises 
W3Schools
CSS Certificate
w
3
s
c
h
o
o
l
s
C
E
R
T
I
F
I
E
D
.
2
0
2
4
W3Schools offers an Online Certification Program.
The perfect solution for busy professionals who need to balance work, family, and career building.
More than 50 000 certificates already issued!
Get Your Certificate 
w
3
s
c
h
o
o
l
s
C
E
R
T
I
F
I
E
D
.
2
0
2
4
W3Schools offers an Online Certification Program.
The perfect solution for busy professionals who need to balance work, family, and career building.
More than 50 000 certificates already issued!
Get Your Certificate 
Document your skills
Improve your career
Study at your own pace
Save time and money
Known brand
Trusted by top companies
Who Should Consider Getting Certified?
Any student or professional within the digital industry.
Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.
W3Schools is Trusted by Top Companies
W3Schools has over two decades of experience with teaching coding online.
Our certificates are recognized and valued by companies looking to employ skilled developers.
Save Time and Money
Show the world your coding skills by getting a certification.
The prices is a small fraction compared to the price of traditional education.
Document and validate your competence by getting certified!
Exam overview
Fee:
95 USD
Achievable certification levels:
Intermediate (40%)
Advanced (75%)
Professional (90%)
Number of questions:
Adaptive,
60
on average
Requirement to pass:
Minimum 40% - Intermediate level
Time limit:
60 minutes
Number of attempts to pass:
3
Exam deadline:
None
Certification Expiration:
None
Format:
Online, multiple choice
Register now 
Advance Faster in Your Career
Getting a certificate proves your commitment to upgrading your skills.
The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.
It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.
Knowledge is power, especially in the current job market.
Documentation of your skills enables you to advance your career or helps you to start a new one.
Get Your Certificate and Share It With The World
Example certificate:
Each certificate gets a unique link that can be shared with others.
Validate your certification with the link or QR code.
Check how it looks like in this
Example
.
Share your certificate on Linked
in the Certifications section in just one click!
Looking to add multiple users?
Are you an educator, manager or business owner looking for courses or certifications?
We are working with schools, companies and organizations from all over the world.
Get courses and/or certifications for your team here.
CSS
Interview Preparation
Try W3Schools' comprehensive Front-End interview preparation feature.
A tool that will help you get ready for your next interview.
W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.
After the interview training you will get an evaluation of your performance that you can use to improve yourself.
Get Started
What to expect in a Front-End interview
If you are going to a Front-End interview, there are a few things you can expect:
Coding Questions:
You will be asked coding questions, and you possibly also get a task to solve.
Examples of technical questions:
Tell me about your experience as a Front-End developer.
Tell me about a personal project where you worked on implementing the user interface for a website.
Examples of a task:
Create a webpage that shows a greeting message to the user.
Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.
<head>
<title>Simple Greeting Page</title>
<style>
body {
font-family: Arial, sans-serif;
background-color: #f0f0f0;
color: #333;
padding: 20px;
}
</style>
</head>
<body>
<h1>Hello, welcome to our website!</h1>
</body>
</html>
Practice Here 
If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.
Showcase your skills and projects:
They would like to see projects to understand your work better.
You can include current projects in your portfolio even if they are unfinished.
Examples of projects to have in your portfolio:
To-do list app
Blog template
Weather dashboard
E-commerce product page
Interactive game or application
What to do before the interview
Before you go to an interview, you should check out the company.
It will give you a better understanding of their values and what they do.
Check out:
Their webpage
Their social media platforms
Articles and reviews
Make sure you understand the job description:
Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.
You can also ask a friend or a community member to help you.
There is a big community of Front-End developers on social media.
Reflect on why you are the right fit for this role:
Companies hire people they believe will be the right fit.
Think about what value you can add to the role and the team.
Write them down.
It will help you discuss how you are the right candidate for the role.
We have created an interview tool to help you prepare:
Try it out
What is Front-End Development?
Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.
Typical Languages Used in Front-End Development:
HTML
CSS
JavaScript
React.js
Bootstrap
and other CSS frameworks
Career Outlook
The demand for Front-End developers is high.
You can expect:
Competitive salary
Possibility of working remotely
Opportunity to grow as the industry innovates and adopts new technologies.
The Average Salary is $112,328 in the US.
Typical Job Titles for a Front-End Developer:
Front-End developer
Web Developer
UI/UX Designer
Web App Developer
and many more.
Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.
Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!
Try W3Schools interview preparation here:
Interview Preperation
Best of luck!
CSS
Selector
Reference
CSS Selectors
In CSS, selectors are patterns used to select the element(s) you want to style.
Use our
CSS Selector Tester
to demonstrate the different selectors.
Selector
Example
Example description
.
class
.intro
Selects all elements with class="intro"
.class1.class2
.name1.name2
Selects all elements with both
name1
and
name2
set 
    within its class attribute
.class1 .class2
.name1 .name2
Selects all elements with
name2
that is a descendant of an 
    element with
name1
#
id
#firstname
Selects the element with id="firstname"
*
*
Selects all elements
element
p
Selects all <p> elements
element.class
p.intro
Selects all <p> elements with class="intro"
element,element
div, p
Selects all <div> elements and all <p> elements
element
element
div p
Selects all <p> elements inside <div> elements
element
>
element
div > p
Selects all <p> elements where the parent is a <div> element
element
+
element
div + p
Selects the first <p> element that is placed immediately after <div> elements
element1
~
element2
p ~ ul
Selects every <ul> element that is preceded by a <p> element
[
attribute
]
[target]
Selects all elements with a target attribute
[
attribute
=
value
]
[target="_blank"]
Selects all elements with target="_blank"
[
attribute
~=
value
]
[title~="flower"]
Selects all elements with a title attribute containing the word "flower"
[
attribute
|=
value
]
[lang|="en"]
Selects all elements with a lang attribute value equal to "en" or 
    starting with "en-"
[
attribute
^=
value
]
a[href^="https"]
Selects every <a> element whose href attribute value begins with "https"
[
attribute
$=
value
]
a[href$=".pdf"]
Selects every <a> element whose href attribute value ends with ".pdf"
[
attribute
*=
value
]
a[href*="w3schools"]
Selects every <a> element whose href attribute value contains the substring "w3schools"
:active
a:active
Selects the active link
::after
p::after
Insert something after the content of each <p> element
::before
p::before
Insert something beforethe content of each <p> element
:checked
input:checked
Selects every checked <input> element
:default
input:default
Selects the default <input> element
:disabled
input:disabled
Selects every disabled <input> element
:empty
p:empty
Selects every <p> element that has no children (including text nodes)
:enabled
input:enabled
Selects every enabled <input> element
:first-child
p:first-child
Selects every <p> element that is the first child of its parent
::first-letter
p::first-letter
Selects the first letter of every <p> element
::first-line
p::first-line
Selects the first line of every <p> element
:first-of-type
p:first-of-type
Selects every <p> element that is the first <p> element of its parent
:focus
input:focus
Selects the input element which has focus
:fullscreen
:fullscreen
Selects the element that is in full-screen mode
:has()
h2:has(+p)
Selects h2 elements that are immediately followed by a p element, and 
    applies the style to h2
:hover
a:hover
Selects links on mouse over
:in-range
input:in-range
Selects input elements with a value within a specified range
:indeterminate
input:indeterminate
Selects input elements that are in an indeterminate state
:invalid
input:invalid
Selects all input elements with an invalid value
:lang()
p:lang(it)
Selects every <p> element with a lang attribute equal to "it" (Italian)
:last-child
p:last-child
Selects every <p> element that is the last child of its parent
:last-of-type
p:last-of-type
Selects every <p> element that is the last <p> element of its parent
:link
a:link
Selects all unvisited links
::marker
::marker
Selects the markers of list items
:not()
:not(p)
Selects every element that is not a <p> element
:nth-child()
p:nth-child(2)
Selects every <p> element that is the second child of its parent
:nth-last-child()
p:nth-last-child(2)
Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type()
p:nth-last-of-type(2)
Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type()
p:nth-of-type(2)
Selects every <p> element that is the second <p> element of its parent
:only-of-type
p:only-of-type
Selects every <p> element that is the only <p> element of its parent
:only-child
p:only-child
Selects every <p> element that is the only child of its parent
:optional
input:optional
Selects input elements with no "required" attribute
:out-of-range
input:out-of-range
Selects input elements with a value outside a specified range
::placeholder
input::placeholder
Selects input elements with the "placeholder" attribute specified
:read-only
input:read-only
Selects input elements with the "readonly" attribute specified
:read-write
input:read-write
Selects input elements with the "readonly" attribute NOT specified
:required
input:required
Selects input elements with the "required" attribute specified
:root
:root
Selects the document's root element
::selection
::selection
Selects the portion of an element that is selected by a user
:target
#news:target
Selects the current active #news element (clicked on a URL containing that anchor name)
:valid
input:valid
Selects all input elements with a valid value
:visited
a:visited
Selects all visited links
CSS
Reference
CSS Properties
A
accent-color
Specifies an accent color for user-interface controls
align-content
Specifies the alignment between the lines inside a flexible container when the items do not use all available space
align-items
Specifies the alignment for items inside a flexible container
align-self
Specifies the alignment for selected items inside a flexible container
all
Resets all properties (except unicode-bidi and direction)
animation
A shorthand property for all the
animation-*
properties
animation-delay
Specifies a delay for the start of an animation
animation-direction
Specifies whether an animation should be played forward, backward or 
    in alternate cycles
animation-duration
Specifies how long an animation should take to complete one cycle
animation-fill-mode
Specifies a style for the element when the animation is not playing (before 
    it starts, after it ends, or both)
animation-iteration-count
Specifies the number of times an animation should be played
animation-name
Specifies a name for the @keyframes animation
animation-play-state
Specifies whether the animation is running or paused
animation-timing-function
Specifies the speed curve of an animation
aspect-ratio
Specifies preferred aspect ratio of an element
B
backdrop-filter
Defines a graphical effect to the area behind an element
backface-visibility
Defines whether or not the back face of an element should be visible when facing the user
background
A shorthand property for all the
background-*
properties
background-attachment
Sets whether a background image scrolls with the rest of the page, or is fixed
background-blend-mode
Specifies the blending mode of each background layer (color/image)
background-clip
Defines how far the background (color or image) should extend within an 
    element
background-color
Specifies the background color of an element
background-image
Specifies one or more background images for an element
background-origin
Specifies the origin position of a background image
background-position
Specifies the position of a background image
background-position-x
Specifies the position of a background image on x-axis
background-position-y
Specifies the position of a background image on y-axis
background-repeat
Sets if/how a background image will be repeated
background-size
Specifies the size of the background images
block-size
Specifies the size of an element in block direction
border
A shorthand property for
border-width, border-style
and
border-color
border-block
A shorthand property for
border-block-width, border-block-style
and
border-block-color
border-block-color
Sets the color of the borders at start and end in the block direction
border-block-end
A shorthand property for
border-block-end-width, border-block-end-style
and
border-block-end-color
border-block-end-color
Sets the color of the border at the end in the block direction
border-block-end-style
Sets the style of the border at the end in the block direction
border-block-end-width
Sets the width of the border at the end in the block direction
border-block-start
A shorthand property for
border-block-start-width, border-block-start-style
and
border-block-start-color
border-block-start-color
Sets the color of the border at the start in the block direction
border-block-start-style
Sets the style of the border at the start in the block direction
border-block-start-width
Sets the width of the border at the start in the block direction
border-block-style
Sets the style of the borders at start and end in the block direction
border-block-width
Sets the width of the borders at start and end in the block direction
border-bottom
A shorthand property for
border-bottom-width, border-bottom-style
and
border-bottom-color
border-bottom-color
Sets the color of the bottom border
border-bottom-left-radius
Defines the radius of the border of the bottom-left corner
border-bottom-right-radius
Defines the radius of the border of the bottom-right corner
border-bottom-style
Sets the style of the bottom border
border-bottom-width
Sets the width of the bottom border
border-collapse
Sets whether table borders should collapse into a single border or be separated
border-color
Sets the color of the four borders
border-end-end-radius
Sets the radius of the corner between the block-end and the inline-end 
    sides of the element
border-end-start-radius
Sets the radius of the corner between the block-end and the inline-start 
    sides of the element
border-image
A shorthand property for all the
border-image-*
properties
border-image-outset
Specifies the amount by which the border image area extends beyond the border box
border-image-repeat
Specifies whether the border image should be repeated, rounded or stretched
border-image-slice
Specifies how to slice the border image
border-image-source
Specifies the path to the image to be used as a border
border-image-width
Specifies the width of the border image
border-inline
A shorthand property for
border-inline-width, border-inline-style
and
border-inline-color
border-inline-color
Sets the color of the borders at start and end in the inline direction
border-inline-end
A shorthand property for
border-inline-end-width, border-inline-end-style
and
border-inline-end-color
border-inline-end-color
Sets the color of the border at the end in the inline direction
border-inline-end-style
Sets the style of the border at the end in the inline direction
border-inline-end-width
Sets the width of the border at the end in the inline direction
border-inline-start
A shorthand property for
border-inline-start-width, border-inline-start-style
and
border-inline-start-color
border-inline-start-color
Sets the color of the border at the start in the inline direction
border-inline-start-style
Sets the style of the border at the start in the inline direction
border-inline-start-width
Sets the width of the border at the start in the inline direction
border-inline-style
Sets the style of the borders at start and end in the inline direction
border-inline-width
Sets the width of the borders at start and end in the inline direction
border-left
A shorthand property for all the
border-left-*
properties
border-left-color
Sets the color of the left border
border-left-style
Sets the style of the left border
border-left-width
Sets the width of the left border
border-radius
A shorthand property for the four
border-*-radius
properties
border-right
A shorthand property for all the
border-right-*
properties
border-right-color
Sets the color of the right border
border-right-style
Sets the style of the right border
border-right-width
Sets the width of the right border
border-spacing
Sets the distance between the borders of adjacent cells
border-start-end-radius
Sets the radius of the corner between the block-start and the inline-end 
    sides of the element
border-start-start-radius
Sets the radius of the corner between the block-start and the inline-start 
    sides of the element
border-style
Sets the style of the four borders
border-top
A shorthand property for
border-top-width, border-top-style
and
border-top-color
border-top-color
Sets the color of the top border
border-top-left-radius
Defines the radius of the border of the top-left corner
border-top-right-radius
Defines the radius of the border of the top-right corner
border-top-style
Sets the style of the top border
border-top-width
Sets the width of the top border
border-width
Sets the width of the four borders
bottom
Sets the elements position, from the bottom of its parent element
box-decoration-break
Sets the behavior of the background and border of an element at page-break, or, for  in-line elements, at line-break.
box-reflect
The box-reflect property is used to create a reflection of an element.
box-shadow
Attaches one or more shadows to an element
box-sizing
Defines how the width and height of an element are calculated: should 
    they include padding and borders, or not
break-after
Specifies whether or not a page-, column-, or region-break should occur 
    after the specified element
break-before
Specifies whether or not a page-, column-, or region-break should occur 
    before the specified element
break-inside
Specifies whether or not a page-, column-, or region-break should occur 
    inside the specified element
C
caption-side
Specifies the placement of a table caption
caret-color
Specifies the color of the cursor (caret) in inputs, textareas, or any 
    element that is editable
@charset
Specifies the character encoding used in the style sheet
clear
Specifies what should happen with the element that is next to a floating 
    element
clip
Deprecated in favor of clip-path. Clips an absolutely positioned element
clip-path
Clips an element to a basic shape or to an SVG source
color
Sets the color of text
color-scheme
Indicates which operating system color scheme an element should render 
    with
column-count
Specifies the number of columns an element should be divided into
column-fill
Specifies how to fill columns, balanced or not
column-gap
Specifies the gap between the columns
column-rule
A shorthand property for all the
column-rule-*
properties
column-rule-color
Specifies the color of the rule between columns
column-rule-style
Specifies the style of the rule between columns
column-rule-width
Specifies the width of the rule between columns
column-span
Specifies how many columns an element should span across
column-width
Specifies the column width
columns
A shorthand property for
column-width
and
column-count
content
Used with the :before and :after pseudo-elements, to insert generated content
counter-increment
Increases or decreases the value of one or more CSS counters
counter-reset
Creates or resets one or more CSS counters
counter-set
Creates or sets one or more CSS counters
cursor
Specifies the mouse cursor to be displayed when pointing over an element
D
direction
Specifies the text direction/writing direction
display
Specifies how a certain HTML element should be displayed
E
empty-cells
Specifies whether or not to display borders and background on empty cells in a table
F
filter
Defines effects (e.g. blurring or color shifting) on an element before the element is displayed
flex
A shorthand property for the
flex-grow, flex-shrink
, and the
flex-basis
properties
flex-basis
Specifies the initial length of a flexible item
flex-direction
Specifies the direction of the flexible items
flex-flow
A shorthand property for the
flex-direction
and the
flex-wrap
properties
flex-grow
Specifies how much the item will grow relative to the rest
flex-shrink
Specifies how the item will shrink relative to the rest
flex-wrap
Specifies whether the flexible items should wrap or not
float
Specifies whether an element should float to the left, right, or not at 
    all
font
A shorthand property for the
font-style, font-variant, font-weight, 
    font-size/line-height
, and the
font-family
properties
@font-face
A rule that allows websites to download and use fonts other than the "web-safe" fonts
font-family
Specifies the font family for text
font-feature-settings
Allows control over advanced typographic features in OpenType fonts
@font-feature-values
Allows authors to use a common name in font-variant-alternate for feature activated differently in OpenType
font-kerning
Controls the usage of the kerning information (how letters are spaced)
font-language-override
Controls the usage of language-specific glyphs in a typeface
font-size
Specifies the font size of text
font-size-adjust
Preserves the readability of text when font fallback occurs
font-stretch
Selects a normal, condensed, or expanded face from a font family
font-style
Specifies the font style for text
font-synthesis
Controls which missing typefaces (bold or italic) may be synthesized by the browser
font-variant
Specifies whether or not a text should be displayed in a small-caps font
font-variant-alternates
Controls the usage of alternate glyphs associated to alternative names defined in @font-feature-values
font-variant-caps
Controls the usage of alternate glyphs for capital letters
font-variant-east-asian
Controls the usage of alternate glyphs for East Asian scripts (e.g Japanese and Chinese)
font-variant-ligatures
Controls which ligatures and contextual forms are used in textual content of the elements it applies to
font-variant-numeric
Controls the usage of alternate glyphs for numbers, fractions, and ordinal markers
font-variant-position
Controls the usage of alternate glyphs of smaller size positioned as superscript or subscript regarding the baseline of the font
font-weight
Specifies the weight of a font
G
gap
A shorthand property for the
row-gap
and the
column-gap
properties
grid
A shorthand property for the
grid-template-rows, 
    grid-template-columns, grid-template-areas, grid-auto-rows, 
    grid-auto-columns
, and the
grid-auto-flow
properties
grid-area
Either specifies a name for the grid item, or this property is a shorthand property for the
grid-row-start
,
grid-column-start
,
grid-row-end
, and
grid-column-end
properties
grid-auto-columns
Specifies a default column size
grid-auto-flow
Specifies how auto-placed items are inserted in the grid
grid-auto-rows
Specifies a default row size
grid-column
A shorthand property for the
grid-column-start
and the
grid-column-end
properties
grid-column-end
Specifies where to end the grid item
grid-column-start
Specifies where to start the grid item
grid-row
A shorthand property for the
grid-row-start
and the
grid-row-end
properties
grid-row-end
Specifies where to end the grid item
grid-row-start
Specifies where to start the grid item
grid-template
A shorthand property for the
grid-template-rows
,
grid-template-columns
and
grid-areas
properties
grid-template-areas
Specifies how to display columns and rows, using named grid items
grid-template-columns
Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows
Specifies the size of the rows in a grid layout
H
hanging-punctuation
Specifies whether a punctuation character may be placed outside the line box
height
Sets the height of an element
hyphens
Sets how to split words to improve the layout of text
hypenate-character
Sets the character used at the end of line, before a hyphenation break
I
image-rendering
Specifies the type of algorithm to use for image scaling
@import
Allows you to import a style sheet into another style sheet
initial-letter
Specifies the size of the initial-letter and optionally the number of 
    lines the initial letter should sink (down in the text)
inline-size
Specifies the size of an element in the inline direction
inset
Specifies the distance between an element and the parent element
inset-block
Specifies the distance between an element and the parent element in the block direction
inset-block-end
Specifies the distance between the end of an element and the parent element in the block direction
inset-block-start
Specifies the distance between the start of an element and the parent element in the block direction
inset-inline
Specifies the distance between an element and the parent element in the inline direction
inset-inline-end
Specifies the distance between the end of an element and the parent element in the inline direction
inset-inline-start
Specifies the distance between the start of an element and the parent element in the inline direction
isolation
Defines whether an element must create a new stacking content
J
justify-content
Specifies the alignment between the items inside a flexible container when the items do not use all available space
justify-items
Is set on the grid container. Specifies the alignment of grid items in the inline direction
justify-self
Is set on the grid item. Specifies the alignment of the grid item in the inline direction
K
@keyframes
Specifies the animation code
L
left
Specifies the left position of a positioned element
letter-spacing
Increases or decreases the space between characters in a text
line-break
Specifies how/if to break lines
line-height
Sets the line height
list-style
Sets all the properties for a list in one declaration
list-style-image
Specifies an image as the list-item marker
list-style-position
Specifies the position of the list-item markers (bullet points)
list-style-type
Specifies the type of list-item marker
M
margin
Sets all the margin properties in one declaration
margin-block
Specifies the margin in the block direction
margin-block-end
Specifies the margin at the end in the block direction
margin-block-start
Specifies the margin at the start in the block direction
margin-bottom
Sets the bottom margin of an element
margin-inline
Specifies the margin in the inline direction
margin-inline-end
Specifies the margin at the end in the inline direction
margin-inline-start
Specifies the margin at the start in the inline direction
margin-left
Sets the left margin of an element
margin-right
Sets the right margin of an element
margin-top
Sets the top margin of an element
marker
Points to a marker that will be drawn on all vertices of an element's 
    path (the first, middle, and last)
marker-end
Points to a marker that will be drawn on the last vertex of an element's 
    path
marker-mid
Points to a marker that will be drawn on all the middle vertices of an 
    element's path
marker-start
Points to a marker that will be drawn on the first vertex of an 
    element's path
mask
A shorthand property for
mask-image
,
mask-mode
,
mask-repeat
,
mask-position
,
mask-clip
,
mask-origin
,
mask-size
and
mask-composite
mask-clip
Specifies which area is affected by a mask image
mask-composite
Specifies a compositing operation used on the current mask layer with 
    the mask layers below it
mask-image
Specifies an image to be used as a mask layer for an element
mask-mode
Specifies whether the mask layer image is treated as a luminance mask or 
    as an alpha mask
mask-origin
Specifies the origin position (the mask 
position area) of a mask layer image
mask-position
Sets the starting position of a mask layer image (relative to the 
    mask position area)
mask-repeat
Specifies how the mask layer image is repeated
mask-size
Specifies the size of a mask layer image
mask-type
Specifies whether an SVG <mask> element is treated as a luminance 
    mask or as an alpha mask
max-height
Sets the maximum height of an element
max-width
Sets the maximum width of an element
@media
Sets the style rules for different media types/devices/sizes
max-block-size
Sets the maximum size of an element in the block direction
max-inline-size
Sets the maximum size of an element in the inline direction
min-block-size
Sets the minimum size of an element in the block direction
min-inline-size
Sets the minimum size of an element in the inline direction
min-height
Sets the minimum height of an element
min-width
Sets the minimum width of an element
mix-blend-mode
Specifies how an element's content should blend with its direct parent background
O
object-fit
Specifies how the contents of a replaced element should be fitted to the box established by its used height and width
object-position
Specifies the alignment of the replaced element inside its box
offset
A shorthand property for the
offset-anchor
,
offset-distance
,
offset-path
,
offset-position
, and the
offset-rotate
properties
offset-anchor
Specifies a point on an element that is fixed to the path it is animated along
offset-distance
Specifies the position along a path where an animated element is placed
offset-path
Specifies the path an element is animated along
offset-position
Specifies the initial position of an element along a path
offset-rotate
Specifies rotation of an element as it is animated along a path
opacity
Sets the opacity level for an element
order
Sets the order of the flexible item, relative to the rest
orphans
Sets the minimum number of lines that must be left at the bottom of a 
    page or column
outline
A shorthand property for the
outline-width, outline-style
, and 
    the
outline-color
properties
outline-color
Sets the color of an outline
outline-offset
Offsets an outline, and draws it beyond the border edge
outline-style
Sets the style of an outline
outline-width
Sets the width of an outline
overflow
Specifies what happens if content overflows an element's box
overflow-anchor
Specifies whether or not content in viewable area in a scrollable contianer should be pushed down when new content is loaded above
overflow-wrap
Specifies whether or not the browser can break lines with long words, if 
    they overflow the container
overflow-x
Specifies whether or not to clip the left/right edges of the content, if it overflows the element's content area
overflow-y
Specifies whether or not to clip the top/bottom edges of the content, if it overflows the element's content area
overscroll-behavior
Specifies whether to have scroll chaining or overscroll affordance in x- and y-directions
overscroll-behavior-block
Specifies whether to have scroll chaining or overscroll affordance in the block direction
overscroll-behavior-inline
Specifies whether to have scroll chaining or overscroll affordance in the inline direction
overscroll-behavior-x
Specifies whether to have scroll chaining or overscroll affordance in x-direction
overscroll-behavior-y
Specifies whether to have scroll chaining or overscroll affordance in y-directions
P
padding
A shorthand property for all the
padding-*
properties
padding-block
Specifies the padding in the block direction
padding-block-end
Specifies the padding at the end in the block direction
padding-block-start
Specifies the padding at the start in the block direction
padding-bottom
Sets the bottom padding of an element
padding-inline
Specifies the padding in the inline direction
padding-inline-end
Specifies the padding at the end in the inline direction
padding-inline-start
Specifies the padding at the start in the inline direction
padding-left
Sets the left padding of an element
padding-right
Sets the right padding of an element
padding-top
Sets the top padding of an element
page-break-after
Sets the page-break behavior after an element. Replaced by
break-after
property
page-break-before
Sets the page-break behavior before an element. Replaced by
break-before
property
page-break-inside
Sets the page-break behavior inside an element. Replaced by
break-inside
property
paint-order
Sets the order of how an SVG element or text is painted.
perspective
Gives a 3D-positioned element some perspective
perspective-origin
Defines at which position the user is looking at the 3D-positioned element
place-content
Specifies align-content and justify-content property values for flexbox and grid layouts
place-items
Specifies align-items and justify-items property values for grid layouts
place-self
Specifies align-self and justify-self property values for grid layouts
pointer-events
Defines whether or not an element reacts to pointer events
position
Specifies the type of positioning method used for an element (static, relative, absolute or fixed)
Q
quotes
Sets the type of quotation marks for embedded quotations
R
resize
Defines if (and how) an element is resizable by the user
right
Specifies the right position of a positioned element
rotate
Specifies the rotation of an element
row-gap
Specifies the gap between the grid rows
S
scale
Specifies the size of an element by scaling up or down
scroll-behavior
Specifies whether to smoothly animate the scroll position in a scrollable box, instead of a straight jump
scroll-margin
Specifies the margin between the snap position and the container
scroll-margin-block
Specifies the margin between the snap position and the container in the block direction
scroll-margin-block-end
Specifies the end margin between the snap position and the container in the block direction
scroll-margin-block-start
Specifies the start margin between the snap position and the container in the block direction
scroll-margin-bottom
Specifies the margin between the snap position on the bottom side and the container
scroll-margin-inline
Specifies the margin between the snap position and the container in the inline direction
scroll-margin-inline-end
Specifies the end margin between the snap position and the container in the inline direction
scroll-margin-inline-start
Specifies the start margin between the snap position and the container in the inline direction
scroll-margin-left
Specifies the margin between the snap position on the left side and the container
scroll-margin-right
Specifies the margin between the snap position on the right side and the container
scroll-margin-top
Specifies the margin between the snap position on the top side and the container
scroll-padding
Specifies the distance from the container to the snap position on the child elements
scroll-padding-block
Specifies the distance in block direction from the container to the snap position on the child elements
scroll-padding-block-end
Specifies the distance in block direction from the end of the container to the snap position on the child elements
scroll-padding-block-start
Specifies the distance in block direction from the start of the container to the snap position on the child elements
scroll-padding-bottom
Specifies the distance from the bottom of the container to the snap position on the child elements
scroll-padding-inline
Specifies the distance in inline direction from the container to the snap position on the child elements
scroll-padding-inline-end
Specifies the distance in inline direction from the end of the container to the snap position on the child elements
scroll-padding-inline-start
Specifies the distance in inline direction from the start of the container to the snap position on the child elements
scroll-padding-left
Specifies the distance from the left side of the container to the snap position on the child elements
scroll-padding-right
Specifies the distance from the right side of the container to the snap position on the child elements
scroll-padding-top
Specifies the distance from the top of the container to the snap position on the child elements
scroll-snap-align
Specifies where to position elements when the user stops scrolling
scroll-snap-stop
Specifies scroll behaviour after fast swipe on trackpad or touch screen
scroll-snap-type
Specifies how snap behaviour should be when scrolling
scrollbar-color
Specifies the color of the scrollbar of an element
T
tab-size
Specifies the width of a tab character
table-layout
Defines the algorithm used to lay out table cells, rows, and columns
text-align
Specifies the horizontal alignment of text
text-align-last
Describes how the last line of a block or a line right before a forced line break is aligned when text-align is "justify"
text-combine-upright
Specifies the combination of multiple characters into the space of a single character
text-decoration
Specifies the decoration added to text
text-decoration-color
Specifies the color of the text-decoration
text-decoration-line
Specifies the type of line in a text-decoration
text-decoration-style
Specifies the style of the line in a text decoration
text-decoration-thickness
Specifies the thickness of the decoration line
text-emphasis
A shorthand property for the
text-emphasis-style
and
text-emphasis-color
properties
text-emphasis-color
Specifies the color of emphasis marks
text-emphasis-position
Specifies the position of emphasis marks
text-emphasis-style
Specifies the style of emphasis marks
text-indent
Specifies the indentation of the first line in a text-block
text-justify
Specifies the justification method used when text-align is "justify"
text-orientation
Defines the orientation of characters in a line
text-overflow
Specifies what should happen when text overflows the containing element
text-shadow
Adds shadow to text
text-transform
Controls the capitalization of text
text-underline-offset
Specifies the offset distance of the underline text decoration
text-underline-position
Specifies the position of the underline text decoration
top
Specifies the top position of a positioned element
transform
Applies a 2D or 3D transformation to an element
transform-origin
Allows you to change the position on transformed elements
transform-style
Specifies how nested elements are rendered in 3D space
transition
A shorthand property for all the
transition-*
properties
transition-delay
Specifies when the transition effect will start
transition-duration
Specifies how many seconds or milliseconds a transition effect takes to complete
transition-property
Specifies the name of the CSS property the transition effect is for
transition-timing-function
Specifies the speed curve of the transition effect
translate
Specifies the position of an element
U
unicode-bidi
Used together with the
direction
property to set or return whether the text should be overridden to support multiple languages in the same document
user-select
Specifies whether the text of an element can be selected
V
vertical-align
Sets the vertical alignment of an element
visibility
Specifies whether or not an element is visible
W
white-space
Specifies how white-space inside an element is handled
widows
Sets the minimum number of lines that must be left at the top of a page 
    or column
width
Sets the width of an element
word-break
Specifies how words should break when reaching the end of a line
word-spacing
Increases or decreases the space between words in a text
word-wrap
Allows long, unbreakable words to be broken and wrap to the next line
writing-mode
Specifies whether lines of text are laid out horizontally or vertically
Z
z-index
Sets the stack order of a positioned element
zoom
Specifies the zoom factor for an element. An element can be zoomed in and out
CSS
animation-direction
Property
Example
Play the animation forward first, then backward:
div {
animation-direction: alternate;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
animation-direction
property defines whether an animation should be played 
forward, backward or in alternate cycles.
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animationDirection="reverse"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation-direction
43
10
16
9
30
CSS Syntax
animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;
Property Values
Value
Description
Demo
normal
Default value. The animation is played as normal (forwards)
Play it 
reverse
The animation is played in reverse direction (backwards)
Play it 
alternate
The animation is played forwards first, then backwards
Play it 
alternate-reverse
The animation is played backwards first, then forwards
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Play the animation backwards first, then forwards:
div {
animation-direction: alternate-reverse;
}
Try it Yourself 
Example
Play the animation backwards:
div {
animation-direction: reverse;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animationDirection property
CSS
align-content
Property
Example
Pack lines toward the center of the flex container:
div {
width: 70px;
height: 300px;
border: 1px solid #c3c3c3;
display: flex;
flex-wrap: wrap;
align-content: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
align-content
property specifies how flex lines are distributed along the cross axis in a flexbox container.
In flexbox layout, the main axis is in the
flex-direction
(default is 'row', horizontal), and the cross axis is perpendicular to the main axis (default is 'column', vertical).
Tip:
Use the
justify-content
property to align the items on the main axis (horizontally).
Note:
The
align-content
property can also be used on a grid container to align grid items in the block direction. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
stretch
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.alignContent="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
align-content
57.0
16.0
52.0
10.1
44.0
CSS Syntax
align-content: stretch|center|flex-start|flex-end|space-between|space-around|space-evenly|initial|inherit;
Property Values
Value
Description
Demo
stretch
Default value. Lines stretch to take up the remaining space
Demo 
center
Lines are packed toward the center of the flex container
Demo 
flex-start
Lines are packed toward the start of the flex container
Demo 
flex-end
Lines are packed toward the end of the flex container
Demo 
space-between
Lines are evenly distributed in the flex container
Demo 
space-around
Lines are evenly distributed in the flex container, with half-size spaces on either end
Demo 
space-evenly
Lines are evenly distributed in the flex container, with equal space 
    around them
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example with grid
All items are positioned at the end of the grid container, in the block direction:
#container {
display: grid;
align-content: end;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS flexbox
CSS tutorial:
CSS grid
CSS Reference:
align-items property
CSS Reference:
align-self property
CSS Reference:
justify-content property
HTML DOM reference:
alignContent property
CSS
animation
Property
Example
Binding an animation to a <div> element, using the shorthand property:
div
 {
animation: mymove 5s infinite;
}
Try it Yourself 
Definition and Usage
The
animation
property is a shorthand property for:
animation-name
animation-duration
animation-timing-function
animation-delay
animation-iteration-count
animation-direction
animation-fill-mode
animation-play-state
Note:
Always specify the
animation-duration
property, otherwise the duration is 0, and will never be played.
Show demo 
Default value:
none 0 ease 0 1 normal none running
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.animation="mymove 5s infinite"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
animation
43
10
16
9
30
CSS Syntax
animation:
name duration timing-function delay iteration-count 
direction fill-mode play-state
;
Property Values
Value
Description
animation-name
Specifies the name of the keyframe you want to bind to the selector
animation-duration
Specifies how many seconds or milliseconds an animation takes to complete
animation-timing-function
Specifies the speed curve of the animation
animation-delay
Specifies a delay before the animation will start
animation-iteration-count
Specifies how many times an animation should be played
animation-direction
Specifies whether or not the animation should play in reverse on alternate cycles
animation-fill-mode
Specifies what values are applied by the animation outside the time it is executing
animation-play-state
Specifies whether the animation is running or paused
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Animations
HTML DOM reference:
animation property
CSS
background-position
Property
Example
How to position a background-image:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-position
property sets the starting position of a background image.
Tip:
By default, a
background-image
is placed at the top-left corner of an 
element, and repeated both vertically and horizontally.
Show demo 
Default value:
0% 0%
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.backgroundPosition="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-position
1.0
4.0
1.0
1.0
3.5
CSS Syntax
background-position:
value
;
Property Values
Value
Description
Demo
left top
left center
left bottom
right top
right center
right bottom
center top
center center
center bottom
If you only specify one keyword, the other value will be "center"
Demo 
x% y%
The first value is the horizontal position and the second
      value is the vertical. The top left corner is 0% 0%.
      The right bottom corner is 100% 100%. If you only specify one
      value, the other value will be 50%. Default value is: 0% 0%
Demo 
xpos ypos
The first valueis the horizontal position and the second
      value is the vertical. The top left corner is 0 0. Units can be pixels
      (0px 0px) or any other
CSS units
. If you only specify one value, the other value will be 50%. You can mix % and positions
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
How to position a background-image to be centered at top:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position: center top;
}
Try it Yourself 
Example
How to position a background-image to be bottom right:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position: bottom right;
}
Try it Yourself 
Example
How to position a background-image using percent:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position: 50% 50%;
}
Try it Yourself 
Example
How to position a background-image using pixels:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position: 50px 150px;
}
Try it Yourself 
Example
Use different background properties to create a "hero" image:
.hero-image {
background-image: url("photographer.jpg"); /* The 
  image used */
background-color: #cccccc; /* Used if the image is 
  unavailable */
height: 500px; /* You must set a specified height */
background-position: center; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
background-size: cover; /* Resize the background image to cover the entire container */
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
CSS reference:
background-image property
HTML DOM reference:
backgroundPosition property
CSS
border-block-end-color
Property
Example
Set a width for the border at the end in the block direction:
div {
border-block-end-style: solid;
border-block-end-color: pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-end-color
property sets the color of an element's border at the end in the block direction.
The CSS
border-block-end-color
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-block-end-color
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-end-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockEndColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-end-color
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-end-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border color at the end in the block direction is affected by the
writing-mode
property:
div {
border-block-end-style: solid;
writing-mode: vertical-rl;
border-block-end-color: 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-color property:
CSS Border-block-color property
CSS border-block-start-color property:
CSS Border-block-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS writing-mode property:
CSS Writing-mode property
CSS
background-size
Property
Example
Specify the size of a background-image with "auto" and in pixels:
#example1 {
background: url(mountain.jpg);
background-repeat: no-repeat;
background-size: auto;
}
#example2 {
background: url(mountain.jpg);
background-repeat: 
    no-repeat;
background-size: 300px 100px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-size
property specifies the size of the background images.
There are four different syntaxes you can use with this property: the keyword 
syntax ("auto", "cover" and "contain"), the one-value syntax (sets the width of 
the image (height becomes "auto"), the two-value syntax (first value: width of 
the image, second value: height), and the multiple background syntax (separated 
with comma).
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.backgroundSize="60px 120px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-size
4
9
4
4.1
10
CSS Syntax
background-size: auto|
length
|cover|contain|initial|inherit;
Property Values
Value
Description
Demo
auto
Default value. The background image is displayed in its original size
Demo 
length
Sets the width and height of the background image. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto".
Read about length units
Demo 
percentage
Sets the width and height of the background image in percent of the parent element. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"
Demo 
cover
Resize the background image to cover the entire container, even if it 
    has to stretch the image or cut a little bit off one of the edges
Demo 
contain
Resize the background image to make sure the image is fully visible
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Specify the size of a background image with percent:
#example1 {
background: url(mountain.jpg);
background-repeat: no-repeat;
background-size: 100% 
    100%;
}
#example2 {
background: url(mountain.jpg);
background-repeat: no-repeat;
background-size: 75% 
    50%;
}
Try it Yourself 
Example
Specify the size of a background image with "cover":
#example1 {
background: url(mountain.jpg);
background-repeat: no-repeat;
background-size: cover;
}
Try it Yourself 
Example
Specify the size of a background image with "contain":
#example1 {
background: url(mountain.jpg);
background-repeat: no-repeat;
background-size: 
    contain;
}
Try it Yourself 
Example
Here we have two background images. We specify the size of the first background image with "contain", 
and the second background-image with "cover":
#example1 {
background: url(img_tree.gif), url(mountain.jpg);
background-repeat: no-repeat;
background-size: 
    contain, cover;
}
Try it Yourself 
Example
Use different background properties to create a "hero" image:
.hero-image {
background-image: url("photographer.jpg"); /* The 
  image used */
background-color: #cccccc; /* Used if the image is 
  unavailable */
height: 500px; /* You must set a specified height */
background-position: center; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
background-size: cover; /* Resize the background image to cover the entire container */
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Backgrounds
HTML DOM reference:
backgroundSize property
CSS
background-repeat
Property
Example
Repeat a background-image only vertically:
body
 {
background-image: url("paper.gif");
background-repeat: repeat-y;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-repeat
property sets if/how a background image will be 
repeated.
By default, a
background-image
is repeated both vertically and horizontally.
Tip:
The background image is placed according to the
background-position
property. If no background-position is specified, the image 
is always placed at the element's top left corner.
Show demo 
Default value:
repeat
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.backgroundRepeat="repeat-x"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-repeat
1.0
4.0
1.0
1.0
3.5
CSS Syntax
background-repeat: repeat|repeat-x|repeat-y|no-repeat|initial|inherit;
Property Values
Value
Description
Demo
repeat
The background image is repeated both vertically and
      horizontally. The last image will be clipped if it does not fit. This is default
Demo 
repeat-x
The background image is repeated only horizontally
Demo 
repeat-y
The background image is repeated only vertically
Demo 
no-repeat
The background-image is not repeated. The image will only be shown 
    once
Demo 
space
The background-image is repeated as much as possible without clipping. 
    The first and last image is pinned to either side of the element, and 
    whitespace is distributed evenly between the images
Demo 
round
The background-image is repeated and squished or stretched to fill the 
    space (no gaps)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Repeat a background image both vertically and horizontally (this is default):
body
 {
background-image: url("paper.gif");
background-repeat: repeat;
}
Try it Yourself 
Example
Repeat a background image only horizontally:
body
 {
background-image: url("paper.gif");
background-repeat: repeat-x;
}
Try it Yourself 
Example
Do not repeat a background image. The image will only be shown once:
body
 {
background-image: url("paper.gif");
background-repeat: no-repeat;
}
Try it Yourself 
Example
Using background-repeat: space and background-repeat: round:
#example2 {
border: 2px solid black;
padding: 25px;
background: url("w3css.gif");
background-repeat: space;
}
#example3 {
border: 1px solid black;
padding: 25px;
background: url("w3css.gif");
background-repeat: round;
}
Try it Yourself 
Example
Use different background properties to create a "hero" image:
.hero-image {
background-image: url("photographer.jpg"); /* The 
  image used */
background-color: #cccccc; /* Used if the image is 
  unavailable */
height: 500px; /* You must set a specified height */
background-position: center; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
background-size: cover; /* Resize the background image to cover the entire container */
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
CSS reference:
background-position 
property
HTML DOM reference:
backgroundRepeat property
CSS
border-block-end-style
Property
Example
Set a style for the border at the end in the block direction:
div {
border-block-end-style: dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-end-style
property sets the style of an element's border at the end in the block direction.
The CSS
border-block-end-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-block-end-style
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-end-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockEndStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-end-style
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-end-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border style at the end in the block direction is affected by the
writing-mode
property:
div {
border-block-end-style: solid;
writing-mode: vertical-rl;
border-block-end-style: 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-style property:
CSS Border-block-style property
CSS border-block-start-style property:
CSS Border-block-start-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-bottom-width
Property
Example
Set a width for the bottom border:
div {border-bottom-width: thin;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-bottom-width
property sets the width of an element's bottom border.
Note:
Always declare the
border-style
or the
border-bottom-style
property before the
border-bottom-width
property. An element must have borders before you can change the width.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderBottomWidth="5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom-width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-bottom-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium bottom border. This is default
Demo 
thin
Specifies a thin bottom border
Demo 
thick
Specifies a thick bottom border
Demo 
length
Allows you to define the thickness of the bottom border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the bottom border to medium:
div {border-bottom-width: medium;}
Try it Yourself 
Example
Set the width of the bottom border to thick:
div {border-bottom-width: thick;}
Try it Yourself 
Example
Set the width of the bottom border to 1px:
div {border-bottom-width: 1px;}
Try it Yourself 
Example
Set the width of the bottom border to 15px:
div {border-bottom-width: 15px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom property
HTML DOM reference:
borderBottomWidth property
CSS
border-block-end-width
Property
Example
Set a width for the border at the end in the block direction:
div {
border-block-end-style: solid;
border-block-end-width: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-end-width
property sets the width of an element's border at the end in the block direction.
The CSS
border-block-end-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-block-end-width
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-end-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockEndWidth="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-end-width
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-end-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border width at the end in the block direction is affected by the
writing-mode
property:
div {
border-block-end-style: solid;
writing-mode: vertical-rl;
border-block-end-width: 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-end property:
CSS Border-block-end property
CSS border-block-end-style property:
CSS Border-block-end-style property
CSS border-block-start-width property:
CSS Border-block-start-width property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-block-width
Property
Example
Set a width for the borders in block direction:
#example1 {
border-block-style: solid;
border-block-width: 10px;
}
#example2 {
border-block-style: solid;
border-block-width: thin thick;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-width
property sets the width of an element's borders in the block direction.
Values for the
border-block-width
property can be set in different ways:
If the border-block-width property has two values:
border-block-width: 10px 50px;
border width at block start is 10px
border width at block end is 50px
If the border-block-width property has one value:
border-block-width: 10px;
border width at block start and end is 10px
The CSS
border-block-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-block-width
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockWidth="3px 10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-width
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-block-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the block direction is affected by the
writing-mode
property:
div {
border-block-style: solid;
writing-mode: vertical-rl;
border-block-width: 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-end-width property:
CSS Border-block-end-width property
CSS border-block-start-width property:
CSS Border-block-start-width property
CSS border-block-style property:
CSS Border-block-style property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-block-style
Property
Example
Set a style for the borders in block direction:
#example1 {
border-block-style: solid;
}
#example2 {
border-block-style: dashed dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-style
property sets the style of an element's borders in the block direction.
Values for the
border-block-style
property can be set in different ways:
If the border-block-style property has two values:
border-block-style: dashed dotted;
border style at block start is dashed
border style at block end is dotted
If the border-block-style property has one value:
border-block-style: dashed;
border style at block start and end is dashed
The CSS
border-block-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-block-style
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-style
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-block-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border style at the start and end in the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block-style: dotted;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-end-style property:
CSS Border-block-end-style property
CSS border-block-start-style property:
CSS Border-block-start-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-bottom-left-radius
Property
Example
Add rounded borders to the bottom-left corner of two <div> elements:
#example1 {
border: 2px solid red;
border-bottom-left-radius: 25px;
}
#example2 {
border: 2px solid red;
border-bottom-left-radius: 50px 
    20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-bottom-left-radius
property defines the radius of the 
bottom-left corner.
Tip:
This property allows you to add rounded borders to elements!
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBottomLeftRadius="25px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom-left-radius
5.0
9.0
4.0
5.0
10.5
CSS Syntax
border-bottom-left-radius:
length
|
%
[
length
|
%
]|initial|inherit;
Note:
If you set two values, the first one is for the bottom border, and the second one for
the left border. If the second value is omitted, it is copied from the first. If either length is zero,
the corner is square, not rounded.
Property Values
Value
Description
Demo
length
Defines the shape of the bottom-left corner. Default value is 0.
Read about length units
Demo
%
Defines the shape of the bottom-left corner in %
Demo
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Add rounded borders to the bottom-left corner in percent:
#example1 {
border: 2px solid red;
background: url(paper.gif);
padding: 10px;
border-bottom-left-radius: 40%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
HTML DOM reference:
borderBottomLeftRadius property
CSS
border-bottom-right-radius
Property
Example
Add rounded borders to the bottom-right corner of two <div> elements:
#example1 {
border: 2px solid red;
border-bottom-right-radius: 25px;
}
#example2 {
border: 2px solid red;
border-bottom-right-radius: 50px 
    20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-bottom-right-radius
property defines the radius of the 
bottom-right corner.
Tip:
This property allows you to add rounded borders to elements!
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBottomRightRadius="25px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom-right-radius
5.0
9.0
4.0
5.0
10.5
CSS Syntax
border-bottom-right-radius:
length
|
%
[
length
|
%
]|initial|inherit;
Note:
If you set two values, the first one is for the bottom border, and the second one for
the right border. If the second value is omitted, it is copied from the first. If either length is zero,
the corner is square, not rounded.
Property Values
Value
Description
Demo
length
Defines the shape of the bottom-right corner. Default value is 0.
Read about length units
Demo 
%
Defines the shape of the bottom-right corner in %
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Add rounded borders to the bottom-right corner in percent:
#example1 {
border: 2px solid red;
background: url(paper.gif);
padding: 10px;
border-bottom-right-radius: 40%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
HTML DOM reference:
borderBottomRightRadius property
CSS
border-block-start-color
Property
Example
Set a width for the border at the start in the block direction:
div {
border-block-start-style: solid;
border-block-start-color: pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-start-color
property sets the width of an element's border at the start in the block direction.
The CSS
border-block-start-color
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-block-start-color
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-start-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockStartColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-start-color
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-start-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border color at the start in the block direction is affected by the
writing-mode
property:
div {
border-block-start-style: solid;
writing-mode: vertical-rl;
border-block-start-color: blue;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-color property:
CSS Border-block-color property
CSS border-block-end-color property:
CSS Border-block-end-color property
CSS border-block-start-style property:
CSS Border-block-start-style property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-block-start-style
Property
Example
Set a style for the border at the start in the block direction:
div {
border-block-start-style: dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-start-style
property sets the style of an element's border at the start in the block direction.
The CSS
border-block-start-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-block-start-style
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-start-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockStartStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-start-style
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-start-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border style at the start in the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block-start-style: dotted;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-style property:
CSS Border-block-style property
CSS border-block-end-style property:
CSS Border-block-end-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS writing-mode property:
CSS Writing-mode property
CSS
block-size
Property
Example
Set the size of a <div> element in the block direction:
div {
block-size: 200px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
block-size
property specifies the size of an element in the block direction.
Note:
The related CSS property
writing-mode
defines block direction, and this affects the result of the
block-size
property. For pages in English, block direction is downward and inline direction is left to right.
The CSS
block-size
and
inline-size
properties are very similar to CSS properties
width
and
height
, but the
block-size
and
inline-size
properties are dependent on block and inline directions.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.blockSize="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
block-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
inset-block: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default block-size value.
Demo 
length
Specifies block-size in px, pt, cm, etc.
Read about length units
Demo 
%
Specifies block-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to 'vertical-rl', block direction is moved from downwards to sideways, and this changes the direction the block-size property works in:
div {
block-size: 250px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Height and Width
CSS tutorial:
CSS Box model
CSS reference:
height property
CSS reference:
width property
CSS reference:
writing-mode property
CSS
Outline Color
CSS Outline Color
The
outline-color
property is used to set the color of the outline.
The color can be set by:
name - specify a color name, like "red"
HEX - specify a hex value, like "#ff0000"
RGB - specify a RGB value, like "rgb(255,0,0)"
HSL - specify a HSL value, like "hsl(0, 100%, 50%)"
invert - performs a color inversion (which ensures that the outline is visible, regardless of color background)
The following example shows some different outlines with different colors. 
Also notice that these elements also have a thin black border inside the outline:
A solid red outline.
A dotted blue outline.
An outset grey outline.
Example
p.ex1
{
border: 2px solid black;
outline-style: solid;
outline-color: red;
}
p.ex2
{
border: 2px solid black;
outline-style: dotted;
outline-color: blue;
}
p.ex3
{
border: 2px solid black;
outline-style: outset;
outline-color: grey;
}
Try it Yourself 
HEX Values
The outline color can also be specified using a hexadecimal value (HEX):
Example
p.ex1 {
outline-style: solid;
outline-color: #ff0000; 
  /* red */
}
Try it Yourself 
RGB Values
Or by using RGB values:
Example
p.ex1 {
outline-style: solid;
outline-color: rgb(255, 0, 0); /* 
  red */
}
Try it Yourself 
HSL Values
You can also use HSL values:
Example
p.ex1 {
outline-style: solid;
outline-color: hsl(0, 100%, 50%); 
  /* red */
}
Try it Yourself 
CSS
Text Effects
CSS Text
Overflow, Word Wrap, Line Breaking 
Rules, and Writing Modes
In this chapter you will learn about the following properties:
text-overflow
word-wrap
word-break
writing-mode
CSS Text Overflow
The CSS
text-overflow
property specifies how overflowed content that is not 
displayed should be signaled to the user.
It can be clipped:
This is some long text that will not fit in the box
or it can be rendered as an ellipsis (...):
This is some long text that will not fit in the box
The CSS code is as follows:
Example
p.test1 {
white-space: nowrap;
width: 200px;
border: 1px solid #000000;
overflow: hidden;
text-overflow: clip;
}
p.test2 {
white-space: nowrap;
width: 200px;
border: 1px solid #000000;
overflow: hidden;
text-overflow: ellipsis;
}
Try it Yourself 
The following example shows how you can display the overflowed content when hovering over the element:
Example
div.test:hover {
overflow: visible;
}
Try it Yourself 
CSS Word Wrapping
The CSS
word-wrap
property allows long words to be able to be broken and wrap onto the next line.
If a word is too long to fit within an area, it expands outside:
This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.
The word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word:
This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.
The CSS code is as follows:
Example
Allow long words to be able to be broken and wrap onto the next line:
p {
word-wrap: break-word;
}
Try it Yourself 
CSS Word Breaking
The CSS
word-break
property specifies line breaking rules.
This paragraph contains some text. This line will-break-at-hyphens.
This paragraph contains some text. The lines will break at any character.
The CSS code is as follows:
Example
p.test1 {
word-break: 
keep-all;
}
p.test2 {
word-break: 
break-all;
}
Try it Yourself 
CSS Writing Mode
The CSS
writing-mode
property specifies 
whether lines of text are laid out horizontally or vertically.
Some text with a span element with a
vertical-rl
writing-mode.
The following example shows some different writing modes:
Example
p.test1 {
writing-mode: horizontal-tb;
}
span.test2 {
writing-mode: vertical-rl;
}
p.test2 {
writing-mode: 
   vertical-rl;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Specify that the overflowed content for the <p> element should be signaled with an ellipsis (...).
<style>
p {
  white-space: nowrap; 
  width: 200px; 
  border: 1px solid #000000;
  overflow: hidden;
:
;
}
</style>

<body>
  <p>
    This paragraph contains a very long word: supercalifragilisticexpialidocious.
  </p>
</body>
Submit Answer 
Start the Exercise
CSS Text Effect Properties
The following table lists the CSS text effect properties:
Property
Description
text-justify
Specifies how justified text should be aligned and spaced
text-overflow
Specifies how overflowed content that is not displayed should be signaled to the user
word-break
Specifies line breaking rules for non-CJK scripts
word-wrap
Allows long words to be able to be broken and wrap onto the next line
writing-mode
Specifies whether lines of text are laid out horizontally or vertically
CSS
backdrop-filter
Property
Example
Add a graphical effect to the area behind an element:
div.transbox {
background-color: rgba(255, 255, 255, 0.4);
-webkit-backdrop-filter: blur(5px);
backdrop-filter: blur(5px);
}
Try it Yourself 
Definition and Usage
The
backdrop-filter
property is used to apply 
a graphical effect to the area behind an 
element.
Tip:
To see the effect, the element or its background must 
be at least partially transparent.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.backdropFilter="grayscale(100%)"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specifies the first version that worked with a prefix.
Property
backdrop-filter
76
79
103
9 -webkit-
63
CSS Syntax
backdrop-filter: 
  none|
filter
|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. No filter is applied to the backdrop
Demo 
filter
A space-separated list of filter-functions like:
blur()
brightness()
contrast()
drop-shadow()
grayscale()
hue-rotate()
invert()
opacity()
sepia()
saturate()
or an url to an SVG filter that will be applied to the backdrop
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Reference:
filter property
CSS Tutorial:
CSS Images
HTML DOM reference:
filter property
CSS
background-origin
Property
Example
Let the background-image start from the upper left corner of the content:
#example1 {
border: 10px dashed black;
padding: 
    25px;
background: url(paper.gif);
background-repeat: no-repeat;
background-origin: 
    content-box;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-origin
property specifies the origin position (the background 
positioning area) of a background image.
Note:
This property has no effect if
background-attachment
is "fixed".
Show demo 
Default value:
padding-box
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.backgroundOrigin="content-box"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-origin
4.0
9.0
4.0
3.0
10.5
CSS Syntax
background-origin: padding-box|border-box|content-box|initial|inherit;
Property Values
Value
Description
Demo
padding-box
Default value. The background image starts from the upper left corner of the padding edge
Demo 
border-box
The background image starts from the upper left corner of the border
Demo 
content-box
The background image starts from the upper left corner of the content
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set two background images for a <div> element. Let the "paper.gif" 
background image starts from the upper left corner of the padding edge, and let 
the "img_tree.gif" background image starts from the upper left corner of the 
content:
#example1 {
border: 10px dashed black;
padding: 25px;
background: url(img_tree.gif), url(paper.gif);
background-repeat: no-repeat;
background-origin: 
  content-box, padding-box;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Backgrounds
HTML DOM reference:
backgroundOrigin property
CSS
background-clip
Property
Example
Specify how far the background should extend within an element:
div
 {
border: 10px dotted black;
padding: 15px;
background: 
    lightblue;
background-clip: 
    padding-box;
}
Try it Yourself 
Definition and Usage
The
background-clip
property defines how far the background (color or image) 
should extend within an element.
Show demo 
Default value:
border-box
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.backgroundClip="content-box"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-clip
4.0
9.0
4.0
3.0
10.5
CSS Syntax
background-clip: border-box|padding-box|content-box|initial|inherit;
Property Values
Value
Description
Demo
border-box
Default value. The background extends behind the border
Demo 
padding-box
The background extends to the inside edge of the border
Demo 
content-box
The background extends to the edge of the content box
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Backgrounds
HTML DOM reference:
backgroundClip property
CSS
background-color
Property
Example
Set the background color for a page:
body {background-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-color
property sets the background color of an element.
The background of an element is the total size of the element, including 
padding and border (but not the margin).
Tip:
Use a background color and a text color that makes the text easy 
to read.
Show demo 
Default value:
transparent
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.backgroundColor="#00FF00"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
background-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the background color. Look at
CSS Color Values
for a complete list of possible color values.
Demo 
transparent
Specifies that the background color should be transparent. This is default
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Specify the background color with a HEX value:
body {background-color: #92a8d1;}
Try it Yourself 
Example
Specify the background color with an RGB value:
body {background-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Specify the background color with an RGBA value:
body {background-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Specify the background color with a HSL value:
body {background-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Specify the background color with a HSLA value:
body {background-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set background colors for different elements:
body {
background-color: #fefbd8;
}
h1 {
background-color: #80ced6;
}
div {
background-color: #d5f4e6;
}
span {
background-color: #f18973;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
HTML DOM reference:
backgroundColor property
CSS
background-image
Property
Example
Set a background-image for the <body> element:
body {
background-image: url("paper.gif");
background-color: #cccccc;
}
Try it Yourself 
Example
Set two background images for the <body> element:
body {
background-image: url("img_tree.gif"), url("paper.gif");
background-color: #cccccc;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-image
property sets one or more background images for an element.
By default, a background-image is placed at the top-left corner of an 
element, and repeated both vertically and horizontally.
Tip:
The background of an element is the total size of the element, including 
padding and border (but not the margin).
Tip:
Always set a
background-color
to be used if the image is unavailable.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1 + new values in CSS3
JavaScript syntax:
object
.style.backgroundImage="url(img_tree.gif)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-image
1.0
4.0
1.0
1.0
3.5
CSS Syntax
background-image:
url
|none|initial|inherit;
Property Values
Value
Description
Demo
url('
URL
')
The URL to the image. To specify more than one image, separate the URLs with a comma
Demo 
none
No background image will be displayed. This is default
conic-gradient()
Sets a conic gradient as the background image. Define at least two 
    colors
Demo 
linear-gradient()
Sets a linear gradient as the background image. Define at least two 
    colors (top to bottom)
Demo 
radial-gradient()
Sets a radial gradient as the background image. Define at least two 
    colors (center to edges)
Demo 
repeating-conic-gradient()
Repeats a conic gradient
Demo 
repeating-linear-gradient()
Repeats a linear gradient
Demo 
repeating-radial-gradient()
Repeats a radial gradient
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Sets two background images for the <body> element. Let the first 
image appear only once (with no-repeat), and let the second image be repeated:
body {
background-image: url("img_tree.gif"), url("paper.gif");
background-repeat: no-repeat, repeat;
background-color: #cccccc;
}
Try it Yourself 
Example
Use different background properties to create a "hero" image:
.hero-image {
background-image: url("photographer.jpg"); /* The 
  image used */
background-color: #cccccc; /* Used if the image is 
  unavailable */
height: 500px; /* You must set a specified height */
background-position: center; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
background-size: cover; /* Resize the background image to cover the entire container */
}
Try it Yourself 
Example
Sets a linear-gradient (two colors) as a background image for a <div> element:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  linear-gradient(red, yellow);
}
Try it Yourself 
Example
Sets a linear-gradient (three colors) as a background image for a <div> element:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  linear-gradient(red, yellow, green);
}
Try it Yourself 
Example
The repeating-linear-gradient() function is used to repeat linear gradients:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  repeating-linear-gradient(red, yellow 10%, green 20%);
}
Try it Yourself 
Example
Sets a radial-gradient (two colors) as a background image for a <div> element:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  radial-gradient(red, yellow);
}
Try it Yourself 
Example
Sets a radial-gradient (three colors) as a background image for a <div> element:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  radial-gradient(red, yellow, green);
}
Try it Yourself 
Example
The repeating-radial-gradient() function is used to repeat radial gradients:
#grad1 {
height: 200px;
background-color: #cccccc;
background-image: 
  repeating-radial-gradient(red, yellow 10%, green 20%);
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
,
CSS Backgrounds (advanced)
,
CSS Gradients
HTML DOM reference:
backgroundImage property
CSS
background-blend-mode
Property
Example
Specify the blending mode of a background-image to be "lighten":
div {
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: lighten;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-blend-mode
property defines the blending mode of each 
background layer (color and/or image).
Show demo 
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.backgroundBlendMode="screen"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-blend-mode
35.0
79.0
30.0
7.1
22.0
CSS Syntax
background-blend-mode: normal|multiply|screen|overlay|darken|lighten|color-dodge|saturation|color|luminosity;
Property Values
Value
Description
Demo
normal
This is default. Sets the blending mode to normal
Demo 
multiply
Sets the blending mode to multiply
Demo 
screen
Sets the blending mode to screen
Demo 
overlay
Sets the blending mode to overlay
Demo 
darken
Sets the blending mode to darken
Demo 
lighten
Sets the blending mode to lighten
Demo 
color-dodge
Sets the blending mode to color-dodge
Demo 
saturation
Sets the blending mode to saturation
Demo 
color
Sets the blending mode to color
Demo 
luminosity
Sets the blending mode to luminosity
Demo 
More Examples
Example
Specify the blending mode to be "multiply":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: multiply;
}
Try it Yourself 
Example
Specify the blending mode to be "screen":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: screen;
}
Try it Yourself 
Example
Specify the blending mode to be "overlay":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: overlay;
}
Try it Yourself 
Example
Specify the blending mode to be "darken":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: darken;
}
Try it Yourself 
Example
Specify the blending mode to be "color-dodge":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: color-dodge;
}
Try it Yourself 
Example
Specify the blending mode to be "saturation":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: saturation;
}
Try it Yourself 
Example
Specify the blending mode to be "color":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: color;
}
Try it Yourself 
Example
Specify the blending mode to be "luminosity":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: luminosity;
}
Try it Yourself 
Example
Specify the blending mode to be "normal":
div {
width: 400px;
height: 
    400px;
background-repeat: no-repeat, repeat;
background-image: url("img_tree.gif"), url("paper.gif");
background-blend-mode: normal;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
CSS
background-attachment
Property
Example
A background-image that will not scroll with the page (fixed):
body {
background-image: url("img_tree.gif");
background-repeat: no-repeat;
background-attachment: fixed;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-attachment
property sets whether a background image  
scrolls with the rest of the page, or is fixed.
Default value:
scroll
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.backgroundAttachment="fixed"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-attachment
1.0
4.0
1.0
1.0
3.5
CSS Syntax
background-attachment: scroll|fixed|local|initial|inherit;
Property Values
Value
Description
scroll
The background image will scroll with the page. This is default
fixed
The background image will not scroll with the page
local
The background image will scroll with the element's contents
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A background-image that will scroll with the page (scroll). This is default:
body {
background-image: url("img_tree.gif");
background-repeat: no-repeat;
background-attachment: scroll;
}
Try it Yourself 
Example
How to create a simple parallax scrolling effect (create an illusion of 3D depth):
.fixed-bg {
/* The background image */
background-image: url("img_tree.gif");
/* Set a specified height, or the minimum height for the background image */
min-height: 500px;
/* Set background image to fixed (don't scroll along with the page) */
background-attachment: fixed;
/* Center the background image */
background-position: center;
/* Set the background image to no repeat */
background-repeat: no-repeat;
/* Scale the background image to be as large as possible */
background-size: cover;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
HTML DOM reference:
backgroundAttachment 
property
CSS
border-image-width
Property
Example
Specify the width of the border image:
#borderimg
 {
border-image-source: url(border.png);
border-image-width: 10px;
}
Try it Yourself 
Definition and Usage
The
border-image-width
property specifies the width of the border image.
Tip:
Also look at the
border-image
property 
(a shorthand property for setting all the border-image-* properties).
Show demo 
Default value:
1
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImageWidth="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image-width
15.0
11.0
13.0
6.0
15.0
CSS Syntax
border-image-width:
number
|
%
|auto|initial|inherit;
Note:
The
border-image-width
property can take from one to four values 
(top, right, bottom, and left sides). If the 
fourth value is omitted, it is the same as the second. If the third one is also 
omitted, it is the same as the first. If the second one is also omitted, it is 
the same as the first.
Property Values
Value
Description
Demo
length
A length unit (px) specifying the size of the border-width
Demo 
number
Default value 1. Represents multiples of the corresponding border-width
Demo 
%
Refers to the size of the border image area: the width of the area for horizontal offsets, the height for vertical offsets
Demo 
auto
If specified, the width is the intrinsic width or height of the corresponding image slice
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image property
CSS Reference:
border-image-outset property
CSS Reference:
border-image-repeat property
CSS Reference:
border-image-slice property
CSS Reference:
border-image-source property
HTML DOM reference:
borderImageWidth property
CSS
border-image-source
Property
Example
Specify an image as the border around an element:
#borderimg
 {
border-image-source: url(border.png);
}
Try it Yourself 
Definition and Usage
The
border-image-source
property specifies the path to the image to be used 
as a border (instead of the normal border around an element).
Tip:
If the value is "none", or if the image cannot be displayed, the 
border styles will be used.
Tip:
Also look at the
border-image
property 
(a shorthand property for setting all the border-image-* properties).
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImageSource="url(border.png)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image-source
15.0
11.0
15.0
6.0
15.0
CSS Syntax
border-image-source: none|
image
|initial|inherit;
Property Values
Value
Description
Demo
none
No image will be used
image
The path to the image to be used as a border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image property
CSS Reference:
border-image-outset property
CSS Reference:
border-image-repeat property
CSS Reference:
border-image-slice property
CSS Reference:
border-image-width property
HTML DOM reference:
borderImageSource property
CSS
border-inline
Property
Example
Set the style, color and width of the borders for different elements in the inline direction:
h1 {
border-inline: 5px solid red;
}
h2 {
border-inline: 4px dotted blue;
}
div {
border-inline: 
    double;
}
Try it Yourself 
Definition and Usage
The
border-inline
property is a shorthand property for these properties:
border-inline-width
border-inline-style
(required)
border-inline-color
If values for color or width are omitted, default values will be used.
The CSS
border-inline
property is very similar to CSS property
border
, but the
border-inline
property is dependent on the inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInline="dashed hotpink 10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-inline:
border-inline-width
border-inline-style
border-inline-color
|initial|inherit;
Property Values
Value
Description
Demo
border-inline-width
Specifies the width of the borders in the inline direction. Default value is "medium"
Demo 
border-inline-style
Specifies the style of the borders in the inline direction. Default value is "none"
Demo 
border-inline-color
Specifies the color of the borders in the inline direction. Default value is the color of the 
    text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline: hotpink dashed 8px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline-color property:
CSS Border-inline-color property
CSS border-inline-style property:
CSS Border-inline-style property
CSS border-inline-width property:
CSS Border-inline-width property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-inline-end
Property
Example
Set the width, color and style for the border at the end of the inline direction:
div {
border-inline-end: 
  10px solid pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-end
property is a shorthand property for these properties:
border-inline-end-width
border-inline-end-style
border-inline-end-color
The CSS
border-inline-end
property is very similar to CSS properties
border-bottom
,
border-left
,
border-right
and
border-top
, but the
border-inline-end
property is dependent on 
inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-end
property. For pages in English, inline direction is left to right and block direction is 
from top to bottom.
Show demo 
Default value:
medium none
currentcolor
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineEnd="pink dotted 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-end
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-end:
border-inline-end-width border-inline-end-style border-inline-end-color
|initial|inherit;
Property Values
Value
Description
Demo
border-inline-end-width
Specifies the width of an element's border at the end of the inline direction. Default value is "medium"
Demo 
border-inline-end-style
Specifies the style of an element's border at the end of the inline direction. Default value is "none"
Demo 
border-inline-end-color
Specifies the color of an element's border at the end of the inline direction. Default value is the current color of the border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the end of the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline-end: 
  5px solid blue;
}
Try it Yourself 
With direction property
The position of the borders at the end of the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-end: 5px solid hotpink;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS Border-inline-end-style property
CSS border-inline-start-color property:
CSS Border-inline-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-image
Property
Example
Specify an image as the border around an element:
#borderimg {
border-image: url(border.png) 30 round;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-image
property allows you to specify an image to be used as the border around an element.
The border-image property is a shorthand property for:
border-image-source
border-image-slice
border-image-width
border-image-outset
border-image-repeat
Omitted values are set to their default values.
Show demo 
Default value:
none 100% 1 0 stretch
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImage="url(border.png) 30 round"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image
16
11
15
6
15
Note:
See individual browser support for each value below.
CSS Syntax
border-image:
source slice width outset repeat
|initial|inherit;
Property Values
Value
Description
Demo
border-image-source
The path to the image to be used as a border
Demo 
border-image-slice
How to slice the border image
Demo 
border-image-width
The width of the border image
Demo 
border-image-outset
The amount by which the border image area extends beyond the border box
Demo 
border-image-repeat
Whether the border image should be repeated, rounded or stretched
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Different slice values completely changes the look of the border:
#borderimg1 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 50 round;
}
#borderimg2 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 20% round;
}
#borderimg3 {
border: 10px solid transparent;
padding: 15px;
border-image: url(border.png) 30% round;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image-outset property
CSS Reference:
border-image-repeat property
CSS Reference:
border-image-slice property
CSS Reference:
border-image-source property
CSS Reference:
border-image-width property
HTML DOM reference:
borderImage property
CSS
border-width
Property
Example
Set a width for the borders:
div {border-width: thin;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-width
property sets the width of an element's four borders. This property can 
have from one to four values.
Examples:
border-width: thin medium thick 10px;
top border is thin
right border is medium
bottom border is thick
left border is 10px
border-width: thin medium thick;
top border is thin
right and left borders are medium
bottom border is thick
border-width: thin medium;
top and bottom borders are thin
right and left borders are medium
border-width: thin;
all four borders are thin
Note:
Always declare the
border-style
property before the
border-width
property. An element must have borders before you can set the width.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderWidth="1px 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the borders to medium:
div {border-width: medium;}
Try it Yourself 
Example
Set the width of the borders to thick:
div {border-width: thick;}
Try it Yourself 
Example
Set the width of the borders to 1px:
div {border-width: 1px;}
Try it Yourself 
Example
Set the width of the borders to 15px:
div {border-width: 15px;}
Try it Yourself 
Example
Set the width of the top and bottom borders to 10px, and the width of the left and right borders to 1px:
div {border-width: 10px 1px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderWidth property
CSS
border-inline-style
Property
Example
Set a style for the borders in inline direction:
#example1 {
border-inline-style: solid;
}
#example2 {
border-inline-style: dashed dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-style
property sets the style of an element's borders in the inline direction.
Values for the
border-inline-style
property can be set in different ways:
If the border-inline-style property has two values:
border-inline-style: solid dotted;
border style at inline start is solid
border style at inline end is dotted
If the border-inline-style property has one value:
border-inline-style: dotted;
border style at inline start and end is dotted
The CSS
border-inline-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-inline-style
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-style
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-inline-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline-style: dotted;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-style: solid dotted;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-style property:
CSS border-inline-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-left
Property
Example
Set the style of the left border for different elements:
h1 {
border-left: 5px solid red;
}
h2 {
border-left: 4px dotted blue;
}
div {
border-left: double;
}
Try it Yourself 
Definition and Usage
The
border-left
property is a shorthand 
property for (in the following order):
border-left-width
border-left-style
(required)
border-left-color
If border-left-color is omitted, the color applied will be the color of the 
text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderLeft="3px dotted blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-left
1.0
4.0
1.0
3.5
1.0
CSS Syntax
border-left:
border-width
border-style
border-color
|initial|inherit;
Property Values
Value
Description
Demo
border-left-width
Optional. Specifies the width of the left border. Default value is 
    "medium"
Demo 
border-left-style
Required. Specifies the style of the left border. Default value is 
    "none"
Demo 
border-left-color
Optional. Specifies the color of the left border. Default value is the 
    color of the text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderLeft property
CSS
border-inline-start-style
Property
Example
Set a style for the border at the start in the inline direction:
div {
border-inline-start-style: dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-start-style
property sets the style of an element's border at the start in the inline direction.
The CSS
border-inline-start-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-inline-start-style
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-start-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineStartStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-start-style
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-start-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the start in the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline-start-style: dotted;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-start-style: dotted;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS Border-inline-end-style property
CSS border-inline-start-style property:
CSS border-inline-start-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-left-color
Property
Example
Set a color for the left border:
div {border-left-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-left-color
property sets the color of an element's left border.
Note:
Always declare the
border-style
or the
border-left-style
property before the
border-left-color
property. An element must have a border 
before you can change the color.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderLeftColor="blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-left-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-left-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the left border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the 
    current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the left border with a HEX value:
div {border-left-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the left border with an RGB value:
div {border-left-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the left border with an RGBA value:
div {border-left-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the left border with a HSL value:
div {border-left-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the left border with a HSLA value:
div {border-left-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set a transparent left border:
div {border-left-color: transparent;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left property
HTML DOM reference:
borderLeftColor property
CSS
border-inline-start-color
Property
Example
Set a color for the border at the start in the inline direction:
div {
border-inline-start-style: solid;
border-inline-start-color: pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-start-color
property sets the color of an element's border at the start in the inline direction.
The CSS
border-inline-start-color
property is very similar to CSS properties
border-bottom-color
,
border-left-color
,
border-right-color
and
border-top-color
, but the
border-inline-start-color
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-start-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineStartColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-start-color
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-start-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the start in the inline direction is affected by the
writing-mode
property:
div {
border-inline-start-style: solid;
writing-mode: vertical-rl;
border-inline-start-color: 5px;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-start-color: hotpink;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-color property:
CSS Border-inline-end-color property
CSS border-inline-start-style property:
CSS Border-inline-start-style property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-radius
Property
Example
Add rounded corners to two <div> elements:
#example1 {
border: 2px solid red;
border-radius: 25px;
}
#example2 {
border: 2px solid red;
border-radius: 50px 
    20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-radius
property defines the radius of the 
element's corners.
Tip:
This property allows you to add rounded corners to elements!
This property can have from one to four values. Here are the rules:
Four values - border-radius: 15px 50px 30px 5px;
(first value applies to top-left 
corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner):
Three values - border-radius: 15px 50px 30px;
(first value applies to top-left 
corner, second value applies to top-right and bottom-left corners, and third value applies to bottom-right corner):
Two values - border-radius: 15px 50px;
(first value applies to top-left and bottom-right corners, and the second value applies to top-right and bottom-left corners):
One value - border-radius: 15px;
(the value applies to all four corners, which are rounded equally:
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderRadius="25px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-radius
5
9
4
5
10.5
CSS Syntax
border-radius:
1-4 length
|
%
/
1-4 length
|
%
|initial|inherit;
Note:
The four values for each radius are given in the order top-left, top-right, 
bottom-right, bottom-left. If bottom-left is omitted it is the same as 
top-right. If bottom-right is omitted it is the same as top-left. If top-right 
is omitted it is the same as top-left.
Property Values
Value
Description
Demo
length
Defines the shape of the corners. Default value is 0.
Read about length units
Demo 
%
Defines the shape of the corners in %
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set rounded corners for an element with a background color:
#rcorners1 {
border-radius: 25px;
background: #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
Try it Yourself 
Example
Set rounded corners for an element with a border:
#rcorners2 {
border-radius: 25px;
border: 2px solid #73AD21;
padding: 20px;
width: 200px;
height: 150px;
}
Try it Yourself 
Example
Set rounded corners for an element with a background image:
#rcorners3 {
border-radius: 25px;
background: url(paper.gif);
background-position: left top;
background-repeat: repeat;
padding: 20px;
width: 200px;
height: 150px;
}
Try it Yourself 
Example
Also notice this:
#example1 {
border-radius: 2em / 5em;
}
/* is equivalent to:
border-top-left-radius: 2em 5em;
border-top-right-radius: 2em 5em;
border-bottom-right-radius: 2em 5em;
border-bottom-left-radius: 2em 5em; */
#example2 {
border-radius: 2em 1em 4em / 0.5em 3em;
}
/* is equivalent to:
border-top-left-radius: 2em 0.5em;
border-top-right-radius: 1em 3em;
border-bottom-right-radius: 4em 0.5em;
border-bottom-left-radius: 1em 3em; */
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
HTML DOM reference:
borderRadius property
CSS
border-right-color
Property
Example
Set a color for the right border:
div {border-right-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-right-color
property sets the color of an element's right border.
Note:
Always declare the
border-style
or the
border-right-style
property before the
border-right-color
property. An element must have a border 
before you can change the color.
Show demo 
Default value:
black
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderRightColor="blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-right-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-right-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the right border. Look at
CSS Color Values
for a complete list of 
    possible color values. Default color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the right border with a HEX value:
div {border-right-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the right border with an RGB value:
div {border-right-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the right border with an RGBA value:
div {border-right-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the right border with a HSL value:
div {border-right-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the right border with a HSLA value:
div {border-right-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set a transparent right border:
div {border-right-color: transparent;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right property
HTML DOM reference:
borderRightColor property
CSS
border-inline-end-style
Property
Example
Set a style for the border at the end in the inline direction:
div {
border-inline-end-style: dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-end-style
property sets the style of an element's border at the end in the inline direction.
The CSS
border-inline-end-style
property is very similar to CSS properties
border-bottom-style
,
border-left-style
,
border-right-style
and
border-top-style
, but the
border-inline-end-style
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-end-style
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineEndStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-end-style
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-end-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the border-color value
Demo 
rigde
Specifies a 3D ridged border. The effect depends on the border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the end in the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline-end-style: dotted;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-end-style: dotted;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS border-inline-end-style property
CSS border-inline-start-style property:
CSS Border-inline-start-style property
CSS border-bottom-style property:
CSS Border-bottom-style property
CSS border-left-style property:
CSS Border-left-style property
CSS border-right-style property:
CSS Border-right-style property
CSS border-top-style property:
CSS Border-top-style property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-top-right-radius
Property
Example
Add rounded borders to the top-right corner of two <div> elements:
#example1 {
border: 2px solid red;
border-top-right-radius: 25px;
}
#example2 {
border: 2px solid red;
border-top-right-radius: 50px 
    20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-top-right-radius
property defines the radius of the top-right 
corner.
Tip:
This property allow you to add rounded borders to elements!
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderTopRightRadius="25px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top-right-radius
5
9
4
5
10.5
CSS Syntax
border-top-right-radius:
length
|
%
[
length
|
%
]|initial|inherit;
Note:
If you set two values, the first one is for the top border, and the second one for
the right border. If the second value is omitted, it is copied from the first. If either length is zero,
the corner is square, not rounded.
Property Values
Value
Description
Demo
length
Defines the shape of the top-right corner.
Read about length units
Demo 
%
Defines the shape of the top-right corner in %
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Add rounded borders to the top-right corner in percent:
#example1 {
border: 2px solid red;
background: url(paper.gif);
padding: 10px;
border-top-right-radius: 40%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
HTML DOM reference:
borderTopRightRadius property
CSS
box-decoration-break
Property
Example
Specify the box-decoration-break property:
span.ex1 {
-webkit-box-decoration-break: clone;
box-decoration-break: 
    clone;
}
span.ex2 {
-webkit-box-decoration-break: slice;
box-decoration-break: 
    slice;
}
Try it Yourself 
Definition and Usage
The
box-decoration-break
property specifies how the background, padding, 
border, border-image, box-shadow, margin, and clip-path of an element is applied 
when the box for the element is fragmented.
Default value:
slice
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a prefix.
Property
box-decoration-break
22-webkit-
79 -webkit-
32
7-webkit-
15-webkit-
CSS Syntax
box-decoration-break: slice|clone|initial|inherit|unset;
Property Values
Value
Description
slice
Default. Box decorations are applied to the element as a whole and break at 
    the edges of the element fragments
clone
Box decorations apply to each fragment of the element as if the 
    fragments were individual elements. Borders wrap the four edges of 
    each fragment of the element, and backgrounds are redrawn in full for each 
    fragment
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
border-inline-end-color
Property
Example
Set a color for the border at the end in the inline direction:
div {
border-inline-end-style: solid;
border-inline-end-color: pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-end-color
property sets the color of an element's border at the end in the inline direction.
The CSS
border-inline-end-color
property is very similar to CSS properties
border-bottom-color
,
border-left-color
,
border-right-color
and
border-top-color
, but the
border-inline-end-color
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-end-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineEndColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-end-color
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-end-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the end in the inline direction is affected by the
writing-mode
property:
div {
border-inline-end-style: solid;
writing-mode: vertical-rl;
border-inline-end-color: blue;
}
Try it Yourself 
With direction property
The position of the borders at the end of the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-end-color: hotpink;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS Border-inline-end-style property
CSS border-inline-start-color property:
CSS Border-inline-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-top
Property
Example
Set the style of the top border for different elements:
h1 {
border-top: 5px solid red;
}
h2 {
border-top: 4px dotted blue;
}
div {
border-top: double;
}
Try it Yourself 
Definition and Usage
The
border-top
shorthand property sets all the top border properties in one declaration.
The properties that can be set must be in the following order:
border-top-width
border-top-style
(required)
border-top-color
If border-top-color is omitted, the color applied will be the color of the 
text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderTop="3px dashed blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-top:
border-width
border-style
border-color
|initial|inherit;
Property Values
Value
Description
Demo
border-top-width
Required. Specifies the width of the top border. Default value is 
    "medium"
Demo 
border-top-style
Required. Specifies the style of the top border. Default value is "none"
Demo 
border-top-color
Optional. Specifies the color of the top border. Default value is the 
    color of the text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderTop 
property
CSS
bottom
Property
Example
Set the bottom edge of the <div> element to 10px above the 
bottom edge of its nearest parent element with some positioning:
div.absolute {
position: absolute;
bottom: 
    10px;
width: 50%;
border: 3px solid #8AC007;
}
Try it Yourself 
Definition and Usage
The
bottom
property affects the vertical position of a positioned element. 
This property has no effect on non-positioned elements.
If position: absolute; or position: fixed; - the
bottom
property 
  sets the bottom edge of an element to a unit above/below the bottom edge of 
  its nearest positioned ancestor.
If position: relative; - the
bottom
property makes the element's bottom 
  edge to move above/below its normal position.
If position: sticky; - the
bottom
property behaves like its position is 
  relative when the element is inside the viewport, and like its position is 
  fixed when it is outside.
If position: static; - the
bottom
property has no effect.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.bottom="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
bottom
1.0
5.0
1.0
1.0
6.0
CSS Syntax
bottom: auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
Lets the browser calculate the bottom edge position. This is default
Demo 
length
Sets the bottom edge position in px, cm, etc. Negative values are allowed.
Read about length units
Demo 
%
Sets the bottom edge position in % of containing element. Negative values are allowed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
top property
CSS reference:
left property
CSS reference:
right property
HTML DOM reference:
bottom property
CSS
border-style
Property
Example
Set a style for the border:
div {border-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-style
property sets the style of an element's four borders. This property can have from one to four values.
Examples:
border-style: dotted solid double dashed;
top border is dotted
right border is solid
bottom border is double
left border is dashed
border-style: dotted solid double;
top border is dotted
right and left borders are solid
bottom border is double
border-style: dotted solid;
top and bottom borders are dotted
right and left borders are solid
border-style: dotted;
all four borders are dotted
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.borderStyle="dotted double"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-style
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Specifies no border
Demo 
hidden
The same as "none", except in border conflict
        resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the
        border-color value
Demo 
ridge
Specifies a 3D ridged border. The effect depends on the
        border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the
        border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the
        border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed border:
div {border-style: dashed;}
Try it Yourself 
Example
A solid border:
div {border-style: solid;}
Try it Yourself 
Example
A double border:
div {border-style: double;}
Try it Yourself 
Example
A groove border:
div {
border-style: groove;
border-color: coral;
border-width: 7px;
}
Try it Yourself 
Example
A ridge border:
div {
border-style: ridge;
border-color: coral;
border-width: 7px;
}
Try it Yourself 
Example
An inset border:
div {
border-style: inset;
border-color: coral;
border-width: 7px;
}
Try it Yourself 
Example
An outset border:
div {
border-style: outset;
border-color: coral;
border-width: 7px;
}
Try it Yourself 
Example
Set different borders on each side of an element:
p.one {border-style: dotted solid dashed double;}
p.two {border-style: dotted solid dashed;}
p.three {border-style: dotted solid;}
p.four {border-style: dotted;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderStyle property
CSS
border-inline-end-width
Property
Example
Set a width for the border at the end in the inline direction:
div {
border-inline-end-style: solid;
border-inline-end-width: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-end-width
property sets the width of an element's border at the end in the inline direction.
The CSS
border-inline-end-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-inline-end-width
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-end-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineEndWidth="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-end-width
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-end-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the end in the inline direction is affected by the
writing-mode
property:
div {
border-inline-end-style: solid;
writing-mode: vertical-rl;
border-inline-end-width: 5px;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-end-width: 10px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS Border-inline-end-style property
CSS border-inline-start-width property:
CSS Border-inline-start-width property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-spacing
Property
Example
Set the border-spacing for a table:
#table1 {
border-collapse: separate;
border-spacing: 15px;
}
#table2 {
border-collapse: separate;
border-spacing: 15px 50px;
}
Try it Yourself 
Definition and Usage
The
border-spacing
property sets the distance between the borders of adjacent cells.
Note:
This property works only when
border-collapse
is 
separate.
Show demo 
Default value:
2px
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.borderSpacing="15px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-spacing
1.0
8.0
1.0
1.0
4.0
CSS Syntax
border-spacing:
length
|initial|inherit;
Property Values
Value
Description
Demo
length length
Specifies the distance between the borders of adjacent cells in px, cm, etc. Negative values are not allowed.
If one  value is specified, it defines both the horizontal and vertical spacing 
    between cells
If two values are specified, the first sets the horizontal spacing and the second sets the vertical spacing
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Table
HTML DOM reference:
borderSpacing property
CSS
border-inline-width
Property
Example
Set a width for the borders in inline direction:
#example1 {
border-inline-style: solid;
border-inline-width: 10px;
}
#example2 {
border-inline-style: dashed;
border-inline-width: thin thick;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-width
property sets the width of an element's borders in the inline direction.
Values for the
border-inline-width
property can be set in different ways:
If the border-inline-width property has two values:
border-inline-width: 10px 50px;
border width at inline start is 10px
border width at inline end is 50px
If the border-inline-width property has one value:
border-inline-width: 10px;
border width at inline start and end is 10px
The CSS
border-inline-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-inline-width
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineWidth="3px 10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-width
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-inline-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the inline direction is affected by the
writing-mode
property:
div {
border-inline-style: solid;
writing-mode: vertical-rl;
border-inline-width: 5px;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-width: 5px 15px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-style property:
CSS Border-inline-style property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-top-width
Property
Example
Set a width for the top border:
div {border-top-width: thin;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-top-width
property sets the width of an element's top border.
Note:
Always declare the
border-style
or the
border-top-style
property before the
border-top-width
property. An element must have borders before you can change the width.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderTopWidth="5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top-width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-top-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium top border. This is default
Demo 
thin
Specifies a thin top border
Demo 
thick
Specifies a thick top border
Demo 
length
Allows you to define the thickness of the top border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the top border to medium:
div {border-top-width: medium;}
Try it Yourself 
Example
Set the width of the top border to thick:
div {border-top-width: thick;}
Try it Yourself 
Example
Set the width of the top border to 1px:
div {border-top-width: 1px;}
Try it Yourself 
Example
Set the width of the top border to 15px:
div {border-top-width: 15px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top property
HTML DOM reference:
borderTopWidth property
CSS
border-top-left-radius
Property
Example
Add rounded borders to the top-left corner of two <div> elements:
#example1 {
border: 2px solid red;
border-top-left-radius: 25px;
}
#example2 {
border: 2px solid red;
border-top-left-radius: 50px 
    20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-top-left-radius
property defines the radius of the top-left corner.
Tip:
This property allows you to add rounded borders to elements!
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderTopLeftRadius="25px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top-left-radius
5
9
4
5
10.5
CSS Syntax
border-top-left-radius:
length
|
%
[
length
|
%
]|initial|inherit;
Note:
If you set two values, the first one is for the top border, and the second one for
the left border. If the second value is omitted, it is copied from the first. If either length is zero,
the corner is square, not rounded.
Property Values
Value
Description
Demo
length
Defines the shape of the top-left corner.
Read about length units
Demo 
%
Defines the shape of the top-left corner in %
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Add rounded borders to the top-left corner in percent:
#example1 {
border: 2px solid red;
background: url(paper.gif);
padding: 10px;
border-top-left-radius: 40%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
HTML DOM reference:
borderTopLeftRadius property
CSS
border-right-style
Property
Example
Set a style for the right border:
div {border-right-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-right-style
property sets the style of an element's right border.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.borderRightStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-right-style
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-right-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies no border. This is default
Demo 
hidden
The same as "none", except in border conflict
        resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the
        border-color value
Demo 
ridge
Specifies a 3D ridged border. The effect depends on the
        border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the
        border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the
        border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed right border:
div {border-right-style: dashed;}
Try it Yourself 
Example
A solid right border:
div {border-right-style: solid;}
Try it Yourself 
Example
A double right border:
div {border-right-style: double;}
Try it Yourself 
Example
Remove the right border:
div {border-right-style: none;}
Try it Yourself 
Example
A groove right border:
div {
border-right-style: groove;
border-right-color: coral;
border-right-width: 7px;
}
Try it Yourself 
Example
A ridge right border:
div {
border-right-style: ridge;
border-right-color: coral;
border-right-width: 7px;
}
Try it Yourself 
Example
An inset right border:
div {
border-right-style: inset;
border-right-color: coral;
border-right-width: 7px;
}
Try it Yourself 
Example
An outset right border:
div {
border-right-style: outset;
border-right-color: coral;
border-right-width: 7px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right property
HTML DOM reference:
borderRightStyle property
CSS
border-left-width
Property
Example
Set a width for the left border:
div {border-left-width: thin;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-left-width
property sets the width of an element's left border.
Note:
Always declare the
border-style
or the
border-left-style
property before the
border-left-width
property. An element must have borders before you can change the width.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderLeftWidth="5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-left-width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-left-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium left border. This is default
Demo 
thin
Specifies a thin left border
Demo 
thick
Specifies a thick left border
Demo 
length
Allows you to define the thickness of the left border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the left border to medium:
div {border-left-width: medium;}
Try it Yourself 
Example
Set the width of the left border to thick:
div {border-left-width: thick;}
Try it Yourself 
Example
Set the width of the left border to 1px:
div {border-left-width: 1px;}
Try it Yourself 
Example
Set the width of the left border to 15px:
div {border-left-width: 15px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left property
HTML DOM reference:
borderLeftWidth property
CSS
border-top-style
Property
Example
Set a style for the top border:
div {border-top-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-top-style
property sets the style of an element's top border.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.borderTopStyle="dashed"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top-style
1.0
5.5
1.0
1.0
9.2
CSS Syntax
border-top-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies no border. This is default
Demo 
hidden
The same as "none", except in border conflict
        resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the
        border-color value
Demo 
ridge
Specifies a 3D ridged border. The effect depends on the
        border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the
        border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the
        border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed top border:
div {border-top-style: dashed;}
Try it Yourself 
Example
A solid top border:
div {border-top-style: solid;}
Try it Yourself 
Example
A double top border:
div {border-top-style: double;}
Try it Yourself 
Example
Remove the top border:
div {border-top-style: none;}
Try it Yourself 
Example
A groove top border:
div {
border-top-style: groove;
border-top-color: coral;
border-top-width: 7px;
}
Try it Yourself 
Example
A ridge top border:
div {
border-top-style: ridge;
border-top-color: coral;
border-top-width: 7px;
}
Try it Yourself 
Example
An inset top border:
div {
border-top-style: inset;
border-top-color: coral;
border-top-width: 7px;
}
Try it Yourself 
Example
An outset top border:
div {
border-top-style: outset;
border-top-color: coral;
border-top-width: 7px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top property
HTML DOM reference:
borderTopStyle property
CSS
border-inline-start
Property
Example
Set the width, color and style for the border at the start of the inline direction:
div {
border-inline-start: 
  10px solid pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-start
property is a shorthand property for these properties:
border-inline-start-width
border-inline-start-style
border-inline-start-color
The CSS
border-inline-start
property is very similar to CSS properties
border-bottom
,
border-left
,
border-right
and
border-top
, but the
border-inline-start
property is dependent on 
inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-start
property. For pages in English, inline direction is left to right and block direction is 
from top to bottom.
Show demo 
Default value:
medium none
currentcolor
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineStart="pink dotted 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-start
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-start:
border-inline-start-width border-inline-start-style border-inline-start-color
|initial|inherit;
Property Values
Value
Description
Demo
border-inline-start-width
Specifies the width of an element's border at the end of the inline direction. Default value is "medium"
Demo 
border-inline-start-style
Specifies the style of an element's border at the end of the inline direction. Default value is "none"
Demo 
border-inline-start-color
Specifies the color of an element's border at the end of the inline direction. Default value is the current color of the border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the start of the inline direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-inline-start: 
  5px solid blue;
}
Try it Yourself 
With direction property
The position of the borders at the start of the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-start: 5px solid hotpink;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-style property:
CSS Border-inline-end-style property
CSS border-inline-start-color property:
CSS Border-inline-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
Styling Images
Learn how to style images using CSS.
Rounded Images
Use the
border-radius
property to create rounded images:
Example
Rounded Image:
img {
border-radius: 8px;
}
Try it Yourself 
Example
Circled Image:
img {
border-radius: 50%;
}
Try it Yourself 
Thumbnail Images
Use the
border
property to create thumbnail images.
Thumbnail Image:
Example
img {
border: 1px solid #ddd;
border-radius: 4px;
padding: 5px;
width: 150px;
}
<img src="paris.jpg"
        alt="Paris">
Try it Yourself 
Thumbnail Image as Link:
Example
img {
border: 1px solid #ddd;
border-radius: 4px;
padding: 5px;
width: 150px;
}
img:hover {
box-shadow: 0 0 
         2px 1px rgba(0, 140, 186, 0.5);
}
<a href="paris.jpg">
<img src="paris.jpg" alt="Paris">
</a>
Try it Yourself 
Responsive Images
Responsive images will automatically adjust to fit the size of the screen.
Resize the browser window to see the effect:
If you want an image to scale down if it has to, but never 
scale up to be larger than its original size, add the following:
Example
img {
max-width: 100%;
height: 
auto;
}
Try it Yourself 
Tip:
Read more about Responsive Web Design in our
CSS RWD Tutorial
.
Center an Image
To center an image, set left and right margin to
auto
and make it into a
block
element:
Example
img {
display: block;
margin-left: auto;
margin-right: auto;
width: 50%;
}
Try it Yourself 
Polaroid Images / Cards
Cinque Terre
Northern Lights
Example
div.polaroid {
width: 80%;
background-color: white;
box-shadow: 0 4px 8px 0 rgba(0, 
0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
img {width: 100%}
div.container {
text-align: center;
padding: 10px 20px;
}
Try it Yourself 
Transparent Image
The
opacity
property can take a value from 0.0 - 1.0. The lower value, the more transparent:
opacity 0.2
opacity 0.5
opacity 1
(default)
Example
img {
opacity: 0.5;
}
Try it Yourself 
Image Text
How to position text in an image:
Example
Bottom Left
Top Left
Top Right
Bottom Right
Centered
Try it Yourself:
Top Left 
Top Right 
Bottom Left 
Bottom Right 
Centered 
Image Filters
The CSS
filter
property adds visual effects (like blur and saturation) to an element.
Note:
The filter property is not supported in Internet 
Explorer or Edge 12.
Example
Change the color of all images to black and white (100% gray):
img {
filter: grayscale(100%);
}
Try it Yourself 
Tip:
Go to our
CSS filter Reference
to learn more about CSS filters.
Image Hover Overlay
Create an overlay effect on hover:
Example
Fade in text:
Hello World
Try it Yourself 
Example
Fade in a box:
John
Try it Yourself 
Example
Slide in (top):
Hello World
Try it Yourself 
Example
Slide in (bottom):
Hello World
Try it Yourself 
Example
Slide in (left):
Hello World
Try it Yourself 
Example
Slide in (right):
Hello World
Try it Yourself 
Flip an Image
Move your mouse over the image:
Example
img:hover {
transform: scaleX(-1);
}
Try it Yourself 
Responsive Image Gallery
CSS can be used to create image galleries. This example use 
media queries to re-arrange the images on different screen sizes. Resize the 
browser window to see the effect:
Add a description of the image here
Add a description of the image here
Add a description of the image here
Add a description of the image here
Example
.responsive {
padding: 0 6px;
float: left;
width: 24.99999%;
}
@media only screen and 
(max-width: 700px){
.responsive {
width: 49.99999%;
margin: 6px 
0;
}
}
@media only screen and (max-width: 500px){
.responsive {
width: 100%;
}
}
Try it Yourself 
Tip:
Read more about Responsive Web Design in our
CSS RWD Tutorial
.
Image Modal (Advanced)
This is an example to demonstrate how CSS and JavaScript can work together.
First, use CSS to create a modal window (dialog box), and hide it by 
default.
Then, use a JavaScript to show the modal window and to display the  
image inside the modal, when a user clicks on the image:
Example
// Get the modal
var modal = document.getElementById('myModal');
// Get the image and insert it 
inside the modal - use its "alt" text as a caption
var img = 
document.getElementById('myImg');
var modalImg = document.getElementById("img01");
var captionText = document.getElementById("caption");
img.onclick = 
function(){
modal.style.display = "block";
modalImg.src = this.src;
captionText.innerHTML = this.alt;
}
// Get the <span> element that closes the modal
var span = 
document.getElementsByClassName("close")[0];
// When the user clicks 
on <span> (x), close the modal
span.onclick = function() {
modal.style.display = "none";
}
Try it Yourself 

CSS
background-position-x
Property
Example
How to position a background-image on x-axis:
div
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-position-x: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-position-x
property sets the position of a background image on the x-axis.
Tip:
By default, a
background-image
is placed at the top-left corner of an 
element, and repeated both vertically and horizontally.
Show demo 
Default value:
0%
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.backgroundPositionX="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-position-x
1.0
12.0
49.0
1.0
15.0
background-position-x
(with two value syntax)
Not supported
Not supported
49.0
15.4
Not supported
CSS Syntax
background-position-x:
value
;
Property Values
Value
Description
Demo
left
Positions background left side on x-axis.
Demo 
right
Positions background right side on x-axis.
Demo 
center
Positions background center on x-axis.
Demo 
x%
Left side is 0% on x-axis, and right side is 100%. Percentage value refers to width of background positioning area minus width of background image.
Demo 
xpos
Horizontal distance from left side. Units can be pixels (0px)
      or any other
CSS units
.
Demo 
xpos offset
Two value syntax, only supported in Firefox and Safari.
-
xpos
is set either to "left" or "right".
-
offset
is horizontal distance from background image and "left" or "right" side set with
xpos
. Units can be pixels or any other
CSS units
.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
How to position a background-image to the right:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-position-x: right;
}
Try it Yourself 
Example
How to position a background-image using percent:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-position-x: 50%;
}
Try it Yourself 
Example
How to position a background-image using pixels:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-position-x: 150px;
}
Try it Yourself 
Example
Use different background properties to create a bacground image that covers its container:
.hero-image {
background-image: url("photographer.jpg"); /* The 
  image used */
background-color: #cccccc; /* Used if the image is 
  unavailable */
height: 300px; /* You must set a specified height */
background-position-x: center; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
background-size: cover; /* Resize the background image to cover the entire container */
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
CSS reference:
background-image property
CSS reference:
background-position property
CSS reference:
background-position-y property
HTML DOM reference:
backgroundPosition property
CSS
border-block-color
Property
Example
Set a color for the borders in block direction:
#example1 {
border-block-style: solid;
border-block-color: pink;
}
#example2 {
border-block-style: solid;
border-block-color: pink lightblue;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-color
property sets the color of an element's borders in the block direction.
Values for the
border-block-color
property can be set in different ways:
If the border-block-color property has two values:
border-block-color: pink lightblue;
border color at block start is pink
border color at block end is lightblue
If the border-block-color property has one value:
border-block-color: pink;
border color at block start and end is pink
The CSS
border-block-color
property is very similar to CSS properties
border-bottom-color
,
border-left-color
,
border-right-color
and
border-top-color
, but the
border-block-color
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-color
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-block-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border color at the start and end in the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block-color: blue;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-end-color property:
CSS Border-block-end-color property
CSS border-block-start-color property:
CSS Border-block-start-color property
CSS border-block-style property:
CSS Border-block-style property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
border
Property
Example
Set the style of the borders for different elements:
h1 {
border: 5px solid red;
}
h2 {
border: 4px dotted blue;
}
div {
border: 
    double;
}
Try it Yourself 
Definition and Usage
The
border
property is a shorthand property for:
border-width
border-style
(required)
border-color
If border-color is omitted, the color applied will be the color of the text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.border="3px solid blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border:
border-width
border-style
border-color
|initial|inherit;
Property Values
Value
Description
Demo
border-width
Specifies the width of the border. Default value is "medium"
Demo 
border-style
Specifies the style of the border. Default value is "none"
Demo 
border-color
Specifies the color of the border. Default value is the color of the 
    text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border
CSS tutorial:
CSS Box Model
HTML DOM reference:
border property
CSS
border-block-start
Property
Example
Set the width, color and style for the border at the start of the block direction:
div {
border-block-start: 
  10px solid pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-start
property is a shorthand property for these properties:
border-block-start-width
border-block-start-style
border-block-start-color
The CSS
border-block-start
property is very similar to CSS properties
border-bottom
,
border-left
,
border-right
and
border-top
, but the
border-block-start
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-start
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium none
currentcolor
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockStart="pink dotted 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-start
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-start:
border-block-start-width border-block-start-style border-block-start-color
|initial|inherit;
Property Values
Value
Description
Demo
border-block-start-width
Specifies the width of an element's border at the end in the block direction. Default value is "medium"
Demo 
border-block-start-style
Specifies the style of an element's border at the end in the block direction. Default value is "none"
Demo 
border-block-start-color
Specifies the color of an element's border at the end in the block direction. Default value is the current color of the border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the start of the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block-start: 
  dotted blue;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-color property:
CSS Border-block-color property
CSS border-block-start-color property:
CSS Border-block-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-block
Property
Example
Set the style, color and width of the borders for different elements in the block direction:
h1 {
border-block: 5px solid red;
}
h2 {
border-block: 4px dotted blue;
}
div {
border-block: 
    double;
}
Try it Yourself 
Definition and Usage
The
border-block
property is a shorthand property for these properties:
border-block-width
border-block-style
(required)
border-block-color
If values for color or width are omitted, default values will be used.
The CSS
border-block
property is very similar to CSS property
border
, but the
border-block
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlock="dashed hotpink 10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-block:
border-block-width
border-block-style
border-block-color
|initial|inherit;
Property Values
Value
Description
Demo
border-block-width
Specifies the width of the border in the block direction. Default value is "medium"
Demo 
border-block-style
Specifies the style of the border in the block direction. Default value is "none"
Demo 
border-block-color
Specifies the color of the border in the block direction. Default value is the color of the 
    text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block: hotpink dashed 8px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block-color property:
CSS Border-block-color property
CSS border-block-style property:
CSS Border-block-style property
CSS border-block-width property:
CSS Border-block-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
background-position-y
Property
Example
How to position a background-image on y-axis:
div
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-position-y: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
background-position-y
property sets the position of a background image on the y-axis.
Tip:
By default, a
background-image
is placed at the top-left corner of an 
element, and repeated both vertically and horizontally.
Show demo 
Default value:
0%
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.backgroundPositionY="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
background-position-y
1.0
12.0
49.0
1.0
15.0
background-position-y
(with two value syntax)
Not supported
Not supported
49.0
15.4
Not supported
CSS Syntax
background-position-y:
value
;
Property Values
Value
Description
Demo
top
Positions background top on y-axis.
Demo 
bottom
Positions background bottom on y-axis.
Demo 
center
Positions background center on y-axis.
Demo 
y%
Top side is 0% on y-axis, and bottom side is 100%. Percentage value refers to height of background positioning area minus height of background image.
Demo 
ypos
Vertical distance from top side. Units can be pixels (0px)
      or any other
CSS units
.
Demo 
ypos offset
Two value syntax, only supported in Firefox and Safari.
-
ypos
is set either to "top" or "bottom".
-
offset
is vertical distance from background image and "top" or "bottom" side set with
ypos
. Units can be pixels or any other
CSS units
.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
How to position a background-image to the top:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position-y: bottom;
}
Try it Yourself 
Example
How to position a background-image on y-axis using percent:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position-y: 50%;
}
Try it Yourself 
Example
How to position a background-image on y-axis using pixels:
body
 {
background-image: url('w3css.gif');
background-repeat: no-repeat;
background-attachment: fixed;
background-position-y: 80px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Background
CSS reference:
background-image property
CSS reference:
background-position property
CSS reference:
background-position-x property
HTML DOM reference:
backgroundPosition property
CSS
border-bottom-style
Property
Example
Set a style for the bottom border:
div {border-bottom-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-bottom-style
property sets the style of an element's bottom border.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.borderBottomStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom-style
1.0
5.5
1.0
1.0
9.2
CSS Syntax
border-bottom-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies no border. This is default
Demo 
hidden
The same as "none", except in border conflict
        resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the
        border-color value
Demo 
ridge
Specifies a 3D ridged border. The effect depends on the
        border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the
        border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the
        border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed bottom border:
div {border-bottom-style: dashed;}
Try it Yourself 
Example
A solid bottom border:
div {border-bottom-style: solid;}
Try it Yourself 
Example
A double bottom border:
div {border-bottom-style: double;}
Try it Yourself 
Example
Remove the bottom border:
div {border-bottom-style: none;}
Try it Yourself 
Example
A groove bottom border:
div {
border-bottom-style: groove;
border-bottom-color: coral;
border-bottom-width: 7px;
}
Try it Yourself 
Example
A ridge bottom border:
div {
border-bottom-style: ridge;
border-bottom-color: coral;
border-bottom-width: 7px;
}
Try it Yourself 
Example
An inset bottom border:
div {
border-bottom-style: inset;
border-bottom-color: coral;
border-bottom-width: 7px;
}
Try it Yourself 
Example
An outset bottom border:
div {
border-bottom-style: outset;
border-bottom-color: coral;
border-bottom-width: 7px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom property
HTML DOM reference:
borderBottomStyle property
CSS
border-block-end
Property
Example
Set the width, color and style for the border at the end of the block direction:
div {
border-block-end: 
  10px solid pink;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-end
property is a shorthand property for these properties:
border-block-end-width
border-block-end-style
border-block-end-color
The CSS
border-block-end
property is very similar to CSS properties
border-bottom
,
border-left
,
border-right
and
border-top
, but the
border-block-end
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-end
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium none
currentcolor
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockEnd="pink dotted 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-end
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-end:
border-block-end-width border-block-end-style border-block-end-color
|initial|inherit;
Property Values
Value
Description
Demo
border-block-end-width
Specifies the width of an element's border at the end in the block direction. Default value is "medium"
Demo 
border-block-end-style
Specifies the style of an element's border at the end in the block direction. Default value is "none"
Demo 
border-block-end-color
Specifies the color of an element's border at the end in the block direction. Default value is the current color of the border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the end of the block direction is affected by the
writing-mode
property:
div {
writing-mode: vertical-rl;
border-block-end: 
  dotted blue;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-color property:
CSS Border-block-color property
CSS border-block-start-color property:
CSS Border-block-start-color property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-collapse
Property
Example
Set the collapsing borders model for two tables:
#table1 {
border-collapse: separate;
}
#table2 {
border-collapse: collapse;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-collapse
property sets whether table borders should collapse into a single border or 
be separated as in standard HTML.
Show demo 
Default value:
separate
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.borderCollapse="collapse"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-collapse
1.0
5.0
1.0
1.2
4.0
CSS Syntax
border-collapse: separate|collapse|initial|inherit;
Property Values
Value
Description
Demo
separate
Borders are separated; each cell will display its own borders. This is default.
Demo 
collapse
Borders are collapsed into a single border when possible (border-spacing and empty-cells properties 
    have no effect)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
When using "border-collapse: separate", the border-spacing property can be 
used to set the space between the cells:
#table1 {
border-collapse: separate;
border-spacing: 10px;
}
Try it Yourself 
Example
When using "border-collapse: collapse", the cell that appears first 
in the code will "win":
table, td, th {
border: 3px solid red;
}
#table1 {
border-collapse: 
    collapse;
border-color: blue;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
HTML DOM reference:
borderCollapse property
CSS
box-shadow
Property
Example
Add shadows to different <div> elements:
#example1 {
box-shadow: 5px 10px;
}
#example2 {
box-shadow: 
    5px 10px #888888;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
box-shadow
property attaches one or more shadows to an element.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.boxShadow="10px 20px 30px blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
box-shadow
10
9
4
5
10.5
CSS Syntax
box-shadow: none|
h-offset v-offset blur spread color
|inset|initial|inherit;
Note:
To attach more than one shadow to an 
element, add a comma-separated list of shadows (see "Try it Yourself" example 
below).
Property Values
Value
Description
Demo
none
Default value. No shadow is displayed
Demo 
h-offset
Required. The horizontal offset of the shadow. A positive value puts the 
    shadow on the right side of the box, a negative value puts the shadow on the 
    left side of the box
Demo 
v-offset
Required. The vertical offset of the shadow. A positive value puts the 
    shadow below the box, a negative value puts the shadow above the box
Demo 
blur
Optional. The blur radius. The higher the number, the more blurred the 
    shadow will be
Demo 
spread
Optional. The spread radius. A positive value increases the size of the 
    shadow, a negative value decreases the size of the shadow
Demo 
color
Optional. The color of the shadow. The default value is the text color. Look at
CSS Color Values
for a complete list of possible color values.
Note:
In Safari (on PC) the color parameter is required. If you do not specify the color, the shadow is not displayed at all.
Demo 
inset
Optional. Changes the shadow from an outer shadow (outset) to an inner shadow
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Tip:
Read more about allowed values (CSS length units)
More Examples
Example
Add a blur effect to the shadow:
#example1 {
box-shadow: 10px 10px 8px #888888;
}
Try it Yourself 
Example
Define the spread radius of the shadow:
#example1 {
box-shadow: 10px 10px 8px 10px #888888;
}
Try it Yourself 
Example
Define multiple shadows:
#example1 {
box-shadow: 5px 5px blue, 10px 10px 
    red, 15px 15px green;
}
Try it Yourself 
Example
Add the inset keyword:
#example1 {
box-shadow: 5px 10px inset;
}
Try it Yourself 
Example
Images thrown on the table. This example demonstrates how to create "polaroid" pictures and rotate the 
pictures:
div.polaroid {
width: 284px;
padding: 10px 10px 20px 10px;
border: 1px solid 
    #BFBFBF;
background-color: white;
box-shadow: 10px 10px 5px #aaaaaa;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Box Shadow
HTML DOM reference:
boxShadow property
CSS
box-sizing
Property
Example
Include padding and border in 
the 
element's total width and height:
#example1 {
box-sizing: border-box;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
box-sizing
property defines how the width and height of an element are 
calculated: should they include padding and borders, or not.
Show demo 
Default value:
content-box
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.boxSizing="border-box"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
box-sizing
10
8
29
5.1
9.5
CSS Syntax
box-sizing: content-box|border-box|initial|inherit;
Property Values
Value
Description
Demo
content-box
Default. The width and height properties (and min/max properties) includes only the content. Border 
    and padding are not included
Demo 
border-box
The width and height properties (and min/max properties) includes 
    content, padding and border
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Specify two bordered boxes side by side:
div
 {
box-sizing: border-box;
width: 50%;
border: 5px solid red;
float: left;
}
Try it Yourself 
Example
Set the "universal box-sizing":
* {
box-sizing: border-box;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Box Sizing
HTML DOM reference:
boxSizing property
CSS
break-after
Property
Example
Always insert a page-break after a <footer> element:
@media print
{
footer {
break-after: always;
}
}
Definition and Usage
The
break-after
property specifies whether 
or not a page break, column break, or region break should occur after the 
specified
element.
The
break-after
property extends the CSS2
page-break-after
property.
Using
break-after
, you can tell the browser 
to break the page, column, or region after the element the
break-after
property is applied to, or avoid the element to be split and span across two 
pages.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.breakAfter="always"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
break-after
50.0
10.0
65.0
10.0
37.0
CSS Syntax
break-after: auto|all|always|avoid|avoid-column|avoid-page|avoid-region|column|left|page|recto|region|right|verso|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page/column/region break after the element
all
Always insert a page-break right after the principal box
always
Always insert a page-break after the element
avoid
Avoid a page/column/region break after the element
avoid-column
Avoid a column-break after the element
avoid-page
Avoid a page-break after the element
avoid-region
Avoid a region-break after the element
column
Always insert a column-break after the element
left
Insert one or two page-breaks after the element so that the next page is   formatted as a left page
page
Always insert a page-break after the element
recto
Insert one or two page-breaks after the principal box so that the next page is   formatted as a 
      recto page
region
Always insert a region-break after the element
right
Insert one or two page-breaks after the element so that the next page is   formatted as a right page
verso
Insert one or two page-breaks after the principal box so that the next page is   formatted as a 
    verso page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Always insert a page-break after element with id "toc" (table of content):
@media print
{
#toc {
break-after: always;
}
}
Example
Always insert a region-break after <ul> elements in a region:
.region ul {
break-after: region;
}
}
CSS
break-before
Property
Example
Always insert a page-break before a <h1> element:
@media print
{
h1 {
break-before: always;
}
}
Definition and Usage
The
break-before
property specifies whether 
or not a page break, column break, or region break should occur before the 
specified
element.
The
break-before
property extends the CSS2
page-break-before
property.
Using
break-before
, you can tell the browser 
to break the page, column, or region before the element the
break-before
property is applied to, or avoid the element to be split and span across two 
pages.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.breakBefore="always"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
break-before
50.0
10.0
65.0
10.0
37.0
CSS Syntax
break-before: auto|all|always|avoid|avoid-column|avoid-page|avoid-region|column|left|page|recto|region|right|verso|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page/column/region break before the element
all
Always insert a page-break right before the principal box
always
Always insert a page-break before the element
avoid
Avoid a page/column/region break before the element
avoid-column
Avoid a column-break before the element
avoid-page
Avoid a page-break before the element
avoid-region
Avoid a region-break before the element
column
Always insert a column-break before the element
left
Insert one or two page-breaks before the element so that the next page is   formatted as a left page
page
Always insert a page-break before the element
recto
Insert one or two page-breaks before the principal box so that the next page is   formatted as a 
      recto page
region
Always insert a region-break before the element
right
Insert one or two page-breaks before the element so that the next page is   formatted as a right page
verso
Insert one or two page-breaks before the principal box so that the next page is   formatted as a 
    verso page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
To assure that all new chapters should start on a right page (like in a book) 
when printed, you can use break-before: right for all <h1> elements:
@media print
{
h1 {
break-before: right;
}
}
Example
Always insert a region-break before <ul> elements in a region:
.region ul {
break-before: region;
}
}
CSS
caption-side
Property
Example
Specify the placement of table captions:
#example1 {
caption-side: bottom;
}
#example2 {
caption-side: top;
}
Try it Yourself 
Definition and Usage
The
caption-side
property specifies the placement of a table caption.
Show demo 
Default value:
top
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.captionSide="bottom"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
caption-side
1.0
8.0
1.0
1.0
4.0
CSS Syntax
caption-side: top|bottom|initial|inherit;
Property Values
Value
Description
Demo
top
Puts the caption above the table. This is default
Demo 
bottom
Puts the caption below the table
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Table
HTML DOM reference:
captionSide property
CSS
@charset
Rule
Example
Set the encoding of the style sheet to Unicode UTF-8:
@charset "UTF-8";
Definition and Usage
The
@charset
rule specifies the character encoding used in the style sheet.
The
@charset
rule must be the first element in the style sheet and not be 
preceded by any character. If several
@charset
rules are defined, only the first one is used. The
@charset
rule cannot be used inside a style attribute (on an HTML element), or 
inside the <style> element where the character set of the HTML page is relevant.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
@charset
2.0
12.0
1.5
4.0
9.0
CSS Syntax
@charset "
charset
";
Property Values
Value
Description
charset
Specifies the character encoding to use
CSS
clear
Property
Example
The <p> element is pushed below left floated elements (the <p> element do not allow floating elements on the left side):
img
 {
float: left;
}
p.clear
 {
clear: left;
}
Try it Yourself 
Definition and Usage
The
clear
property controls the flow next to 
floated elements.
The
clear
property specifies what 
should happen with the element that is next to a floating element.
Tip:
Also look at the
float
property.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.clear="both"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
clear
1.0
5.0
1.0
1.0
6.0
CSS Syntax
clear: none|left|right|both|initial|inherit;
Property Values
Value
Description
Demo
none
Default. The element is not pushed below left or right floated elements
Demo 
left
The element is pushed below left floated elements
Demo 
right
The element is pushed below right floated elements
Demo 
both
The element is pushed below both left and right floated elements
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Float
HTML DOM reference:
clear property
CSS
clip
Property (deprecated)
Example
Clip an image:
img {
position: absolute;
clip: rect(0px,60px,200px,0px);
}
Try it Yourself 
Definition and Usage
Note:
The
clip
property is deprecated 
and is replaced by the
clip-path
property.
The
clip
property 
lets you specify a rectangle to clip an absolutely positioned element. The 
rectangle is specified as four coordinates, all from the top-left corner of the 
element to be clipped.
Note:
The
clip
property does not work if "overflow:visible".
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.clip="rect(0px,50px,50px,0px)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
clip
1.0
8.0
1.0
1.0
7.0
CSS Syntax
clip: auto|
shape
|initial|inherit;
Property Values
Value
Description
Demo
auto
No clipping will be applied. This is default
Demo 
shape
Clips an element. The only valid value is: rect (
top, right, bottom, left
)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Positioning
HTML DOM reference:
clip property
CSS
color
Property
Example
Set the text-color for different elements:
body
 {
color: red;
}
h1
 {
color: #00ff00;
}
p.ex
 {
color: rgb(0,0,255);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
color
property specifies the color of text.
Tip:
Use a background color combined with a text color that makes the text easy to read.
Show demo 
Default value:
not specified
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.color="#0000FF"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
color
1.0
3.0
1.0
1.0
3.5
CSS Syntax
color:
color
|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the text color. Look at
CSS Color Values
for a complete list of possible color values.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the text color with a HEX value:
body {color: #92a8d1;}
Try it Yourself 
Example
Set the text color with an RGB value:
body {color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set the text color with an RGBA value:
body {color: rgba(201, 76, 76, 0.6);}
Try it Yourself 
Example
Set the text color with a HSL value:
body {color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set the text color with a HSLA value:
body {color: hsla(89, 43%, 51%, 0.6);}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
HTML DOM reference:
color property
CSS
Masking
With CSS masking you create a mask layer to place over an 
element to partially or fully hide portions of the element.
The CSS mask-image Property
The CSS
mask-image
property specifies a mask 
layer 
image.
The mask layer image can be a PNG image, an SVG image, a
CSS gradient
, or an
SVG <mask> element
.
Browser Support
The numbers in the table below specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a prefix.
Property
mask-image
120
120
53
15.4
15 -webkit-
Use an Image as the Mask Layer
To use a PNG or an SVG image as the mask layer, use a url() value to pass in the mask 
layer image.
The mask image needs to have a transparent or semi-transparent area. Black 
indicates fully transparent.
Here is the mask image (a PNG image) we will use:
Here is an image from Cinque Terre, in Italy:
Now, we apply the mask image (the PNG image above) as the mask layer for the image from Cinque 
Terre, Italy:
Example
Here is the source code:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: 
  url(w3logo.png);
mask-repeat: no-repeat;
}
Try it Yourself 
Example Explained
The
mask-image
property specifies the image 
to be used as a mask layer for an element.
The
mask-repeat
property specifies if or how 
a mask image will be repeated.The
no-repeat
value indicates that the mask image will not be repeated (the mask image will 
only be shown once).
Another Example
If we omit the
mask-repeat
property, the mask image will be repeated all over the
image from Cinque Terre, Italy:
Example
Here is the source code:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: 
  url(w3logo.png);
}
Try it Yourself 
Use Gradients as the Mask Layer
CSS linear and radial gradients can also be used as mask images.
Linear Gradient Examples
Here, we use a linear-gradient as the mask layer for our image. This linear 
gradient goes from top (black) to bottom (transparent):
Example
Use a linear gradient as a mask layer:
.mask1 {
-webkit-mask-image: linear-gradient(black, transparent);
mask-image: linear-gradient(black, 
    transparent);
}
Try it Yourself 
Here, we use a linear-gradient along with text masking as the mask layer for 
our image:
The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.
The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.
The Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.
Example
Use a linear gradient along with text masking as a mask layer:
.mask1 {
max-width: 600px;
height: 350px;
overflow-y: scroll;
background: url(img_5terre.jpg) no-repeat;
-webkit-mask-image: linear-gradient(black, transparent);
mask-image: linear-gradient (black, transparent);
}
Try it Yourself 
Radial Gradient Examples
Here, we use a radial-gradient (shaped as a circle) as the mask layer for our image:
Example
Use a radial gradient as a mask layer (a circle):
.mask2 {
-webkit-mask-image: 
    radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);
mask-image: radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);
}
Try it Yourself 
Here, we use a radial-gradient (shaped as an ellipse) as the mask layer for 
our image:
Example
Use another radial gradient as a mask layer (an ellipse):
.mask3 {
-webkit-mask-image: radial-gradient(ellipse, black 50%, rgba(0, 
    0, 0, 0.5) 50%);
mask-image: radial-gradient(ellipse, black 50%, rgba(0, 0, 
    0, 0.5) 50%);
}
Try it Yourself 
Use SVG as the Mask Layer
The SVG
<mask>
element can be used inside an 
SVG graphic to create masking effects.
Here, we use the SVG
<mask>
element to create different mask layers for 
our image:
Sorry, your browser does not support inline SVG.
Example
An SVG mask layer (formed as a triangle):
<svg width="600" height="400">
<mask id="svgmask1">
<polygon fill="#ffffff" points="200 0, 400 400, 0 400"></polygon>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" 
    xlink:href="img_5terre.jpg" mask="url(#svgmask1)"></image>
</svg>
Try it Yourself 
Sorry, your browser does not support inline SVG.
Example
An SVG mask layer (formed as a star):
<svg width="600" height="400">
<mask id="svgmask2">
<polygon fill="#ffffff" points="100,10 40,198 190,78 10,78 
    160,198"></polygon>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" 
    xlink:href="img_5terre.jpg" mask="url(#svgmask2)"></image>
</svg>
Try it Yourself 
Sorry, your browser does not support inline SVG.
Example
An SVG mask layer (formed as circles):
<svg width="600" height="400">
<mask 
    id="svgmask3">
<circle fill="#ffffff" cx="75" cy="75" 
    r="75"></circle>
<circle fill="#ffffff" cx="80" 
    cy="260" r="75"></circle>
<circle fill="#ffffff" 
    cx="270" cy="160" r="75"></circle>
</mask>
<image 
    xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="img_5terre.jpg" 
    mask="url(#svgmask3)"></image>
</svg>
Try it Yourself 
CSS Masking Properties
The following table lists all the CSS masking properties:
Property
Description
mask-clip
Specifies which area is affected by a mask image
mask-composite
Specifies a compositing operation used on the current mask layer with 
    the mask layers below it
mask-image
Specifies an image to be used as a mask layer for an element
mask-mode
Specifies whether the mask layer image is treated as a luminance mask or 
    as an alpha mask
mask-origin
Specifies the origin position (the mask position area) of a mask layer 
    image
mask-position
Sets the starting position of a mask layer image (relative to the mask 
    position area)
mask-repeat
Specifies how the mask layer image is repeated
mask-size
Specifies the size of a mask layer image
CSS
User Interface
CSS User Interface
In this chapter you will learn about the following CSS user interface properties:
resize
outline-offset
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
resize
4.0
79.0
5.0
4.0
15.0
outline-offset
4.0
15.0
5.0
4.0
9.5
CSS Resizing
The
resize
property specifies if (and how) an element should be resizable by the user.
This div element is resizable by the user!
To resize: Click and drag the bottom right corner of this div element.
The following example lets the user resize only the width of a <div> element:
Example
div
{
resize: horizontal;
overflow: auto;
}
Try it Yourself 
The following example lets the user resize only the height of a <div> element:
Example
div
{
resize: vertical;
overflow: auto;
}
Try it Yourself 
The following example lets the user resize both the height and width of a <div> element:
Example
div
{
resize: both;
overflow: auto;
}
Try it Yourself 
In many browsers, <textarea> is resizable by default. Here, we have used the resize property to disable the resizability:
Example
textarea {
resize: none;
}
Try it Yourself 
CSS Outline Offset
The
outline-offset
property adds space between an outline and the edge or 
border of an element.
This div has an outline 15px outside the border edge.
The following example uses the
outline-offset
property to add space 
between the border and the outline:
Example
div.ex1 {
margin: 20px;
border: 
  1px solid black;
outline: 4px solid red;
outline-offset: 15px;
}
div.ex2 {
margin: 10px;
border: 1px solid black;
outline: 5px dashed blue;
outline-offset: 5px;
}
Try it Yourself 
CSS User Interface Properties
The following table lists all the user interface properties:
Property
Description
outline-offset
Adds space between an outline and the edge or border of an element
resize
Specifies whether or not an element is resizable by the user
CSS
border-color
Property
Example
Set a color for the border:
div {border-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-color
property sets the color of an element's four borders. This property can 
have from one to four values.
If the border-color property has four values:
border-color: red green blue pink;
top border is red
right border is green
bottom border is blue
left border is pink
If the border-color property has three values:
border-color: red green blue;
top border is red
right and left borders are green
bottom border is blue
If the border-color property has two values:
border-color: red green;
top and bottom borders are red
right and left borders are green
If the border-color property has one value:
border-color: red;
all four borders are red
Note:
Always declare the
border-style
property before the
border-color
property. An element must have borders before you can change the color.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderColor="#FF0000 blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the border with a HEX value:
div {border-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the border with an RGB value:
div {border-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the border with an RGBA value:
div {border-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the border with a HSL value:
div {border-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the border with a HSLA value:
div {border-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set a different border-color for each side of an element:
div.ex1 {border-color: #0000ff;}
div.ex2 {border-color: #ff0000 #0000ff;}
div.ex3 {border-color: #ff0000 #00ff00 #0000ff;}
div.ex4 {border-color: 
  #ff0000 #00ff00 #0000ff rgb(250,0,255);}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderColor property
CSS
border-end-end-radius
Property
Example
Add rounded corners to the block-end and the inline-end sides of some elements:
#example1 {
background-color: lightblue;
border-end-end-radius: 50px;
}
#example2 {
background-color: lightblue;
border-end-end-radius: 50px 20px;
}
#example3 {
background-color: lightblue;
border-end-end-radius: 50%;
direction: rtl;
}
#example4 
    {
background-color: lightblue;
border-end-end-radius: 
    50%;
writing-mode: vertical-rl;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-end-end-radius
property defines the radius of the corner 
between the block-end and the inline-end sides of the element.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define block and inline directions.
That is why these properties also affects the result of the
border-end-end-radius
property. For pages in English, inline direction is left to right and block direction is downward.
If the
border-end-end-radius
property has two values, 
the corner will be an ellipse:
border-end-end-radius: 50px 100px;
If the
border-end-end-radius
property has one value, 
the corner will be a circle:
border-end-end-radius: 50px;
The CSS
border-end-end-radius
property is very similar to CSS properties
border-bottom-left-radius
,
border-bottom-right-radius
,
border-top-left-radius
and
border-top-right-radius
, but the
border-end-end-radius
property is dependent on block and inline directions.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderEndEndRadius="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-end-end-radius
89.0
89.0
66.0
15.0
75.0
CSS Syntax
border-end-end-radius: 0|
length
|initial|inherit;
Property Values
Value
Description
Demo
0
Default value.
Demo 
length
Defines the shape of the corner at block-end and inline-end.
Read about length units
Demo 
%
Defines the shape of the corner at block-end and inline-end in percentange of length of element on corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With direction property
The position of a rounded corner at the end of the block and inline directions is affected by the
direction
property:
#example1 {
border: 2px solid red;
direction: rtl;
border-end-end-radius: 25px;
}
Try it Yourself 
With writing-mode property
The position of a rounded corner at the end of the block and inline directions is affected by the
writing-mode
property:
#example2 {
border: 2px solid red;
writing-mode: vertical-rl;
border-end-end-radius: 25px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
CSS border-bottom-left-radius property:
CSS Border-bottom-left-radius property
CSS border-bottom-right-radius property:
CSS Border-bottom-right-radius property
CSS border-top-left-radius property:
CSS Border-top-left-radius property
CSS border-top-right-radius property:
CSS Border-top-right-radius property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-inline-color
Property
Example
Set a color for the borders in inline direction:
#example1 {
border-inline-style: solid;
border-inline-color: pink;
}
#example2 {
border-inline-style: solid;
border-inline-color: pink lightblue;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-color
property sets the color of an element's borders in the inline direction.
Values for the
border-inline-color
property can be set in different ways:
If the border-inline-color property has two values:
border-inline-color: pink blue;
border color at inline start is pink
border color at inline end is blue
If the border-inline-color property has one value:
border-inline-color: blue;
border color at inline start and end is blue
The CSS
border-inline-color
property is very similar to CSS properties
border-bottom-color
,
border-left-color
,
border-right-color
and
border-top-color
, but the
border-inline-color
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-color
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineColor="pink"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-color
87.0
87.0
66.0
14.1
73.0
CSS Syntax
border-inline-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the border color. Look at
CSS Color Values
for a complete list of possible color values. Default 
    color is the current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the borders at the start and end in the inline direction is affected by the
writing-mode
property:
div {
border-inline-style: solid;
writing-mode: vertical-rl;
border-inline-color: blue;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-color: blue hotpink;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-style property:
CSS Border-inline-style property
CSS border-bottom-color property:
CSS Border-bottom-color property
CSS border-left-color property:
CSS Border-left-color property
CSS border-right-color property:
CSS Border-right-color property
CSS border-top-color property:
CSS Border-top-color property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-image-slice
Property
Example
Specify how to slice the border image:
#borderimg {
border-image-slice: 30%;
}
Try it Yourself 
Definition and Usage
The
border-image-slice
property specifies how to slice the image specified by
border-image-source
. The image is 
always sliced into nine sections: four corners, four edges and the middle.
The "middle" part is treated as 
fully transparent, unless the fill keyword is set.
Tip:
Also look at the
border-image
property 
(a shorthand property for setting all the border-image-* properties).
Show demo 
Default value:
100%
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImageSlice="30%"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image-slice
15.0
11.0
15.0
6.0
15.0
CSS Syntax
border-image-slice:
number
|
%
|fill|initial|inherit;
Note:
The
border-image-slice
property can take from one to four values. If the fourth 
value is omitted, it is the same as the second. If the third one is 
also omitted, it is the same as the first. If the second one is also omitted, it 
is the same as the first.
Property Values
Value
Description
Play it
number
The number(s) represent pixels for raster images or coordinates for vector images
Demo 
%
Percentages are relative to the height or width of the image
Demo 
fill
Causes the middle part of the image to be displayed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image property
CSS Reference:
border-image-outset property
CSS Reference:
border-image-repeat property
CSS Reference:
border-image-source property
CSS Reference:
border-image-width property
HTML DOM reference:
borderImageSlice property
CSS
border-left-style
Property
Example
Set a style for the left border:
div {border-left-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-left-style
property sets the style of an element's left border.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.borderLeftStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-left-style
1.0
5.5
1.0
1.0
9.2
CSS Syntax
border-left-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies no border. This is default
Demo 
hidden
The same as "none", except in border conflict
        resolution for table elements
Demo 
dotted
Specifies a dotted border
Demo 
dashed
Specifies a dashed border
Demo 
solid
Specifies a solid border
Demo 
double
Specifies a double border
Demo 
groove
Specifies a 3D grooved border. The effect depends on the
        border-color value
Demo 
ridge
Specifies a 3D ridged border. The effect depends on the
        border-color value
Demo 
inset
Specifies a 3D inset border. The effect depends on the
        border-color value
Demo 
outset
Specifies a 3D outset border. The effect depends on the
        border-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed left border:
div {border-left-style: dashed;}
Try it Yourself 
Example
A solid left border:
div {border-left-style: solid;}
Try it Yourself 
Example
A double left border:
div {border-left-style: double;}
Try it Yourself 
Example
Remove the left border:
div {border-left-style: none;}
Try it Yourself 
Example
A groove left border:
div {
border-left-style: groove;
border-left-color: coral;
border-left-width: 7px;
}
Try it Yourself 
Example
A ridge left border:
div {
border-left-style: ridge;
border-left-color: coral;
border-left-width: 7px;
}
Try it Yourself 
Example
An inset left border:
div {
border-left-style: inset;
border-left-color: coral;
border-left-width: 7px;
}
Try it Yourself 
Example
An outset left border:
div {
border-left-style: outset;
border-left-color: coral;
border-left-width: 7px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left property
HTML DOM reference:
borderLeftStyle property
CSS
border-image-outset
Property
Example
Place the border image 10 pixels outside the border edges of an element:
#borderimg
 {
border-image-source: url(border.png);
border-image-outset: 10px;
}
Try it Yourself 
Definition and Usage
The
border-image-outset
property specifies the amount by which the border 
image area extends beyond the border box.
Tip:
Also look at the
border-image
property 
(a shorthand property for setting all the border-image-* properties).
Show demo 
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImageOutset="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image-outset
15.0
11.0
15.0
6.0
15.0
CSS Syntax
border-image-outset:
length
|
number
|initial|inherit;
Note:
The
border-image-outset
property can take from one to four 
values (top, right, bottom, and left sides). If the fourth value is omitted, it 
is the same as the second. If the third one is also omitted, it is the same as 
the first. If the second one is also omitted, it is the same as the first.
Property Values
Value
Description
Play it
length
A length unit specifying how far from the edges the border-image will appear. Default value is 0
Demo 
number
Represent multiples of the corresponding border-width
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image property
CSS Reference:
border-image-repeat property
CSS Reference:
border-image-slice property
CSS Reference:
border-image-source property
CSS Reference:
border-image-width property
HTML DOM reference:
borderImageOutset property
CSS
column-fill
Property
Example
Specify how to fill columns:
.newspaper1 {
column-fill: auto;
}
.newspaper2 {
column-fill: balance;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-fill
property specifies how to fill columns, balanced or not.
Tip:
If you add a height to a multi-column element, you can 
control how the content fills the columns. The content can be balanced or filled 
sequentially.
Show demo 
Default value:
balance
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.columnFill="auto"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-fill
50
10
52
10
37
CSS Syntax
column-fill: balance|auto|initial|inherit;
Property Values
Value
Description
Demo
balance
Default value. Fills each column with about the same amount of content, 
    but will not allow the columns to be taller than the height (so, columns 
    might be shorter than the height as the browser distributes the content 
    evenly horizontally)
Demo 
auto
Fills each column until it reaches the height, and do this until it runs 
    out of content (so, this value will not necessarily fill all the columns nor 
    fill them evenly)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnFill property
CSS
column-gap
Property
Example
Specify a 40 pixels gap between the columns in a multicolumn layout:
div
 {
column-gap: 40px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-gap
property specifies the gap between the columns in grid, flexbox or multi-column layout.
Note:
If there is a
column-rule
between columns, it will appear in the 
middle of the gap.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Box Alignment Module Level 3
JavaScript syntax:
object
.style.columnGap="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-gap (in Multiple Columns)
50
10
52
10
37
column-gap (in Grid)
66
16
61
12
53
column-gap (in Flexbox)
84
84
63
14.1
70
CSS Syntax
column-gap:
length
|normal|initial|inherit;
Property Values
Value
Description
Demo
length
A specified length that will set the gap between the columns
Demo 
normal
Default value. Specifies a normal gap between the columns. W3C suggests a value of 1em
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Three columns
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Column-rule
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Flexbox layout
Set the gap between columns to 30px in a flexbox layout:
#flex-container {
display: flex;
column-gap: 30px;
}
Try it Yourself 
Grid layout
Set the gap between columns to 30px in a grid layout:
#grid-container {
display: grid;
column-gap: 30px;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Multiple Columns
CSS Tutorial:
CSS Flexbox Layout
CSS Tutorial:
CSS Grid Layout
CSS Reference:
row-gap property
CSS Reference:
gap property
HTML DOM reference:
columnGap property
CSS
column-rule-style
Property
Example
Specify the style of the rule between columns:
div
 {
column-rule-style: dotted;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-rule-style
property specifies the style of the rule between columns.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.columnRuleStyle="dotted"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-rule-style
50
10
52
9
37
CSS Syntax
column-rule-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Defines no rule
Demo 
hidden
Defines a hidden rule
Demo 
dotted
Defines a dotted rule
Demo 
dashed
Defines a dashed rule
Demo 
solid
Defines a solid rule
Demo 
double
Defines a double rule
Demo 
groove
Specifies a 3D grooved rule. The effect depends on the width and color values
Demo 
ridge
Specifies a 3D ridged rule. The effect depends on the width and color values
Demo 
inset
Specifies a 3D inset rule. The effect depends on the width and color values
Demo 
outset
Specifies a 3D outset rule. The effect depends on the width and color values
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnRuleStyle property
CSS
column-rule-width
Property
Example
Specify the width of the rule between columns:
div
 {
column-rule-width: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-rule-width
property specifies the width of the rule between columns.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columnRuleWidth="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-rule-width
50
10
52
9
37
CSS Syntax
column-rule-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Default value. Defines a medium rule
Demo 
thin
Defines a thin rule
Demo 
thick
Defines a thick rule
Demo 
length
Specifies the width of the rule
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px outset #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnRuleWidth property
CSS
counter-increment
Property
Example
Create a counter ("my-sec-counter") and increase it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Increment "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter;
content: "Section " 
    counter(my-sec-counter) ". ";
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
counter-increment
property increases or decreases the value of one or 
more CSS counters.
The
counter-increment
property is usually used together with the
counter-reset
property and the
content
property.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.counterIncrement = "subsection";
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
counter-increment
4.0
8.0
2.0
3.1
9.6
CSS Syntax
counter-increment: none|
id
|initial|inherit;
Property Values
Value
Description
none
Default value. No counters will be incremented
id number
The
id
defines which counter to increment. The
number
sets how much the counter will increment on each occurrence of the selector. The default increment is 1. 
    Negative values are allowed. If
id
refers to a counter that has not been initialized by counter-reset, the default initial value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create a counter ("my-sec-counter") and decrease it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Decrement "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter -1;
content: "Section " 
    counter(my-sec-counter) ". ";
}
Try it Yourself 
Example
Numbering sections and sub-sections with "Section 1:", "1.1", "1.2", etc.:
body
 {
/* Set "section" to 0 */
counter-reset: section;
}
h1
 {
/* Set "subsection" to 0 */
counter-reset: subsection;
}
h1::before
 {
/* Increment "section" by 1 */
counter-increment: section;
content: "Section " counter(section) ": ";
}
h2::before {
/* Increment "subsection" by 1 */
counter-increment: subsection;
content: counter(section) "." counter(subsection) " ";
}
Try it Yourself 
Example
Create a counter and increase it by one (using Roman numerals) for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Increment "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter;
content: counter(my-sec-counter, 
    upper-roman) ". ";
}
Try it Yourself 
Related Pages
CSS reference:
::before pseudo element
CSS reference:
::after pseudo element
CSS reference:
content property
CSS reference:
counter-reset property
CSS functions:
counter() function
HTML DOM reference:
counterIncrement property
CSS
cursor
Property
Example
CSS can generate a bunch of different mouse cursors:
.alias {cursor: alias;}
.all-scroll {cursor: all-scroll;}
.auto 
    {cursor: auto;}
.cell {cursor: cell;}
.col-resize {cursor: col-resize;}
.context-menu {cursor: 
    context-menu;}
.copy {cursor: copy;}
.crosshair {cursor: crosshair;}
.default {cursor: default;}
.e-resize 
    {cursor: e-resize;}
.ew-resize {cursor: ew-resize;}
.grab {cursor: 
    grab;}
.grabbing {cursor: grabbing;}
.help {cursor: help;}
.move 
    {cursor: move;}
.n-resize {cursor: n-resize;}
.ne-resize {cursor: 
    ne-resize;}
.nesw-resize {cursor: nesw-resize;}
.ns-resize {cursor: 
    ns-resize;}
.nw-resize {cursor: nw-resize;}
.nwse-resize {cursor: nwse-resize;}
.no-drop {cursor: no-drop;}
.none {cursor: none;}
.not-allowed 
    {cursor: not-allowed;}
.pointer {cursor: pointer;}
.progress {cursor: 
    progress;}
.row-resize {cursor: row-resize;}
.s-resize {cursor: 
    s-resize;}
.se-resize {cursor: se-resize;}
.sw-resize {cursor: sw-resize;}
.text {cursor: text;}
.url {cursor: url(myBall.cur),auto;}
.w-resize 
    {cursor: w-resize;}
.wait {cursor: wait;}
.zoom-in {cursor: zoom-in;}
.zoom-out {cursor: zoom-out;}
Try it Yourself 
Definition and Usage
The
cursor
property specifies the mouse cursor to be displayed when pointing over an element.
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.cursor="crosshair"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
cursor
5.0
5.5
4.0
5.0
9.6
CSS Syntax
cursor:
value
;
Property Values
Value
Description
Demo
alias
The cursor indicates an alias of something is to be created
Play it 
all-scroll
The cursor indicates that something can be scrolled in any direction
Play it 
auto
Default. The browser sets a cursor
Play it 
cell
The cursor indicates that a cell (or set of cells) may be selected
Play it 
col-resize
The cursor indicates that the column can be resized horizontally
Play it 
context-menu
The cursor indicates that a context-menu is available
Play it 
copy
The cursor indicates something is to be copied
Play it 
crosshair
The cursor render as a crosshair
Play it 
default
The default cursor
Play it 
e-resize
The cursor indicates that an edge of a box is to be moved right (east)
Play it 
ew-resize
Indicates a bidirectional resize cursor
Play it 
grab
The cursor indicates that something can be grabbed
Play it 
grabbing
The cursor indicates that something can be grabbed
Play it 
help
The cursor indicates that help is available
Play it 
move
The cursor indicates something is to be moved
Play it 
n-resize
The cursor indicates that an edge of a box is to be moved up (north)
Play it 
ne-resize
The cursor indicates that an edge of a box is to be moved up and right (north/east)
Play it 
nesw-resize
Indicates a bidirectional resize cursor
Play it 
ns-resize
Indicates a bidirectional resize cursor
Play it 
nw-resize
The cursor indicates that an edge of a box is to be moved up and left (north/west)
Play it 
nwse-resize
Indicates a bidirectional resize cursor
Play it 
no-drop
The cursor indicates that the dragged item cannot be dropped here
Play it 
none
No cursor is rendered for the element
Play it 
not-allowed
The cursor indicates that the requested action will not be executed
Play it 
pointer
The cursor is a pointer and indicates a link
Play it 
progress
The cursor indicates that the program is busy (in progress)
Play it 
row-resize
The cursor indicates that the row can be resized vertically
Play it 
s-resize
The cursor indicates that an edge of a box is to be moved down (south)
Play it 
se-resize
The cursor indicates that an edge of a box is to be moved down and right (south/east)
Play it 
sw-resize
The cursor indicates that an edge of a box is to be moved down and left (south/west)
Play it 
text
The cursor indicates text that may be selected
Play it 
URL
A comma separated list of URLs to custom cursors.
Note:
Always specify a generic cursor at the end of the list, in case none of the URL-defined cursors can be used
Play it 
vertical-text
The cursor indicates vertical-text that may be selected
Play it 
w-resize
The cursor indicates that an edge of a box is to be moved left (west)
Play it 
wait
The cursor indicates that the program is busy
Play it 
zoom-in
The cursor indicates that something can be zoomed in
Play it 
zoom-out
The cursor indicates that something can be zoomed out
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
cursor property
CSS
display
Property
Example
Use of some different display values:
p.ex1 {display: none;}
p.ex2 {display: inline;}
p.ex3 {display: 
block;}
p.ex4 {display: inline-block;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
display
property specifies the display behavior 
(the type of rendering box) of an element.
Show demo 
Default value:
inline
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.display="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
display
4.0
8.0
3.0
3.1
7.0
Note:
The values "flex" and "inline-flex" requires the -webkit- prefix to work in Safari, 
prior version 9.
Note:
"display: contents" does not work in Edge 
prior version 79.
CSS Syntax
display:
value
;
Property Values
Value
Description
Play it
inline
Displays an element as an inline element (like <span>). 
    Any height and width properties will have no effect. This is default.
Demo 
block
Displays an element as a block element (like <p>). It starts on a 
    new line, and takes up the whole width
Demo 
contents
Makes the container disappear, making the child elements children of the 
    element the next level up in the DOM
Demo 
flex
Displays an element as a block-level flex container
Demo 
grid
Displays an element as a block-level grid container
Demo 
inline-block
Displays an element as an inline-level block container. The element itself is formatted as an inline 
    element, but you can apply height and width values
Demo 
inline-flex
Displays an element as an inline-level flex container
Demo 
inline-grid
Displays an element as an inline-level grid container
Demo 
inline-table
The element is displayed as an inline-level table
Demo 
list-item
Let the element behave like a <li> element
Demo 
run-in
Displays an element as either block or inline, depending on context
Demo 
table
Let the element behave like a <table> element
Demo 
table-caption
Let the element behave like a <caption> element
table-column-group
Let the element behave like a <colgroup> element
table-header-group
Let the element behave like a <thead> element
table-footer-group
Let the element behave like a <tfoot> element
table-row-group
Let the element behave like a <tbody> element
table-cell
Let the element behave like a <td> element
table-column
Let the element behave like a <col> element
table-row
Let the element behave like a <tr> element
none
The element is completely removed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A demonstration of how to use the contents property value. In the following 
example the .a container will disappear, and making the child elements (.b) 
children of the element the next level up in the DOM:
.a {
display: contents;
border: 
    2px solid red;
background-color: #ccc;
padding: 10px;
width: 200px;
}
.b {
border: 2px solid blue;
background-color: lightblue;
padding: 10px;
}
Try it Yourself 
Example
A demonstration of how to use the inherit property value:
body {
display: inline;
}
p {
display: inherit;
}
Try it Yourself 
Example
Set the direction of some flexible items inside a <div> element in reverse 
order:
div {
display: flex;
flex-direction: row-reverse;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Display and 
visibility
HTML DOM reference:
display property
CSS
flex-direction
Property
Example
Set the direction of the flexible items inside the <div> element in reverse order:
div
{
display: flex;
flex-direction: row-reverse;
}
Try it Yourself 
Tip:
More "Try it Yourself" examples below.
Definition and Usage
The
flex-direction
property specifies the direction of the flexible items.
Note:
If the element is not a flexible item, the
flex-direction
property has no effect.
Show demo 
Default value:
row
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.flexDirection="column-reverse"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-direction
29
11
28
9
17
CSS Syntax
flex-direction: row|row-reverse|column|column-reverse|initial|inherit;
Property Values
Value
Description
Play it
row
Default value. The flexible items are displayed horizontally, as a row
Demo 
row-reverse
Same as row, but in reverse order
Demo 
column
The flexible items are displayed vertically, as a column
Demo 
column-reverse
Same as column, but in reverse order
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Using
flex-direction
together with
media queries
to create a different layout for different screen sizes/devices:
.flex-container {
display: flex;
flex-direction: row;
}
/* 
  Responsive layout - makes a one column layout instead of a two-column layout 
  */
@media (max-width: 800px) {
.flex-container {
flex-direction: column;
}
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex-flow property
CSS Reference:
flex-wrap property
CSS Reference:
flex property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
CSS Reference:
flex-basis property
HTML DOM reference:
flexDirection property
CSS
flex
Property
Example
Let all the flexible items be the same length, regardless of its content:
#main div {
flex: 1;
}
Try it Yourself 
Tip:
More "Try it Yourself" examples below.
Definition and Usage
The
flex
property is a shorthand property for:
flex-grow
flex-shrink
flex-basis
The
flex
property sets the flexible length on flexible items.
Note:
If the element is not a flexible item, the
flex
property has no effect.
Show demo 
Default value:
0 1 auto
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.flex="1"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex
29
11
28
9
17
CSS Syntax
flex:
flex-grow
flex-shrink
flex-basis
|auto|initial|inherit;
Property Values
Value
Description
Demo
flex-grow
A number specifying how much the item will grow relative to the rest of the flexible items
Demo 
flex-shrink
A number specifying how much the item will shrink relative to the rest of the flexible items
flex-basis
The length of the item. Legal values: "auto", "inherit", or a number followed by "%", "px", "em" or any other length unit
Demo 
auto
Same as 1 1 auto.
initial
Same as 0 1 auto.
Read about
initial
none
Same as 0 0 auto.
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Using
flex
together with
media queries
to create a different layout for different screen sizes/devices:
.flex-container {
display: flex;
flex-wrap: wrap;
}
.flex-item-left {
flex: 50%;
}
.flex-item-right {
flex: 50%;
}
/* Responsive layout - makes a one column layout (100%) instead of a two-column 
  layout (50%) */
@media (max-width: 800px) {
.flex-item-right, 
  .flex-item-left {
flex: 100%;
}
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex-basis property
CSS Reference:
flex-direction property
CSS Reference:
flex-flow property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
CSS Reference:
flex-wrap property
HTML DOM reference:
flex property
CSS
flex-basis
Property
Example
Set the initial length of the second flex-item to 100 pixels:
div:nth-of-type(2) {
flex-basis: 
  100px;
}
Try it Yourself 
Definition and Usage
The
flex-basis
property specifies the initial length of a flexible item.
Note:
If the element is not a flexible item, the
flex-basis
property has no effect.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.flexBasis="200px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-basis
29
11
28
9
17
CSS Syntax
flex-basis:
number
|auto|initial|inherit;
Property Values
Value
Description
Play it
number
A length unit, or percentage, specifying the initial length of the flexible item(s)
Demo 
auto
Default value. The length is equal to the length of the flexible item. If the item has no length specified, the length will be according to its content
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex property
CSS Reference:
flex-direction property
CSS Reference:
flex-flow property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
CSS Reference:
flex-wrap property
HTML DOM reference:
flexBasis property
CSS
flex-grow
Property
Example
Let the second flex-item grow three times wider than the rest:
div:nth-of-type(1) {flex-grow: 1;}
div:nth-of-type(2) {flex-grow: 3;}
div:nth-of-type(3) {flex-grow: 1;}
Try it Yourself 
Definition and Usage
The
flex-grow
property specifies how much the item will grow relative to the rest of the flexible items inside the same container.
Note:
If the element is not a flexible item, the
flex-grow
property has no effect.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.flexGrow="5"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-grow
29
11
28
9
17
CSS Syntax
flex-grow:
number
|initial|inherit;
Property Values
Value
Description
Play it
number
A number specifying how much the item will grow relative to the rest of the flexible items. Default value is 0
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex property
CSS Reference:
flex-basis property
CSS Reference:
flex-direction property
CSS Reference:
flex-flow property
CSS Reference:
flex-shrink property
CSS Reference:
flex-wrap property
HTML DOM reference:
flexGrow property
CSS
flex-flow
Property
Example
Make the flexible items display in reverse order, and wrap if necessary:
div {
display: flex;
flex-flow: row-reverse wrap;
}
Try it Yourself 
Definition and Usage
The
flex-flow
property is a shorthand property for:
flex-direction
flex-wrap
Note:
If the elements are not flexible items, the
flex-flow
property has no effect.
Show demo 
Default value:
row nowrap
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.flexFlow="column nowrap"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-flow
29
11
28
9
17
CSS Syntax
flex-flow:
flex-direction
flex-wrap
|initial|inherit;
Property Values
Value
Description
Play it
flex-direction
Possible values:
row
row-reverse
column
column-reverse
initial
inherit
Default value is "row".
Specifying the direction of the flexible items
Demo 
flex-wrap
Possible values:
nowrap
wrap
wrap-reverse
initial
inherit
Default value is "nowrap".
Specifying whether the flexible items should wrap or not
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex property
CSS Reference:
flex-direction property
CSS Reference:
flex-wrap property
CSS Reference:
flex-basis property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
HTML DOM reference:
flexFlow property
CSS
Functions
Reference
CSS Functions
CSS functions are used as a value for various CSS properties.
Function
Description
attr()
Returns the value of an attribute of the selected element
calc()
Allows you to perform calculations to determine CSS property values
conic-gradient()
Creates a conic gradient
counter()
Returns the current value of the named counter
cubic-bezier()
Defines a Cubic Bezier curve
hsl()
Defines colors using the Hue-Saturation-Lightness model (HSL)
hsla()
Defines colors using the Hue-Saturation-Lightness-Alpha model (HSLA)
linear-gradient()
Creates a linear gradient
max()
Uses the largest value, from a comma-separated list of values, as the 
    property value
min()
Uses the smallest value, from a comma-separated list of values, as the 
    property value
radial-gradient()
Creates a radial gradient
repeating-conic-gradient()
Repeats a conic gradient
repeating-linear-gradient()
Repeats a linear gradient
repeating-radial-gradient()
Repeats a radial gradient
rgb()
Defines colors using the Red-Green-Blue model (RGB)
rgba()
Defines colors using the Red-Green-Blue-Alpha model (RGBA)
var()
Inserts the value of a custom property
CSS
align-items
Property
Example
Center the alignments for all the items of the flexible <div> element:
div
 {
display: flex;
align-items: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
align-items
property specifies the default alignment for items inside a flexbox or grid container.
In a flexbox container, the flexbox items are aligned on the cross axis, which is vertical by default (opposite of flex-direction).
In a grid container, the grid items are aligned in the block direction. For pages in English, block direction is downward and inline direction is left to right.
For this property to have any alignment effect, the items need available space around themselves in the appropriate direction.
Tip:
Use the
align-self
property of each item to override the
align-items
property.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.alignItems="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
align-items
57.0
16.0
52.0
10.1
44.0
CSS Syntax
align-items: normal|stretch|
positional alignment
|flex-start|flex-end|baseline|initial|inherit;
Property Values
Value
Description
Play it
normal
Default. Behaves like 'stretch' for flexbox and grid items, or 'start' for grid items with a defined block size.
Demo 
stretch
Items are stretched to fit the container
Demo 
center
Items are positioned at the center of the container
Demo 
flex-start
Items are positioned at the beginning of the container
Demo 
flex-end
Items are positioned at the end of the container
Demo 
start
Items are positioned at the beginning of their individual grid cells, in the block direction
end
Items are positioned at the end of the their individual grid cells, in the block direction
baseline
Items are positioned at the baseline of the container
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Items are positioned at the beginning of the container:
div {
display: flex;
align-items: flex-start;
}
Try it Yourself 
Example
Items are positioned at the end of the container:
div {
display: flex;
align-items: flex-end;
}
Try it Yourself 
Example
Items are positioned at the baseline of the container:
div {
display: flex;
align-items: baseline;
}
Try it Yourself 
Example
Items are stretched to fit the container:
div {
display: flex;
align-items: stretch;
}
Try it Yourself 
Example with grid
Items are aligned at the start of each grid cell in the block direction:
#container {
display: grid;
align-items: start;
}
Try it Yourself 
Example with absolute positioning
Items are aligned at the end of each grid cell in the block direction for absolute positioned grid items:
#container {
display: grid;
position: relative;
align-items: end;
}
#container > div {
position: absolute;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS grid
CSS tutorial:
CSS flexbox
CSS Reference:
align-content property
CSS Reference:
align-self property
CSS Reference:
justify-content property
CSS Reference:
justify-items property
CSS Reference:
justify-self property
HTML DOM reference:
alignItems property
CSS
box-reflect
Property
Example
Add reflection below an image:
img
 {
-webkit-box-reflect: below;
}
Try it Yourself 
Definition and Usage
The
box-reflect
property is used to create a reflection of an element.
The value of the
box-reflect
property can be:
below
,
above
,
left
, or
right
.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.webkitBoxReflect="below"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by
-webkit-
specify the first version that worked with a prefix.
Property
box-reflect
4.0 -webkit-
79.0 -webkit-
Not supported
4.0 -webkit-
15.0 -webkit-
CSS Syntax
box-reflect: none|below|above|left|right|
position offset gradient
|initial|inherit;
Property Values
Property Value
Description
Demo
none
Default value. No reflection is displayed.
Demo 
below
Creates a reflection below the element.
Demo 
above
Creates a reflection above the element.
Demo 
left
Creates a reflection to the left of the element.
Demo 
right
Creates a reflection to the right of the element.
Demo 
position offset
Two value syntax:
- position
sets reflection below, above, left, or right of the element.
- offset
sets the distance to the reflection. Distance is set in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
position offset gradient
Three value syntax:
- position
sets reflection below, above, left, or right of the element.
- offset
sets the distance to the reflection. Distance is set in px, pt, cm, etc. Default value is 0.
Read about length units
- gradient
sets a transition for the reflection, i.e. a fading effect.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
The
box-reflect
property can be set on any visible HTML element. Here, reflection is made below a p-tag:
p {
-webkit-box-reflect: below;
}
Try it Yourself 
Example
The
box-reflect
property value can be set with two-value syntax. Here, the reflection is below an img-element, but with 70px distance:
img {
-webkit-box-reflect: below 70px;
}
Try it Yourself 
Example
The
box-reflect
property value can also be set with three-value syntax. Here, the reflection is below an img-element, with 10px distance, and gradually fading:
img {
-webkit-box-reflect: below 10px linear-gradient(to bottom, rgba(0,0,0,0.0), rgba(0,0,0,0.4));
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Image Reflection
CSS
clip-path
Property
Example
Clip an image to a 50% circle:
img {
clip-path: 
    circle(50%);
}
Try it Yourself 
Definition and Usage
The
clip-path
property 
lets you clip an element to a basic shape or to an SVG source.
Note:
The
clip-path
property  
replaces the deprecated
clip
property.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes for
basic-shape
.
Read about
animatable
Try it
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.clipPath="circle(50%)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
clip-path
55
79
3.5
9.1
42
CSS Syntax
clip:
clip-source
|
basic-shape
|margin-box|border-box|padding-box|content-box|fill-box|stroke-box|view-box|none|initial|inherit;
Property Values
Value
Description
Demo
clip-source
Defines a URL to an SVG <clipPath> element
basic-shape
Clips an element to a basic shape: circle, ellipse, polygon or inset
Demo 
margin-box
Uses the margin box as the reference box
border-box
Uses the border box as the reference box
padding-box
Uses the padding box as the reference box
content-box
Uses the content box as the reference box
fill-box
Uses the object bounding box as reference box
stroke-box
Uses the stroke bounding box as reference box
view-box
Uses the SVG viewport as reference box
none
This is default. No clipping is done
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
column-count
Property
Example
Divide the text in the <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-count
property specifies the number of columns an element should 
be divided into.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columnCount = "3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-count
50
10
52
9
37
CSS Syntax
column-count:
number
|auto|initial|inherit;
Property Values
Value
Description
Demo
number
The optimal number of columns into which the content of the element will be flowed
Demo 
auto
Default value. The number of columns will be determined by other properties, like e.g. "column-width"
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnCount property
CSS
flex-shrink
Property
Example
Let the second flex-item shrink three times more than the rest:
div:nth-of-type(2) {
flex-shrink: 3;
}
Try it Yourself 
Definition and Usage
The
flex-shrink
property specifies how the item will shrink relative to the rest 
of the flexible items inside the same container.
Note:
If the element is not a flexible item, the
flex-shrink
property has no effect.
Default value:
1
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.flexShrink="5"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-shrink
29
11
28
9
17
CSS Syntax
flex-shrink:
number
|initial|inherit;
Property Values
Value
Description
Play it
number
A number specifying how much the item will shrink relative to the rest of the flexible items. Default value is 1
Play it 
initial
Sets this property to its default value.
Read about
initial
Play it 
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex property
CSS Reference:
flex-basis property
CSS Reference:
flex-direction property
CSS Reference:
flex-flow property
CSS Reference:
flex-grow property
CSS Reference:
flex-wrap property
HTML DOM reference:
flexShrink property
CSS
flex-wrap
Property
Example
Make the flexible items wrap if necessary:
div {
display: flex;
flex-wrap: wrap;
}
Try it Yourself 
Definition and Usage
The
flex-wrap
property specifies whether the flexible items should wrap or not.
Note:
If the elements are not flexible items, the
flex-wrap
property has no effect.
Show demo 
Default value:
nowrap
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.flexWrap="nowrap"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
flex-wrap
29
11
28
9
17
CSS Syntax
flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;
Property Values
Value
Description
Play it
nowrap
Default value. Specifies that the flexible items will not wrap
Demo 
wrap
Specifies that the flexible items will wrap if necessary
Demo 
wrap-reverse
Specifies that the flexible items will wrap, if necessary, in reverse order
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Tutorial:
CSS Flexible Box
CSS Reference:
flex property
CSS Reference:
flex-flow property
CSS Reference:
flex-direction property
CSS Reference:
flex-basis property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
HTML DOM reference:
flexWrap property
CSS
float
Property
Example
Let an image float to the right:
img
 {
float: right;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
float
property specifies whether an 
element should float to the left, right, or not at all.
Note:
Absolutely positioned elements ignore the
float
property!
Note:
Elements next to a floating element will flow around it. To avoid this, use the
clear
property or the clearfix hack (see example 
at the bottom of this page).
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.cssFloat="left"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
float
1.0
4.0
1.0
1.0
7.0
CSS Syntax
float: none|left|right|initial|inherit;
Property Values
Value
Description
Demo
none
The element does not float, (will be displayed just where it occurs in the text). This is default
Demo 
left
The element floats to the left of its container
Demo 
right
The element floats the right of its container
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Let an image float to the left:
img
 {
float: left;
}
Try it Yourself 
Example
Let image be displayed just where it occurs in the text (float: none):
img
 {
float: none;
}
Try it Yourself 
Example
Let the first letter of a paragraph float to the left and style the letter:
span {
float: left;
width: 
    0.7em;
font-size: 400%;
font-family: algerian, courier;
line-height: 80%;
}
Try it Yourself 
Example
Use float with a list of hyperlinks to create a horizontal menu:
.header, .footer {
background-color: grey;
color: white;
padding: 15px;
}
.column {
float: left;
padding: 15px;
}
.clearfix::after {
content: "";
clear: both;
display: table;
}
.menu {width: 25%;}
.content {width: 75%;}
Try it Yourself 
Example
Use float to create a homepage with a header, footer, left content and main content:
.header, .footer {
background-color: grey;
color: white;
padding: 15px;
}
.column {
float: left;
padding: 15px;
}
.clearfix::after {
content: "";
clear: both;
display: table;
}
.menu {width: 25%;}
.content {width: 75%;}
Try it Yourself 
Example
Do not allow floating elements on the left or the right side of a specified 
<p> element:
img {
float: left;
}
p.clear {
clear: both;
}
Try it Yourself 
Example
If a floating element is taller than the containing element, it will overflow outside its container. 
It is possible to fix this with the "clearfix hack":
.clearfix::after {
content: "";
clear: both;
display: table;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Float
HTML DOM reference:
cssFloat property
CSS
font-family
Property
Example
Specify the font for two paragraphs:
p.a {
font-family: "Times New Roman", Times, serif;
}
p.b {
font-family: Arial, Helvetica, 
    sans-serif;
}
Try it Yourself 
Definition and Usage
The
font-family
property specifies the font for an element.
The
font-family
property can hold several font names as a "fallback" system. 
If the browser does not support the first font, it tries the next font.
There are two types of font family names:
family-name
- The name of a font-family, like "times", "courier", "arial", etc.
generic-family
- The name of a generic-family, like "serif", "sans-serif", "cursive", "fantasy", "monospace".
Start with the font you want, and always end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available.
Note:
Separate each value with a comma.
Note:
If a font name contains white-space, it must be quoted. Single quotes must be used when using the "style" attribute in HTML.
Show demo 
Default value:
depends on the browser
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.fontFamily="Verdana,sans-serif"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-family
1.0
4.0
1.0
1.0
3.5
CSS Syntax
font-family:
family-name
|
generic-family
|initial|inherit;
Property Values
Value
Description
Demo
family-name / generic-family
A prioritized list of font family names and/or generic family names
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
HTML DOM reference:
fontFamily property
CSS
font-size
Property
Example
Set the font size for different elements:
div.a {
font-size: 15px;
}
div.b {
font-size: large;
}
div.c {
font-size: 150%;
}
Try it Yourself 
Definition and Usage
The
font-size
property sets the size of a font.
Show demo 
Default value:
medium
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.fontSize="14px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-size
1.0
5.5
1.0
1.0
7.0
CSS Syntax
font-size:medium|xx-small|x-small|small|large|x-large|xx-large|smaller|larger|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Sets the font-size to a medium size. This is default
Demo 
xx-small
Sets the font-size to an xx-small size
Demo 
x-small
Sets the font-size to an extra small size
Demo 
small
Sets the font-size to a small size
Demo 
large
Sets the font-size to a large size
Demo 
x-large
Sets the font-size to an extra large size
Demo 
xx-large
Sets the font-size to an xx-large size
Demo 
smaller
Sets the font-size to a smaller size than the parent
      element
Demo 
larger
Sets the font-size to a larger size than the parent element
Demo 
length
Sets the font-size to a fixed size in px, cm, etc.
Read about length units
Demo 
%
Sets the font-size to a percent of the parent element's font size
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Fonts
CSS reference:
font property
HTML DOM reference:
fontSize property
CSS
font-style
Property
Example
Set different font styles for three paragraphs:
p.a {
font-style: normal;
}
p.b {
font-style: italic;
}
p.c {
font-style: oblique;
}
Try it Yourself 
Definition and Usage
The
font-style
property specifies the font style for a text.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.fontStyle="italic"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-style
1.0
4.0
1.0
1.0
7.0
CSS Syntax
font-style: normal|italic|oblique|initial|inherit;
Property Values
Value
Description
Demo
normal
The browser displays a normal font style. This is default
Demo 
italic
The browser displays an italic font style
Demo 
oblique
The browser displays an oblique font style
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
HTML DOM reference:
fontStyle property
CSS
grid-row-end
Property
Example
Make "item1" span 3 rows:
.item1 {
grid-row-end: span 3;
}
Try it Yourself 
Definition and Usage
The
grid-row-end
property defines how many rows an item will span, or 
on which row-line the item will end (see example at the end of this page).
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridRowEnd="4"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-row-end
57
16
52
10
44
CSS Syntax
grid-row-end: 
  auto|
row-line
|span
n
;
Property Values
Value
Description
Demo
auto
Default value. The item will span one row.
Demo 
span
n
Specifies the number of rows the item will span.
Demo 
row-line
Specifies on which row to end the display of the item.
Demo 
More Examples
Example
You can use row-line values instead numbers of rows to span:
.item1 {
grid-row-end: 3;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS
grid-template
Property
Example
Make a three columns grid layout where the first row is 150px high:
.grid-container {
display: grid;
grid-template: 150px 
  / auto auto auto;
}
Try it Yourself 
Definition and Usage
The
grid-template
property is a shorthand property for the 
following properties:
grid-template-rows
grid-template-columns
grid-template-areas
Show demo 
Default value:
none none none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridTemplate="250px / auto auto"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-template
57
16
52
10
44
CSS Syntax
grid-template: none|
grid-template-rows
/
grid-template-columns
|
grid-template-areas
|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. No specific sizing of the columns or rows
grid-template rows / grid-template-columns
Specifies the size(s) of the columns and rows
Demo 
grid-template-areas
Specifies the grid layout using named items
Demo 
initial
Sets this property to its default value.
Read about initial
inherit
Inherits this property from its parent element. Read about
inherit
More Examples
Example
Specify two rows, where "item1" spans the first two columns in the first two 
rows (in a five columns grid layout):
.item1 {
grid-area: myArea;
}
.grid-container {
display: grid;
grid-template:
'myArea myArea . . .'
'myArea myArea . . .';
}
Try it Yourself 
Example
Name all items, and make a ready-to-use webpage template:
.item1 {grid-area: header; }
.item2 {grid-area: 
  menu; }
.item3 {grid-area: 
  main; }
.item4 {grid-area: 
  right; }
.item5 {grid-area: 
  footer; }
.grid-container {
display: grid;
grid-template:
'header header header header header header'
'menu main main main right right'
'menu footer footer 
  footer footer footer';
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Item
CSS Reference: The
grid-area
property
CSS Reference: The
grid-template-rows
property
CSS Reference: The
grid-template-columns
property
CSS Reference: The
grid-template-areas
property
CSS
grid-template-rows
Property
Example
Specify the row-size (height):
.grid-container {
display: grid;
grid-template-rows: 
  100px 300px;
}
Try it Yourself 
Definition and Usage
The
grid-template-rows
property specifies the number 
(and the heights) of the rows in a grid layout.
The values are a space-separated list, where each value specifies the height of the respective row.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridTemplateRows="50px 200px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-template-rows
57
16
52
10
44
CSS Syntax
grid-template-rows: none|auto|max-content|min-content|
length
|initial|inherit;
Property Values
Value
Description
Demo
none
No size is set. Rows are created if needed
Demo 
auto
The size of the rows is determined by the size of the container, and on 
    the size of the content of the items in the row
Demo 
max-content
Sets the size of each row to depend on the largest item in the row
min-content
Sets the size of each row to depend on the smallest item in the row
length
Sets the size of the rows, by using a legal length value.
Read about length units
Demo 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Reference: The
grid-columns
property
CSS Reference: The
grid-template
property
CSS
grid-template-columns
Property
Example
Make a 4 columns grid container:
.grid-container {
display: grid;
grid-template-columns: 
  auto auto auto auto;
}
Try it Yourself 
Definition and Usage
The
grid-template-columns
property specifies the number 
(and the widths) of columns in a grid 
layout.
The values are a space separated list, where each value specifies the size of 
the respective column.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridTemplateColumns="50px 50px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-template-columns
57
16
52
10
44
CSS Syntax
grid-template-columns: none|auto|max-content|min-content|
length
|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. Columns are created if needed
Demo 
auto
The size of the columns is determined by the size of the 
    container and on the size of the content of the items in the column
Demo 
max-content
Sets the size of each column to depend on the largest item in the column
Demo 
min-content
Sets the size of each column to depend on the smallest item in the column
length
Sets the size of the columns, by using a legal length value.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Make a 4 columns grid container, and specify a size for each column:
.grid-container {
display: grid;
grid-template-columns: 
  30px 200px auto 100px;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Reference: The
grid-template-rows
property
CSS Reference: The
grid-template
property
CSS
grid-auto-rows
Property
Example
Set a default size for the rows in a grid:
.grid-container {
display: grid;
grid-auto-rows: 150px;
}
Try it Yourself 
Definition and Usage
The
grid-auto-rows
property sets a size for the rows in a grid container.
This property affects only rows with the size not set.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridAutoRows="60px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-auto-rows
57
16
52
10
44
CSS Syntax
grid-auto-rows: auto|max-content|min-content|
length
;
Property Values
Value
Description
Demo
auto
Default value. The size of the rows is determined by the size of the 
    largest item in the row
Demo 
max-content
Sets the size of each row to depend on the largest item in the row
Demo 
min-content
Sets the size of each row to depend on the smallest item in the row
Demo 
length
Sets the size of the rows, by using a legal length value.
Read about length units
Demo 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Reference: The
grid-auto-columns
property
CSS
font-weight
Property
Example
Set different font weight for three paragraphs:
p.normal {
font-weight: normal;
}
p.thick {
font-weight: bold;
}
p.thicker {
font-weight: 900;
}
Try it Yourself 
Definition and Usage
The
font-weight
property sets how thick or thin characters in text should be displayed.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.fontWeight="bold"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-weight
2.0
4.0
1.0
1.3
3.5
CSS Syntax
font-weight: normal|bold|bolder|lighter|
number
|initial|inherit;
Property Values
Value
Description
Demo
normal
Defines normal characters. This is default
Demo 
bold
Defines thick characters
Demo 
bolder
Defines thicker characters
Demo 
lighter
Defines lighter characters
Demo 
100
200
300
400
500
600
700
800
900
Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
HTML DOM reference:
fontWeight property
CSS
grid-column-end
Property
Example
Make "item1" span 3 columns:
.item1 {
grid-column-end: span 3;
}
Try it Yourself 
Definition and Usage
The
grid-column-end
property defines how many columns an item will span, or 
on which column-line the item will end (see example at the end of this page).
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridColumnEnd="5"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-column-end
57
16
52
10
44
CSS Syntax
grid-column-end: 
  auto|span
n
|
column-line
;
Property Values
Value
Description
Demo
auto
Default value. The item will span one column
Demo 
span
n
Specifies the number of columns the item will span
Demo 
column-line
Specifies on which column to end the display of the item
Demo 
More Examples
Example
You can use column-line values instead numbers of columns to span:
.item1 {
grid-column-end: 3;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS
grid-auto-columns
Property
Example
Set a default size for the columns in a grid:
.grid-container {
display: grid;
grid-auto-columns: 50px;
}
Try it Yourself 
Definition and Usage
The
grid-auto-columns
property sets a size for the columns in a grid container.
This property affects only columns with the size not set.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridAutoColumns="120px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-auto-columns
57
16
52
10
44
CSS Syntax
grid-auto-columns: auto|max-content|min-content|
length
;
Property Values
Value
Description
Demo
auto
Default value. The size of the columns is determined by the size of the 
    container
Demo 
fit-content()
max-content
Sets the size of each column depending on the largest item in the column
Demo 
min-content
Sets the size of each column depending on the smallest item in the column
Demo 
minmax(min.max)
Sets a size range greater than or equal to
min
and less than or 
    equal to
max
length
Sets the size of the columns, by using a legal length value.
Read about length units
Demo 
%
Sets the size of the columns, by using a percent value
Demo 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Reference: The
grid-auto-rows
property
CSS
font-variant
Property
Example
Set a paragraph to a small-caps font:
p.small
 {
font-variant: small-caps;
}
Try it Yourself 
Definition and Usage
In a small-caps font, all lowercase letters are converted to uppercase letters.
However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.
The
font-variant
property specifies whether or not a text should be displayed in a small-caps font.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.fontVariant="small-caps"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-variant
1.0
4.0
1.0
1.0
3.5
CSS Syntax
font-variant: normal|small-caps|initial|inherit;
Property Values
Value
Description
Demo
normal
The browser displays a normal font. This is default
Demo 
small-caps
The browser displays a small-caps font
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
HTML DOM reference:
fontVariant property
CSS
height
Property
Example
Set the height of two <div> elements:
div.a {
height: auto;
border: 
    1px solid black;
}
div.b {
height: 50px;
border: 1px solid black;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
height
property sets the height of an element.
The height of an element does not include padding, borders, or margins!
If
height: auto;
the element will automatically adjust its height to allow 
its content to be displayed correctly.
If
height
is set to a numeric value (like pixels, (r)em, percentages) then if 
the content does not fit within the specified height, it will overflow. How the 
container will handle the overflowing content is defined by the
overflow
property.
Note:
The
min-height
and
max-height
properties override the
height
property.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.height="500px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
height
1.0
4.0
1.0
1.0
7.0
CSS Syntax
height: auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
The browser calculates the height. This is default
Demo 
length
Defines the height in px, cm, etc.
Read about length units
Demo 
%
Defines the height in percent of the containing block
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the height of an element to 50% of the height of the parent element:
#parent {
height: 100px;
}
#child {
height: 50%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Height and Width
CSS tutorial:
CSS Box model
CSS reference:
width property
HTML DOM reference:
height property
CSS
hyphens
Property
Example
Set different hyphenations:
<style>
div.a {
hyphens: none;
}
div.b {
hyphens: manual;
}
div.c {
hyphens: auto;
}
</style>
<body>
<h2>hyphens: 
  none</h2>
<div class="a">A veryvery&shy;very long word.</div>
<h2>hyphens: manual</h2>
<div class="b">A veryvery&shy;very long 
  word.</div>
<h2>hyphens: auto</h2>
<div class="c">A 
  veryvery&shy;very long word.</div>
</body>
Try it Yourself 
Definition and Usage
The
hyphens
property defines whether 
hyphenation is allowed to create more soft wrap opportunities within a line of 
text.
Show demo 
Default value:
manual
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.hyphens="none"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
hyphens
55
79
43
17
44
CSS Syntax
hyphens: none|manual|auto|initial|inherit;
Property Values
Value
Description
Demo
none
Words are not hyphenated
Demo 
manual
Default. Words are only hyphenated at &hyphen; or &shy; (if needed)
Demo 
auto
Words are hyphenated where the algorithm is deciding (if needed)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
@import
Rule
Example
Import the "navigation.css" style sheet into the current style sheet:
@import 
    "navigation.css"; /* Using a string */
or
@import 
    url("navigation.css"); /* Using a url */
More examples below.
Definition and Usage
The
@import
rule allows you to import a style sheet into another style sheet.
The
@import
rule must be at the top of the document (but after any
@charset
declaration).
The
@import
rule also supports media queries, so you can allow the import to 
be media-dependent.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
@import
1.0
5.5
1.0
1.0
3.5
CSS Syntax
@import
url
|
string list-of-mediaqueries
;
Property Values
Value
Description
url
|
string
A url or a string representing the location of the resource to import. 
    The url may be absolute or relative
list-of-mediaqueries
A comma-separated list of media queries conditioning the application of 
    the CSS rules defined in the linked URL
More Examples
Example
Import the "printstyle.css" style sheet  
ONLY if the media is print:
@import 
    "printstyle.css" print;
Example
Import the "mobstyle.css" style sheet  
ONLY if the media is screen and the viewport is maximum 768 pixels:
@import 
    "mobstyle.css" screen and (max-width: 768px);
CSS
grid
Property
Example
Make a three columns grid layout where the first row is 150px high:
.grid-container {
display: grid;
grid: 150px 
  / auto auto auto;
}
Try it Yourself 
Definition and Usage
The
grid
property is a shorthand property for:
grid-template-rows
grid-template-columns
grid-template-areas
grid-auto-rows
grid-auto-columns
grid-auto-flow
Show demo 
Default value:
none none none auto auto row
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.grid="250px / auto auto auto"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid
57
16
52
10
44
CSS Syntax
grid: none|
grid-template-rows
/
grid-template-columns
|
grid-template-areas
|
grid-template-rows
/
[grid-auto-flow] grid-auto-columns
|
[grid-auto-flow] grid-auto-rows
/
grid-template-columns
|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. No specific sizing of the columns or rows
grid-template-rows / grid-template-columns
Specifies the size(s) of the columns and rows
Demo 
grid-template-areas
Specifies the grid layout using named items
Demo 
grid-template-rows / grid-auto-columns
Specifies the size (height) of the rows, and the auto size of the 
    columns
grid-auto-rows / grid-template-columns
Specifies the auto size of the rows, and sets the grid-template-columns 
    property
grid-template-rows / grid-auto-flow grid-auto-columns
Specifies the size (height) of the rows, and how to place auto-placed 
    items, and the auto size of the 
    columns
grid-auto-flow grid-auto-rows / grid-template-columns
Specifies how to place auto-placed items, and the auto size of the rows, and sets the grid-template-columns 
    property
initial
Sets this property to its default value.
Read about initial
inherit
Inherits this property from its parent element. Read about
inherit
More Examples
Example
Specify two rows, where "item1" spans the first two columns in the first two 
rows (in a five columns grid layout):
.item1 {
grid-area: myArea;
}
.grid-container {
display: grid;
grid:
'myArea myArea . . .'
'myArea myArea . . .';
}
Try it Yourself 
Example
Name all items, and make a ready-to-use webpage template:
.item1 {grid-area: header; }
.item2 {grid-area: 
  menu; }
.item3 {grid-area: 
  main; }
.item4 {grid-area: 
  right; }
.item5 {grid-area: 
  footer; }
.grid-container {
display: grid;
grid:
'header header header header header'
'menu main main main right right'
'menu footer footer 
  footer footer';
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Container
CSS Reference: The
grid-template-areas
property
CSS Reference: The
grid-template-rows
property
CSS Reference: The
grid-template-columns
property
CSS Reference: The
grid-auto-rows
property
CSS Reference: The
grid-auto-columns
property
CSS Reference: The
grid-auto-flow
property
CSS Reference: The
grid-row-gap
property
CSS Reference: The
grid-column-gap
property
CSS
grid-column
Property
Example
Make "item1" start on column 1 and span 2 columns:
.item1 {
grid-column: 1 / span 2;
}
Try it Yourself 
Definition and Usage
The
grid-column
property specifies a grid 
item's size and location in a grid layout, and is a shorthand property for the 
following properties:
grid-column-start
grid-column-end
Show demo 
Default value:
auto / auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridColumn="2 / span 2"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-column
57
16
52
10
44
CSS Syntax
grid-column:
grid-column-start / 
  grid-column-end
;
Property Values
Value
Description
Demo
grid-column-start
Specifies on which column to start displaying the item.
Demo 
grid-column-end
Specifies on which column-line to stop displaying the item, or how many columns to span.
Demo 
More Examples
Example
You can use column-line values instead numbers of columns to span:
.item1 {
grid-column: 1 / 3;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS
grid-auto-flow
Property
Example
Insert auto-placed items column by column:
.grid-container {
display: grid;
grid-auto-flow: 
  column;
}
Try it Yourself 
Definition and Usage
The
grid-auto-flow
property controls how auto-placed items get inserted in the grid.
Show demo 
Default value:
row
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridAutoFlow="row dense"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-auto-flow
57
16
52
10
44
CSS Syntax
grid-auto-flow: 
  row|column|dense|row dense|column dense;
Property Values
Value
Description
Demo
row
Default value. Places items by filling each row
Demo 
column
Places items by filling each column
Demo 
dense
Place items to fill any holes in the grid
Demo 
row dense
Places items by filling each row, and fill any holes 
    in the grid
Demo 
column dense
Places items by filling each column, and fill any 
    holes in the grid
Demo 
More Examples
Example
Fill any holes in the grid by adding the "dense" value:
.grid-container {
display: grid;
grid-auto-flow: row 
  dense;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS
grid-row
Property
Example
Make "item1" start on row 1 and span 2 rows:
.item1 {
grid-row: 1 / span 2;
}
Try it Yourself 
Definition and Usage
The
grid-row
property specifies a grid 
item's size and location in a grid layout, and is a shorthand property for the 
following properties:
grid-row-start
grid-row-end
Show demo 
Default value:
auto / auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridRow="2 / span 2"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-row
57
16
52
10
44
CSS Syntax
grid-row:
grid-row-start / 
  grid-row-end
;
Property Values
Value
Description
Demo
grid-row-start
Specifies on which row to start displaying the item.
Demo 
grid-row-end
Specifies on which row-line to stop displaying the item, or how many 
    rows to span.
Demo 
More Examples
Example
You can use row-line values instead numbers of rows to span:
.item1 {
grid-row: 1 / 3;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS
hyphenate-character
Property
Example
Set hyphenate-character:
<style>
div.a {
hyphenate-character: auto;
}
div.b {
hyphenate-character: "=";
}
</style>
<body>
<div class="a">A veryvery&shy;very long word.</div>
<div class="b">A 
  veryvery&shy;very long word.</div>
</body>
Try it Yourself 
Definition and Usage
The
hyphenate-character
property defines the 
character used at the end of line, before a 
hyphenation break.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS4
JavaScript syntax:
object
.style.hyphenateCharacter="/"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
hyphenate-character
106.0
106.0
98.0
17.0
92.0
CSS Syntax
hyphenate-character: auto|
string
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The browser selects an appropriate character based on the current typographic conventions
Demo 
string
The character used at the end of line, before a hyphenation break
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
backface-visibility
Property
Example
Hide and show the back face of two rotated <div> elements:
#div1
 {
backface-visibility: hidden;
}
#div2
 {
backface-visibility: visible;
}
Try it Yourself 
Definition and Usage
The
backface-visibility
property defines whether or not the back face of an element 
should be visible when facing the user.
The back face of an element is a mirror image of the front face being 
displayed.
This property is useful when an element is rotated. It lets you choose if the 
user should see the back face or not.
To better understand this property,
view a demo
.
Default value:
visible
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.backfaceVisibility="hidden"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
backface-visibility
36
12
16
15.4
23
CSS Syntax
backface-visibility: visible|hidden|initial|inherit;
Property Values
Value
Description
Demo
visible
Default value. The backside is visible
Play it 
hidden
The backside is not visible
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
backfaceVisibility property
CSS
column-rule
Property
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-rule
property sets the width, style, and color of the rule between columns.
This property is a shorthand property for:
column-rule-width
column-rule-style
(required)
column-rule-color
If column-rule-color is omitted, the color applied will be the color of the 
text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columnRule="3px outset blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-rule
50
10
52
9
37
CSS Syntax
column-rule:
column-rule-width column-rule-style column-rule-color
|initial|inherit;
Property Values
Value
Description
Demo
column-rule-width
Sets the width of the rule between columns. Default value is medium
Demo 
column-rule-style
Sets the style of the rule between columns. Default value is none
Demo 
column-rule-color
Sets the color of the rule between columns. Default value is the color of the element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnRule property
CSS
column-span
Property
Example
Let the <h2> element span across all columns:
h2
 {
column-span: all;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-span
property specifies how many columns an element should span across.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.columnSpan="all"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-span
50
10
71
9
37
CSS Syntax
column-span: none|all|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. The element should span across one column
Demo 
all
The element should span across all columns
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnSpan property
CSS
direction
Property
Example
Set the text direction to "right-to-left":
p.rtl
 {
direction: rtl;
}
Try it Yourself 
Definition and Usage
The
direction
property specifies the text direction/writing direction within 
a block-level element.
Tip:
Use this property together with the
unicode-bidi
property to set or return whether the text should be overridden 
to support multiple languages in the same document.
Show demo 
Default value:
ltr
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.direction="rtl"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
direction
2.0
5.5
1.0
1.3
9.2
CSS Syntax
direction: ltr|rtl|initial|inherit;
Property Values
Value
Description
Demo
ltr
Text direction goes from left-to-right. This is default
Demo 
rtl
Text direction goes from right-to-left
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Alignment
HTML DOM reference:
direction property
CSS
counter-reset
Property
Example
Create a counter ("my-sec-counter") and increase it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Increment "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter;
content: "Section " 
    counter(my-sec-counter) ". ";
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
counter-reset
property creates or resets one or more CSS counters.
The
counter-reset
property is usually used together with the
counter-increment
property and the
content
property.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.counterReset="section"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
counter-reset
4.0
8.0
2.0
3.1
9.6
CSS Syntax
counter-reset: none|
name number
|initial|inherit;
Property Values
Value
Description
none
Default value. No counters will be reset
id number
The
id
defines which counter to reset. The
number
sets the value the counter is
      reset to on each occurrence of the selector. The default
number
value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create a counter ("my-sec-counter") and decrease it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Decrement "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter -1;
content: "Section " 
    counter(my-sec-counter) ". ";
}
Try it Yourself 
Example
Numbering sections and sub-sections with "Section 1:", "1.1", "1.2", etc.:
body
 {
/* Set "section" to 0 */
counter-reset: section;
}
h1
 {
/* Set "subsection" to 0 */
counter-reset: subsection;
}
h1::before
 {
/* Increment "section" by 1 */
counter-increment: section;
content: "Section " counter(section) ": ";
}
h2::before {
/* Increment "subsection" by 1 */
counter-increment: subsection;
content: counter(section) "." counter(subsection) " ";
}
Try it Yourself 
Example
Create a counter and increase it by one (using Roman numerals) for each 
occurrence of the <h2> selector:
body {
/* Set "my-sec-counter" to 0 */
counter-reset: my-sec-counter;
}
h2::before {
/* Increment "my-sec-counter" by 1 */
counter-increment: 
    my-sec-counter;
content: counter(my-sec-counter, 
    upper-roman) ". ";
}
Try it Yourself 
Related Pages
CSS reference:
::before pseudo element
CSS reference:
::after pseudo element
CSS reference:
content property
CSS reference:
counter-increment property
CSS functions:
counter() function
HTML DOM reference:
counterReset property
CSS
columns
Property
Example
Specify the minimum width for each column, and the maximum number of columns:
div
 {
columns: 100px 3;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
columns
property is a shorthand property for:
column-width
column-count
The column-width part will define the minimum width for each column, while 
the column-count part will define the maximum number of columns. By using this 
property, the multi-column layout will automatically break down into a single 
column at narrow browser widths, without the need of media queries or other 
rules.
Show demo 
Default value:
auto auto
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columns="100px 3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
columns
50
10
52
9
37
CSS Syntax
columns: auto|
column-width column-count
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default value. Sets both the column-width and column-count to "auto"
Demo 
column-width
Defines the minimum width for each column
Demo 
column-count
Defines the maximum number of columns
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columns property
CSS
filter
Property
Example
Change all images to black and white (100% gray):
img {
filter: grayscale(100%);
}
Try it Yourself 
Tip:
More "Try it Yourself" examples below.
Definition and Usage
The
filter
property defines visual effects (like blur and saturation) to an element 
(often <img>).
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.filter="grayscale(100%)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
filter
53
13
35
9
40
CSS Syntax
filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();
Tip:
To use multiple filters, separate each filter with a 
space (See "More Examples" below).
Filter Functions
Note:
The filters that use percentage values (i.e. 75%), also accept the value as 
decimal (i.e. 0.75).
Filter
Description
Demo
none
Default value. Specifies no effects
Demo 
blur(
px
)
Applies a blur effect to the image. A larger value will create more blur.
If no value is specified, 0 is used.
Demo 
brightness(
%
)
Adjusts the brightness of the image.
0% will make the image completely black.
100% (1) is default and represents the original image.
Values over 100% will provide brighter results.
Demo 
contrast(
%
)
Adjusts the contrast of the image.
0% will make the image completely black.
100% (1) is default, and represents the original image.
Values over 100% will provide results with more contrast.
Demo 
drop-shadow(
h-shadow v-shadow blur spread color
)
Applies a drop shadow effect to the image.
Possible values:
h-shadow
- Required. Specifies a pixel value for the horizontal shadow. Negative values place the shadow to the left of the image.
v-shadow
- Required. Specifies a pixel value for the vertical shadow. Negative values place the shadow above the image.
blur
- Optional. This is the third value, and must be in pixels. Adds a blur effect to the shadow. A larger value will create more blur (the shadow becomes bigger and lighter). Negative values are not allowed. If no value is specified, 0 is used (the shadow's edge is sharp).
spread
- Optional. This is the fourth value, and must be in pixels. Positive values will cause the shadow to expand and grow bigger, and negative values will cause the shadow to shrink. If not specified, it will be 0 (the shadow will be the same size as the element).
Note:
Chrome, Safari and Opera, and maybe other browsers, do not support this 4th length; it will not render if added.
color
- Optional. Adds a color to the shadow. If not specified, the color depends on the browser (often black).
An example of creating a red shadow, which is 8px big both horizontally and vertically, with a blur effect of 10px:
filter: drop-shadow(8px 8px 10px red);
Tip:
This filter is similar to the
box-shadow
property.
Demo 
grayscale(
%
)
Converts the image to grayscale.
0% (0) is default and represents the original image.
100% will make the image completely gray (used for black and white images).
Note:
Negative values are not allowed.
Demo 
hue-rotate(
deg
)
Applies a hue rotation on the image. The value defines the number of degrees around the color circle the image samples will be adjusted. 0deg is default, and represents the original image.
Note:
Maximum value is 360deg.
Demo 
invert(
%
)
Inverts the samples in the image.
0% (0) is default and represents the original image.
100% will make the image completely inverted.
Note:
Negative values are not allowed.
Demo 
opacity(
%
)
Sets the opacity level for the image. The opacity-level describes the transparency-level, where:
0% is completely transparent.
100% (1) is default and represents the original image (no transparency).
Note:
Negative values are not allowed.
Tip:
This filter is similar to
 the
opacity
property.
Demo 
saturate(
%
)
Saturates the image.
0% (0) will make the image completely un-saturated.
100% is default and represents the original image.
Values over 100% provides super-saturated results.
Note:
Negative values are not allowed.
Demo 
sepia(
%
)
Converts the image to sepia.
0% (0) is default and represents the original image.
100% will make the image completely sepia.
Note:
Negative values are not allowed.
Demo 
url()
The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element. Example:
filter: url(svg-url#element-id)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Blur Example
Apply a blur effect to the image:
img {
filter: blur(5px);
}
Try it Yourself 
Blur Example 2
Apply a blurred background image:
img.background {
filter: blur(35px);
}
Try it Yourself 
Brightness Example
Adjust the brightness of the image:
img {
filter: brightness(200%);
}
Try it Yourself 
Contrast Example
Adjust the contrast of the image:
img {
filter: contrast(200%);
}
Try it Yourself 
Drop Shadow Example
Apply a drop shadow effect to the image:
img {
filter: drop-shadow(8px 8px 10px 
gray);
}
Try it Yourself 
Grayscale Example
Convert the image to grayscale:
img {
filter: grayscale(50%);
}
Try it Yourself 
Hue Rotation Example
Apply a hue rotation on the image:
img {
filter: hue-rotate(90deg);
}
Try it Yourself 
Invert Example
Invert the samples in the image:
img {
filter: invert(100%);
}
Try it Yourself 
Opacity Example
Set the opacity level for the image:
img {
filter: opacity(30%);
}
Try it Yourself 
Saturate Example
Saturate the image:
img {
filter: saturate(800%);
}
Try it Yourself 
Sepia Example
Convert the image to sepia:
img {
filter: sepia(100%);
}
Try it Yourself 
Using Multiple Filters
To use multiple filters, separate each filter with a space. Notice that the order is important (i.e. using grayscale() 
after sepia() will result in a completely gray image):
img {
filter: contrast(200%) brightness(150%);
}
Try it Yourself 
All Filters
A demonstration of all filter functions:
.blur {
filter: blur(4px);
}
.brightness {
filter: brightness(0.30);
}
.contrast {
filter: contrast(180%);
}
.grayscale {
filter: grayscale(100%);
}
.huerotate {
filter: hue-rotate(180deg);
}
.invert {
filter: invert(100%);
}
.opacity {
filter: opacity(50%);
}
.saturate {
filter: saturate(7);
}
.sepia {
filter: sepia(100%);
}
.shadow {
filter: drop-shadow(8px 8px 10px green);
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Images
HTML DOM reference:
filter property
CSS
inset-block
Property
Example
Set the distance to the parent element from a positioned <div> element in the block direction:
div {
inset-block: 10px 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-block
property sets the distance between an element and the parent element in the block direction.
The
inset-block
property is a shorthand property for the following properties:
inset-block-start
inset-block-end
Values for the
inset-block
property can be set in different ways:
If the inset-block property has two values:
inset-block: 10px 50px;
distance at start is 10px
distance at end is 50px
If the inset-block property has one value:
inset-block: 10px;
distance at start and end is 10px
The CSS
inset-block
and
inset-inline
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
inset-block
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetBlock="100px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-block
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-block: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset-block value.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the start of the element is moved from top to right side, and the end of the element is moved from bottom to left side of element:
div {
inset-block: 10px 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS inset-block-end property:
CSS Inset-block-end property
CSS inset-block-start property:
CSS Inset-block-start property
CSS writing-mode property:
CSS Writing-mode property
CSS
inset-block-end
Property
Example
Set the distance to the parent element from the end of a positioned <div> element in the block direction:
div {
inset-block-end: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-block-end
property sets the distance between the end of an element and the parent element in the block direction.
The CSS
inset-inline
and
inset-block
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and line directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
inset-block-end
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetBlockEnd="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-block-end
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-block-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the end of the element is moved from bottom to left side:
div {
inset-block-end: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS writing-mode property:
CSS Writing-mode property
CSS
inset-block-start
Property
Example
Set the distance to the parent element from the start of a positioned <div> element in the block direction:
div {
inset-block-start: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-block-start
property sets the distance between the start of an element and the parent element in the block direction.
The CSS
inset-inline
and
inset-block
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and line directions.
Note:
The related CSS property
writing-mode
define block direction. This affects where the start and end of a block is and the result of the
inset-block-start
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetBlockStart="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-block-start
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-block-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the start of the element is moved from top to right side:
div {
inset-block-start: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS writing-mode property:
CSS Writing-mode property
CSS
inset-inline-end
Property
Example
Set the distance to the parent element from the end of a positioned <div> element in the inline direction:
div {
inset-inline-end: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-inline-end
property sets the distance between the end of an element and the parent element in the inline direction.
The CSS
inset-inline
and
inset-block
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and line directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the end of an element is in the inline direction and the result of the
inset-inline-end
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetInlineEnd="30%"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-inline-end
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-inline-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the end of the element is moved from right side to bottom:
div {
inset-inline-end: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the end of the element is moved from right side to left side:
div {
inset-inline-end: 50px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS direction property:
CSS Direction property
CSS writing-mode property:
CSS Writing-mode property
CSS
@keyframes
Rule
Example
Make an element move gradually 200px down:
@keyframes mymove
 {
from {top: 0px;}
to {top: 200px;}
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
@keyframes
rule specifies the animation code.
The animation is created by gradually changing from one set of CSS styles to another.
During the animation, you can change the set of CSS styles many times.
Specify when the style change will happen in percent, or with the keywords "from" and 
"to", which is the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the animation is complete.
Tip:
For best browser support, you should always define both the 0% and the 100% selectors.
Note:
Use the animation properties to control the appearance of the animation, and also to bind the animation to selectors.
Note:
The !important rule is ignored in a keyframe (See last example on this page).
Browser Support
The numbers in the table specifies the first browser version that fully supports the 
rule.
Property
@keyframes
43
10
16
9
30
CSS Syntax
@keyframes
animationname
{
keyframes-selector
{
css-styles;}
}
Property Values
Value
Description
animationname
Required. Defines the name of the animation.
keyframes-selector
Required. Percentage of the animation duration.
Legal values:
0-100%
from (same as 0%)
to (same as 100%)
Note:
You can have many keyframes-selectors in one animation.
css-styles
Required. One or more legal CSS style properties
More Examples
Example
Add many keyframe selectors in one animation:
@keyframes mymove
 {
0% {top: 0px;}
25% {top: 200px;}
50% {top: 100px;}
75% {top: 200px;}
100% {top: 0px;}
}
Try it Yourself 
Example
Change many CSS styles in one animation:
@keyframes mymove
 {
0% {top: 0px; background: red; width: 100px;}
100% {top: 200px; background: yellow; width: 300px;}
}
Try it Yourself 
Example
Many keyframe selectors with many CSS styles:
@keyframes mymove
 {
0% {top: 0px; left: 0px; background: red;}
25% {top: 0px; left: 100px; background: blue;}
50% {top: 100px; left: 100px; background: yellow;}
75% {top: 100px; left: 0px; background: green;}
100% {top: 0px; left: 0px; background: red;}
}
Try it Yourself 
Example
Note:
The !important rule is ignored in a keyframe:
@keyframes myexample
 {
from {top: 0px;}
50% {top: 100px !important;} /* ignored 
    */
to {top: 200px;}
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Animations
CSS
justify-items
Property
Example
Align each grid item at the end of their grid cell, in the inline direction:
#container
 {
display: grid;
justify-items: end;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
justify-items
property is set on the grid container to give child elements (grid items) alignment in the inline direction.
For pages in English, inline direction is left to right and block direction is downward.
For this property to have any alignment effect, the grid items need available space around themselves in the inline direction.
Tip:
To align grid items in block direction instead of inline direction, use
align-items
property.
Show demo 
Default value:
legacy
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.justifyItems="center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
justify-items
57.0
16.0
45.0
10.1
44.0
CSS Syntax
justify-items: legacy|normal|stretch|
positional alignment
|
overflow-alignment
|
baseline alignment
|initial|inherit;
Property Values
Value
Description
Play it
legacy
Default value. Grid items with justify-self value 'auto' only inherits grid container justify-items property value if it starts with 'legacy'. It exists to implement the legacy alignment behavior of HTML's center element and align attribute.
Demo 
normal
Dependant on layout context, but similar to 'stretch' for grid layout
Demo 
stretch
Stretches to fill the grid cell if inline-size (width) is not set.
Demo 
start
Align items at the start in the inline direction
Demo 
left
Align items to the left
Demo 
center
Align items to the center
Demo 
end
Align items at the end in the inline direction
Demo 
right
Align items to the right
Demo 
overflow-alignment
'safe' sets alignment of the item to 'start' if the content overflows
'unsafe' keeps the alignment value regardless of wether or not the item content overflows
baseline alignment
The element is aligned with the baseline of the parent.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
justify-items vs. justify-self
Alignment is set to 'center' from container, and 'right' on the grid item itself. Property value 'right' prevails:
#container
 {
display: grid;
justify-items: center;
}
.blue
 {
justify-self: right;
}
Try it Yourself 
justify-items on absolutely positioned grid items
Alignment is set to 'right' on absolutely positioned grid items:
#container
 {
display: grid;
position: relative;
justify-items: right;
}
.blue
 {
position: absolute;
}
Try it Yourself 
writing-mode
With the
writing-mode
property value of the grid container element set to vertical-rl, the inline direction is downwards. The result is that the start of the container is moved from left side to top, and the end of the container is moved from right side to bottom:
#container {
justify-items: end;
writing-mode: vertical-rl;
}
Try it Yourself 
direction
With the
direction
property value of the grid container element set to 'rtl', the inline direction is right to left. The result is that the start of the container is moved from left side to right side, and the end of the container is moved from right side to left side:
#container {
justify-items: start;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS grid
CSS tutorial:
CSS positioning
CSS Reference:
align-items property
CSS Reference:
direction property
CSS Reference:
grid property
CSS Reference:
grid-template-columns property
CSS Reference:
justify-self property
CSS Reference:
position property
CSS Reference:
writing-mode property
CSS
justify-self
Property
Example
Align a grid item at the right side of its grid cell:
.red
 {
display: grid;
justify-self: right;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
justify-self
property aligns a grid item within its grid cell in the inline direction.
For pages in English, inline direction is left to right and block direction is downward.
For this property to have any alignment effect, the grid item need available space around itself in the inline direction.
Tip:
To align a grid item in block direction instead of inline direction, use
align-self
or
align-items
properties.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.justifySelf="right"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
justify-self
57.0
16.0
45.0
10.1
44.0
CSS Syntax
justify-self: auto|normal|stretch|
positional alignment
|
overflow-alignment
|
baseline alignment
|initial|inherit;
Property Values
Value
Description
Play it
auto
Default value. Grid container justify-self property value is inherited.
Demo 
normal
Dependant on layout context, but similar to 'stretch' for grid layout for grid items when size is not set. If size is set, the property value behaves lik 'start'.
Demo 
stretch
Stretches to fill the grid cell if inline-size (width) is not set.
Demo 
start
Align items at the start in the inline direction
Demo 
left
Align items to the left
Demo 
center
Align items to the center
Demo 
end
Align items at the end in the inline direction
Demo 
right
Align items to the right
Demo 
overflow-alignment
'safe' sets alignment of the item to 'start' if the content overflows
'unsafe' keeps the alignment value regardless of wether or not the item content overflows
baseline alignment
The element is aligned with the baseline of the parent.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
justify-self vs. justify-items
Alignment is set to 'center' from container with justify-items property, and 'right' on the grid item itself with justify-self property. Property value 'right' prevails:
#container
 {
display: grid;
justify-items: center;
}
.blue
 {
justify-self: right;
}
Try it Yourself 
justify-self on absolutely positioned grid items
Alignment is set to 'right' on absolutely positioned grid items:
#container
 {
display: grid;
position: relative;
}
.red
 {
position: absolute;
justify-self: right;
}
Try it Yourself 
writing-mode
With the
writing-mode
property value of the grid container element set to vertical-rl, the inline direction is downwards. The result is that the start of the container is moved from left side to top, and the end of the container is moved from right side to bottom:
#container {
display: grid;
writing-mode: vertical-rl;
}
.blue {
justify-self: end;
}
Try it Yourself 
direction
With the
direction
property value of the grid container element set to 'rtl', the inline direction is right to left. The result is that the start of the container is moved from left side to right side, and the end of the container is moved from right side to left side:
#container {
display: grid;
direction: rtl;
}
.blue {
justify-self: end;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS grid
CSS tutorial:
CSS positioning
CSS Reference:
align-content property
CSS Reference:
align-items property
CSS Reference:
align-self property
CSS Reference:
direction property
CSS Reference:
grid property
CSS Reference:
grid-template-columns property
CSS Reference:
position property
CSS Reference:
writing-mode property
CSS
left
Property
Example
Set the left edge of a positioned <div> element to 150px from the left edge of its nearest positioned ancestor:
div.c {
position: absolute;
left: 
150px;
width: 200px;
height: 120px;
border: 3px solid 
green;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
left
property affects the horizontal 
position of a positioned element. This property has no effect on non-positioned 
elements.
If position: absolute; or position: fixed; - the
left
property sets the left edge of an element to a unit to the left of 
  the left edge of its nearest positioned ancestor.
If position: relative; - the
left
property sets the left edge of an element to a unit to the left/right of its 
  normal position.
If position: sticky; - the
left
property behaves like its position is 
  relative when the element is inside the viewport, and like its position is 
  fixed when it is outside.
If position: static; - the
left
property has no effect.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.left="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
left
1.0
5.5
1.0
1.0
5.0
CSS Syntax
left: auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
Lets the browser calculate the left edge position. This is default
Demo 
length
Sets the left edge position in px, cm, etc. Negative values are allowed.
Read about length units
Demo 
%
Sets the left edge position in % of containing element. Negative values are allowed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Use the left property with a negative value and for an element with no 
positioned ancestors:
div.b {
position: absolute;
left: -10px;
width: 100px;
height: 120px;
border: 3px solid blue;
}
div.c {
position: absolute;
left: 150px;
width: 200px;
height: 120px;
border: 3px solid green;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
right property
CSS reference:
bottom property
CSS reference:
top property
HTML DOM reference:
left property
CSS
letter-spacing
Property
Example
Set the letter spacing for <h1>, <h2>, and <h3> elements:
h1 {
letter-spacing: 3px;
}
h2 {
letter-spacing: 2px;
}
h3 {
letter-spacing: 
    -1px;
}
Try it Yourself 
Definition and Usage
The
letter-spacing
property increases or decreases the space between characters in a text.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.letterSpacing="3px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
letter-spacing
1.0
4.0
1.0
1.0
3.5
CSS Syntax
letter-spacing: normal|
length
|initial|inherit;
Property Values
Value
Description
Demo
normal
Defines normal space between characters. This is default
Demo 
length
Defines a length that is used as the space between characters (negative values are 
    also allowed).
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Spacing
HTML DOM reference:
letterSpacing property
CSS
line-height
Property
Example
Set the line height for different <div> elements:
div.a {
line-height: normal;
}
div.b {
line-height: 1.6;
}
div.c {
line-height: 
    80%;
}
div.d {
line-height: 200%;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
line-height
property specifies the 
height of a line.
Note:
Negative values are not allowed.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.lineHeight="30px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
line-height
1.0
4.0
1.0
1.0
7.0
CSS Syntax
line-height: normal|
number
|
length
|initial|inherit;
Property Values
Value
Description
Demo
normal
A normal line height. This is default
Demo 
number
A number that will be multiplied with the current
      font-size to set the line height
Demo 
length
A fixed line height in px, pt, cm, etc.
Demo 
%
A line height in percent of the current font
      size
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the line height in pixels and centimeters for different <div> elements:
div.a {
line-height: 10px;
}
div.b {
line-height: 30px;
}
div.c {
line-height: 
    0.5cm;
}
div.d {
line-height: 1cm;
}
Try it Yourself 
Example
Set the line height as a number for different <div> elements:
div.a {
line-height: 0.5;
}
div.b {
line-height: 1.6;
}
div.c {
line-height: 2;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Spacing
HTML DOM reference:
lineHeight property
CSS
list-style
Property
Example
Specify all the list properties in one declaration:
ul
 {
list-style: square inside url("sqpurple.gif");
}
Try it Yourself 
Definition and Usage
The
list-style
property is a shorthand for the 
following properties:
list-style-type
list-style-position
list-style-image
If one of the values are missing, the 
default value for that property will be used.
Show demo 
Default value:
disc outside none
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.listStyle="decimal inside"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
list-style
1.0
4.0
1.0
1.0
7.0
CSS Syntax
list-style:
list-style-type
list-style-position
list-style-image
|initial|inherit;
Property Values
Value
Description
Demo
list-style-type
Specifies the type of list-item marker. Default value is "disc"
Demo 
list-style-position
Specifies where to place the list-item marker. Default value is 
    "outside"
Demo 
list-style-image
Specifies the type of list-item marker. Default value is "none"
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS List
HTML DOM reference:
listStyle property
CSS
list-style-image
Property
Example
Specify an image as the list-item marker in a list:
ul
 {
list-style-image: url('sqpurple.gif');
}
Try it Yourself 
Definition and Usage
The
list-style-image
property replaces the list-item marker with an image.
Note:
Always specify the
list-style-type
property in addition. This property is used if the image for some reason is unavailable.
Show demo 
Default value:
none
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.listStyleImage="url('smiley.gif')"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
list-style-image
1.0
4.0
1.0
1.0
7.0
CSS Syntax
list-style-image: none|
url
|initial|inherit;
Property Values
Value
Description
Demo
none
No image will be displayed. Instead, the list-style-type property will define what type of list marker will be rendered. This is default
Demo 
url
The path to the image to be used as a list-item marker
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style property
HTML DOM reference:
listStyleImage property
CSS
Colors
Color Names Supported by All Browsers
All modern browsers support the following 140 color names (click on a color name, or a hex value, to view the color as the background-color along with different text colors):
For a full overview of CSS colors, visit our 
colors tutorial.
AliceBlue
#F0F8FF
Color Mixer
Color Picker
AntiqueWhite
#FAEBD7
Color Mixer
Color Picker
Aqua
#00FFFF
Color Mixer
Color Picker
Aquamarine
#7FFFD4
Color Mixer
Color Picker
Azure
#F0FFFF
Color Mixer
Color Picker
Beige
#F5F5DC
Color Mixer
Color Picker
Bisque
#FFE4C4
Color Mixer
Color Picker
Black
#000000
Color Mixer
Color Picker
BlanchedAlmond
#FFEBCD
Color Mixer
Color Picker
Blue
#0000FF
Color Mixer
Color Picker
BlueViolet
#8A2BE2
Color Mixer
Color Picker
Brown
#A52A2A
Color Mixer
Color Picker
BurlyWood
#DEB887
Color Mixer
Color Picker
CadetBlue
#5F9EA0
Color Mixer
Color Picker
Chartreuse
#7FFF00
Color Mixer
Color Picker
Chocolate
#D2691E
Color Mixer
Color Picker
Coral
#FF7F50
Color Mixer
Color Picker
CornflowerBlue
#6495ED
Color Mixer
Color Picker
Cornsilk
#FFF8DC
Color Mixer
Color Picker
Crimson
#DC143C
Color Mixer
Color Picker
Cyan
#00FFFF
Color Mixer
Color Picker
DarkBlue
#00008B
Color Mixer
Color Picker
DarkCyan
#008B8B
Color Mixer
Color Picker
DarkGoldenRod
#B8860B
Color Mixer
Color Picker
DarkGray
#A9A9A9
Color Mixer
Color Picker
DarkGrey
#A9A9A9
Color Mixer
Color Picker
DarkGreen
#006400
Color Mixer
Color Picker
DarkKhaki
#BDB76B
Color Mixer
Color Picker
DarkMagenta
#8B008B
Color Mixer
Color Picker
DarkOliveGreen
#556B2F
Color Mixer
Color Picker
DarkOrange
#FF8C00
Color Mixer
Color Picker
DarkOrchid
#9932CC
Color Mixer
Color Picker
DarkRed
#8B0000
Color Mixer
Color Picker
DarkSalmon
#E9967A
Color Mixer
Color Picker
DarkSeaGreen
#8FBC8F
Color Mixer
Color Picker
DarkSlateBlue
#483D8B
Color Mixer
Color Picker
DarkSlateGray
#2F4F4F
Color Mixer
Color Picker
DarkSlateGrey
#2F4F4F
Color Mixer
Color Picker
DarkTurquoise
#00CED1
Color Mixer
Color Picker
DarkViolet
#9400D3
Color Mixer
Color Picker
DeepPink
#FF1493
Color Mixer
Color Picker
DeepSkyBlue
#00BFFF
Color Mixer
Color Picker
DimGray
#696969
Color Mixer
Color Picker
DimGrey
#696969
Color Mixer
Color Picker
DodgerBlue
#1E90FF
Color Mixer
Color Picker
FireBrick
#B22222
Color Mixer
Color Picker
FloralWhite
#FFFAF0
Color Mixer
Color Picker
ForestGreen
#228B22
Color Mixer
Color Picker
Fuchsia
#FF00FF
Color Mixer
Color Picker
Gainsboro
#DCDCDC
Color Mixer
Color Picker
GhostWhite
#F8F8FF
Color Mixer
Color Picker
Gold
#FFD700
Color Mixer
Color Picker
GoldenRod
#DAA520
Color Mixer
Color Picker
Gray
#808080
Color Mixer
Color Picker
Grey
#808080
Color Mixer
Color Picker
Green
#008000
Color Mixer
Color Picker
GreenYellow
#ADFF2F
Color Mixer
Color Picker
HoneyDew
#F0FFF0
Color Mixer
Color Picker
HotPink
#FF69B4
Color Mixer
Color Picker
IndianRed
#CD5C5C
Color Mixer
Color Picker
Indigo
#4B0082
Color Mixer
Color Picker
Ivory
#FFFFF0
Color Mixer
Color Picker
Khaki
#F0E68C
Color Mixer
Color Picker
Lavender
#E6E6FA
Color Mixer
Color Picker
LavenderBlush
#FFF0F5
Color Mixer
Color Picker
LawnGreen
#7CFC00
Color Mixer
Color Picker
LemonChiffon
#FFFACD
Color Mixer
Color Picker
LightBlue
#ADD8E6
Color Mixer
Color Picker
LightCoral
#F08080
Color Mixer
Color Picker
LightCyan
#E0FFFF
Color Mixer
Color Picker
LightGoldenRodYellow
#FAFAD2
Color Mixer
Color Picker
LightGray
#D3D3D3
Color Mixer
Color Picker
LightGrey
#D3D3D3
Color Mixer
Color Picker
LightGreen
#90EE90
Color Mixer
Color Picker
LightPink
#FFB6C1
Color Mixer
Color Picker
LightSalmon
#FFA07A
Color Mixer
Color Picker
LightSeaGreen
#20B2AA
Color Mixer
Color Picker
LightSkyBlue
#87CEFA
Color Mixer
Color Picker
LightSlateGray
#778899
Color Mixer
Color Picker
LightSlateGrey
#778899
Color Mixer
Color Picker
LightSteelBlue
#B0C4DE
Color Mixer
Color Picker
LightYellow
#FFFFE0
Color Mixer
Color Picker
Lime
#00FF00
Color Mixer
Color Picker
LimeGreen
#32CD32
Color Mixer
Color Picker
Linen
#FAF0E6
Color Mixer
Color Picker
Magenta
#FF00FF
Color Mixer
Color Picker
Maroon
#800000
Color Mixer
Color Picker
MediumAquaMarine
#66CDAA
Color Mixer
Color Picker
MediumBlue
#0000CD
Color Mixer
Color Picker
MediumOrchid
#BA55D3
Color Mixer
Color Picker
MediumPurple
#9370DB
Color Mixer
Color Picker
MediumSeaGreen
#3CB371
Color Mixer
Color Picker
MediumSlateBlue
#7B68EE
Color Mixer
Color Picker
MediumSpringGreen
#00FA9A
Color Mixer
Color Picker
MediumTurquoise
#48D1CC
Color Mixer
Color Picker
MediumVioletRed
#C71585
Color Mixer
Color Picker
MidnightBlue
#191970
Color Mixer
Color Picker
MintCream
#F5FFFA
Color Mixer
Color Picker
MistyRose
#FFE4E1
Color Mixer
Color Picker
Moccasin
#FFE4B5
Color Mixer
Color Picker
NavajoWhite
#FFDEAD
Color Mixer
Color Picker
Navy
#000080
Color Mixer
Color Picker
OldLace
#FDF5E6
Color Mixer
Color Picker
Olive
#808000
Color Mixer
Color Picker
OliveDrab
#6B8E23
Color Mixer
Color Picker
Orange
#FFA500
Color Mixer
Color Picker
OrangeRed
#FF4500
Color Mixer
Color Picker
Orchid
#DA70D6
Color Mixer
Color Picker
PaleGoldenRod
#EEE8AA
Color Mixer
Color Picker
PaleGreen
#98FB98
Color Mixer
Color Picker
PaleTurquoise
#AFEEEE
Color Mixer
Color Picker
PaleVioletRed
#DB7093
Color Mixer
Color Picker
PapayaWhip
#FFEFD5
Color Mixer
Color Picker
PeachPuff
#FFDAB9
Color Mixer
Color Picker
Peru
#CD853F
Color Mixer
Color Picker
Pink
#FFC0CB
Color Mixer
Color Picker
Plum
#DDA0DD
Color Mixer
Color Picker
PowderBlue
#B0E0E6
Color Mixer
Color Picker
Purple
#800080
Color Mixer
Color Picker
RebeccaPurple
#663399
Color Mixer
Color Picker
Red
#FF0000
Color Mixer
Color Picker
RosyBrown
#BC8F8F
Color Mixer
Color Picker
RoyalBlue
#4169E1
Color Mixer
Color Picker
SaddleBrown
#8B4513
Color Mixer
Color Picker
Salmon
#FA8072
Color Mixer
Color Picker
SandyBrown
#F4A460
Color Mixer
Color Picker
SeaGreen
#2E8B57
Color Mixer
Color Picker
SeaShell
#FFF5EE
Color Mixer
Color Picker
Sienna
#A0522D
Color Mixer
Color Picker
Silver
#C0C0C0
Color Mixer
Color Picker
SkyBlue
#87CEEB
Color Mixer
Color Picker
SlateBlue
#6A5ACD
Color Mixer
Color Picker
SlateGray
#708090
Color Mixer
Color Picker
SlateGrey
#708090
Color Mixer
Color Picker
Snow
#FFFAFA
Color Mixer
Color Picker
SpringGreen
#00FF7F
Color Mixer
Color Picker
SteelBlue
#4682B4
Color Mixer
Color Picker
Tan
#D2B48C
Color Mixer
Color Picker
Teal
#008080
Color Mixer
Color Picker
Thistle
#D8BFD8
Color Mixer
Color Picker
Tomato
#FF6347
Color Mixer
Color Picker
Turquoise
#40E0D0
Color Mixer
Color Picker
Violet
#EE82EE
Color Mixer
Color Picker
Wheat
#F5DEB3
Color Mixer
Color Picker
White
#FFFFFF
Color Mixer
Color Picker
WhiteSmoke
#F5F5F5
Color Mixer
Color Picker
Yellow
#FFFF00
Color Mixer
Color Picker
YellowGreen
#9ACD32
Color Mixer
Color Picker
CSS
border-bottom
Property
Example
Set the style of the bottom border for different elements:
h1 {
border-bottom: 5px solid red;
}
h2 {
border-bottom: 4px dotted blue;
}
div {
border-bottom: double;
}
Try it Yourself 
Definition and Usage
The
border-bottom
property is a shorthand 
property for (in the following order):
border-bottom-width
border-bottom-style
border-bottom-color
If border-bottom-color is omitted, the color applied will be the color of the 
text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderBottom="15px dotted lightblue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-bottom:
border-width
border-style
border-color
|initial|inherit;
Property Values
Value
Description
Demo
border-bottom-width
Required. Specifies the width of the bottom border. Default value is 
    "medium"
Demo 
border-bottom-style
Required. Specifies the style of the bottom border. Default value is 
    "none"
Demo 
border-bottom-color
Optional. Specifies the color of the bottom border. Default value is the 
    color of the text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderBottom property
CSS
border-bottom-color
Property
Example
Set a color for the bottom border:
div {border-bottom-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-bottom-color
property sets the color of an element's bottom border.
Note:
Always declare the
border-style
or the
border-bottom-style
property before the
border-bottom-color
property. An element must have a border before you can change the color.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderBottomColor="blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-bottom-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-bottom-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the bottom border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the 
    current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the bottom border with a HEX value:
div {border-bottom-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the bottom border with an RGB value:
div {border-bottom-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the bottom border with an RGBA value:
div {border-bottom-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the bottom border with a HSL value:
div {border-bottom-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the bottom border with a HSLA value:
div {border-bottom-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set a transparent bottom border:
div {border-bottom-color: transparent;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom property
HTML DOM reference:
borderBottomColor property
CSS
border-block-start-width
Property
Example
Set a width for the border at the start in the block direction:
div {
border-block-start-style: solid;
border-block-start-width: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-block-start-width
property sets the width of an element's border at the start in the block direction.
The CSS
border-block-start-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-block-start-width
property is dependent on block direction.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
border-block-start-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderBlockStartWidth="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-block-start-width
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-block-start-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border width at the start in the block direction is affected by the
writing-mode
property:
div {
border-block-start-style: solid;
writing-mode: vertical-rl;
border-block-start-width: 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-block property:
CSS Border-block property
CSS border-block-width property:
CSS Border-block-width property
CSS border-block-end-width property:
CSS Border-block-end-width property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-right-width
Property
Example
Set a width for the right border:
div {border-right-width: thin;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-right-width
property sets the width of an element's right border.
Note:
Always declare the
border-style
or the
border-right-style
property before the
border-right-width
property. An element must have borders before you can change the width.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderRightWidth="5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-right-width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-right-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium right border. This is default
Demo 
thin
Specifies a thin right border
Demo 
thick
Specifies a thick right border
Demo 
length
Allows you to define the thickness of the right border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the right border to medium:
div {border-right-width: medium;}
Try it Yourself 
Example
Set the width of the right border to thick:
div {border-right-width: thick;}
Try it Yourself 
Example
Set the width of the right border to 1px:
div {border-right-width: 1px;}
Try it Yourself 
Example
Set the width of the right border to 15px:
div {border-right-width: 15px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right property
HTML DOM reference:
borderRightWidth property
CSS
break-inside
Property
Example
Avoid a page-break inside an <img> element:
@media print
{
img {
display: block;
break-inside: 
  avoid;
}
}
Definition and Usage
The
break-inside
property specifies whether 
or not a page break, column break, or region break should occur inside the 
specified
element.
The
break-inside
property extends then CSS2
page-break-inside
property.
With
break-inside
, you can tell the browser 
to avoid breaks inside images, code snippets, tables, and lists.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.breakInside="always"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
break-inside
50.0
10.0
65.0
10.0
37.0
CSS Syntax
break-inside: auto|all|always|avoid|avoid-column|avoid-page|avoid-region|column|left|page|recto|region|right|verso|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page/column/region break inside the element
avoid
Avoid a page/column/region break inside the element
avoid-column
Avoid a column-break inside the element
avoid-page
Avoid a page-break inside the element
avoid-region
Avoid a region-break inside the element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Avoid a page-break inside a <table>, <ul>, <ol> elements::
@media print
{
table, ul, ol {
break-inside: avoid;
}
}
CSS
caret-color
Property
Example
Set the color of the cursor in input elements:
input {
caret-color: red;
}
Try it Yourself 
Definition and Usage
The
caret-color
property specifies the color of the cursor (caret) in inputs, textareas, or any element that is editable.
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.caretColor="red"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
caret-color
57.0
79.0
53.0
11.1
44.0
CSS Syntax
caret-color: auto|
color
|initial|inherit;
Property Values
Value
Description
auto
Default. Browsers uses the currentColor for the caret
color
Specifies a color to use for the caret. All legal color values can be used (rgb, 
    hex, named-color, etc). For more information on legal values, read our
CSS 
    Colors Tutorial
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
font
Property
Example
Set some font properties with the shorthand declaration:
p.a
 {
font: 15px Arial, sans-serif;
}
p.b
 {
font: italic small-caps bold 12px/30px Georgia, serif;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
font
property is a shorthand property for:
font-style
font-variant
font-weight
font-size
/
line-height
font-family
The font-size and font-family values are required. If one of the other values 
is missing, their default value are used.
Note:
The line-height property sets the space between lines.
Show demo 
Default value:
The default value of the font properties
Inherited:
yes
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.font="italic small-caps bold 12px arial,sans-serif"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font
1.0
4.0
1.0
1.0
3.5
Note:
See individual browser support for each value below.
CSS Syntax
font:
font-style
font-variant
font-weight
font-size/line-height font-family
|caption|icon|menu|message-box|small-caption|status-bar|initial|inherit;
Property Values
Property/Value
Description
Demo
font-style
Specifies the font style. Default value is "normal"
Demo 
font-variant
Specifies the font variant. Default value is "normal"
Demo 
font-weight
Specifies the font weight. Default value is "normal"
Demo 
font-size
/
line-height
Specifies the font size and the line-height. Default value is "normal"
Demo 
font-family
Specifies the font family. Default value depends on the browser
Demo 
caption
Uses the font that are used by captioned controls (like
      buttons, drop-downs, etc.)
icon
Uses the font that are used by icon labels
menu
Uses the fonts that are used by dropdown menus
message-box
Uses the fonts that are used by dialog boxes
small-caption
A smaller version of the caption font
status-bar
Uses the fonts that are used by the status bar
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A demonstration of some of the other font property values.
<p style="font:caption">The browser font used in captioned controls.</p>
<p style="font:icon">The browser font used in icon labels.</p>
<p style="font:menu">The browser font used in dropdown menus.</p>
<p style="font:message-box">The browser font used in dialog boxes.</p>
<p style="font:small-caption">A smaller version of the caption font.</p>
<p style="font:status-bar">The browser font used in the status bar.</p>
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
HTML DOM reference:
font property
CSS
@font-face
Rule
Example
Specify a font named "myFirstFont", and specify the URL where it can be found:
@font-face
{
font-family: myFirstFont;
src: url(sansation_light.woff);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
With the
@font-face
rule, web designers do not have to use one of the "web-safe" fonts 
anymore.
In the
@font-face
rule you must first define a name for the font (e.g. myFirstFont), and then point to the font file.
To use the font for an HTML element, refer to the name of the font (myFirstFont) through the font-family property:
div
 {
font-family: myFirstFont;
}
Browser Support
The
@font-face
rule is supported in Edge, 
Chrome, Firefox, Safari, and Opera.
The numbers in the table specifies the first browser version that fully supports the 
font format.
Font format
TTF/OTF
9.0*
4.0
3.5
3.1
10.0
WOFF
9.0
5.0
3.6
5.1
11.1
WOFF2
14.0
36.0
39.0
10.0
26.0
SVG
Not supported
Not supported
Not supported
3.2
Not supported
EOT
6.0
Not supported
Not supported
Not supported
Not supported
*The font format only works when set to be "installable".
Syntax
@font-face
 {
font-properties
}
Font descriptor
Values
Description
font-family
name
Required. Defines the name of the font.
src
URL
Required. Defines the URL(s) where the font should be downloaded from
font-stretch
normal
condensed
ultra-condensed
extra-condensed
semi-condensed
expanded
semi-expanded
extra-expanded
ultra-expanded
Optional. Defines how the font should be stretched. Default value is "normal"
font-style
normal
italic
oblique
Optional. Defines how the font should be styled. Default value is "normal"
font-weight
normal
bold
100
200
300
400
500
600
700
800
900
Optional. Defines the boldness of the font. Default value is "normal"
unicode-range
unicode-range
Optional. Defines the range of unicode characters the font supports. Default value is "U+0-10FFFF"
More Examples
Example
You must add another @font-face rule containing descriptors for bold text:
@font-face {
font-family: myFirstFont;
src: url(sansation_bold.woff);
font-weight: bold;
}
Try it Yourself 
The file "sansation_bold.woff" is another font file, that contains the bold 
characters for the Sansation font.
Browsers will use this whenever a piece of text with the font-family "myFirstFont" should render as bold.
This way you can have many @font-face rules for the same font.
Related Pages
CSS tutorial:
CSS Web Fonts
CSS
font-kerning
Property
Example
Specify that font kerning is applied:
.ex1 {
font-kerning: normal;
}
Try it Yourself 
Definition and Usage
The
font-kerning
property controls the usage of the kerning information 
stored in a font.
Tip:
Kerning defines how letters are spaced.
Note:
For fonts that do not include kerning data, this 
property will have no visible effect.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.fontKerning="normal"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-kerning
33
79
34
9.1
20.1
CSS Syntax
font-kerning: auto|normal|none;
Property Values
Value
Description
Demo
auto
Default. The browser determines whether font kerning should be applied or 
    not
Demo 
normal
Specifies that font kerning is applied
Demo 
none
Specifies that font kerning is not applied
CSS
font-stretch
Property
Example
Make the text in <div> elements wider:
div
 {
font-family: sans-serif, "Helvetica Neue", "Lucida Grande", Arial;
font-stretch: expanded;
}
Definition and Usage
The
font-stretch
property allows you to make text 
narrower (condensed) or wider (expanded).
Note:
Some fonts provide additional faces; condensed faces 
and expanded faces. For these fonts, you can use the
font-stretch
property 
to select a normal, condensed, or expanded font face.
Note:
This property has no effect if the selected font does 
not offer condensed or expanded faces!
Default value:
normal
Inherited:
yes
Animatable:
yes.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.fontStretch="expanded"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-stretch
48.0
9.0
9.0
11.0
35.0
Syntax
font-stretch: ultra-condensed|extra-condensed|condensed|semi-condensed|normal|semi-expanded|expanded|extra-expanded|ultra-expanded|initial|inherit;
Property Values
Value
Description
ultra-condensed
Makes the text as narrow as it gets
extra-condensed
Makes the text narrower than condensed, but not as narrow as ultra-condensed
condensed
Makes the text narrower than semi-condensed, but not as narrow as extra-condensed
semi-condensed
Makes the text narrower than normal, but not as narrow as condensed
normal
Default value. No font stretching
semi-expanded
Makes the text wider than normal, but not as wide as expanded
expanded
Makes the text wider than semi-expanded, but not as wide as extra-expanded
extra-expanded
Makes the text wider than expanded, but not as wide as ultra-expanded
ultra-expanded
Makes the text as wide as it gets
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
hanging-punctuation
Property
Example
Place a punctuation mark (if any) outside the start edge of the first line in the <p> element:
p
 {
hanging-punctuation: first;
}
Definition and Usage
The
hanging-punctuation
property specifies whether a punctuation mark may be placed outside the line box 
at the start or at the end of a full line of text.
Default value:
none
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.hangingPunctuation="first"
Browser Support
None of the major browsers support the hanging-punctuation property.
Property
hanging-punctuation
Not supported
Not supported
Not supported
10+
Not supported
CSS Syntax
hanging-punctuation: none|first|last|allow-end|force-end|initial|inherit;
Property Values
Value
Description
none
No punctuation mark may be placed outside the line box at the start or at the end of a full line of text
first
Punctuation may hang outside the start edge of the first line
last
Punctuation may hang outside the end edge of the last line
allow-end
Punctuation may hang outside the end edge of all lines if the punctuation does not otherwise fit prior to justification
force-end
Punctuation may hang outside the end edge of all lines. If justification is enabled on this line, then it will force the punctuation to hang
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
grid-template-areas
Property
Example
Make the named item "myArea" span two columns in a five columns grid layout:
.item1 {
grid-area: 
  myArea;
}
.grid-container {
display: grid;
grid-template-areas: 
  "myArea myArea . . .";
}
Try it Yourself 
Definition and Usage
The
grid-template-areas
property specifies 
areas within the grid layout.
You can name grid items by using the
grid-area
property, and then reference to the name in the
grid-template-areas
property.
Each area is defined by apostrophes. Use a period sign to refer to a grid item with no name.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridTemplateAreas=". . . myArea myArea"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-template-areas
57
16
52
10
44
CSS Syntax
grid-template-areas: none|
itemnames
;
Property Values
Value
Description
Demo
none
Default value. No named grid areas
Demo 
itemnames
A sequence that specifies how each columns and row should display
Demo 
More Examples
Example
Specify two rows, where "item1" spans the first two columns in the first two 
rows (in a five columns grid layout):
.item1 {
grid-area: myArea;
}
.grid-container {
display: grid;
grid-template-areas:
'myArea myArea . . .'
'myArea myArea . . .';
}
Try it Yourself 
Example
Name all items, and make a ready-to-use webpage template:
.item1 {grid-area: header; }
.item2 {grid-area: 
  menu; }
.item3 {grid-area: 
  main; }
.item4 {grid-area: 
  right; }
.item5 {grid-area: 
  footer; }
.grid-container {
display: grid;
grid-template-areas:
'header header header header header header'
'menu main main main right right'
'menu footer footer 
  footer footer footer';
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Item
CSS Reference: The
grid-area
property
CSS Reference: The
grid-template
property
CSS
font-variant-caps
Property
Example
Set a paragraph to a small-caps font:
p.normal {font-variant-caps: normal;}
p.small {font-variant-caps: 
    small-caps;}
p.allsmall {font-variant-caps: all-small-caps;}
p.petite 
    {font-variant-caps: petite-caps;}
p.allpetite {font-variant-caps: 
    all-petite-caps;}
p.unicase {font-variant-caps: unicase;}
p.titling 
    {font-variant-caps: titling-caps;}
Try it Yourself 
Definition and Usage
The
font-variant-caps
property controls the usage of alternate glyphs for capital letters.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.fontVariantCaps="small-caps"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-variant-caps
52.0
79.0
34.0
9.1
39.0
CSS Syntax
font-variant-caps: normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps|initial|inherit|unset;
Property Values
Value
Description
Demo
normal
Deactivates the use of alternate glyphs
Demo 
small-caps
Displays small capitals
Demo 
all-small-caps
Displays small capitals for both upper and lowercase letters
Demo 
petite-caps
Displays petite capitals
Demo 
all-petite-caps
Displays petite capitals for both upper and lowercase letters
Demo 
unicase
Displays a mix of small capitals for uppercase letters with normal 
    lowercase letters
Demo 
titling-caps
Displays titling capitals
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
unset
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
HTML DOM reference:
fontVariant property
CSS
grid-row-start
Property
Example
Make "item1" start on row 2:
.item1 {
grid-row-start: 2;
}
Try it Yourself 
Definition and Usage
The
grid-row-start
property defines  
on which row-line the item will start.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridRowStart="3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-row-start
57
16
52
10
44
CSS Syntax
grid-row-start: auto|
row-line
;
Property Values
Value
Description
Demo
auto
Default value. The item will be placed by following the flow.
Demo 
row-line
Specifies on which row to start the display of the item.
Demo 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS reference: The
grid-column
Property
CSS reference: The
grid-column-end
Property
CSS reference: The
grid-row
Property
CSS reference: The
grid-row-end
Property
CSS
inline-size
Property
Example
Set the size of a <div> element in the inline direction:
div {
inline-size: 200px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inline-size
property specifies the size of an element in the inline direction.
Note:
The related CSS property
writing-mode
defines inline direction, and this affects the result of the
inline-size
property. For pages in English, inline direction is left to right and block direction is downward.
The CSS
inline-size
and
block-size
properties are very similar to CSS properties
width
and
height
, but the
inline-size
and
block-size
properties are dependent on inline and block directions.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.inlineSize="250px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inline-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
inline-size: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inline-size value.
Demo 
length
Specifies the inline-size in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies the inline-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is changed from sideways to downwards, and this affect how the
inlie-size
property work:
div {
inline-size: 250px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Height and Width
CSS tutorial:
CSS Box model
CSS reference:
height property
CSS reference:
width property
CSS reference:
writing-mode property
CSS
image-rendering
Property
Example
Show the different algorithms that can be used for image scaling:
.image {
height: 100px;
width: 100px;
image-rendering: auto;
}
.crisp-edges {
image-rendering: -webkit-optimize-contrast;
image-rendering: crisp-edges;
}
.pixelated {
image-rendering: pixelated;
}
.smooth {
image-rendering: smooth;
}
.high-quality {
image-rendering: high-quality;
}
Try it Yourself 
Definition and Usage
The
image-rendering
property specifies the 
type of algorithm to be used for image scaling.
Note:
This property has no effect on images that are not 
scaled.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.imageRendering="pixelated"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
image-rendering
41.0
79.0
65.0
10.0
28.0
Chrome, Edge, and Opera use an alternate name for the
crisp-edges
value:
-webkit-optimize-contrast
.
CSS Syntax
image-rendering: auto|smooth|high-quality|crisp-edges|pixelated|initial|inherit;
Property Values
Value
Description
Demo
auto
Let the browser choose the scaling algorithm. This is default
Demo 
smooth
Use an algorithm that smooth out the colors in the image
Demo 
high-quality
Same as smooth, but with a preference for higher-quality scaling
Demo 
crisp-edges
Use an algorithm that will preserve the contrast and edges in the image
Demo 
pixelated
If the image is scaled up, the nearest-neighbor algorithm is used, 
    so the image will appear as being composed of large pixels. If the image is 
    scaled down, 
    it will be the same as auto
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
margin-block
Property
Example
Set the margin for both sides in the block direction:
div {
margin-block: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-block
property specifies the margin at the start and end in the block direction, and is a shorthand property for the following properties:
margin-block-start
margin-block-end
Values for the
margin-block
property can be set in different ways:
If the margin-block property has two values:
margin-block: 10px 50px;
margin at start is 10px
margin at end is 50px
If the margin-block property has one value:
margin-block: 10px;
margin at start and end is 10px
The CSS
margin-block
and
margin-inline
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-block
and
margin-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
margin-block
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginBlock="50px 20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-block
87.0
87.0
66.0
14.1
73.0
CSS Syntax
margin-block: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin-block value.
Demo 
length
Specifies margin-block in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies margin-block in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the start of the element in the block direction is moved from top to right side, and the end of the element is moved from bottom to left side of element. A change in
writing-mode
also changes the effect from
margin-block
:
#parentDiv {
writing-mode: vertical-rl;
}
#myDiv {
margin-block: 10px 50px;
}
Try it Yourself 
Related Pages
CSS margin-block-end property:
CSS Margin-block-end property
CSS margin-block-start property:
CSS Margin-block-start property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-inline
Property
Example
Set the margin on both sides in the inline direction:
div {
margin-inline: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-inline
property specifies the margin at the start and end in the inline direction, and is a shorthand property for the following properties:
margin-inline-start
margin-inline-end
Values for the
margin-inline
property can be set in different ways:
If the margin-inline property has two values:
margin-inline: 10px 50px;
margin at start is 10px
margin at end is 50px
If the margin-inline property has one value:
margin-inline: 10px;
margin at start and end is 10px
The CSS
margin-inline
and
margin-block
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-inline
and
margin-block
properties are dependent on block and inline directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is and the result of the
margin-inline
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginInline="50px 10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-inline
87.0
87.0
66.0
14.1
73.0
CSS Syntax
margin-inline: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin-inline value.
Demo 
length
Specifies margin-inline in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies margin-inline in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the inline direction is downwards. The result is that the start of the element is moved from left side to top, and the end of the element is moved from right side to bottom:
div {
margin-inline: 10px 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to 'rtl', the inline direction is right to left. The result is that the start of the element is moved from left side to right side, and the end of the element is moved from right side to left side:
div {
margin-inline: 10px 50px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS margin-inline-end property:
CSS Margin-inline-end property
CSS margin-inline-start property:
CSS Margin-inline-start property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-block-start
Property
Example
Set the margin at the start in the block direction:
div {
margin-block-start: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-block-start
property specifies the margin at the start in the block direction.
The CSS
margin-block
and
margin-inline
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-block
and
margin-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
margin-block-start
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginBlockStart="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-block-start
87.0
87.0
41.0
12.1
73.0
CSS Syntax
margin-block-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the start of the element is moved from top to right side. So, a change in
writing-mode
also changes the effect from
margin-block-start
:
#parentDiv {
writing-mode: vertical-rl;
}
#myDiv {
margin-block-start: 50px;
}
Try it Yourself 
Related Pages
CSS margin-block property:
CSS Margin-block property
CSS margin-block-end property:
CSS Margin-block-end property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-block-end
Property
Example
Set the margin at the end in the block direction:
div {
margin-block-end: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-block-end
property specifies the margin at the end in the block direction.
The CSS
margin-block
and
margin-inline
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-block
and
margin-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
margin-block-end
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginBlockEnd="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-block-end
87.0
87.0
41.0
12.1
73.0
CSS Syntax
margin-block-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the end of the element is moved from bottom to left side. So, a change in
writing-mode
also changes the effect from
margin-block-end
:
#parentDiv {
writing-mode: vertical-rl;
}
#myDiv {
margin-block-end: 50px;
}
Try it Yourself 
Related Pages
CSS margin-block property:
CSS Margin-block property
CSS margin-block-start property:
CSS Margin-block-start property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-inline-start
Property
Example
Set the margin at the start in the inline direction:
div {
margin-inline-start: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-inline-start
property specifies the margin at the start in the inline direction.
The CSS
margin-inline
and
margin-block
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-inline
and
margin-block
properties are dependent on block and inline directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is and the result of the
margin-inline-start
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginInlineStart="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-inline-start
69.0
79.0
68.0
14.1
56.0
CSS Syntax
margin-inline-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin-inline-start value.
Demo 
length
Specifies margin-inline-start in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies margin-inline-start in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the inline direction is downwards. The result is that the start of the element is moved from left side to top:
div {
margin-inline-start: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to 'rtl', the inline direction is right to left. The result is that the start of the element is moved from left side to left right:
div {
margin-inline-start: 50px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS margin-inline-end property:
CSS Margin-inline-end property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-left
Property
Example
Set the left margin for a <p> element to 30 pixels:
p.ex1 {
margin-left: 30px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-left
property sets the left margin of an element.
Note:
Negative values are allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.marginLeft="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-left
1.0
6.0
1.0
1.0
3.5
CSS Syntax
margin-left:
length
|auto|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed left margin in px, pt, cm, etc. Default value is 0px. 
    Negative values are allowed.
Read about length units
Demo 
%
Specifies a left margin in percent of the width of the containing element
Demo 
auto
The browser calculates a left margin
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the left margin for a <p> element to 10% of the width of the 
container:
p.ex1 {
margin-left: 10%;
}
Try it Yourself 
Example
Set the left margin for a <p> element to 2 em:
p.ex1 {
margin-left: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
HTML DOM reference:
marginLeft property
CSS
marker-start
Property
Example
Point to a marker (arrow) that will be drawn on the first vertex 
of an element's path:
#test {
marker-start: url(#arrow);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
marker-start
property points to a marker that 
will be drawn on the first vertex of an element's path.
The shape of the marker is defined with an SVG <marker> element, and is referenced with a url() value.
The value of the CSS
marker-start
property 
overrides the value of the marker-start attribute in 
the SVG.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
marker-start
80
80
72
13.1
67
CSS Syntax
marker-start: none|
url
|initial|inherit;
Property Values
Value
Description
none
Default. No marker will be drawn at the path
url
An url reference to a marker defined by an SVG <marker> element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Point to a marker (circle) that will be drawn on the first vertex 
of an element's path:
#test {
marker-start: url(#circle);
}
Try it Yourself 
Related Pages
CSS reference:
marker property
CSS reference:
marker-mid property
CSS reference:
marker-end property
SVG tutorial:
SVG Marker
CSS
border-end-start-radius
Property
Example
Add rounded corners to the block-end and the inline-start sides of some 
elements:
#example1 {
background-color: lightblue;
border-end-start-radius: 50px;
}
#example2 {
background-color: lightblue;
border-end-start-radius: 50px 20px;
}
#example3 {
background-color: lightblue;
border-end-start-radius: 50%;
direction: rtl;
}
#example4 {
background-color: lightblue;
border-end-start-radius: 50%;
writing-mode: vertical-rl;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-end-start-radius
property defines the radius of the corner 
between the block-end and the inline-start sides of the element.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define block and inline directions. That is why these properties also affects the result of the
border-end-start-radius
property. For pages in English, inline direction is left to right and block direction is downward.
If the
border-end-start-radius
property has two values, 
the corner will be an ellipse:
border-end-start-radius: 50px 100px;
If the
border-end-start-radius
property has one value, 
the corner will be a circle:
border-end-start-radius: 50px;
The CSS
border-end-start-radius
property is very similar to CSS properties
border-bottom-left-radius
,
border-bottom-right-radius
,
border-top-left-radius
and
border-top-right-radius
, but the
border-end-start-radius
property is dependent on block and inline directions.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderEndStartRadius="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-end-start-radius
89.0
89.0
66.0
15.0
75.0
CSS Syntax
border-end-start-radius: 0|
length
|initial|inherit;
Property Values
Value
Description
Demo
0
Default value.
Demo 
length
Defines the shape of the corner at block-end and inline-start.
Read about length units
Demo 
%
Defines the shape of the corner at block-end and inline-start in percentange of length of element on corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With direction property
The position of a rounded corner at the end in the block direction, and at the start in the inline direction, is affected by the
direction
property:
#example1 {
border: 2px solid red;
direction: rtl;
border-end-start-radius: 25px;
}
Try it Yourself 
With writing-mode property
The position of a rounded corner at the end in the block direction, and at the start in the inline direction, is affected by the
writing-mode
property:
#example2 {
border: 2px solid red;
writing-mode: vertical-rl;
border-end-start-radius: 25px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
CSS border-bottom-left-radius property:
CSS Border-bottom-left-radius property
CSS border-bottom-right-radius property:
CSS Border-bottom-right-radius property
CSS border-top-left-radius property:
CSS Border-top-left-radius property
CSS border-top-right-radius property:
CSS Border-top-right-radius property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-image-repeat
Property
Example
Specify how to repeat the border image:
#borderimg
 {
border-image-source: url(border.png);
border-image-repeat: repeat;
}
Try it Yourself 
Definition and Usage
The
border-image-repeat
property specifies whether the border image should be repeated, rounded, 
spaced or stretched.
Tip:
Also look at the
border-image
property 
(a shorthand property for setting all the border-image-* properties).
Show demo 
Default value:
stretch
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.borderImageRepeat="round"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-image-repeat
15.0
11.0
15.0
6.0
15.0
CSS Syntax
border-image-repeat: stretch|repeat|round|space|initial|inherit;
Note:
This property specifies how the images for the sides and the 
middle part of the border image are scaled and tiled. So, you can specify two 
values here. If the second value is omitted, it is assumed to be the same as the first.
Property Values
Value
Description
Play it
stretch
Default value. The image is stretched to fill the area
Demo 
repeat
The image is tiled (repeated) to fill the area
Demo 
round
The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so it fits
Demo 
space
The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border Images
CSS Reference:
border-image property
CSS Reference:
border-image-outset property
CSS Reference:
border-image-slice property
CSS Reference:
border-image-source property
CSS Reference:
border-image-width property
HTML DOM reference:
borderImageRepeat property
CSS
border-inline-start-width
Property
Example
Set a width for the border at the start in the inline direction:
div {
border-inline-start-style: solid;
border-inline-start-width: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-inline-start-width
property sets the width of an element's border at the start in the inline direction.
The CSS
border-inline-start-width
property is very similar to CSS properties
border-bottom-width
,
border-left-width
,
border-right-width
and
border-top-width
, but the
border-inline-start-width
property is dependent on inline direction.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
border-inline-start-width
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderInlineStartWidth="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-inline-start-width
69.0
79.0
41.0
12.1
56.0
CSS Syntax
border-inline-start-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium border. This is default
Demo 
thin
Specifies a thin border
Demo 
thick
Specifies a thick border
Demo 
length
Allows you to define the thickness of the border.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
The position of the border at the start in the inline direction is affected by the
writing-mode
property:
div {
border-inline-start-style: solid;
writing-mode: vertical-rl;
border-inline-start-width: 5px;
}
Try it Yourself 
With direction property
The position of the borders at the start and end in the inline direction is affected by the
direction
property:
div {
direction: rtl;
border-inline-start-width: 10px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS border property:
CSS Border property
CSS border-inline property:
CSS Border-inline property
CSS border-inline-end-width property:
CSS Border-inline-end-width property
CSS border-inline-start-style property:
CSS Border-inline-start-style property
CSS border-bottom-width property:
CSS Border-bottom-width property
CSS border-left-width property:
CSS Border-left-width property
CSS border-right-width property:
CSS Border-right-width property
CSS border-top-width property:
CSS Border-top-width property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-start-end-radius
Property
Example
Add rounded corners to the block-start and the inline-end sides of some 
elements:
#example1 {
background-color: lightblue;
border-start-end-radius: 50px;
}
#example2 {
background-color: lightblue;
border-start-end-radius: 50px 20px;
}
#example3 {
background-color: lightblue;
border-start-end-radius: 50%;
direction: rtl;
}
#example4 {
background-color: lightblue;
border-start-end-radius: 50%;
writing-mode: vertical-rl;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-start-end-radius
property defines 
the radius of the corner between the block-start and the inline-end sides of the 
element.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define block and inline directions. That is why these properties also affects the result of the
border-start-end-radius
property. For pages in English, inline direction is left to right and block direction is downward.
If the
border-start-end-radius
property has two values, 
the corner will be an ellipse:
border-start-end-radius: 50px 100px;
If the
border-start-end-radius
property has 
one value, the corner will be a circle:
border-start-end-radius: 50px;
The CSS
border-start-end-radius
property is very similar to CSS properties
border-bottom-left-radius
,
border-bottom-right-radius
,
border-top-left-radius
and
border-top-right-radius
, but the
border-start-end-radius
property is dependent on block and inline directions.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderStartEndRadius="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-start-end-radius
89.0
89.0
66.0
15.0
75.0
CSS Syntax
border-start-end-radius: 0|
length
|initial|inherit;
Property Values
Value
Description
Demo
0
Default value.
Demo 
length
Defines the shape of the corner at block-start and inline-end.
Read about length units
Demo 
%
Defines the shape of the corner at block-start and inline-end in percentange of length of element on corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With direction property
The position of a rounded corner at the start in the block direction, and at the end in the inline direction, is affected by the
direction
property:
#example1 {
border: 2px solid red;
direction: rtl;
border-start-end-radius: 25px;
}
Try it Yourself 
With writing-mode property
The position of a rounded corner at the start in the block direction, and at the end in the inline direction, is affected by the
writing-mode
property:
#example2 {
border: 2px solid red;
writing-mode: vertical-rl;
border-start-end-radius: 25px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
CSS border-bottom-left-radius property:
CSS Border-bottom-left-radius property
CSS border-bottom-right-radius property:
CSS Border-bottom-right-radius property
CSS border-top-left-radius property:
CSS Border-top-left-radius property
CSS border-top-right-radius property:
CSS Border-top-right-radius property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
border-right
Property
Example
Set the style of the right border for different elements:
h1 {
border-right: 5px solid red;
}
h2 {
border-right: 4px dotted blue;
}
div {
border-right: double;
}
Try it Yourself 
Definition and Usage
The
border-right
property is a shorthand 
property for (in the following order):
border-right-width
border-right-style
(required)
border-right-color
If border-right-color is omitted, the color applied will be the color of the 
text.
Show demo 
Default value:
medium none
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderRight="5px dotted blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-right
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-right:
border-width
border-style
border-color
|initial|inherit;
Property Values
Value
Description
Demo
border-right-width
Required. Specifies the width of the right border. Default value is 
    "medium"
Demo 
border-right-style
Required. Specifies the style of the right border. Default value is 
    "none"
Demo 
border-right-color
Optional. Specifies the color of the right border. Default value is the 
    color of the text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Border
HTML DOM reference:
borderRight property
CSS
border-top-color
Property
Example
Set a color for the top border:
div {border-top-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-top-color
property sets the color of an element's top border.
Note:
Always declare the
border-style
or the
border-top-style
property before the
border-top-color
property. An element must have a border before you can change the color.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.borderTopColor="blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-top-color
1.0
4.0
1.0
1.0
3.5
CSS Syntax
border-top-color:
color
|transparent|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the top border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the 
    current color of the element
Demo 
transparent
Specifies that the border color should be transparent
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the top border with a HEX value:
div {border-top-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the top border with an RGB value:
div {border-top-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the top border with an RGBA value:
div {border-top-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the top border with a HSL value:
div {border-top-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the top border with a HSLA value:
div {border-top-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Example
Set a transparent top border:
div {border-top-color: transparent;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top property
HTML DOM reference:
borderTopColor property
CSS
counter-set
Property
Example
Create a counter ("my-counter"), set it to 5, and increase it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-counter" to 5 */
counter-set: my-counter 5;
}
h2::before {
/* Increment "my-counter" by 1 */
counter-increment: 
    my-counter;
content: "Section " 
    counter(my-counter) ". ";
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
counter-set
property creates and sets a CSS counter 
to a specific value.
The
counter-set
property is usually used together with the
counter-increment
property and the
content
property.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.counterSet="4"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
counter-set
85
85
68
17.2
71
CSS Syntax
counter-set: none|
counter-name number
|initial|inherit;
Property Values
Value
Description
none
Default value. No counter set is to be performed
counter-name number
The name of the counter to set and the value to set the counter to on each occurrence of the selector. The default
number
value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create a counter ("my-counter"), set it to 5, and decrease it by one for each 
occurrence of the <h2> selector:
body {
/* Set "my-counter" to 5 */
counter-set: my-counter 5;
}
h2::before {
/* Decrement "my-counter" by 1 */
counter-increment: 
    my-counter -1;
content: "Section " 
    counter(my-counter) ". ";
}
Try it Yourself 
Example
Numbering sections and sub-sections with "Section 10:", "10.1", "10.2", etc.:
body
 {
/* Set "section" to 9 */
counter-set: section 9;
}
h1
 {
/* Set "subsection" to 0 */
counter-set: subsection 0;
}
h1::before
 {
/* Increment "section" by 1 */
counter-increment: section;
content: "Section " counter(section) ": ";
}
h2::before {
/* Increment "subsection" by 1 */
counter-increment: subsection;
content: counter(section) "." counter(subsection) " ";
}
Try it Yourself 
Example
Create a counter, set it to 9, and increase it by one (using Roman numerals) for each 
occurrence of the <h2> selector:
body {
/* Set "my-counter" to 9 */
counter-set: my-counter 9;
}
h2::before {
/* Increment "my-counter" by 1 */
counter-increment: 
    my-counter;
content: counter(my-counter, 
    upper-roman) ". ";
}
Try it Yourself 
Related Pages
CSS reference:
::before pseudo element
CSS reference:
::after pseudo element
CSS reference:
content property
CSS reference:
counter-increment property
CSS functions:
counter() function
CSS
inset-inline
Property
Example
Set the distance to the parent element from a positioned <div> element in the inline direction:
div {
inset-inline: 10px 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-inline
property sets the distance between an element and the parent element in the inline direction.
The
inset-inline
property is a shorthand property for the following properties:
inset-inline-start
inset-inline-end
Values for the
inset-inline
property can be set in different ways:
If the inset-inline property has two values:
inset-inline: 10px 50px;
distance at start is 10px
distance at end is 50px
If the inset-inline property has one value:
inset-inline: 10px;
distance at start and end is 10px
The CSS
inset-inline
and
inset-block
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and inline directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of a line is and the result of the
inset-inline
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetInline="100px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-inline
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-inline: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset-inline distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top, and the end of the element is moved from right side to bottom:
div {
inset-inline: 15px 30px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to right side, and the end of the element is moved from right side to left side:
div {
inset-inline: 15px 30px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS direction property:
CSS Direction property
CSS writing-mode property:
CSS Writing-mode property
CSS
justify-content
Property
Example
Align the flex items at the center of the container:
div
 {
display: flex;
justify-content: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
justify-content
property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
Tip:
Use the
align-items
property to align the items vertically.
Note:
The
justify-content
property can also be used on a grid container to align grid items in the inline direction. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
flex-start
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.justifyContent="space-between"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
justify-content
29
11
28
9
17
CSS Syntax
justify-content: flex-start|flex-end|center|space-between|space-around|space-evenly|initial|inherit;
Property Values
Value
Description
Play it
flex-start
Default value. Items are positioned at the beginning of the container
Demo 
flex-end
Items are positioned at the end of the container
Demo 
center
Items are positioned in the center of the container
Demo 
space-between
Items will have space between them
Demo 
space-around
Items will have space before, between, and after them
Demo 
space-evenly
Items will have equal space around them
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Align the flex items at the beginning of the container (this is default):
div
 {
display: flex;
justify-content: flex-start;
}
Try it Yourself 
Example
Align the flex items at the end of the container:
div
 {
display: flex;
justify-content: flex-end;
}
Try it Yourself 
Example
Display the flex items with space between the lines:
div
 {
display: flex;
justify-content: space-between;
}
Try it Yourself 
Example
Display the flex items with space before, between, and after the lines:
div
 {
display: flex;
justify-content: space-around;
}
Try it Yourself 
Example with grid
Display the grid items to the end:
#container
 {
display: grid;
justify-content: end;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS flexbox
CSS tutorial:
CSS grid
CSS Reference:
align-content property
CSS Reference:
align-items property
CSS Reference:
align-self property
HTML DOM reference:
justifyContent property
CSS
isolation
Property
Example
Create a new stacking context for the element with id="e":
#e {
isolation: isolate;
}
Try it Yourself 
Definition and Usage
The
isolation
property defines whether an element 
must create a new stacking content.
Note:
The
isolation
property is 
helpful when used with
background-blend-mode
or mix-blend-mode.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.isolation="isolate"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
isolation
41.0
79.0
36.0
Yes
30.0
CSS Syntax
isolation: auto|isolate|initial|inherit;
Property Values
Value
Description
auto
Default. A new stacking context is created only if one of the properties applied to the element requires it
isolate
A new stacking context must be created
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
The isolation property
CSS
mask-mode
Property
Example
Let the mask layer image be treated as a luminance mask:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 70%;
mask-repeat: no-repeat;
mask-mode: luminance;
}
Try it Yourself 
Definition and Usage
The
mask-mode
property specifies whether the 
mask layer image 
should be treated as a luminance mask or as an alpha mask.
Default value:
match-source
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskMode="alpha"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-mode
120
120
53
15.4
106
CSS Syntax
mask-mode: 
  match-source|luminance|alpha|initial|inherit;
Property Values
Value
Description
match-source
If the mask-image property is an image (an image URL or a gradient), set mask-mode to alpha. 
    If the mask-image property is an SVG <mask> element, 
    use the <mask> element's mask-type property. This is default.
luminance
Use the luminance values of the mask image as the mask values
alpha
Use the alpha values of the mask image as the mask values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
mask-repeat
Property
Example
Using
mask-repeat: no-repeat;
and
mask-repeat: 
repeat;
:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 50%;
mask-repeat: no-repeat;
}
.mask2 {
-webkit-mask-image: 
    url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 50%;
mask-repeat: repeat;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mask-repeat
property sets if/how a mask 
image will be repeated.
By default, a mask image is repeated both vertically and horizontally.
Default value:
repeat
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskRepeat="no-repeat"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-repeat
120
120
53
15.4
106
CSS Syntax
mask-repeat: 
  repeat|repeat-x|repeat-y|space|round|no-repeat|initial|inherit;
Property Values
Value
Description
repeat
The mask image is repeated both vertically and
      horizontally. The last image will be clipped if it does not fit. This is default
repeat-x
The mask image is repeated only horizontally
repeat-y
The mask image is repeated only vertically
space
The mask image is repeated as much as possible without clipping. 
    The first and last image is pinned to either side of the element, and 
    whitespace is distributed evenly between the images
round
The mask image is repeated and squished or stretched to fill the space 
    (no gaps)
no-repeat
The mask image is not repeated. The image will only be shown 
    once
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Using
mask-repeat: round;
and
mask-repeat: 
space;
:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 30%;
mask-repeat: 
    round;
}
.mask2 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 30%;
mask-repeat: 
    space;
}
Try it Yourself 
Example
Using
mask-repeat: repeat-x;
and
mask-repeat: 
repeat-y;
:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 30%;
mask-repeat: 
    repeat-x;
}
.mask2 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 30%;
mask-repeat: 
    repeat-y;
}
Try it Yourself 
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
mask-size
Property
Example
Set the size (in percent) for the mask layer image:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 70%;
mask-repeat: no-repeat;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mask-size
property specifies the size of 
the mask layer image.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskSize="100px 200px"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-size
120
120
53
15.4
106
CSS Syntax
mask-size: auto|
size
|contain|cover|initial|inherit;
Property Values
Value
Description
auto
This is default
size
Specifies the size of the mask image in px, em, etc, or in %
contain
Scales the mask image in a way that both its width and its height fit 
    inside the container
cover
Scales the mask image in a way that both its width and its height cover 
    the container
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the size (in pixels) for the mask layer image:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 200px 200px;
mask-repeat: no-repeat;
}
Try it Yourself 
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS tutorial:
CSS Masking
CSS
mask-type
Property
Example
Look at two SVG <mask> elements; one with mask-type alpha and one with 
mask-type luminance:
<svg width="200" height="120" xmlns="http://www.w3.org/2000/svg">
<defs>
<mask id="mask1" maskContentUnits="objectBoundingBox" 
    style="mask-type:alpha">
<rect width="10" 
    height="10" fill="red" fill-opacity="0.7" />
</mask>
<mask id="mask2" maskContentUnits="objectBoundingBox" style="mask-type:luminance">
<rect width="10" height="10" fill="red" fill-opacity="0.7" />
</mask>
</defs>
</svg>
Try it Yourself 
Definition and Usage
The
mask-type
property specifies whether an SVG <mask> element 
is treated as a luminance mask or as an alpha mask.
This applies to the SVG <mask> element itself.
Default value:
luminance
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskType="alpha"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-type
24
79
35
7
15
CSS Syntax
mask-type: luminance|alpha|initial|inherit;
Property Values
Value
Description
luminance
Treat the mask image as a luminance mask. This is default.
alpha
Treat the mask image as an alpha mask
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
min-width
Property
Example
Set the minimum width of a <span> element to 500 pixels:
span.ex1
 {
min-width: 500px;
}
Try it Yourself 
Definition and Usage
The
min-width
property defines the minimum width of an element.
If the content is smaller than the minimum width, the minimum width will be 
applied.
If the content is larger than the minimum width, the
min-width
property 
has no effect.
Note:
This prevents the value of the
width
property from becoming smaller than
min-width
.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.minWidth="400px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
min-width
1.0
7.0
1.0
2.0.2
4.0
CSS Syntax
min-width:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Default value is 0. Defines the minimum width in px, cm, etc.
Read about length units
Demo 
%
Defines the minimum width in percent of the containing block
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Height and Width
CSS reference:
max-width property
HTML DOM reference:
minWidth property
CSS
min-height
Property
Example
Set the minimum height of a <p> element to 200 pixels:
p.ex1
 {
min-height: 200px;
}
Try it Yourself 
Definition and Usage
The
min-height
property defines the minimum height of an element.
If the content is smaller than the minimum height, the minimum height will be 
applied.
If the content is larger than the minimum height, the
min-height
property 
has no effect.
Note:
This prevents the value of the
height
property from becoming smaller than
min-height
.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.minHeight="400px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
min-height
1.0
7.0
3.0
2.0.2
4.0
CSS Syntax
min-height:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Default value is 0. Defines the minimum height in px, cm, etc.
Read about length units
Demo 
%
Defines the minimum height in percent of the containing block
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Height and Width
CSS reference:
max-height property
HTML DOM reference:
minHeight property
CSS
@media
Rule
Example
Change the background color of the <body> element to 
"lightblue" when the browser window is 600px wide or less:
@media only screen and (max-width: 600px) {
body {
background-color: lightblue;
}
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
@media
rule is used in media queries to apply different styles for different media types/devices.
Media queries can be used to check many things, such as:
width and height of the viewport
width and height of the device
orientation (is the tablet/phone in landscape or portrait mode?)
resolution
Using media queries are a popular technique for delivering a tailored style 
sheet (responsive web design) to desktops, laptops, tablets, and mobile phones.
You can also use media queries to specify that certain styles are only for printed documents or for screen readers (mediatype: print, screen, or speech).
In addition to media types, there are also media features. Media features 
provide more specific details to media queries, by allowing to test for a 
specific feature of the user agent or display device. For example, you 
can apply styles to only those screens that are greater, or smaller, than a 
certain width.
Browser Support
The numbers in the table specifies the first browser version that fully supports the @media rule.
Property
@media
21
9
3.5
4.0
9
CSS Syntax
@media not|only
mediatype
and
(mediafeature
and|or|not
mediafeature)
{
CSS-Code;
}
You can also have different
stylesheets
for different media, like 
this:
<link rel="stylesheet" media="screen and (min-width: 
  900px)" href="widescreen.css">
<link rel="stylesheet" media="screen and (max-width: 
  600px)" href="smallscreen.css">
....
More Examples
Example
Hide an element when the browser's width is 600px wide or less:
@media screen and (max-width: 600px) {
div.example {
display: 
  none;
}
}
Try it Yourself 
Example
Use mediaqueries to set the background-color to lavender if the viewport is 
800 pixels wide or wider, to lightgreen if the viewport is between 400 and 799 pixels wide. 
If the viewport is smaller than 400 pixels, the background-color is lightblue:
body {
background-color: lightblue;
}
@media screen and (min-width: 
  400px) {
body {
background-color: lightgreen;
}
}
@media 
  screen and (min-width: 800px) {
body {
background-color: lavender;
}
}
Try it Yourself 
Example
Create a responsive navigation menu (displayed horizontally on large screens and vertically on small screens):
@media screen and (max-width: 600px) {
.topnav a {
float: none;
width: 100%;
}
}
Try it Yourself 
Example
Use media queries to create a responsive column layout:
/* On screens that are 992px wide or less, go from four columns to two 
    columns */
@media screen and (max-width: 992px) {
.column {
width: 50%;
}
}
/* On screens that are 600px wide or less, make the columns stack 
    on top of each other instead of next to each other */
@media screen and (max-width: 
    600px) {
.column {
width: 100%;
}
}
Try it Yourself 
Example
Use media queries to create a responsive website:
Try it Yourself 
Example
Media queries can also be used to change layout of a page depending on the 
orientation of the browser. You can have a set of CSS properties that will only 
apply when the browser window is wider than its height, a so called "Landscape" 
orientation.
Use a lightblue background color if the orientation is in landscape mode:
@media only screen and (orientation: 
landscape) {
body {
background-color: lightblue;
}
}
Try it Yourself 
Example
Use mediaqueries to set the text color to green when the document is 
displayed on the screen, and to black when it is printed:
@media screen {
body {
color: green;
}
}
@media print {
body {
color: black;
}
}
Try it Yourself 
Example
Comma separated list
: add an additional media query to an already existing one, using a comma (this will behave like an OR operator):
/* When the width is between 600px and 900px OR above 1100px - change the 
    appearance of <div> */
@media screen and (max-width: 900px) and 
    (min-width: 600px), (min-width: 1100px) {
div.example {
font-size: 50px;
padding: 50px;
border: 8px solid black;
background: yellow;
}
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Media Queries
CSS Tutorial:
CSS Media Queries Examples
RWD Tutorial:
Responsive Web Design with Media Queries
JavaScript Tutorial:
The window.matchMedia() method
CSS
offset-distance
Property
Example
The <img> element is placed on its defined path, at a distance 33% from the start of the path.
img {
offset-path: path('M 50 80 C 150 -20 250 180 350 80');
offset-distance: 33%;
}
Try it Yourself 
Definition and Usage
The
offset-distance
property sets the distance of an element from the start of the path defined by the
offset-path
property.
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.offsetDistance="200px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset-distance
55
79
72
16
42
CSS Syntax
offset-distance: auto|
value
|initial|inherit;
Property Values
Value
Description
0
The element is placed at the start of its path. This is default.
length
Specifies the elements distance from the start of its path in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the distance in percent relative to the lenth of the path.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset property:
CSS Offset property
CSS offset-anchor property:
CSS Offset-anchor property
CSS offset-path property:
CSS Offset-path property
CSS offset-rotate property:
CSS Offset-rotate property
CSS
object-fit
Property
Example
Cut off the sides of an image, preserving the aspect ratio, and fill in the space:
img.a {
width: 200px;
height: 
    400px;
object-fit: cover;
}
Try it Yourself 
Definition and Usage
The
object-fit
property is used to specify how an <img> or <video> should 
be resized to fit its container.
This property tells the content to fill the container in a variety of ways; such as 
"preserve that aspect ratio" or "stretch up and take up as much space as 
possible".
Show demo 
Default value:
see individual properties
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.objectFit="cover"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
object-fit
31.0
16.0
36.0
7.1
19.0
CSS Syntax
object-fit: fill|contain|cover|scale-down|none|initial|inherit;
Property Values
Value
Description
Demo
fill
This is default. The replaced content is sized to fill the element's 
    content box. If necessary, the object will be stretched or squished to fit
Demo 
contain
The replaced content is scaled to maintain its aspect ratio while fitting within the element's content box
Demo 
cover
The replaced content is sized to maintain its aspect ratio while filling the element's entire content box. The object will be clipped to fit
Demo 
none
The replaced content is not resized
Demo 
scale-down
The content is sized as if none or contain were specified (would result in a smaller concrete object size)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS object-fit
CSS reference:
CSS object-position
HTML DOM reference:
The objectFit property
CSS
mix-blend-mode
Property
Example
A container with a red background and an image that blends with the red container 
(darken):
.container {
background-color: red;
}
.container img {
mix-blend-mode: darken;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mix-blend-mode
property specifies how an 
element's content should blend with its direct parent background.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
JavaScript syntax:
object
.style.mixBlendMode = "darken"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mix-blend-mode
41.0
79.0
32.0
8.0
35.0
CSS Syntax
mix-blend-mode: normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|difference|exclusion|hue|saturation|color|luminosity;
Property Values
Value
Description
Demo
normal
This is default. Sets the blending mode to normal
Demo 
multiply
Sets the blending mode to multiply
Demo 
screen
Sets the blending mode to screen
Demo 
overlay
Sets the blending mode to overlay
Demo 
darken
Sets the blending mode to darken
Demo 
lighten
Sets the blending mode to lighten
Demo 
color-dodge
Sets the blending mode to color-dodge
Demo 
color-burn
Sets the blending mode to color-burn
Demo 
difference
Sets the blending mode to difference
Demo 
exclusion
Sets the blending mode to exclusion
Demo 
hue
Sets the blending mode to hue
Demo 
saturation
Sets the blending mode to saturation
Demo 
color
Sets the blending mode to color
Demo 
luminosity
Sets the blending mode to luminosity
Demo 
More Examples
Example
A demonstration of all values:
.normal {mix-blend-mode: normal;}
.multiply {mix-blend-mode: multiply;}
.screen {mix-blend-mode: screen;}
.overlay {mix-blend-mode: overlay;}
.darken {mix-blend-mode: darken;}
.lighten {mix-blend-mode: lighten;}
.color-dodge {mix-blend-mode: color-dodge;}
.color-burn {mix-blend-mode: 
    color-burn;}
.difference {mix-blend-mode: difference;}
.exclusion 
    {mix-blend-mode: exclusion;}
.hue {mix-blend-mode: hue;}
.saturation 
    {mix-blend-mode: saturation;}
.color {mix-blend-mode: color;}
.luminosity {mix-blend-mode: luminosity;}
Try it Yourself 
Example
Using mix-blend-mode to create a responsive cutout/knockout text:
.image-container {
background-image: url("paris.jpg");
background-size: cover;
position: relative;
height: 
    300px;
}
.text {
background-color: white;
color: black;
font-size: 10vw;
font-weight: bold;
margin: 0 auto;
padding: 10px;
width: 50%;
text-align: center;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
mix-blend-mode: screen;
}
Try it Yourself 
Related Pages
CSS reference:
CSS background-blend-mode Property
CSS
offset-anchor
Property
Example
Fasten the right center point of an <img> element to the defined path:
img {
offset-path: path('M 50 80 C 150 -20 250 180 350 80');
offset-anchor: right center;
}
Try it Yourself 
Definition and Usage
The
offset-anchor
property specifies the point on an element to be fixed along a path defined by the
offset-path
property.
The point defined by the
offset-anchor
property will also be the center of rotation if the element is rotated with the
offset-rotate
property.
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.offsetAnchor="bottom right"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset-anchor
116
116
72
16
102
CSS Syntax
offset-anchor: auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default. The achored point will be in the center of the element, same as property value '50% 50%'.
left top
left center
left bottom
right top
right center
right bottom
center top
center center
center bottom
If you only specify one keyword, the other value will be "center"
xpos ypos
The first value is the horizontal position and the second
      value is the vertical. The top left corner is 0 0. Units can be pixels
      (0px 0px) or any other
CSS units
. If you only specify one value, the other value will be 50%. You can mix % and positions
x% y%
The first value is the horizontal position and the second
      value is the vertical. The top left corner is 0% 0%.
      The right bottom corner is 100% 100%. If you only specify one
      value, the other value will be 50%. Default value is: 50% 50%
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset property:
CSS Offset property
CSS offset-distance property:
CSS Offset-distance property
CSS offset-path property:
CSS Offset-path property
CSS offset-rotate property:
CSS Offset-rotate property
CSS
opacity
Property
Example
Set the opacity level for a <div> element:
div
 {
opacity: 0.5;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
opacity
property sets the opacity level for an element.
The opacity-level describes the transparency-level, where 1 is not transparent at all, 0.5 is 50% see-through, and 0 is completely transparent.
opacity 0.2
opacity 0.5
opacity 1
(default)
Note:
When using the
opacity
property to add transparency to 
the background of an element, all of its child elements become transparent as 
well. This can make the text inside a fully transparent element hard to read. If 
you do not want to apply opacity to child elements, use RGBA color values 
instead (See "More Examples" below).
Show demo 
Default value:
1
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.opacity="0.5"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
opacity
4.0
9.0
2.0
3.1
9.0
CSS Syntax
opacity:
number
|initial|inherit;
Property Values
Value
Description
Demo
number
Specifies the opacity. From 0.0 (fully transparent) to 1.0 (fully opaque)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
The opacity property adds transparency to the background of an element, and 
to all of its child elements as well. This makes the text inside a transparent element hard to read:
div.first {
opacity: 0.1;
}
div.second {
opacity: 0.3;
}
div.third {
opacity: 0.6;
}
Try it Yourself 
Example
To not apply opacity to child elements (like in the example above) use
RGBA
color values 
instead. 
The following example sets the opacity for the background color, but not for the text:
div.first {
background: rgba(76, 175, 80, 0.1);
}
div.second {
background: rgba(76, 175, 80, 0.3);
}
div.third {
background: rgba(76, 175, 80, 
    0.6);
}
Try it Yourself 
Tip:
Learn more about RGBA Colors in
CSS RGBA Colors
.
Example
How to use JavaScript to change the opacity for an element:
function myFunction(x) {
// Return the text of the selected option
var opacity = x.options[x.selectedIndex].text;
var el = document.getElementById("p1");
if (el.style.opacity !== undefined) {
el.style.opacity = opacity;
} else {
alert("Your browser doesn't support this example!");
}
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Opacity / Transparency
CSS Tutorial:
CSS RGBA Colors
HTML DOM Reference:
opacity property
CSS
offset-position
Property
Example
Specify that the initial position of an element should be bottom right:
#square {
width: 60px;
height: 60px;
background: 
  blue;
offset-position: bottom right;
offset-path: 
  ray(45deg);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
offset-position
property specifies the 
initial position of an element along a path.
The value of
offset-position
determines 
where the element gets placed initially for moving along an offset path if an
offset-path
function does not specify its own starting position.
Default value:
normal
Inherited:
no
Animatable:
yes.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.offsetPosition="auto"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset-position
116
116
122
16
102
CSS Syntax
offset-position: auto|normal|
position
|initial|inherit;
Property Values
Value
Description
normal
Sets the offset starting position to 50% 50% of the containing block. This is default.
auto
Sets the offset starting position to the top-left corner of 
    the element's box
position
Specifies the position as an x/y coordinate to place 
    an element relative to its box edges. The position can be defined using one 
    to four values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
See different offset starting positions:
#square1 {
width: 40px;
height: 40px;
background: pink;
text-align:center;
offset-position: 
    bottom right;
offset-path: ray(45deg);
}
#square2 {
width: 40px;
height: 40px;
background: red;
text-align:center;
offset-position: top right;
offset-path: ray(25deg);
}
#square3 {
width: 40px;
height: 40px;
background: yellow;
text-align:center;
offset-position: normal;
offset-path: ray(45deg);
}
#square4 {
width: 40px;
height: 40px;
background: cyan;
text-align:center;
offset-position: 
    auto;
offset-path: ray(95deg);
}
#square5 {
width: 40px;
height: 40px;
background: lavender;
text-align:center;
offset-position: 30% 70%;
offset-path: ray(120deg);
}
Try it Yourself 
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset property:
CSS Offset property
CSS offset-anchor property:
CSS Offset-anchor property
CSS offset-distance property:
CSS Offset-distance property
CSS offset-path property:
CSS Offset-path property
CSS
border-start-start-radius
Property
Example
Add rounded corners to the block-start and the inline-start sides of some 
elements:
#example1 {
background-color: lightblue;
border-start-start-radius: 50px;
}
#example2 {
background-color: lightblue;
border-start-start-radius: 50px 20px;
}
#example3 {
background-color: lightblue;
border-start-start-radius: 50%;
direction: rtl;
}
#example4 {
background-color: lightblue;
border-start-start-radius: 50%;
writing-mode: vertical-rl;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
border-start-start-radius
property 
defines the radius of the corner between the block-start and the inline-start 
sides of the element.
Note:
The related CSS properties
writing-mode
,
text-orientation
and
direction
define block and inline directions. That is why these properties also affects the result of the
border-start-start-radius
property. For pages in English, inline direction is left to right and block direction is downward.
If the
border-start-start-radius
property has two values, 
the corner will be an ellipse:
border-start-start-radius: 50px 100px;
If the
border-start-start-radius
property has 
one value, the corner will be a circle:
border-start-start-radius: 50px;
The CSS
border-start-start-radius
property is very similar to CSS properties
border-bottom-left-radius
,
border-bottom-right-radius
,
border-top-left-radius
and
border-top-right-radius
, but the
border-start-start-radius
property is dependent on block and inline directions.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.borderStartStartRadius="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
border-start-start-radius
89.0
89.0
66.0
15.0
75.0
CSS Syntax
border-start-start-radius: 0|
length
|initial|inherit;
Property Values
Value
Description
Demo
0
Default value.
Demo 
length
Defines the shape of the corner at block-start and inline-start.
Read about length units
Demo 
%
Defines the shape of the corner at block-start and inline-start in percentange of length of element on corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With direction property
The position of a rounded corner at the start in the block and inline directions is affected by the
direction
property:
#example1 {
border: 2px solid red;
direction: rtl;
border-start-start-radius: 25px;
}
Try it Yourself 
With writing-mode property
The position of a rounded corner at the start in the block and inline directions is affected by the
writing-mode
property:
#example2 {
border: 2px solid red;
writing-mode: vertical-rl;
border-start-start-radius: 25px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Rounded Corners
CSS border-bottom-left-radius property:
CSS Border-bottom-left-radius property
CSS border-bottom-right-radius property:
CSS Border-bottom-right-radius property
CSS border-top-left-radius property:
CSS Border-top-left-radius property
CSS border-top-right-radius property:
CSS Border-top-right-radius property
CSS direction property:
CSS Direction property
CSS text-orientation property:
CSS Text-orientation property
CSS writing-mode property:
CSS Writing-mode property
CSS
color-scheme
Property
Example
Set the entire page to a dark color scheme:
:root {
color-scheme: 
    dark;
}
Try it Yourself 
Definition and Usage
The
color-scheme
property 
indicates which operating system color scheme an element should render with.
Default value:
normal
Inherited:
yes
Version:
CSS Color Adjustment Module Level 1
JavaScript syntax:
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
color-scheme
81
81
96
13
68
CSS Syntax
color-scheme: normal|light|dark|only;
Property Values
Value
Description
normal
The element should be rendered with the operating system default color 
    scheme
light
The element should be rendered with the operating system light color 
    scheme
dark
The element should be rendered with the operating system dark color 
    scheme
only
Forbids the browser to override the color scheme for the element
CSS
list-style-position
Property
Example
Specify the position of the list-item markers:
ul.a {
list-style-position: outside;
}
ul.b {
list-style-position: inside;
}
Try it Yourself 
Definition and Usage
The
list-style-position
property specifies the position of the list-item markers 
(bullet points).
list-style-position: outside;
means that the bullet points will be outside 
the list item. The start of each line of a list item will be aligned vertically:
Coffee -
A brewed drink prepared from roasted coffee beans...
Tea
Coca-cola
list-style-position: inside;
means that the bullet points will be inside 
the list item. As it is part of the list item, it will be part of the text and 
push the text at the start:
Coffee -
A brewed drink prepared from roasted coffee beans...
Tea
Coca-cola
Show demo 
Default value:
outside
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.listStylePosition="inside"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
list-style-position
1.0
4.0
1.0
1.0
3.5
CSS Syntax
list-style-position: inside|outside|initial|inherit;
Property Values
Value
Description
Demo
inside
The bullet points will be inside the list item
Demo 
outside
The bullet points will be outside the list item. This is default
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style property
HTML DOM reference:
listStylePosition property
CSS
margin
Property
Example
Set the margin for all four sides of a <p> element to 35 pixels:
p {
margin: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin
property sets the margins for an 
element, and is a shorthand property for the following properties:
margin-top
margin-right
margin-bottom
margin-left
If the margin property has four values:
margin: 10px 5px 15px 20px;
top margin is 10px
right margin is 5px
bottom margin is 15px
left margin is 20px
If the margin property has three values:
margin: 10px 5px 15px;
top margin is 10px
right and left margins are 5px
bottom margin is 15px
If the margin property has two values:
margin: 10px 5px;
top and bottom margins are 10px
right and left margins are 5px
If the margin property has one value:
margin: 10px;
all four margins are 10px
Note:
Negative values are allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.margin="100px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin
1.0
6.0
1.0
1.0
3.5
CSS Syntax
margin:
length
|auto|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a margin in px, pt, cm, etc. Default value is 0. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies a margin in percent of the width of the containing element
Demo 
auto
The browser calculates a margin
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single 
margin that is equal to the largest of the two margins.
This does not happen on horizontal (left and right) margins! Only vertical 
(top and bottom) 
margins!
Look at the following example:
Example
p.a {
margin: 30px 0;
}
p.b {
margin: 20px 0;
}
Try it Yourself 
In the example above, the <p class="a"> element has a top and bottom margin of 30px. The <p 
class="b"> 
element has a top and bottom margin of 20px.
This means that the vertical margin between <p class="a"> and <p class="b"> 
should be 50px (30px + 20px). But due to margin collapse, the actual margin ends 
up being 30px!
More Examples
Example
Set the margin for a <p> element to 35 pixels for top and bottom, and to 70 
pixels for right and left:
p {
margin: 35px 70px;
}
Try it Yourself 
Example
Set the margin for a <p> element to 35 pixels for top, 70 
pixels for right and left, and to 50 pixels for bottom:
p {
margin: 35px 70px 50px;
}
Try it Yourself 
Example
Set the margin for a <p> element to 35 pixels for top, 70 
pixels for right, 50 pixels for bottom, and to 90 pixels for left:
p {
margin: 35px 70px 50px 90px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS tutorial:
CSS Box Model
HTML DOM reference:
margin property
CSS
margin-bottom
Property
Example
Set the bottom margin for a <p> element to 25 pixels:
p.ex1 {
margin-bottom: 25px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-bottom
property sets the bottom margin of an element.
Note:
Negative values are allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.marginBottom="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-bottom
1.0
6.0
1.0
1.0
3.5
CSS Syntax
margin-bottom:
length
|auto|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed bottom margin in px, cm, em, etc. Default value is 0. 
    Negative values are allowed.
Read about length units
Demo 
%
Specifies a bottom margin in percent of the width of the containing element
Demo 
auto
The browser calculates a bottom margin
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single 
margin that is equal to the largest of the two margins.
This does not happen on horizontal (left and right) margins! Only vertical 
(top and bottom) 
margins!
Look at the following example:
Example
p.a {
margin: 30px 0;
}
p.b {
margin: 20px 0;
}
Try it Yourself 
In the example above, the <p class="a"> element has a top and bottom margin of 30px. The <p 
class="b"> 
element has a top and bottom margin of 20px.
This means that the vertical margin between <p class="a"> and <p class="b"> 
should be 50px (30px + 20px). But due to margin collapse, the actual margin ends 
up being 30px!
More Examples
Example
Set the bottom margin for a <p> element to 10% of the width of the 
container:
p.ex1 {
margin-bottom: 10%;
}
Try it Yourself 
Example
Set the bottom margin for a <p> element to 2 em:
p.ex1 {
margin-bottom: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
HTML DOM reference:
marginBottom property
CSS
marker-end
Property
Example
Point to a marker (arrow) that will be drawn on the last vertex 
of an element's path:
#test {
marker-end: url(#arrow);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
marker-end
property points to a marker that 
will be drawn on the last vertex of an element's path.
The shape of the marker is defined with an SVG <marker> element, and is referenced with a url() value.
The value of the CSS
marker-end
property 
overrides the value of the marker-end attribute in 
the SVG.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
marker-end
80
80
72
13.1
67
CSS Syntax
marker-end: none|
url
|initial|inherit;
Property Values
Value
Description
none
Default. No marker will be drawn at the path
url
An url reference to a marker defined by an SVG <marker> element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Point to a marker (circle) that will be drawn on the last vertex 
of an element's path:
#test {
marker-end: url(#circle);
}
Try it Yourself 
Related Pages
CSS reference:
marker property
CSS reference:
marker-mid property
CSS reference:
marker-start property
SVG tutorial:
SVG Marker
CSS
marker-mid
Property
Example
Point to a marker (arrow) that will be drawn on all the middle vertices 
of an element's path:
#test {
marker-mid: url(#arrow);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
marker-mid
property points to a marker that 
will be drawn on all the middle vertices of an element's path.
The shape of the marker is defined with an SVG <marker> element, and is referenced with a url() value.
The value of the CSS
marker-mid
property 
overrides the value of the marker-start attribute in 
the SVG.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
marker-mid
80
80
72
13.1
67
CSS Syntax
marker-mid: none|
url
|initial|inherit;
Property Values
Value
Description
none
Default. No marker will be drawn at the path
url
An url reference to a marker defined by an SVG <marker> element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Point to a marker (circle) that will be drawn on all the middle vertices 
of an element's path:
#test {
marker-mid: url(#circle);
}
Try it Yourself 
Related Pages
CSS reference:
marker property
CSS reference:
marker-start property
CSS reference:
marker-end property
SVG tutorial:
SVG Marker
CSS
margin-top
Property
Example
Set the top margin for a <p> element to 25 pixels:
p.ex1 {
margin-top: 25px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-top
property sets the top margin of an element.
Note:
Negative values are allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.marginTop="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-top
1.0
6.0
1.0
1.0
3.5
CSS Syntax
margin-top:
length
|auto|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed top margin in px, pt, cm, etc. Default value is 0px. 
    Negative values are allowed.
Read about length units
Demo 
%
Specifies a top margin in percent of the width of the containing element
Demo 
auto
The browser calculates a top margin
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single 
margin that is equal to the largest of the two margins.
This does not happen on horizontal (left and right) margins! Only vertical 
(top and bottom) margins!
Look at the following example:
Example
p.a {
margin: 30px 0;
}
p.b {
margin: 20px 0;
}
Try it Yourself 
In the example above, the <p class="a"> element has a top and bottom margin of 30px. The <p 
class="b"> 
element has a top and bottom margin of 20px.
This means that the vertical margin between <p class="a"> and <p class="b"> 
should be 50px (30px + 20px). But due to margin collapse, the actual margin ends 
up being 30px!
More Examples
Example
Set the top margin for a <p> element to 10% of the width of the 
container:
p.ex1 {
margin-top: 10%;
}
Try it Yourself 
Example
Set the top margin for a <p> element to 2 em:
p.ex1 {
margin-top: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
HTML DOM reference:
marginTop property
CSS
orphans
Property
Example
When printing, display at least 4 lines at the bottom and 2 lines at the top of each page:
@media print {
orphans: 4;
widows: 2;
}
Definition and Usage
The
orphans
property specifies the minimum 
number of lines that must be left at the bottom of a page or column.
Tip:
Also look at the
widows
property.
Default value:
2
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.orphans = "3"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
orphans
25.0
8.0
Not supported
3.1
10.0
CSS Syntax
orphans:
integer
|initial|inherit;
Property Values
Value
Description
integer
Specifies the minimum number of lines that must be left at the bottom of 
    a page or column. Negative values are not allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
outline-color
Property
Example
Set a color for the outline:
div {outline-color: coral;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An outline is a line that is drawn around elements, outside the borders,
to make the element "stand out".
The
outline-color
property specifies the color of an
outline.
Note:
Always declare the
outline-style
property before the
outline-color
property. An element must have an outline before you change the 
color of it.
Show demo 
Default value:
currentcolor
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.outlineColor="#FF0000"
Try it
Tips and Notes
Note:
Outlines differ from
borders
! 
Unlike border, the outline is drawn outside the element's border, and may 
overlap other content. Also, the outline is NOT a part of the element's 
dimensions; the element's total width and height is not affected by the width of 
the outline.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outline-color
1.0
8.0
1.5
1.2
7.0
CSS Syntax
outline-color:
color
|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the outline. Look at
CSS Color Values
for a complete list of possible color values.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set a color for the outline with a HEX value:
div {outline-color: #92a8d1;}
Try it Yourself 
Example
Set a color for the outline with an RGB value:
div {outline-color: rgb(201, 76, 76);}
Try it Yourself 
Example
Set a color for the outline with an RGBA value:
div {outline-color: rgba(201, 76, 76, 0.3);}
Try it Yourself 
Example
Set a color for the outline with a HSL value:
div {outline-color: hsl(89, 43%, 51%);}
Try it Yourself 
Example
Set a color for the outline with a HSLA value:
div {outline-color: hsla(89, 43%, 51%, 0.3);}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline property
HTML DOM reference:
outlineColor property
CSS
outline-style
Property
Example
Set a style for the outline:
div {outline-style: dotted;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An outline is a line that is drawn around elements, outside the borders,
to make the element "stand out".
The
outline-style
property specifies the style of an
outline.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.outlineStyle="dashed"
Try it
Tips and Notes
Note:
Outlines differ from
borders
! 
Unlike border, the outline is drawn outside the element's border, and may 
overlap other content. Also, the outline is NOT a part of the element's 
dimensions; the element's total width and height is not affected by the width of 
the outline.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outline-style
1.0
8.0
1.5
1.2
7.0
CSS Syntax
outline-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies no outline. This is default
Demo 
hidden
Specifies a hidden outline
Demo 
dotted
Specifies a dotted outline
Demo 
dashed
Specifies a dashed outline
Demo 
solid
Specifies a solid outline
Demo 
double
Specifies a double outliner
Demo 
groove
Specifies a 3D grooved outline. The effect depends on the outline-color value
Demo 
ridge
Specifies a 3D ridged outline. The effect depends on the outline-color value
Demo 
inset
Specifies a 3D inset outline. The effect depends on the outline-color value
Demo 
outset
Specifies a 3D outset outline. The effect depends on the outline-color value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
A dashed outline:
div {outline-style: dashed;}
Try it Yourself 
Example
A solid outline:
div {outline-style: solid;}
Try it Yourself 
Example
A double outline:
div {outline-style: double;}
Try it Yourself 
Example
A groove outline:
div {
outline-style: 
    groove;
outline-color: coral;
outline-width: 7px;
}
Try it Yourself 
Example
A ridge outline:
div {
outline-style: 
    ridge;
outline-color: coral;
outline-width: 7px;
}
Try it Yourself 
Example
An inset outline:
div {
outline-style: 
    inset;
outline-color: coral;
outline-width: 7px;
}
Try it Yourself 
Example
An outset outline:
div {
outline-style: 
    outset;
outline-color: coral;
outline-width: 7px;
}
Try it Yourself 
Example
Set the style of an outline using different values:
p.a {outline-style: dotted;}
p.b {outline-style: dashed;}
p.c {outline-style: solid;}
p.d {outline-style: double;}
p.e {outline-style: groove;}
p.f {outline-style: ridge;}
p.g {outline-style: inset;}
p.h {outline-style: outset;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline property
HTML DOM reference:
outlineStyle property
CSS
overflow
Property
Example
Show different overflow property values:
div.ex1 {
overflow: scroll;
}
div.ex2 {
overflow: hidden;
}
div.ex3 {
overflow: 
auto;
}
div.ex4 {
overflow: clip;
}
div.ex5 {
overflow: visible;
}
Try it Yourself 
Definition and Usage
The
overflow
property specifies what should happen if content overflows an element's box.
This property specifies whether to clip content or to add scrollbars when an 
element's content is too big to fit in a specified area.
Note:
The
overflow
property only works for block elements with a specified height.
Show demo 
Default value:
visible
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.overflow="scroll"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overflow
1.0
4.0
1.0
1.0
7.0
Note:
In OS X Lion (on Mac), scrollbars are hidden by default and only shown when being used (even though "overflow:scroll" is set).
CSS Syntax
overflow: visible|hidden|clip|scroll|auto|initial|inherit;
Property Values
Value
Description
Demo
visible
The overflow is not clipped. It renders outside the element's box. This is default
Demo 
hidden
The overflow is clipped, and the rest of the content will be invisible. 
    Content can be scrolled programmatically (e.g. by setting scrollLeft or 
    scrollTo())
Demo 
clip
The overflow is clipped, and the rest of the content will be invisible. 
    Forbids scrolling, including programmatic scrolling.
Demo 
scroll
The overflow is clipped, but a scroll-bar is added to see the rest of the content
Demo 
auto
If overflow is clipped, a scroll-bar should be added to see the rest of the content
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Overflow
CSS tutorial:
CSS Positioning
HTML DOM reference:
overflow property
CSS
overflow-y
Property
Example
Show different overflow-y property values:
div.ex1 {
overflow-y: scroll;
}
div.ex2 {
overflow-y: hidden;
}
div.ex3 {
overflow-y: 
    auto;
}
div.ex4 {
overflow-y: visible;
}
Try it Yourself 
Definition and Usage
The
overflow-y
property specifies whether to clip the content, add a scroll 
bar, or display overflow content of a block-level element, when it overflows at 
the top and bottom edges.
Tip:
Use the
overflow-x
property 
to determine clipping at the left and right edges.
Show demo 
Default value:
visible
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overflowY="scroll"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overflow-y
4
9
1.5
3
9.5
CSS Syntax
overflow-y: visible|hidden|scroll|auto|initial|inherit;
Property Values
Value
Description
Demo
visible
The content is not clipped, and it may be rendered outside the content box. 
    This is default
Demo 
hidden
The content is clipped - and no scrolling mechanism is provided
Demo 
scroll
The content is clipped and a scrolling mechanism is provided
Demo 
auto
Should cause a scrolling mechanism to be provided for overflowing boxes
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Overflow
HTML DOM reference:
overflowY property
CSS
overscroll-behavior
Property
Example
Turn off scroll chaining for a scrollable <div> element:
#yellowDiv {
overscroll-behavior: contain;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
overscroll-behavior
property is used to turn off scroll chaining or overscroll affordance on an element when you try to scroll past the scroll boundary.
The
overscroll-behavior
property is a shorthand for the following properties:
overscroll-behavior-x
overscroll-behavior-y
Values for the
overscroll-behavior
property can be set in different ways:
If the overscroll-behavior property has two values:
overscroll-behavior: none contain;
x-direction: there is no overscroll-behavior
y-direction: there is no scroll chaining, but overscroll affordance is allowed
If the overscroll-behavior property has one value:
overscroll-behavior: contain;
there is no scroll chaining in x- or y-direction, but overscroll affordance is allowed
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overscrollBehavior="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overscroll-behavior
63.0
18.0 *
59.0
16.0
50.0
* In Microsoft Edge, the property value 'none' is treated like 'contain', and this is not correct.
CSS Syntax
overscroll-behavior:  auto|contain|none|initial|inherit;
Property Values
Value
Description
auto
Allows scroll chaining and overscroll affordance behavior. This is default
contain
Allows overscroll affordance behavior, but not scroll chaining.
none
Does not allow overscroll affordance or scroll chaining behavior.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Two-value syntax
With the
overscroll-behavior
property value set to 'auto none', scroll chaining and overscroll affordance is allowed in the x-direction, but not in the y-direction:
#pinkDiv {
overcroll-behavior: auto none;
}
Try it Yourself 
Related Pages
CSS overscroll-behavior-x property:
CSS Overscroll-behavior-x property
CSS overscroll-behavior-y property:
CSS Overscroll-behavior-y property
CSS scroll-behavior property:
CSS Scroll-behavior property
CSS scroll-margin property:
CSS Scroll-margin property
CSS scroll-padding property:
CSS Scroll-padding property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS
padding-block
Property
Example
Set the padding on both sides in the block direction:
p {
padding-block: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-block
is the space from its border to its content in the block direction, and it is a shorthand property for the following properties:
padding-block-start
padding-block-end
Values for the
padding-block
property can be set in different ways:
If the padding-block property has two values:
padding-block: 10px 50px;
padding at start is 10px
padding at end is 50px
If the padding-block property has one value:
padding-block: 10px;
padding at start and end is 10px
The CSS
padding-block
and
padding-inline
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-block
and
padding-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
padding-block
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingBlock="100px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-block
87.0
87.0
66.0
14.1
73.0
CSS Syntax
padding-block: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-block value.
Demo 
length
Specifies padding-block in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies padding-block in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the start of the element is moved from top to right side, and the end of the element is moved from bottom to left side of element:
div {
writing-mode: vertical-rl;
padding-block: 10px 50px;
}
Try it Yourself 
Related Pages
CSS padding-block-end property:
CSS Padding-block-end property
CSS padding-block-start property:
CSS Padding-block-start property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
overscroll-behavior-inline
Property
Example
Turn off scroll chaining for a scrollable <div> element in the inline direction:
#yellowDiv {
overscroll-behavior-inline: contain;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
overscroll-behavior-inline
property is used to turn off scroll chaining or overscroll affordance on an element when you try to scroll past the scroll boundary in the inline direction.
Note:
To scroll sideways to trigger overscroll-behavior in the inline direction, you might need to use swipe-gesture on a touchpad or a touchscreen.
The CSS
overscroll-behavior-inline
and
overscroll-behavior-block
properties are very similar to CSS properties
overscroll-behavior-x
and
overscroll-behavior-y
, but the
overscroll-behavior-inline
and
overscroll-behavior-block
properties are dependent on inline and block directions.
Note:
The related CSS property
writing-mode
defines inline direction. This affects whether the inline direction is in the x-direction or y-direction and the result of the
overscroll-behavior-inline
property. For pages in English, inline direction is left to right and block direction is downward.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overscrollBehaviorInline="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overscroll-behavior-inline
63.0
18.0
59.0
16.0
50.0
CSS Syntax
overscroll-behavior-inline:  auto|contain|none|initial|inherit;
Property Values
Value
Description
auto
Allows scroll chaining and overscroll affordance behavior. This is default
contain
Allows overscroll affordance behavior, but not scroll chaining.
none
Does not allow overscroll affordance or scroll chaining behavior.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the inline direction is in the y-direction, and so the overscroll-behavior-inline now works in the y-direction instead of the x-direction:
#yellowDiv {
writing-mode: vertical-rl;
overscroll-behavior-inline: contain;
}
Try it Yourself 
Related Pages
CSS overscroll-behavior property:
CSS Overscroll-behavior property
CSS overscroll-behavior-block property:
CSS Overscroll-behavior-block property
CSS overscroll-behavior-x property:
CSS Overscroll-behavior-x property
CSS overscroll-behavior-y property:
CSS Overscroll-behavior-y property
CSS scroll-behavior property:
CSS Scroll-behavior property
CSS scroll-margin property:
CSS Scroll-margin property
CSS scroll-padding property:
CSS Scroll-padding property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS writing-mode property:
CSS Writing-mode property
CSS
padding-left
Property
Example
Set the left padding for a <p> element to 50 pixels:
p.ex1 {
padding-left: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's padding is the space between its content and its border.
The
padding-left
property sets the left padding (space) of an element.
Note:
Negative values are not allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.paddingLeft="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-left
1.0
4.0
1.0
1.0
3.5
CSS Syntax
padding-left:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed left padding in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
%
Specifies a left padding in percent of the width of the containing element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the left padding for a <p> element to 10% of the width of the 
containing element:
p.ex1 {
padding-left: 10%;
}
Try it Yourself 
Example
Set the left padding for a <p> element to 2 em:
p.ex1 {
padding-left: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
HTML DOM reference:
paddingLeft property
CSS
padding-bottom
Property
Example
Set the bottom padding for a <p> element to 25 pixels:
p.ex1 {
padding-bottom: 25px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's padding is the space between its content and its border.
The
padding-bottom
property sets the bottom padding (space) of an element.
Note:
Negative values are not allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.paddingBottom="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-bottom
1.0
4.0
1.0
1.0
3.5
CSS Syntax
padding-bottom:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed bottom padding in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
%
Specifies a bottom padding in percent of the width of the containing 
    element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the bottom padding for a <p> element to 10% of the width of the 
containing element:
p.ex1 {
padding-bottom: 10%;
}
Try it Yourself 
Example
Set the bottom padding for a <p> element to 2 em:
p.ex1 {
padding-bottom: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
HTML DOM reference:
paddingBottom property
CSS
padding-inline
Property
Example
Set the padding on both sides in the inline direction:
div {
padding-inline: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-inline
is the space from its border to its content in the inline direction, and it is a shorthand property for the following properties:
padding-inline-start
padding-inline-end
Values for the
padding-inline
property can be set in different ways:
If the padding-inline property has two values:
padding-inline: 10px 50px;
padding at start is 10px
padding at end is 50px
If the padding-inline property has one value:
padding-inline: 10px;
padding at start and end is 10px
The CSS
padding-inline
and
padding-block
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-inline
and
padding-block
properties are dependent on inline and block directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is in the inline direction and the result of the
padding-inline
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingInline="100px 20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-inline
87.0
87.0
66.0
14.1
73.0
CSS Syntax
padding-inline: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-inline distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top, and the end of the element is moved from right side to bottom:
div {
writing-mode: vertical-rl;
padding-inline: 10px 100px;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to right side, and the end of the element is moved from right side to left side:
div {
direction: rtl;
padding-inline: 10px 100px;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS padding-inline-end property:
CSS Padding-inline-end property
CSS padding-inline-start property:
CSS Padding-inline-start property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
column-rule-color
Property
Example
Specify the color of the rule between columns:
div
 {
column-rule-color: #ff0000;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-rule-color
property specifies the color of the rule between columns.
Show demo 
Default value:
The current color of the element
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columnRuleColor="#0000ff"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-rule-color
50
10
52
9
37
CSS Syntax
column-rule-color:
color
|initial|inherit;
Property Values
Value
Description
Demo
color
Specifies the color of the rule. Look at
CSS Color Values
for a complete list of possible color values
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnRuleColor property
CSS
column-width
Property
Example
Specify that the column width should be 100px:
div
 {
column-width: 100px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
column-width
property specifies the column width.
The number of columns will be the minimum number of columns needed to show 
all the content across the element.
column-width
is a flexible property. Think of
column-width
as a
minimum 
width suggestion
for the browser. Once the browser cannot fit at least two 
columns at your specified width then the columns will stop and drop into a 
single column.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.columnWidth="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
column-width
50
10
52
9
37
CSS Syntax
column-width: auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default value. The column width will be determined by the browser
Demo 
length
A length that specifies the width of the columns. The number of columns 
    will be the minimum number of columns needed to show all the content across 
    the element.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Divide the text in a <div> element into three columns:
div
 {
column-count: 3;
}
Try it Yourself 
Example
Specify a 40 pixels gap between the columns:
div
 {
column-gap: 40px;
}
Try it Yourself 
Example
Specify the width, style, and color of the rule between columns:
div
 {
column-rule: 4px double #ff00ff;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Multiple Columns
HTML DOM reference:
columnWidth property
CSS
content
Property
Example
The following example inserts the value of the href attribute in parenthesis after each 
<a> element:
a::after {
content: " (" attr(href) ")";
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
content
property is used with the
::before
and
::after
pseudo-elements, to insert generated content.
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
You can't give an element a pseudo-class by using JavaScript,
but there are other ways to get the same result:
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
content
1.0
8.0
1.0
1.0
4.0
CSS Syntax
content: normal|none|counter|attr|
string
|open-quote|close-quote|no-open-quote|no-close-quote|
url
|initial|inherit;
Property Values
Value
Description
Example
normal
Default value. Sets the content, if specified, to normal, which default is "none" (which is nothing)
Try it 
none
Sets the content, if specified, to nothing
Try it 
counter
Sets the content as a counter
Try it 
attr
(attribute)
Sets the content as one of the selector's attribute
Try it 
string
Sets the content to the text you specify
Try it 
open-quote
Sets the content to be an opening quote
Try it 
close-quote
Sets the content to be a closing quote
Try it 
no-open-quote
Removes the opening quote from the content, if specified
Try it 
no-close-quote
Removes the closing quote from the content, if specified
Try it 
url(
url
)
Sets the content to be some kind of media (an image, a sound, a video, etc.)
Try it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Try it 
More Examples
Example
How to add bullet colors for <ul> or <ol> by removing their default bullets and adding an HTML entity that looks like bullets (&bull;):
ul {
list-style: none; /* Remove HTML bullets */
padding: 0;
margin: 0;
}
li {
padding-left: 16px;
}
li::before {
content: ""; /* Insert content that looks like bullets */
padding-right: 8px;
color: blue; /* Or a color you prefer */
}
Try it Yourself 
Related Pages
CSS reference:
::before pseudo element
CSS reference:
::after pseudo element
CSS
empty-cells
Property
Example
Display no borders on empty cells in a table:
table
 {
empty-cells: hide;
}
Try it Yourself 
Definition and Usage
The
empty-cells
property sets whether or not to display borders on empty cells in a table.
Note:
This property has no effect if
border-collapse
is "collapse".
Show demo 
Default value:
show
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.emptyCells="hide"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
empty-cells
1.0
8.0
1.0
1.2
4.0
CSS Syntax
empty-cells: show|hide|initial|inherit;
Property Values
Value
Description
Demo
show
Display borders on empty cells. This  is default
Demo 
hide
Hide borders on empty cells
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Table
HTML DOM reference:
emptyCells property
CSS
mask-clip
Property
Example
Show different values for the
mask-clip
property:
.masked {
width: 150px;
height: 150px;
background: green;
border: 30px solid blue;
padding: 
    20px;
-webkit-mask-image: url(img_circle.svg);
mask-image: url(img_circle.svg);
mask-size: 100% 100%;
}
.mask1 {
mask-clip: border-box;
}
.mask2 {
mask-clip: content-box;
}
.mask3 {
mask-clip: 
    padding-box;
}
.mask4 {
mask-clip: fill-box;
}
.mask5 {
mask-clip: stroke-box;
}
Try it Yourself 
Definition and Usage
The
mask-clip
property specifies which area 
is affected by a mask image.
Default value:
border-box
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskClip="padding-box"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-clip
120
120
53
15.4
106
CSS Syntax
mask-clip: border-box|content-box|padding-box|fill-box|stroke-box|view-box|no-clip|border|padding|content|text|initial|inherit;
Property Values
Value
Description
border-box
The painted content is clipped to the border box. This is default
content-box
The painted content is clipped to the content box
padding-box
The painted content is clipped to the padding box
fill-box
The painted content is clipped to the object bounding box
stroke-box
The painted content is clipped to the stroke bounding box
view-box
Use the nearest SVG viewport as reference box
no-clip
No clipping
border
The same as border-box
padding
The same as padding-box
content
The same as content-box
text
Clips the mask to the text of the element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
mask property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
mask-composite
Property
Example
Show the different values for the
mask-composite
property:
.masked {
width: 200px;
height: 200px;
mask-repeat: no-repeat;
mask-size: 100%;
background: 
    blue;
-webkit-mask-image: url(img_rectangle.svg), 
    radial-gradient(transparent 50%, black);
mask-image: url(img_rectangle.svg), 
    radial-gradient(transparent 50%, black);
}
.mask1 {
mask-composite: add;
}
.mask2 {
mask-composite: 
    subtract;
}
.mask3 {
mask-composite: intersect;
}
.mask4 {
mask-composite: exclude;
}
Try it Yourself 
Definition and Usage
The
mask-composite
property specifies a 
compositing operation used on the current mask layer with the mask layers below 
it.
Default value:
add
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskComposite="intersect"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-composite
120
120
53
15.4
106
CSS Syntax
mask-composite: 
  add|subtract|intersect|exclude|initial|inherit;
Property Values
Value
Description
add
The source is placed over the destination
subtract
The source is placed where it falls outside of the destination
intersect
The parts of source that overlap the destination, replace the 
    destination
exclude
The non-overlapping regions of source and destination are combined
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
mask-image
Property
Example
Create a mask layer for an image:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 70%;
mask-repeat: no-repeat;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mask-image
property specifies an 
image to be used as a mask layer for an element.
Tip:
Linear and radial gradients in CSS can also be used as the 
mask image.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskImage="url(star.svg)"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a prefix.
Property
mask-image
120
120
53
15.4
15 -webkit-
CSS Syntax
mask-image: none|
image
|
url
|initial|inherit;
Property Values
Value
Description
none
This is default
image
An image to use as the mask layer
url
An url reference to an image or an SVG <mask> element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create different mask layers for an image with linear and radial gradients:
.mask1 {
-webkit-mask-image: linear-gradient(black, transparent);
mask-image: linear-gradient(black, 
    transparent);
}
.mask2 {
-webkit-mask-image: 
    radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);
mask-image: radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);
}
.mask3 {
-webkit-mask-image: radial-gradient(black 50%, rgba(0, 
    0, 0, 0.5) 50%);
mask-image: radial-gradient(black 50%, rgba(0, 0, 
    0, 0.5));
}
Try it Yourself 
Example
Use the SVG <mask> element to create a mask layer for an image:
<svg width="600" height="400">
<mask id="svgmask1">
<polygon fill="#ffffff" points="100,10 40,198 190,78 10,78 
    160,198"></polygon>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="img_5terre.jpg" 
    mask="url(#svgmask1)"></image>
</svg>
Try it Yourself 
Example
Use the SVG <mask> element to create a mask layer for an image:
<svg width="600" height="400">
<mask id="svgmask1">
<circle fill="#ffffff" cx="75" cy="75" r="75"></circle>
<circle fill="#ffffff" cx="80" cy="260" r="75"></circle>
<circle fill="#ffffff" cx="270" cy="160" r="75"></circle>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" 
    xlink:href="img_5terre.jpg" mask="url(#svgmask1)"></image>
</svg>
Try it Yourself 
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
mask-origin
Property
Example
Show different values for the
mask-origin
property:
.masked {
background: green;
border: 30px solid blue;
padding: 20px;
-webkit-mask-image: url(img_circle.svg);
mask-image: url(img_circle.svg);
mask-size: 50%;
mask-repeat: no-repeat;
}
.mask1 {
mask-origin: border-box;
}
.mask2 {
mask-origin: content-box;
}
.mask3 {
mask-origin: 
    padding-box;
}
.mask4 {
mask-origin: fill-box;
}
Try it Yourself 
Definition and Usage
The
mask-origin
property specifies the origin position (the 
mask 
position area) of a mask layer image.
Default value:
border-box
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskOrigin="padding-box"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-origin
120
120
53
15.4
106
CSS Syntax
mask-origin: 
  border-box|content-box|padding-box|fill-box|stroke-box|view-box|initial|inherit;
Property Values
Value
Description
border-box
The position is relative to the border box. This is default
content-box
The position is relative to the content box
padding-box
The position is relative to the padding box
fill-box
The position is relative to the object bounding box
stroke-box
The position is relative to the stroke bounding box
view-box
Use the nearest SVG viewport as reference box
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
max-height
Property
Example
Set the maximum height of a <p> element to 50 pixels:
p.ex1
 {
max-height: 50px;
}
Try it Yourself 
Definition and Usage
The
max-height
property defines the maximum height of an element.
If the content is larger than the maximum height, it will overflow. How the 
container will handle the overflowing content is defined by the
overflow
property.
If the content is smaller than the maximum height, the
max-height
property 
has no effect.
Note:
This prevents the value of the
height
property from becoming larger than
max-height
. The value of the
max-height
property overrides
the height property.
Default value:
none
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.maxHeight="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
max-height
1.0
7.0
1.0
1.3
7.0
CSS Syntax
max-height: none|
length
|initial|inherit;
Property Values
Value
Description
Demo
none
No maximum height. This is default
Play it 
length
Defines the maximum height in px, cm, etc.
Read about length units
Play it 
%
Defines the maximum height in percent of the containing block
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Height and Width
CSS reference:
min-height property
HTML DOM reference:
maxHeight property
CSS
max-block-size
Property
Example
Set the maximum size of a <div> element to 60 pixels in the block direction:
div {
max-block-size: 60px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
max-block-size
property specifies the maximum size of an element in the block direction.
If the content is smaller than the maximum size in block direction, the
max-block-size
property value has no effect.
If the content is larger than the maximum size in block direction, the
max-block-size
property value will be applied.
Note:
The related CSS property
writing-mode
defines block direction, and this affects the result of the
max-block-size
property. For pages in English, block direction is downward and inline direction is left to right.
The CSS
max-block-size
property is very similar to CSS properties
max-height
and
max-width
, but the
max-block-size
property is dependent on block direction.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.maxBlockSize="60px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
max-block-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
max-block-size: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default max-block-size value.
Demo 
length
Specifies max-block-size in px, pt, cm, etc.
Read about length units
Demo 
%
Specifies max-block-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing mode
With the
writing-mode
property value of a <div> element set to vertical-lr, the block direction is changed from downwards to sideways, and this affects how the
max-block-size
property work:
div {
max-block-size: 60px;
writing-mode: vertical-lr;
}
Try it Yourself 
Max-block-size vs Block-size
See how one <div> element with
block-size
100px, and another <div> with
max-block-size
100px, react differently with changing content size:
#div1 {
max-block-size: 100px;
}
#div2 {
block-size: 100px;
}
Try it Yourself 
Related Pages
CSS block-size property:
CSS Block-size property
CSS min-block-size property:
CSS Min-block-size property
CSS max-height property:
CSS Max-height property
CSS max-width property:
CSS Max-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
max-inline-size
Property
Example
Set the maximum size of a <div> element to 60 pixels in the inline direction:
div {
max-inline-size: 60px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
max-inline-size
property specifies the maximum size of an element in the inline direction.
If the content is smaller than the maximum size in inline direction, the
max-inline-size
property value has no effect.
If the content is larger than the maximum size in block direction, the
max-inline-size
property value will be applied.
Note:
The related CSS property
writing-mode
defines inline direction, and this affects the result of the
max-inline-size
property. For pages in English, block direction is downward and inline direction is left to right.
The CSS
max-inline-size
property is very similar to CSS properties
max-height
and
max-width
, but the
max-inline-size
property is dependent on inline direction.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.maxInlineSize="60px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
max-inline-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
max-inline-size: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default max-inline-size value.
Demo 
length
Specifies max-inline-size in px, pt, cm, etc.
Read about length units
Demo 
%
Specifies max-inline-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing mode
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is changed from sideways to downwards, and this affects how the
max-inline-size
property work:
div {
max-inline-size: 60px;
writing-mode: vertical-rl;
}
Try it Yourself 
Max-inline-size vs Inline-size
See how one <div> element with
inline-size
100px, and another <div> with
max-inline-size
100px, react differently with changing content size:
#div1 {
max-inline-size: 100px;
}
#div2 {
inline-size: 100px;
}
Try it Yourself 
Related Pages
CSS inline-size property:
CSS Inline-size property
CSS min-inline-size property:
CSS Min-inline-size property
CSS max-height property:
CSS Max-height property
CSS max-width property:
CSS Max-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
offset
Property
Example
Use the offset shorthand property to set property values for offset-path, offset-distance and offset-rotate on an <img> element:
img {
offset: path('M 50 80 C 150 -20 250 180 350 80') 150px auto 45deg;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
offset
property is used when animating an element along a path, and is a shorthand property for the following properties:
offset-anchor
offset-distance
offset-path
offset-position
offset-rotate
For different ways of setting the
offset
property value, see "More Examples" below.
Default value:
See the default value for the individual properties
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.offset="path('M 50,250 C 700,-50 -400,-50 250,250') 200px auto 90deg"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset
55
79
72
16
42
CSS Syntax
offset: auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default. See default value for each individual 'offset-' property.
offset-anchor
Specifies the point on an element that is fixed to the path it is animated along. 
    Default value is auto
offset-distance
Specifies the distance from the start of the path defined by 
    offset-path. Default value is 0
offset-path
Specifies the path an element is animated along. Default value is none
offset-position
Specifies the initial position of an element along a 
    path. Default value is normal
offset-rotate
Specifies rotation of an element as it is animated along a path. Default 
    value is auto
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
offset-path and offset-rotate
Use the offset property of an <img> element to set the offset-path and offset-rotate property values:
img {
offset: path('M 50 80 C 150 -20 250 180 350 80') 45deg;
}
Try it Yourself 
offset-path and offset-distance
Use the offset property of an <img> element to set the offset-path and offset-distance property values:
img {
offset: path('M 50 80 C 150 -20 250 180 350 80') 150px;
}
Try it Yourself 
offset-path, offset-distance, offset-rotate and offset-anchor
Use the offset property of an <img> element to set the offset-path, offset-distance, offset-rotate and offset-anchor property values:
img {
offset: path('M 50 80 C 150 -20 250 180 350 80') 150px -90deg / 0% 50%;
}
Try it Yourself 
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset-anchor property:
CSS Offset-anchor property
CSS offset-distance property:
CSS Offset-distance property
CSS offset-path property:
CSS Offset-path property
CSS offset-rotate property:
CSS Offset-rotate property
CSS
object-position
Property
Example
Resize an image to fit its content box, and position the image 5px from the 
left and 10% from the top inside the content box:
img.a {
width: 200px;
height: 
    400px;
object-fit: none;
object-position: 5px 10%;
border: 5px solid red;
}
Try it Yourself 
Definition and Usage
The
object-position
property is used together with object-fit to specify how an <img> or <video> should 
be positioned with x/y coordinates inside its "own content box".
Show demo 
Default value:
50% 50%
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.objectPosition="0 10%"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
object-position
31.0
16.0
36.0
10.0
19.0
CSS Syntax
object-position:
position
|initial|inherit;
Property Values
Value
Description
Demo
position
Specifies the position of the image or video inside its content box. First value controls the 
    x-axis and the second value controls the y-axis. Can be a string (left, 
    center or right), or a number (in px or %). Negative values are allowed
Try it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS object-fit
CSS reference:
CSS object-fit
HTML DOM reference:
The objectPosition property
CSS
min-block-size
Property
Example
Set the minimum size of a <div> element to 200 pixels in the block direction:
div {
min-block-size: 200px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
min-block-size
property specifies the minimum size of an element in the block direction.
If the content is smaller than the minimum size in block direction, the
min-block-size
property value will be applied.
If the content is larger than the minimum size in block direction, the
min-block-size
property value has no effect.
Note:
The related CSS property
writing-mode
defines block direction, and this affects the result of the
min-block-size
property. For pages in English, block direction is downward and inline direction is left to right.
The CSS
min-block-size
property is very similar to CSS properties
min-height
and
min-width
, but the
min-block-size
property is dependent on block direction.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.minBlockSize="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
min-block-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
min-block-size: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default min-block-size value.
Demo 
length
Specifies min-block-size in px, pt, cm, etc.
Read about length units
Demo 
%
Specifies min-block-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing mode
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is changed from downwards to sideways, and this affects how the
min-block-size
property work:
div {
min-block-size: 200px;
writing-mode: vertical-rl;
}
Try it Yourself 
Min-block-size vs Block-size
See how one <div> element with
block-size
100px, and another <div> with
min-block-size
100px, react differently with changing content size:
#div1 {
min-block-size: 100px;
}
#div2 {
block-size: 100px;
}
Try it Yourself 
Related Pages
CSS block-size property:
CSS Block-size property
CSS max-block-size property:
CSS Max-block-size property
CSS min-height property:
CSS Min-height property
CSS min-width property:
CSS Min-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
offset-path
Property
Example
Create a path for an animated <div> to follow:
div {
offset-path: path('M20,170 L100,20 L180,100 Z');
animation: moveDiv 3s 3;
}
@keyframes moveDiv {
100%  { offset-distance: 100%; }
}
Try it Yourself 
Definition and Usage
The
offset-path
property creates a path for an animated element to follow.
Default value:
none
Inherited:
no
Animatable:
Yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.offsetPath="path('M20,170 L100,20 L180,100 Z')"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset-path
55
79
72
15.4
45
CSS Syntax
offset-path: none|
value
|initial|inherit;
Property Values
Value
Description
none
Default. The element's default offset-path property value
path()
Specify a path in SVG syntax.
Learn about SVG paths
ray()
Specify a path with the CSS ray() function
url()
Specify a path by using the URL to an SVG file
<basic-shape>
Specify a path by defining a basic shape using CSS functions like 
    inset(), circle(), ellipse() or polygon()
<coord-box>
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset property:
CSS Offset property
CSS offset-anchor property:
CSS Offset-anchor property
CSS offset-distance property:
CSS Offset-distance property
CSS offset-rotate property:
CSS Offset-rotate property
CSS
min-inline-size
Property
Example
Set the minimum size of a <div> element to 200 pixels in the inline direction:
div {
min-inline-size: 200px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
min-inline-size
property specifies the minimum size of an element in the inline direction.
If the content is smaller than the minimum size in inline direction, the
min-inline-size
property value will be applied.
If the content is larger than the minimum size in inline direction, the
min-inline-size
property value has no effect.
Note:
The related CSS property
writing-mode
defines inline direction, and this affects the result of the
min-inline-size
property. For pages in English, block direction is downward and inline direction is left to right.
The CSS
min-inline-size
property is very similar to CSS properties
min-height
and
min-width
, but the
min-inline-size
property is dependent on inline direction.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.minInlineSize="10px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
min-inline-size
57.0
79.0
41.0
12.1
44.0
CSS Syntax
min-inline-size: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default min-inline-size value.
Demo 
length
Specifies min-inline-size in px, pt, cm, etc.
Read about length units
Demo 
%
Specifies min-inline-size in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing mode
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is changed from sideways to downwards, and this affects how the
min-inline-size
property work:
div {
min-inline-size: 260px;
writing-mode: vertical-rl;
}
Try it Yourself 
Min-inline-size vs Inline-size
See how one div element with
inline-size
200px, and another div with
min-inline-size
200px, react differently with changing content size:
#div1 {
min-inline-size: 200px;
}
#div2 {
inline-size: 200px;
}
Try it Yourself 
Related Pages
CSS inline-size property:
CSS Inline-size property
CSS max-inline-size property:
CSS Max-inline-size property
CSS min-height property:
CSS Min-height property
CSS min-width property:
CSS Min-width property
CSS writing-mode property:
CSS Writing-mode property
CSS
order
Property
Example
Set the order of the flexible items:
div#myRedDIV {order: 2;}
div#myBlueDIV {order: 4;}
div#myGreenDIV {order: 3;}
div#myPinkDIV {order: 1;}
Try it Yourself 
Definition and Usage
The
order
property specifies the order of a flexible item relative to the rest of the flexible items inside the same container.
Note:
If the element is not a flexible item, the
order
property has no effect.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.order="2"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
order
29
12
28
9.0
12.1
CSS Syntax
order:
number
|initial|inherit;
Property Values
Value
Description
Demo
number
Default value 0. Specifies the order for the flexible item
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS Reference:
flex property
CSS Reference:
flex-basis property
CSS Reference:
flex-direction property
CSS Reference:
flex-flow property
CSS Reference:
flex-grow property
CSS Reference:
flex-shrink property
CSS Reference:
flex-wrap property
CSS Reference:
align-content property
CSS Reference:
align-items property
CSS Reference:
align-self property
HTML DOM reference:
order property
CSS
offset-rotate
Property
Example
Set rotation of three <img> elements moving along a path:
#fish1 {
offset-rotate: auto;
}
#fish2 {
offset-rotate: auto 90deg;
}
#fish3 {
offset-rotate: 90deg;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
offset-rotate
property sets the rotation of an animated element moving along a path.
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.offsetRotate="45deg"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
offset-rotate
56
79
72
16
43
CSS Syntax
offset-rotate: auto|
value
|initial|inherit;
Property Values
Value
Description
auto
The element is facing the direction it moving along a path. This is default.
<angle>
Specifies how much to rotate an element with an constant angle.
auto <angle>
With both
auto
and
<angle>
given, the angle is added to the default rotation, in the clockwise direction.
reverse
The element is rotated in the opposite direction of the default rotation.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Specify the rotation of an element with the 'turn' unit instead of 'deg':
div {
offset-rotate: 0.25turn;
}
Try it Yourself 
Related Pages
HTML SVG tutorial:
SVG Path
CSS tutorial:
CSS Animations
CSS offset property:
CSS Offset property
CSS offset-anchor property:
CSS Offset-anchor property
CSS offset-distance property:
CSS Offset-distance property
CSS offset-path property:
CSS Offset-path property
CSS
place-content
Property
Example
Specify the flex lines to align towards the bottom of the flex container, and align the flex items with the same space between them horizontally:
#container {
display: flex;
place-content: end space-between;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
place-content
property is used in flexbox and grid layouts, and is a shorthand property for the following properties:
align-content
justify-content
If the place-content property has two values:
place-content: start center;
align-content property value is 'start'
justify-content property value is 'center'
If the place-content property has one value:
place-content: end;
align-content and justify-content property values are both 'end'
Show demo 
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.placeContent="end space-around"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
place-content
59.0
79.0
53.0
11.0
46.0
CSS Syntax
place-content: normal|
value
|initial|inherit;
Property Values
Value
Description
Demo
normal
Default value. Dependant on layout context. The same as setting no property value for align-content and justify-content.
Demo 
stretch
Grid: Stretches grid items to fill the grid container if size is not set.
Flexbox: Stretches flex items on the cross axis to fill the flex container if flex items have no specified size on the cross axis.
Demo 
start
Align items at the start of the container
Demo 
end
Align items at the end of the container
Demo 
center
Align items to the center of the container
Demo 
space-between
Distribute available extra space evenly between the elements inside the container on both axis.
Demo 
space-around
Distribute available extra space evenly around each element inside the container on both axis.
Demo 
space-evenly
Distribute elements inside the container evenly on both axis.
Demo 
overflow-alignment
'safe' sets alignment of the item to 'start' if the content overflows
'unsafe' keeps the alignment value regardless of wether or not the item content overflows
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example with grid
Available extra space in the block direction is distributed evenly around each grid item, and the grid items are aligned to the center in the inline direction:
#container {
display: grid;
place-content: space-around center;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS flexbox
CSS tutorial:
CSS grid
CSS Reference:
align-content property
CSS Reference:
justify-content property
HTML DOM reference:
alignContent property
CSS
perspective
Property
Example
Give a 3D-positioned element some perspective:
#div1
 {
perspective: 100px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
perspective
property is used to give a 3D-positioned element some 
perspective.
The
perspective
property defines how far the object is away from the user. 
So, a lower value will result in a more intensive 3D effect than a higher value.
When defining the
perspective
property for an element, it is the CHILD elements 
that get the perspective view, NOT the element itself.
Tip:
Also look at the
perspective-origin
property, 
which defines at which position the user is looking at the 3D object.
To better understand the perspective property,
view a demo
.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.perspective="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
perspective
36
10
16
9
23
CSS Syntax
perspective:
length
|none;
Property Values
Property Value
Description
Demo
length
How far the element is placed from the view
Demo 
none
Default value. Same as 0. The perspective is not set
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create a cube and set different perspectives:
.ex1 {
perspective: 800px;
}
.ex2 {
perspective: 150px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS 3D Transforms
HTML DOM reference:
perspective property
CSS
place-items
Property
Example
Place each <div> element at the start of its grid cell in the inline and block directions:
#container {
place-items: start;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
place-items
property is used in  grid layout, and is a shorthand property for the following properties:
align-items
justify-items
If the place-items property has two values:
place-items: start center;
align-items property value is 'start'
justify-items property value is 'center'
If the place-items property has one value:
place-items: end;
align-items and justify-items property values are both 'end'
Show demo 
Default value:
normal legacy
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.placeItems="stretch center"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
place-items
59.0
79.0
45.0
11.0
46.0
CSS Syntax
place-items: normal legacy|
value
|initial|inherit;
Property Values
Value
Description
Demo
normal legacy
Default. The element's default place-items value. The default value for align-items is 'normal', and the default value for justify-items is 'legacy'.
Demo 
baseline
Items are positioned at the baseline of the container
Demo 
center
Align items to the center of the grid cell
Demo 
end
Align items at the end of the grid cell
Demo 
start
Align items at the start of the grid cell
Demo 
stretch
Stretches grid items to fill the grid container if the grid item sizes are not set.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing-mode
With the
writing-mode
property value of the grid container set to 'vertical-rl', the end in block direction is moved from bottom to left, and the end in inline direction is moved from right to bottom side:
#container {
place-items: end;
writing-mode: vertical-rl;
}
Try it Yourself 
Flexbox
The
justify-items
property is not relevant for flexbox. So if the
place-items
property is used in flexbox layout, the value for justify-items (the second value) is ignored.
#wrapper {
place-items: stretch end;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS grid
CSS tutorial:
CSS flexbox
CSS align-items property:
CSS align-items property
CSS justify-items property:
CSS justify-items property
CSS writing-mode property:
CSS Writing-mode property
CSS
position
Property
Example
Position an <h2> element:
h2
 {
position: absolute;
left: 100px;
top: 150px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
position
property specifies the type of positioning method used for an 
element (static, relative, absolute, fixed, or sticky).
Default value:
static
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.position="absolute"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
position
1.0
7.0
1.0
1.0
4.0
Note:
The
sticky
value is not supported in Edge 15 and earlier versions.
CSS Syntax
position: static|absolute|fixed|relative|sticky|initial|inherit;
Property Values
Value
Description
Demo
static
Default value. Elements render in order, as they appear in the document flow
Play it 
absolute
The element is positioned relative to its first positioned (not static) ancestor element
Play it 
fixed
The element is positioned relative to the browser window
Play it 
relative
The element is positioned relative to its normal position, so "left:20px"
      adds 20 pixels to the element's LEFT position
Play it 
sticky
The element is positioned based on the user's scroll position
A sticky element toggles between
relative
and
fixed
, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
Note:
Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a -webkit- prefix.
Try it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
How to position an element relative to its normal position:
h2.pos_left {
position: relative;
left: -20px;
}
h2.pos_right {
position: relative;
left: 20px;
}
Try it Yourself 
Example
More positioning:
#parent1 {
position: static;
border: 1px solid blue;
width: 300px;
height: 100px;
}
#child1 {
position: 
    absolute;
border: 1px solid red;
top: 70px;
right: 15px;
}
#parent2 {
position: relative;
border: 1px solid blue;
width: 300px;
height: 100px;
}
#child2 {
position: absolute;
border: 1px solid red;
top: 70px;
right: 15px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
HTML DOM reference:
position property
CSS
rotate
Property
Example
Change rotation of an element:
div
 {
rotate: 30deg;
}
Try it Yourself 
Definition and Usage
The
rotate
property allows you to rotate elements.
The
rotate
property defines a value for how much an element is rotated clockwise around z-axis. To rotate an element around x-axis or y-axis or in other ways, this must be defined.
Values for
rotate
property can be given as one angle, axis name + angle, or three values + angle.
If an angle is given, the element is rotated clockwise around z-axis.
If axis name + angle is given, the element is rotated clockwise around that given axis.
If three values are given + angle, the three values define a vector which the element is rotated around.
To better understand the
rotate
property,
view a demo
.
Note:
An alternative technique to rotate an element is to use CSS
transform
property with CSS
rotate()
function. The CSS
rotate
property, as explained on this webpage, is arguably a simpler and more direct way to scale an element.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.rotate="-120deg"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
rotate
104
104
72
14.1
90
CSS Syntax
rotate:
axis angle
|initial|inherit;
Property Values
Property Value
Description
Demo
axis
Optional. If not set, z-axis is default. Defines axis to rotate element around. Possible values:
x
y
z
Demo 
angle
Defines how much an element is rotated. Possible units:
deg
rad
turn
Demo 
vector angle
Three numbers define a vector for the element to be rotated around. The numbers are x-, y- and z-coordinates for the vector, respectively. The last value is the angle for how much to rotate. Possible values:
number number number angle
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
When
rotate
property is set with vector and angle, the element is rotated around that vector. Here, the vector is [1 1 0] in 2D plane with x- and y-coordinates, and then rotated 60 degrees:
div {
rotate: 1 1 0 60deg;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
CSS scale property:
CSS Scale property
CSS translate property:
CSS Translate property
CSS
font-feature-settings
Property
Example
Specify font-feature-settings:
/* enable small-caps */
.ex1 { font-feature-settings: "smcp" on; }
/* convert both upper and lowercase to small caps */
.ex2 { 
    font-feature-settings: "c2sc", "smcp"; }
/* no common ligatures */
.ex3 { font-feature-settings: "liga" 0; }
/* enable automatic 
    fractions */
.ex4 { font-feature-settings: "frac"; }
Try it Yourself 
Definition and Usage
The
font-feature-settings
property allows control over advanced typographic features in OpenType fonts.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.fontFeatureSettings="normal"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-feature-settings
48
10
34
9.1
35
CSS Syntax
font-feature-settings: normal|
feature-value
;
Property Values
Value
Description
Demo
normal
Default. Use the default settings to lay out text
Demo 
feature-value
Format: string [1|0|on|off] Always a string of 4 ASCII characters.
Demo 
CSS
font-size-adjust
Property
Example
By specifying the font-size-adjust property, the browser will adjust the font 
size to be the same regardless of the font family ("verdana" has the aspect 
value 0.58)
div
 {
font-size-adjust: 0.58;
}
Try it Yourself 
Definition and Usage
The
font-size-adjust
property gives you better control of the font size when 
the first selected font is not available.
When a font is not available, the browser uses the second specified font. 
This could result in a big change for the font size. To prevent this, use the
font-size-adjust
property.
All fonts have an "aspect value" which is the size-difference between the 
lowercase letter "x" and the uppercase letter "X".
When the browser knows the "aspect value" for the first selected font, the 
browser can figure out what font-size to use when displaying text with the 
second choice font.
Default value:
none
Inherited:
yes
Animatable:
yes.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.fontSizeAdjust="0.58"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
font-size-adjust
127
127
3
17
113
Syntax
font-size-adjust:
number
|none|initial|inherit;
Property Values
Value
Description
number
Defines the aspect value to use
none
Default value. No font size adjustment
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
fontSizeAdjust property
CSS
gap
Property
Example
Set the gap between rows and between columns to 50px:
.grid-container {
gap: 50px;
}
Try it Yourself 
Definition and Usage
The
gap
property defines the size of 
the gap between the rows and between the columns in flexbox, grid or multi-column layout. It is a shorthand for the 
following properties:
row-gap
column-gap
Show demo 
Default value:
normal normal
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Box Alignment Module Level 3
JavaScript syntax:
object
.style.gap="50px 100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
gap (in Grid)
66
16
61
12
53
gap (in Flexbox)
84
84
63
14.1
70
gap (in Multiple Columns)
66
16
61
14.1
53
CSS Syntax
gap:
row-gap column-gap
|initial|inherit;
Property Values
Value
Description
Demo
row-gap
Sets the size of the gap between the rows in a grid or flexbox layout
Demo 
column-gap
Sets the size of the gap between the columns in a grid, flexbox or multi-column layout
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Grid layout
Set the gap between rows to 20px, and the columns to 50px in a grid layout:
#grid-container {
display: grid;
gap: 20px 50px;
}
Try it Yourself 
Flexbox layout
Set the gap between rows to 20px, and the columns to 70px in a flexbox layout:
#flex-container {
display: flex;
gap: 20px 70px;
}
Try it Yourself 
Multi-column layout
Set the gap between the columns to 50px in a multi-column layout:
#newspaper {
columns: 3;
gap: 50px;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Tutorial:
CSS Flexbox Layout
CSS Tutorial:
CSS Muilti-column Layout
CSS Reference:
row-gap property
CSS Reference:
column-gap property
CSS
grid-area
Property
Example
Make "item1" start on row 2 column 1, and span 2 rows and 3 columns:
.item1 {
grid-area: 2 / 1 / span 2 / span 3;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
grid-area
property specifies a grid 
item's size and location in a grid layout, and is a shorthand property for the 
following properties:
grid-row-start
grid-column-start
grid-row-end
grid-column-end
The
grid-area
property can also be used to assign a name to a grid item. 
Named grid items can then be referenced to by the
grid-template-areas
property of the 
grid container. See examples below.
Show demo 
Default value:
auto / auto / auto / auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridArea="1 / 2 / span 2 / span 3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-area
57
16
52
10
44
CSS Syntax
grid-area:
grid-row-start / grid-column-start / grid-row-end / 
  grid-column-end
|
itemname
;
Property Values
Value
Description
Demo
grid-row-start
Specifies on which row to start displaying the item.
Demo 
grid-column-start
Specifies on which column to start displaying the item.
Demo 
grid-row-end
Specifies on which row-line to stop displaying the item, or how many rows to span.
Demo 
grid-column-end
Specifies on which column-line to stop displaying the item, or how many columns to span.
Demo 
itemname
Specifies a name for the grid item
More Examples
Example
Item1 gets the name "myArea", and spans all five columns in a five columns 
grid layout:
.item1 {
grid-area: myArea;
}
.grid-container {
display: 
  grid;
grid-template-areas: 'myArea myArea myArea myArea myArea';
}
Try it Yourself 
Example
Let "myArea" span two columns in a five columns grid layout (period signs 
represent items with no name):
.item1 {
grid-area: myArea;
}
.grid-container {
display: 
  grid;
grid-template-areas: 'myArea myArea . . .';
}
Try it Yourself 
Example
Make "item1" span two columns and two rows:
.grid-container {
grid-template-areas: 'myArea myArea . . .' 'myArea 
  myArea . . .';
}
Try it Yourself 
Example
Name all items, and make a ready-to-use webpage template:
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { 
  grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: 
  footer; }
.grid-container {
grid-template-areas:
'header header header header header header'
'menu main 
  main main right right'
'menu footer footer footer footer 
  footer';
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS
initial-letter
Property
Example
Show different size of initial-letter:
.normal::first-letter {
-webkit-initial-letter: normal;
initial-letter: normal;
}
.two::first-letter {
-webkit-initial-letter: 
    2;
initial-letter: 2; /* Initial letter occupies 2 lines */
}
.four::first-letter {
-webkit-initial-letter: 4;
initial-letter: 4; /* Initial letter occupies 4 lines */
}
.four2::first-letter {
-webkit-initial-letter: 4 2;
initial-letter: 4 2; /* Initial letter occupies 4 lines and sinks 2 lines */
}
Try it Yourself 
Definition and Usage
The
initial-letter
property specifies the 
size of the initial-letter and optionally the number of lines the initial letter 
should sink (down in the text).
This property applies to
:first-letter
pseudo-elements and inline-level first child of a block container.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a prefix.
Property
initial-letter
110.0
110.0
Not supported
9.0 -webkit-
96.0
CSS Syntax
initial-letter: normal|number|integer;
Property Values
Value
Description
normal
Default. No effect. Text behaves as normal
number
Sets the size of the initial letter (how many lines the initial letter 
    should span)
integer
Optional. Sets the number of lines the initial letter should sink (in 
    the text)
CSS
grid-column-start
Property
Example
Make "item1" start on column 2:
.item1 {
grid-column-start: 2;
}
Try it Yourself 
Definition and Usage
The
grid-column-start
property defines on which column-line the item will start.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Grid Layout Module Level 1
JavaScript syntax:
object
.style.gridColumnStart="3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
grid-column-start
57
16
52
10
44
CSS Syntax
grid-column-start: auto|span
n
|
column-line
;
Property Values
Value
Description
Demo
auto
Default value. The item will be placed following the flow
Demo 
span
n
Specifies the number of columns the item will span
Demo 
column-line
Specifies on which column to
start the display of the item
Demo 
Related Pages
CSS tutorial:
CSS Grid Layout
CSS reference: The
grid-column
Property
CSS reference: The
grid-column-end
Property
CSS reference: The
grid-row-start
Property
CSS reference: The
grid-row-end
Property
CSS
overflow-wrap
Property
Example
Let the browser be allowed to break lines with long words, if they overflow 
the container:
div {
overflow-wrap: break-word;
}
Try it Yourself 
Definition and Usage
The
overflow-wrap
property specifies whether 
or not the browser can break lines with long words, if they overflow the container.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overflowWrap="normal"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overflow-wrap
23.0
18.0
49.0
6.1
12.1
CSS Syntax
overflow-wrap: normal|anywhere|break-word|initial|inherit;
Property Values
Value
Description
Demo
normal
Long words will not break, even if they overflow the container. This is default
Demo 
anywhere
Long words will break if they overflow the container
Demo 
break-word
Long words will break if they overflow the container
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Overflow
CSS
overflow-x
Property
Example
Show different overflow-x property values:
div.ex1 {
overflow-x: scroll;
}
div.ex2 {
overflow-x: hidden;
}
div.ex3 {
overflow-x: 
    auto;
}
div.ex4 {
overflow-x: visible;
}
Try it Yourself 
Definition and Usage
The
overflow-x
property specifies whether to clip the content, add a scroll 
bar, or display overflow content of a block-level element, when it overflows at 
the left and right edges.
Tip:
Use the
overflow-y
property 
to determine clipping at the  
top and bottom edges.
Show demo 
Default value:
visible
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overflowX="scroll"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overflow-x
4
9
3.5
3
9.5
CSS Syntax
overflow-x: visible|hidden|scroll|auto|initial|inherit;
Property Values
Value
Description
Demo
visible
The content is not clipped, and it may be rendered outside the left and 
    right edges. This is default
Demo 
hidden
The content is clipped - and no scrolling mechanism is provided
Demo 
scroll
The content is clipped and a scrolling mechanism is provided
Demo 
auto
Should cause a scrolling mechanism to be provided for overflowing boxes
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Overflow
HTML DOM reference:
overflowX property
CSS
overscroll-behavior-block
Property
Example
Turn off scroll chaining for a scrollable <div> element in the block direction:
#yellowDiv {
overscroll-behavior-block: contain;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
overscroll-behavior-block
property is used to turn off scroll chaining or overscroll affordance on an element when you try to scroll past the scroll boundary in the block direction.
The CSS
overscroll-behavior-block
and
overscroll-behavior-inline
properties are very similar to CSS properties
overscroll-behavior-x
and
overscroll-behavior-y
, but the
overscroll-behavior-block
and
overscroll-behavior-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects whether the block direction is in the x-direction or y-direction and the result of the
overscroll-behavior-block
property. For pages in English, block direction is downward and inline direction is left to right.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overscrollBehaviorBlock="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overscroll-behavior-block
63.0
18.0
59.0
16.0
50.0
CSS Syntax
overscroll-behavior-block:  auto|contain|none|initial|inherit;
Property Values
Value
Description
auto
Allows scroll chaining and overscroll affordance behavior. This is default
contain
Allows overscroll affordance behavior, but not scroll chaining.
none
Does not allow overscroll affordance or scroll chaining behavior.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
With writing-mode property
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the block direction is in the x-direction, and so the overscroll-behavior-block now works in the x-direction instead of the y-direction:
#yellowDiv {
writing-mode: vertical-rl;
overscroll-behavior-block: contain;
}
Try it Yourself 
Related Pages
CSS overscroll-behavior property:
CSS Overscroll-behavior property
CSS overscroll-behavior-inline property:
CSS Overscroll-behavior-inline property
CSS overscroll-behavior-x property:
CSS Overscroll-behavior-x property
CSS overscroll-behavior-y property:
CSS Overscroll-behavior-y property
CSS scroll-behavior property:
CSS Scroll-behavior property
CSS scroll-margin property:
CSS Scroll-margin property
CSS scroll-padding property:
CSS Scroll-padding property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS writing-mode property:
CSS Writing-mode property
CSS
padding
Property
Example
Set the padding for all four sides of a <p> element to 35 pixels:
p {
padding: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's padding is the space between its content and its border.
The
padding
property is a shorthand property for:
padding-top
padding-right
padding-bottom
padding-left
Note:
Padding creates extra space within an element, while 
margin creates extra space around an element.
This property can have from one to four values.
If the padding property has four values:
padding:10px 5px 15px 20px;
top padding is 10px
right padding is 5px
bottom padding is 15px
left padding is 20px
If the padding property has three values:
padding:10px 5px 15px;
top padding is 10px
right and left padding are 5px
bottom padding is 15px
If the padding property has two values:
padding:10px 5px;
top and bottom padding are 10px
right and left padding are 5px
If the padding property has one value:
padding:10px;
all four paddings are 10px
Note:
Negative values are not allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.padding="100px 20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding
1.0
4.0
1.0
1.0
3.5
CSS Syntax
padding:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies the padding in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
%
Specifies the padding in percent of the width of the containing element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the padding for a <p> element to 35 pixels for top and bottom, and to 70 
pixels for right and left:
p {
padding: 35px 70px;
}
Try it Yourself 
Example
Set the padding for a <p> element to 35 pixels for top, 70 
pixels for right and left, and to 50 pixels for bottom:
p {
padding: 35px 70px 50px;
}
Try it Yourself 
Example
Set the padding for a <p> element to 35 pixels for top, 70 
pixels for right, 50 pixels for bottom, and to 90 pixels for left:
p {
padding: 35px 70px 50px 90px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS tutorial:
CSS Box Model
HTML DOM reference:
padding 
property
CSS
overscroll-behavior-x
Property
Example
Turn off scroll chaining for a scrollable <div> element in the x-direction:
#yellowDiv {
overscroll-behavior-x: contain;
}
Try it Yourself 
Definition and Usage
The
overscroll-behavior-x
property is used to turn off scroll chaining or overscroll affordance on an element when you try to scroll past the scroll boundary in the x-direction.
Note:
To scroll sideways in the x-direction to trigger overscroll-behavior, you might need to use swipe-gesture on a touchpad or a touchscreen.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overscrollBehaviorX="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overscroll-behavior-x
63.0
18.0 *
59.0
16.0
50.0
* In Microsoft Edge, the property value 'none' is treated like 'contain', and this is not correct.
CSS Syntax
overscroll-behavior-x:  auto|contain|none|initial|inherit;
Property Values
Value
Description
auto
Allows scroll chaining and overscroll affordance behavior. This is default
contain
Allows overscroll affordance behavior, but not scroll chaining.
none
Does not allow overscroll affordance or scroll chaining behavior.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS overscroll-behavior property:
CSS Overscroll-behavior property
CSS overscroll-behavior-block property:
CSS Overscroll-behavior-block property
CSS overscroll-behavior-inline property:
CSS Overscroll-behavior-inline property
CSS overscroll-behavior-y property:
CSS Overscroll-behavior-y property
CSS scroll-behavior property:
CSS Scroll-behavior property
CSS scroll-margin property:
CSS Scroll-margin property
CSS scroll-padding property:
CSS Scroll-padding property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS
padding-block-start
Property
Example
Set the padding at the start in the block direction:
p {
padding-block-start: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-block-start
is the space from its border to its content, at the start in the block direction.
The CSS
padding-block
and
padding-inline
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-block
and
padding-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
padding-block
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingBlockStart="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-block-start
87.0
87.0
41.0
12.1
73.0
CSS Syntax
padding-block-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-block-start value.
Demo 
length
Specifies padding-block-start in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies padding-block-start in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the start of the element is moved from top to right side:
div {
writing-mode: vertical-rl;
padding-block-start: 50px;
}
Try it Yourself 
Related Pages
CSS padding-block property:
CSS Padding-block property
CSS padding-block-end property:
CSS Padding-block-end property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
padding-right
Property
Example
Set the right padding for a <p> element to 150 pixels:
p.ex1 {
padding-right: 150px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's padding is the space between its content and its border.
The
padding-right
property sets the right padding (space) of an element.
Note:
Negative values are not allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.paddingRight="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-right
1.0
4.0
1.0
1.0
3.5
CSS Syntax
padding-right:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed right padding in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
%
Specifies a right padding in percent of the width of the containing element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the right padding for a <p> element to 50% of the width of the 
containing element:
p.ex1 {
padding-right: 50%;
}
Try it Yourself 
Example
Set the right padding for a <p> element to 2 em:
p.ex1 {
padding-right: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
HTML DOM reference:
paddingRight property
CSS
padding-block-end
Property
Example
Set the padding at the end in the block direction:
p {
padding-block-end: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-block-end
is the space from its border to its content, at the end in the block direction.
The CSS
padding-block
and
padding-inline
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-block
and
padding-inline
properties are dependent on block and inline directions.
Note:
The related CSS property
writing-mode
defines block direction. This affects where the start and end of a block is and the result of the
padding-block
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingBlockEnd="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-block-end
87.0
87.0
41.0
12.1
73.0
CSS Syntax
padding-block-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-block-end value.
Demo 
length
Specifies padding-block-end in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies padding-block-end in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the end of the element is moved from bottom to left side:
div {
writing-mode: vertical-rl;
padding-block-end: 50px;
}
Try it Yourself 
Related Pages
CSS padding-block property:
CSS Padding-block property
CSS padding-block-start property:
CSS Padding-block-start property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin
Property
Example
Set scroll margin to 20px between the snap position and the container:
div {
scroll-margin: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin
property specifies 
the distance between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance between the snap position and the container.
Note:
In the example above, scroll margin is set on all sides, but only the scroll margin on the top side changes the scrolling behaviour because the
scroll-snap-align
property is set to "start".
The
scroll-margin
property is a shorthand property for the following properties:
scroll-margin-top
scroll-margin-bottom
scroll-margin-left
scroll-margin-right
Values for the
scroll-margin
property can be set in different ways:
If the scroll-margin property has four values:
scroll-margin: 15px 30px 60px 90px;
top distance is 15px
right distance is 30px
bottom distance is 60px
left distance is 90px
If the scroll-margin property has three values:
scroll-margin: 15px 30px 60px;
top distance is 15px
left and right distances are 30px
bottom distance is 60px
If the scroll-margin property has two values:
scroll-margin: 15px 30px;
top and bottom distances are 15px
left and right distances are 30px
If the scroll-margin property has one value:
scroll-margin: 10px;
all four distances are 10px
To see the effect from the
scroll-margin
property, the
scroll-margin
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMargin="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin
69.0
79.0
90.0
14.1
56.0
CSS Syntax
scroll-margin:  0|
value
|initial|inherit;
Property Values
Value
Description
0
Scroll-margin is zero. This is default
length
Specifies scroll-margin in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-margin
property can be used in an image gallery with snap behaviour. Here, the scroll-margin lets the user see that there is an image to the left. Scroll past the first image to see the effect:
#container > img {
scroll-margin: 0 0 0 30px;
}
Try it Yourself 
Set scroll-margin at bottom and to the right
The
scroll-margin
property can be set at both the bottom and the right of elements. Scroll to the next element both horizontally and vertically to see the effect:
#container > div {
scroll-margin: 0 10px 30px 0;
}
Try it Yourself 
Related Pages
CSS scroll-margin-bottom property:
CSS Scroll-margin-bottom property
CSS scroll-margin-left property:
CSS Scroll-margin-left property
CSS scroll-margin-right property:
CSS Scroll-margin-right property
CSS scroll-margin-top property:
CSS Scroll-margin-top property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS
scroll-margin-block-end
Property
Example
Set scroll margin to 20px between the snap position and the container in the block direction:
div {
scroll-margin-block-end: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-block-end
property specifies the distance in block direction, between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position at the end of the child element and the container.
Note:
This property only works if the scroll-snap-align property is set to 'end' for the block direction.
To see the effect from the
scroll-margin-block-end
property, the
scroll-margin-block-end
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and line directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginBlockEnd="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-block-end
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-block-end: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default scroll-margin-block-end distance.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the end of the element is moved from bottom to left side:
div {
scroll-margin-block-end: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-block
Property
Example
Set the distance to the scrollable container from a snap position in the block direction:
div {
scroll-margin-block: 10px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-block
property specifies the distance in block direction, between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' or 'end' for the block direction.
The
scroll-margin-block
property is a shorthand property for the following properties:
scroll-margin-block-start
scroll-margin-block-end
Values for the
scroll-margin-block
property can be set in different ways:
If the scroll-margin-block property has two values:
scroll-margin-block: 10px 50px;
distance at start is 10px
distance at end is 50px
If the scroll-margin-block property has one value:
scroll-margin-block: 10px;
distance at start and end is 10px
To see the effect from the
scroll-margin-block
property, the
scroll-margin-block
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and inline directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginBlock="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-block
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-block: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default scroll-margin-block value.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a child element set to vertical-rl, the start of the element in block direction is moved from top to right side, and the end of the element is moved from bottom to left side. This affects the scroll snap behaviour, and how the scroll-margin-block property works:
div {
scroll-margin-block: 20px 0;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-margin-block-end property:
CSS scroll-margin-block-end property
CSS scroll-margin-block-start property:
CSS scroll-margin-block-start property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-inline
Property
Example
Set the distance to the scrollable container from a snap position in the inline direction:
div {
scroll-margin-inline: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-inline
property specifies the distance in the inline direction, between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in the inline direction, between the snap position and the container.
The
scroll-margin-inline
property is a shorthand property for the following properties:
scroll-margin-inline-start
scroll-margin-inline-end
Values for the
scroll-margin-inline
property can be set in different ways:
If the scroll-margin-inline property has two values:
scroll-margin-inline: 20px 70px;
distance at start is 20px
distance at end is 70px
If the scroll-margin-inline property has one value:
scroll-margin-inline: 20px;
distance at start and end is 20px
To see the effect from the
scroll-margin-inline
property, the
scroll-margin-inline
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and inline directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginInline="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-inline
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-inline: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default scroll-margin-inline distance.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top, and the end of the element is moved from right side to bottom. This also affects the
scroll-margin-inline
property:
div {
scroll-margin-inline: 20px 0;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to right side, and the end of the element is moved from right side to left side. This also affects the
scroll-margin-inline
property:
div {
scroll-margin-inline: 0 20px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-margin-inline-end property:
CSS scroll-margin-inline-end property
CSS scroll-margin-inline-start property:
CSS scroll-margin-inline-start property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-inline-end
Property
Example
Set the distance to the scrollable container from a snap position in the inline direction:
div {
scroll-margin-inline-end: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-inline-end
property specifies the distance in the inline direction, between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in the inline direction, between the snap position at the end of the child element and the container.
Note:
This property only works if the scroll-snap-align property is set to 'end' for the inline direction.
To see the effect from the
scroll-margin-inline-end
property, the
scroll-margin-inline-end
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and inline directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginInlineEnd="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-inline-end
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-inline-end: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default scroll-margin-inline-end distance.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the end of the element is moved from right side to bottom:
div {
scroll-margin-inline-end: 20px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the end of the element is moved from right side to left side:
div {
scroll-margin-inline-end: 20px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-inline-start
Property
Example
Set the distance to the scrollable container from a snap position in the inline direction:
div {
scroll-margin-inline-start: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-inline-start
property specifies the distance in the inline direction, between the snap position and the container.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in the inline direction, between the snap position at the start of the child element and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' for the inline direction.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and inline directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginInlineStart="30px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-inline-start
69.0
79.0
68.0
14.1
56.0
CSS Syntax
inset-inline-start: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default inset distance.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top:
div {
scroll-margin-inline-start: 20px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to left right:
div {
scroll-margin-inline-start: 20px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-left
Property
Example
Set scroll padding to 20px from the left side of the container to the snap position:
div {
scroll-padding-left: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-left
property specifies 
the distance from the left side of the container to the snap position on the child elements.
Note:
This property only works if the snap position is placed on the left side of the child element.
To see the effect from the
scroll-padding-left
property, the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-left
and
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingLeft="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-left
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-padding-left:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-left in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-left
property can be used in an image gallery with snap behaviour, to push images into view from behind a fixed element:
#container > img {
scroll-padding-left: 30px;
}
Fixed
Try it Yourself 
Set scroll-padding on the left side
The
scroll-padding-left
property can also be set on the container when snap behaviour is set in both directions. Scroll to the next element horizontally to see the effect:
#container > div {
scroll-padding-left: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on the left side of the child elements for the
scroll-padding-left
property to work. In this example the
direction
property value 'rtl' changes the snap position from left side to right side of child elements. With the code like this the
scroll-padding-left
property no longer works:
#container {
direction: rtl;
scroll-padding-left: 30px;
}
#container > div {
scroll-snap-align: none start;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
inset
Property
Example
Set the distance to the parent element from the positioned <div> element:
div {
inset: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset
property sets the distance between an element and the parent element.
The
inset
property is a shorthand property for the following properties:
top
bottom
left
right
Values for the
inset
property can be set in different ways:
If the inset property has four values:
inset: 15px 30px 60px 90px;
top distance is 15px
right distance is 30px
bottom distance is 60px
left distance is 90px
If the inset property has three values:
inset: 15px 30px 60px;
top distance is 15px
left and right distances are 30px
bottom distance is 60px
If the inset property has two values:
inset: 15px 30px;
top and bottom distances are 15px
left and right distances are 30px
If the inset property has one value:
inset: 10px;
all four distances are 10px
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.inset="100px 50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset
87.0
87.0
66.0
14.1
73.0
CSS Syntax
inset: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset distance.
Demo 
length
Specifies inset in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the inset property value of a <div> element to 15 pixels distance to parent from top and bottom, and to 30 pixels from left and right:
div {
inset: 15px 30px;
}
Try it Yourself 
Example
Set the inset property value of a <div> element to 15 pixels distance to parent from top, 30 pixels from left and right, and 60 pixels from bottom:
div {
inset: 15px 30px 60px;
}
Try it Yourself 
Example
Set the inset property value of a <div> element to 15 pixels distance to top, 30 pixels from right, 60 pixels from bottom, and to 90 pixels from left:
div {
inset: 15px 30px 60px 90px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS bottom property:
CSS Bottom property
CSS left property:
CSS Left property
CSS right property:
CSS Right property
CSS top property:
CSS Top property
CSS
inset-inline-start
Property
Example
Set the distance to the parent element from the start of a positioned <div> element in the inline direction:
div {
inset-inline-start: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
inset-inline-start
property sets the distance between the start of an element and the parent element in the inline direction.
The CSS
inset-inline
and
inset-block
properties are very similar to CSS properties
top
,
bottom
,
left
and
right
, but the
inset-block
and
inset-inline
properties are dependent on block and line directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start of an element is in the inline direction and the result of the
inset-inline-start
property. For pages in English, inline direction is left to right and block direction is downward.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.insetInlineStart="30%"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
inset-inline-start
87.0
87.0
63.0
14.1
73.0
CSS Syntax
inset-inline-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default inset distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element on the corresponding axis.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top:
div {
inset-inline-start: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to left right:
div {
inset-inline-start: 50px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Position
CSS position property:
CSS Position property
CSS direction property:
CSS Direction property
CSS writing-mode property:
CSS Writing-mode property
CSS
mask
Property
Example
Create a mask layer for an image:
.mask1 {
mask: url(w3logo.png) no-repeat 50% 50%;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mask
property is used to hide an element 
(partially or fully) by masking or clipping the image at specific points:
The
mask
property is a shorthand property 
for the following:
mask-image
mask-mode
mask-repeat
mask-position
mask-clip
mask-origin
mask-size
mask-composite
Default value:
none match-source repeat 0% 0% border-box border-box auto add
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.mask="url(star.svg)"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask
120
120
53
15.4
106
CSS Syntax
mask-image: none|
image
|
url
|initial|inherit;
Property Values
Value
Description
mask-image
Specifies an image to be used as a mask layer for an element. Default 
    value is none
mask-mode
Specifies whether the mask layer image should be treated as a luminance 
    mask or as an alpha mask. Default value is match-source
mask-repeat
Sets if/how a mask image will be repeated. Default value is repat
mask-position
Sets the starting position of a mask image (relative to the mask 
    position area). Default value is 0% 0%
mask-clip
Specifies which area is affected by a mask image. Default value is border-box
mask-origin
Specifies the origin position (the mask position area) of a mask layer 
    image. Default value is border- box
mask-size
Specifies the size of the mask layer image. Default value is auto
mask-composite
Specifies a compositing operation used on the current mask layer with 
    the mask layers below it. Default value is add
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Create different mask layers for an image with linear and radial gradients:
.mask1 {
mask: linear-gradient(black, 
    transparent);
}
.mask2 {
mask: radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);
}
.mask3 {
mask: radial-gradient(ellipse, black 50%, rgba(0, 0, 
    0, 0.5) 50%);
}
Try it Yourself 
Example
Use the SVG <mask> element to create a mask layer for an image:
<svg width="600" height="400">
<mask id="svgmask1">
<polygon fill="#ffffff" points="100,10 40,198 190,78 10,78 
    160,198"></polygon>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="img_5terre.jpg" 
    mask="url(#svgmask1)"></image>
</svg>
Try it Yourself 
Example
Use the SVG <mask> element to create a mask layer for an image:
<svg width="600" height="400">
<mask id="svgmask1">
<circle fill="#ffffff" cx="75" cy="75" r="75"></circle>
<circle fill="#ffffff" cx="80" cy="260" r="75"></circle>
<circle fill="#ffffff" cx="270" cy="160" r="75"></circle>
</mask>
<image xmlns:xlink="http://www.w3.org/1999/xlink" 
    xlink:href="img_5terre.jpg" mask="url(#svgmask1)"></image>
</svg>
Try it Yourself 
Related Pages
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-position property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
page-break-before
Property
Example
Always insert a page-break before a <h1> element:
@media print
{
h1 {page-break-before: always;}
}
Definition and Usage
The
page-break-before
property adds a 
page-break before a specified element.
Note:
This property is replaced by the
break-before
property!
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.pageBreakBefore="always"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
page-break-before
1.0
4.0
1.0
1.2
7.0
CSS Syntax
page-break-before: auto|always|avoid|left|right|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page-breaks
always
Always insert a page-break before the element
avoid
Avoid page-break before the element (if possible)
left
Insert page-break before the element so that the next page is   formatted as a left page
right
Insert page-break before the element so that the next page is   formatted as a right page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
pageBreakBefore property
CSS
page-break-inside
Property
Example
Avoid page-break inside <pre> and <blockquote> elements:
@media print {
pre, blockquote {page-break-inside: avoid;}
}
Definition and Usage
The
page-break-inside
property sets whether a page-break should be avoided inside a specified element.
Note:
This property is replaced by the
break-inside
property!
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.pageBreakInside="avoid"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
page-break-inside
1.0
8.0
19.0
1.3
7.0
CSS Syntax
page-break-inside: auto|avoid|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page-breaks
avoid
Avoid page-break inside the element (if possible)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
pageBreakInside property
CSS
paint-order
Property
Example
Change paint order for an SVG <circle> element:
circle {
paint-order: stroke fill;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
paint-order
property specifies the order of how an SVG element or text is painted.
Note:
Only the order of stroke and fill can be changed for text elements, because markers are not applicable.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.paintOrder="stroke fill"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
paint-order
35.0
17.0
60.0
8.0
22.0
CSS Syntax
paint-order: normal|
one value
|
two values
|
three values
|initial|inherit;
Property Values
Value
Description
Demo
normal
Default value. The paint order is fill, stroke, markers.
Demo 
one value
Painting will start with given value, then continue with the remaining painting in default order. If only "stroke" is given, the next painting activity is fill, then markers.
Demo 
two values
Painting will start with given values, then continue with the remaining painting in default order. If "stroke markers" are given, the next painting activity will be fill.
Demo 
three values
Painting will be done according to given values.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Change the paint order on an SVG <text> element with rainbow gradient fill:
text {
paint-order: stroke fill;
}
Try it Yourself 
Related Pages
SVG Tutorial:
SVG Tutorial
HTML SVG Graphics:
HTML SVG Graphics
CSS
perspective-origin
Property
Example
Define at from which position the user is looking at the 3D-positioned element:
#div1
 {
perspective: 100px;
perspective-origin: left;
}
Try it Yourself 
Definition and Usage
The
perspective-origin
property defines at from which position the user is 
looking at the 3D-positioned element.
When defining the
perspective-origin
property for an element, it is the CHILD elements 
that will get the effect, NOT the element itself.
Note:
This property must be used in conjunction with the
perspective
property!
To better understand the perspective-origin property,
view a demo
.
Show demo 
Default value:
50% 50%
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.perspectiveOrigin="10px 50%"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
perspective-origin
36
10
16
9
23
CSS Syntax
perspective-origin:
x-axis y-axis
|initial|inherit;
Property Values
Property Value
Description
Demo
x-axis
Defining where the view is placed at the x-axis
Possible values:
left
center
right
length
%
Default value: 50%
Demo 
y-axis
Defining where the view is placed at the y-axis
Possible values:
top
center
bottom
length
%
Default value: 50%
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS 3D Transforms
HTML DOM reference:
perspectiveOrigin property
CSS
resize
Property
Example
Here, the user can resize both the height and width of a <div> element:
div {
resize: both;
overflow: auto;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
resize
property defines if (and how) an element is resizable by the 
user.
Note:
The
resize
property does not apply to inline elements or to 
block elements where overflow="visible". So, make sure that overflow is set to 
"scroll", "auto", or "hidden".
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.resize="both"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
resize
4
79
5
4
15
CSS Syntax
resize: none|both|horizontal|vertical|initial|inherit;
Property Values
Value
Description
Demo
none
Default value. The user cannot resize the element
Play it 
both
The user can resize both the height and width of the element
Play it 
horizontal
The user can resize the width of the element
Play it 
vertical
The user can resize the height of the element
Play it 
initial
Sets this property to its default value.
Read about
initial
Play it 
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Let the user resize only the height of a <div> element:
div
 {
resize: vertical;
overflow: auto;
}
Try it Yourself 
Example
Let the user resize only the width of a <div> element:
div
 {
resize: horizontal;
overflow: auto;
}
Try it Yourself 
Example
In many browsers, <textarea> is resizable by default. Here, we have used the 
resize property to disable the resizability:
textarea {
resize: none;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS User Interface
HTML DOM reference:
resize property
CSS
scroll-behavior
Property
Example
Add a smooth scrolling effect to the document:
html {
scroll-behavior: smooth;
}
Try it Yourself 
Definition and Usage
The
scroll-behavior
property specifies 
whether to smoothly animate the scroll position, instead of a straight jump, 
when the user clicks on a link within a scrollable box.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSSOM View Module (Working Draft)
JavaScript syntax:
object
.style.scrollBehavior="smooth"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-behavior
61.0
79.0
36.0
14.0
48.0
CSS Syntax
scroll-behavior:  auto|smooth|initial|inherit;
Property Values
Value
Description
auto
Allows a straight jump "scroll effect" between elements within the scrolling box. This is default
smooth
Allows a smooth animated "scroll effect" between elements within the scrolling box.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
scale
Property
Example
Change size of an element:
div
 {
scale: 2;
}
Try it Yourself 
Definition and Usage
The
scale
property allows you to change the size of elements.
The
scale
property defines values for how much an element is scaled in x- and y-directions. You can also define how much an element is scaled in z-direction.
Scale values can be given as one value, two values, or three values.
If one value is given, the element is scaled the same amount in both x- and y-direction.
If two values are given, the element is scaled in x- and y-direction individually.
If three values are given, the element is scaled in x-, y- and z-direction individually.
To better understand the
scale
property,
view a demo
.
Note:
An alternative technique to scale an element is to use CSS
transform
property with CSS
scale()
function. The CSS
scale
property, as explained on this webpage, is arguably a simpler and more direct way to scale an element.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.scale="2 0.7"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scale
104
104
72
14.1
90
CSS Syntax
scale:
x-axis y-axis z-axis
|initial|inherit;
Property Values
Property Value
Description
Demo
x-axis
Defines scale factor at the x-axis. Possible values:
number
%
Demo 
y-axis
Defines scale factor at the y-axis. Possible values:
number
%
Demo 
z-axis
Defines scale factor at the z-axis. Possible values:
number
%
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
When
scale
property is set with two values, the size is set on x-axis and y-axis individually. Here, the element becomes double in size on x-axis and half the size on y-axis:
div {
scale: 2 50%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
CSS rotate property:
CSS Rotate property
CSS translate property:
CSS Translate property
CSS
scroll-snap-type
Property
Example
Set scroll snap functionality on the x-axis.
#container {
scroll-snap-type: x mandatory;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-snap-type
specifies how the elements will snap into focus when you stop scrolling, and in what direction.
To acheive scroll snap behaviour, the
scroll-snap-type
property must be set on the parent element, and the
scroll-snap-align
property must be set on the child elements.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollSnapType="x mandatory"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-snap-type
69.0
79.0
99.0
11.0
56.0
CSS Syntax
scroll-snap-type:  none|x|y|block|inline|both|mandatory|proximity|initial|inherit;
Property Values
Value
Description
none
No scroll snap effect. This is default
x
Scroll snap effect is set on x-axis
y
Scroll snap effect is set on y-axis
block
Scroll snap effect is set on block direction
inline
Scroll snap effect is set on inline direction
both
Scroll snap effect is set on both x- and y-axis
mandatory
Scroll will automatically move to snap point after scroll action is finished
proximity
Similar to mandatory, but not as strict. Scroll will automatically move to snap point after scroll action is finished, but inbetween snap points there is an area without the snap effect. Depends on browser parameters.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Snap behaviour in both directions
The
scroll-snap-type
property is set on both x- and y-axis:
#container > div {
scroll-snap-type: both mandatory;
}
Try it Yourself 
Snap behaviour with proximity
The
scroll-snap-type
property is set on both x- and y-axis with proximity behaviour. With this property value, if scrolling action stops right in the middle of two elements there is no snap:
#container > div {
scroll-snap-type: both proximity;
}
Try it Yourself 
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS
scrollbar-color
Property
Example
Set the color of the scrollbar of an element:
div.scroller {
width: 300px;
height: 100px;
overflow-y: scroll;
scrollbar-color: pink lightblue;
}
Try it Yourself 
Definition and Usage
The
scrollbar-color
property specifies 
the color of the scrollbar track (background) and thumb (the scroller).
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS Scrollbars Styling Module Level 1
JavaScript syntax:
object
.style.scrollbarColor="red blue"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scrollbar-color
121
121
64
Not supported
107
CSS Syntax
scrollbar-color: auto|
color
color
;
Property Values
Value
Description
auto
The browser sets the colors of the scrollbar. This is default
color color
The first color sets the color of the thumb of the scrollbar, and the 
    second color sets the color of the track of the scrollbar
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
table-layout
Property
Example
Set different table layout algorithms:
table.a {
table-layout: auto;
width: 180px;
}
table.b {
table-layout: 
    fixed;
width: 180px;
}
Try it Yourself 
Definition and Usage
The
table-layout
property defines the algorithm 
used to lay out table cells, rows, and columns.
Tip:
The main benefit of table-layout: fixed; is that the 
table renders much faster. On large tables, users will not see any part of the 
table until the browser has rendered the whole table. So, if you use 
table-layout: fixed, users will see the top of the table while the browser loads 
and renders rest of the table. This gives the impression that the page loads a 
lot quicker!
Show demo 
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.tableLayout="fixed"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
table-layout
14.0
5.0
1.0
1.0
7.0
CSS Syntax
table-layout: auto|fixed|initial|inherit;
Property Values
Value
Description
Demo
auto
Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells.
    The content will dictate the layout
Demo 
fixed
Sets a fixed table layout algorithm. The table and column widths are set 
    by the widths of table and col or by the width of the first row of cells.
      Cells in other rows do not affect column widths. If no widths are present 
    on the first row, the column widths are divided equally across the table, 
    regardless of content inside the cells
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Table
HTML DOM reference:
tableLayout property
CSS
text-align
Property
Example
Set the text alignment for different <div> elements:
div.a {
text-align: center;
}
div.b {
text-align: left;
}
div.c {
text-align: right;
}
div.c {
text-align: 
    justify;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
text-align
property specifies the horizontal alignment of text in an element.
Show demo 
Default value:
left if direction is ltr, and right if direction is rtl
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.textAlign="right"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-align
1.0
3.0
1.0
1.0
3.5
CSS Syntax
text-align: left|right|center|justify|initial|inherit;
Property Values
Value
Description
Demo
left
Aligns the text to the left
Demo 
right
Aligns the text to the right
Demo 
center
Centers the text
Demo 
justify
Stretches the lines so that each line has equal width (like in newspapers and magazines)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Another text-align example:
h1 {
text-align: center;
}
p.date {
text-align: right;
}
p.main {
text-align: justify;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Alignment
HTML DOM reference:
textAlign property
CSS
text-decoration
Property
Example
Set different text decorations for <h1>, <h2>, and <h3> elements:
h1 {
text-decoration: overline;
}
h2 {
text-decoration: line-through;
}
h3 {
text-decoration: underline;
}
h4 {
text-decoration: underline 
  overline;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
text-decoration
property specifies the decoration added to text, 
and is a shorthand 
property for:
text-decoration-line (required)
text-decoration-color
text-decoration-style
text-decoration-thickness
Show demo 
Default value:
none
currentColor
solid auto
Inherited:
no
Animatable:
no,
see individual properties
.
Read about
animatable
Version:
CSS1, renewed in CSS3
JavaScript syntax:
object
.style.textDecoration="underline"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-decoration
1.0
3.0
1.0
1.0
3.5
CSS Syntax
text-decoration:
text-decoration-line
text-decoration-color
text-decoration-style text-decoration-thickness
|initial|inherit;
Property Values
Value
Description
Demo
text-decoration-line
Sets the kind of text decoration to use (like underline, overline, 
    line-through)
Demo 
text-decoration-color
Sets the color of the text decoration
Demo 
text-decoration-style
Sets the style of the text decoration (like solid, wavy, dotted, dashed, 
    double)
Demo 
text-decoration-thickness
Sets the thickness of the decoration line
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Add more text decoration:
h1 {
text-decoration: underline overline dotted red;
}
h2 {
text-decoration: underline wavy 
  blue 5px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecoration property
CSS
text-decoration-thickness
Property
Example
Set different thickness of the decoration line for <h1>, <h2>, <h3>, 
and <h4> elements:
h1 {
text-decoration: underline;
text-decoration-thickness: auto;
}
h2 {
text-decoration: underline;
text-decoration-thickness: 5px;
}
h3 {
text-decoration: underline;
text-decoration-thickness: 50%;
}
/* Use shorthand property */
h4 {
text-decoration: 
  underline solid red 50%;
}
Try it Yourself 
Definition and Usage
The
text-decoration-thickness
property specifies the 
thickness of the decoration line.
Default value:
auto
Inherited:
no
Animatable:
no,
see individual properties
.
Read about
animatable
Version:
CSS4
JavaScript syntax:
object
.style.textDecorationThickness="5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-decoration-thickness
89.0
89.0
70.0
12.1
75.0
CSS Syntax
text-decoration-thickness: 
  auto|from-font|
length
/
percentage
|initial|inherit;
Property Values
Value
Description
auto
The browser chooses the thickness of the decoration line
from-font
If a font file contains information about a preferred thickness, use 
    that value. If not, behave as auto
length
/
percentage
Specifies the thickness as a
length
or
%
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
text-decoration property
CSS tutorial:
CSS Text Decoration
CSS
text-orientation
Property
Example
Set the text orientation for different <div> elements:
div.a {
text-orientation: mixed;
}
div.b {
text-orientation: upright;
}
Try it Yourself 
Definition and Usage
The
text-orientation
property specifies the orientation of characters.
Note:
Works only when
writing-mode
is set to vertical.
Show demo 
Default value:
mixed
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textOrientation="upright"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-orientation
48.0
79.0
41.0
14.0
35.0
CSS Syntax
text-orientation: mixed|upright|sideways|sideways-right|use-glyph-orientation|initial|inherit;
Property Values
Value
Description
Demo
mixed
Deafult value. Characters are rotated 90 degrees clockwise.
Demo 
upright
Characters are not rotated, but standing upright.
Demo 
sideways
Characters are orientated the same as the text lines are oriented with writing-mode vertical, 90 degrees clockwise.
sideways-right
Equal to property value sideways. Kept for compatibility purposes.
use-glyph-orientation
For use in SVG elements, so that text inherits deprecated SVG properties glyph-orientation-vertical and glyph-orientation-horizontal.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
The text-orientation property can be used to change orientation in table headers:
th {
writing-mode: vertical-lr;
text-orientation: upright;
}
Try it Yourself 
Related Pages
CSS writing-mode property:
CSS Writing Mode property
CSS
text-underline-offset
Property
Example
Set the offset distance of underline text decorations:
div.a {
text-decoration: underline;
}
div.b {
text-decoration: underline;
text-underline-offset: 10px;
}
div.c {
text-decoration: underline wavy blue;
}
div.d 
  {
text-decoration: underline wavy blue;
text-underline-offset: 10px;
}
Try it Yourself 
Definition and Usage
The
text-underline-offset
property 
specifies the 
offset distance of underline text decorations.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS4
JavaScript syntax:
object
.style.textUnderlineOffset="1em"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-underline-offset
87.0
87.0
70.0
12.1
73.0
CSS Syntax
text-underline-offset: auto|
length
|
percentage
|initial|inherit;
Property Values
Value
Description
Play it
auto
Default value. The browser sets the appropriate offset for the underline
Demo 
length
Specifies the offset as a length value
Demo 
percentage
Specifies the offset as a percentage value
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecoration property
CSS
text-transform
Property
Example
Transform text in different <div> elements:
div.a {
text-transform: uppercase;
}
div.b {
text-transform: lowercase;
}
div.c {
text-transform: capitalize;
}
Try it Yourself 
Definition and Usage
The
text-transform
property controls the capitalization of text.
Show demo 
Default value:
none
Inherited:
yes
Version:
CSS1
JavaScript syntax:
object
.style.textTransform="uppercase"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-transform
1.0
4.0
1.0
1.0
7.0
CSS Syntax
text-transform: none|capitalize|uppercase|lowercase|initial|inherit;
Property Values
Value
Description
Demo
none
No capitalization. The text renders as it is. This is default
Demo 
capitalize
Transforms the first character of each word to uppercase
Demo 
uppercase
Transforms all characters to uppercase
Demo 
lowercase
Transforms all characters to lowercase
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text 
Transformation
HTML DOM reference:
textTransform property
CSS
text-shadow
Property
Example
Basic text-shadow:
h1
 {
text-shadow: 2px 2px #ff0000;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
text-shadow
property adds shadow to text.
This property accepts a comma-separated list of shadows to be applied to the 
text.
Show demo 
Default value:
none
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.textShadow="2px 5px 5px red"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-shadow
4.0
10.0
3.5
4.0
9.6
CSS Syntax
text-shadow:
h-shadow v-shadow blur-radius color
|none|initial|inherit;
Note:
To add more than one shadow to the text, add a comma-separated list of shadows.
Property Values
Value
Description
Demo
h-shadow
Required. The position of the horizontal shadow. Negative values are allowed
Demo 
v-shadow
Required. The position of the vertical shadow. Negative values are allowed
Demo 
blur-radius
Optional. The blur radius. Default value is 0
Demo 
color
Optional. The color of the shadow. Look at
CSS Color Values
for a complete list of possible color values
Demo 
none
Default value. No shadow
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Tip:
Read more about allowed values (CSS length units)
More Examples
Example
Text-shadow with a blur effect:
h1 {
text-shadow: 2px 2px 8px #FF0000;
}
Try it Yourself 
Example
Text-shadow on a white text:
h1 {
color: white;
text-shadow: 2px 2px 4px #000000;
}
Try it Yourself 
Example
Text-shadow with a red neon glow:
h1 {
text-shadow: 0 0 3px #FF0000;
}
Try it Yourself 
Example
Text-shadow with a red and blue neon glow:
h1 {
text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Shadow
HTML DOM reference:
textShadow property
CSS
text-overflow
Property
Example
Use of the text-overflow property:
div
 {
white-space: nowrap;
overflow: 
    hidden;
text-overflow: ellipsis;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
text-overflow
property specifies how overflowed content that is not 
displayed should be signaled to the user. It can be clipped, display an ellipsis 
(...), or display a custom string.
Both of the following properties are required for text-overflow:
white-space: nowrap;
overflow: hidden;
Show demo 
Default value:
clip
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textOverflow="ellipsis"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-overflow
4
6
7
3.1
11
CSS Syntax
text-overflow: clip|ellipsis|
string
|initial|inherit;
Property Values
Value
Description
Demo
clip
Default value. The text is clipped and not accessible
Demo 
ellipsis
Render an ellipsis ("...") to represent the clipped text
Demo 
string
Render the given string to represent the clipped text
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Text-overflow with a hover effect (show entire text on hover):
div.a {
white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
}
div.a:hover {
overflow: visible;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Effects
HTML DOM reference:
textOverflow property
CSS
text-underline-position
Property
Example
Set the position of underline text decorations:
div.a {
text-decoration: underline;
text-underline-position: auto;
}
div.b {
text-decoration: 
  underline;
text-underline-position: under;
}
Try it Yourself 
Definition and Usage
The
text-underline-position
property 
specifies the 
position of underline text decorations.
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textUnderlinePosition="under"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-underline-position
33.0
79.0
74.0
12.1
20.0
CSS Syntax
text-underline-position: auto|under|from-font|left|right|initial|inherit;
Property Values
Value
Description
Play it
auto
Default value. The browser sets the position of the underline
Demo 
under
Sets the underline below the alphabetic baseline
Demo 
from-font
If the font file includes information about underline position, use that value. If not, use auto
left
In vertical writing mode the underline will be placed to the left of the 
    text. In horizontal writing mode the underline will be placed as auto
right
In vertical writing mode the underline will be placed to the right of 
    the text. In horizontal writing mode the underline will be placed as auto
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecoration property
CSS
transform-style
Property
Example
Let the transformed child elements preserve the 3D transformations:
div
 {
transform: rotateY(60deg);
transform-style: preserve-3d;
}
Try it Yourself 
Definition and Usage
The
transform-style
property specifies how nested elements are rendered in 3D 
space.
Note:
This property must be used together with the
transform
property.
To better understand the
transform-style
property,
view a demo
.
Show demo 
Default value:
flat
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transformStyle="preserve-3d"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform-style
36
12
16
9
23
CSS Syntax
transform-style: flat|preserve-3d|initial|inherit;
Property Values
Property Value
Description
flat
Specifies that child elements will NOT preserve its 3D position. This is default
preserve-3d
Specifies that child elements will preserve its 3D position
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
HTML DOM reference:
transformStyle property
CSS
list-style-type
Property
Example
Set some different list styles:
ul.a {list-style-type: circle;}
ul.b {list-style-type: square;}
ol.c {list-style-type: upper-roman;}
ol.d {list-style-type: lower-alpha;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
list-style-type
specifies the type of list-item marker in a list.
Show demo 
Default value:
disc
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.listStyleType="square"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
list-style-type
1.0
4.0
1.0
1.0
3.5
Note:
Edge 18 and Opera 12 and earlier versions do not support 
the values: cjk-ideographic, 
hebrew, hiragana, hiragana-iroha, katakana, and katakana-iroha.
CSS Syntax
list-style-type:
value
;
Property Values
Value
Description
Demo
disc
Default value. The marker is a filled circle
Demo 
armenian
The marker is traditional Armenian numbering
Demo 
circle
The marker is a circle
Demo 
cjk-ideographic
The marker is plain ideographic numbers
Demo 
decimal
The marker is a number
Demo 
decimal-leading-zero
The marker is a number with leading zeros (01, 02,  03, etc.)
Demo 
georgian
The marker is traditional Georgian numbering
Demo 
hebrew
The marker is traditional Hebrew numbering
Demo 
hiragana
The marker is traditional Hiragana numbering
Demo 
hiragana-iroha
The marker is traditional Hiragana iroha numbering
Demo 
katakana
The marker is traditional Katakana numbering
Demo 
katakana-iroha
The marker is traditional Katakana iroha numbering
Demo 
lower-alpha
The marker is lower-alpha (a, b, c, d, e, etc.)
Demo 
lower-greek
The marker is lower-greek
Demo 
lower-latin
The marker is lower-latin (a, b, c, d, e, etc.)
Demo 
lower-roman
The marker is lower-roman (i, ii, iii, iv, v, etc.)
Demo 
none
No marker is shown
Demo 
square
The marker is a square
Demo 
upper-alpha
The marker is upper-alpha (A, B, C, D, E, etc.)
Demo 
upper-greek
The marker is upper-greek
Demo 
upper-latin
The marker is upper-latin (A, B, C, D, E, etc.)
Demo 
upper-roman
The marker is upper-roman (I, II, III, IV, V, etc.)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
This example demonstrates all the different list-item markers:
ul.a {list-style-type: circle;}
ul.b {list-style-type: disc;}
ul.c {list-style-type: square;}
ol.d {list-style-type: armenian;}
ol.e {list-style-type: cjk-ideographic;}
ol.f {list-style-type: decimal;}
ol.g {list-style-type: decimal-leading-zero;}
ol.h {list-style-type: georgian;}
ol.i {list-style-type: hebrew;}
ol.j {list-style-type: hiragana;}
ol.k {list-style-type: hiragana-iroha;}
ol.l {list-style-type: katakana;}
ol.m {list-style-type: katakana-iroha;}
ol.n {list-style-type: lower-alpha;}
ol.o {list-style-type: lower-greek;}
ol.p {list-style-type: lower-latin;}
ol.q {list-style-type: lower-roman;}
ol.r {list-style-type: upper-alpha;}
ol.s {list-style-type: upper-greek;}
ol.t {list-style-type: upper-latin;}
ol.u {list-style-type: upper-roman;}
ol.v {list-style-type: none;}
ol.w {list-style-type: inherit;}
Try it Yourself 
Example
How to add bullet colors for <ul> or <ol> by removing their default bullets and adding a HTML entity that looks like bullets (&bull;):
ul {
list-style: none; /* Remove list bullets */
padding: 0;
margin: 0;
}
li {
padding-left: 16px;
}
li::before {
content: ""; /* Insert content that looks like bullets */
padding-right: 8px;
color: blue; /* Or a color you prefer */
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style property
HTML DOM reference:
listStyleType property
CSS
margin-inline-end
Property
Example
Set the margin at the end in the inline direction:
div {
margin-inline-end: 35px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-inline-end
property specifies the margin at the end in the inline direction.
The CSS
margin-inline
and
margin-block
properties are very similar to CSS properties
margin-top
,
margin-bottom
,
margin-left
and
margin-right
, but the
margin-inline
and
margin-block
properties are dependent on block and inline directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is and the result of the
margin-inline-end
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.marginInlineEnd="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-inline-end
87.0
87.0
41.0
12.1
73.0
CSS Syntax
margin-inline-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default margin-inline-end value.
Demo 
length
Specifies margin-inline-end in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
Demo 
%
Specifies margin-inline-end in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the inline direction is downwards. The result is that the end of the element is moved from right side to bottom:
div {
margin-inline-end: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to 'rtl', the inline direction is right to left. The result is that the end of the element is moved from right side to left side:
div {
margin-inline-end: 50px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS margin-inline-start property:
CSS Margin-inline-start property
CSS margin-bottom property:
CSS Margin-bottom property
CSS margin-inline property:
CSS Margin-inline
CSS margin-left property:
CSS Margin-left
CSS margin-right property:
CSS Margin-right
CSS margin-top property:
CSS Margin-top
CSS writing-mode property:
CSS Writing-mode property
CSS
margin-right
Property
Example
Set the right margin for a <p> element to 150 pixels:
p.ex1 {
margin-right: 150px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
margin-right
property sets the right margin of an element.
Note:
Negative values are allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.marginRight="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
margin-right
1.0
6.0
1.0
1.0
3.5
CSS Syntax
margin-right:
length
|auto|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed right margin in px, pt, cm, etc. Default value is 0px.
Read about length units
Demo 
%
Specifies a right margin in percent of the width of the containing element
Demo 
auto
The browser calculates a right margin
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the right margin for a <p> element to 50% of the width of the 
container:
p.ex1 {
margin-right: 50%;
}
Try it Yourself 
Example
Set the right margin for a <p> element to 15 em:
p.ex1 {
margin-right: 15em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
HTML DOM reference:
marginRight property
CSS
marker
Property
Example
Point to a marker (arrow) that will be drawn on the first, middle, and last vertices 
of an element's path:
#test {
marker: url(#arrow);
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
marker
property points to a marker that 
will be drawn on all vertices of an element's path (the first, middle, and 
last).
The shape of the marker is defined with an SVG <marker> element, and is referenced with a url() value.
The value of the CSS
marker
property 
overrides any values of the marker-start, marker, and marker-end attributes in 
the SVG.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
marker
80
80
72
13.1
67
CSS Syntax
marker: none|
url
|initial|inherit;
Property Values
Value
Description
none
Default. No marker will be drawn at the path
url
An url reference to a marker defined by an SVG <marker> element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Point to a marker (circle) that will be drawn on the first, middle, and last vertices 
of an element's path:
#test {
marker: url(#circle);
}
Try it Yourself 
Related Pages
CSS reference:
marker-start property
CSS reference:
marker-mid property
CSS reference:
marker-end property
SVG tutorial:
SVG Marker
CSS
outline
Property
Example
Set an outline around a <h2> element and a <div> element:
h2 {
outline: 5px dotted green;
}
div.a {
outline: 2px dashed blue;
}
Try it Yourself 
Definition and Usage
An outline is a line that is drawn around elements, outside the borders, to make the element "stand out".
The
outline
property is a shorthand property for:
outline-width
outline-style
(required)
outline-color
If outline-color is omitted, the color applied will be the color of the text.
Note:
Outlines differ from
borders
! 
Unlike border, the outline is drawn outside the element's border, and may 
overlap other content. Also, the outline is NOT a part of the element's 
dimensions; the element's total width and height is not affected by the width of 
the outline.
Show demo 
Default value:
medium invert
color
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.outline="#0000FF dotted 5px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outline
1.0
8.0
1.5
1.2
7.0
CSS Syntax
outline:
outline-width
outline-style
outline-color
|initial|inherit;
Property Values
Value
Description
Demo
outline-width
Specifies the width of outline
Try it 
outline-style
Specifies the style of the outline
Try it 
outline-color
Specifies the color of the outline
Try it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Outline
HTML DOM reference:
outline property
CSS
overflow-anchor
Property
Example
Turn off scroll anchoring:
div {
overflow-anchor: none;
}
Try it Yourself 
Definition and Usage
The
overflow-anchor
property makes it possible to turn off scroll anchoring.
Scroll anchoring is a feature in the browser that prevents a viewable area that is scrolled into focus to move when new content is loaded above. This is typically a problem on a slow connection if the user scrolls down and starts reading before the page is fully loaded.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overflowAnchor="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overflow-anchor
56.0
79.0
66.0
Not supported
43.0
CSS Syntax
overflow-anchor:  auto|none|initial|inherit;
Property Values
Value
Description
auto
Default value. Scroll anchoring is enabled
none
Scroll anchoring is disabled
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Overflow
CSS overflow property:
CSS Overflow property
CSS
scroll-margin-block-start
Property
Example
Set scroll margin to 20px between the snap position and the container in block direction:
div {
scroll-margin-block-start: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-block-start
property specifies the distance in block direction, between the snap position and the container .
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position at the start of the child element and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' for the block direction.
To see the effect from the
scroll-margin-block-start
property, the
scroll-margin-block-start
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
The CSS
scroll-margin-inline
and
scroll-margin-block
properties are very similar to CSS properties
scroll-margin-top
,
scroll-margin-bottom
,
scroll-margin-left
and
scroll-margin-right
, but the
scroll-margin-block
and
scroll-margin-inline
properties are dependent on block and line directions.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginBlockStart="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-block-start
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-block-start: 0|
value
|initial|inherit;
Property Values
Value
Description
0
Default. The element's default scroll-margin distance.
length
Specifies distance in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the block direction is right to left. The result is that the start of the element is moved from top to right side:
div {
scroll-margin-block-start: 50px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-bottom
Property
Example
Set scroll margin bottom to 20px between the snap position and the container:
div {
scroll-margin-bottom: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-bottom
property specifies 
the distance between the snap position and the container.
Note:
This property only works if the snap position is placed at the bottom of the child element.
To see the effect from the
scroll-margin-bottom
property, the
scroll-margin-bottom
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginBottom="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-bottom
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-bottom:  0|
value
|initial|inherit;
Property Values
Value
Description
0
Scroll-margin-bottom is zero. This is default
length
Specifies scroll-margin-bottom in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-margin-bottom
property can be used in an image gallery with snap behaviour. Here, the scroll-margin-bottom lets the user see that there is an image at the bottom. Scroll past the first image to see the effect:
#container > img {
scroll-margin-bottom: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on bottom of the child elements for the
scroll-margin-bottom
property to work. In this example the
writing-mode
property changes the snap position from bottom to left side of child elements. With the code like this the
scroll-margin-bottom
property no longer works:
#container {
writing-mode: vertical-rl;
}
#container > div {
scroll-margin-bottom: 30px;
scroll-snap-align: end none;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding
Property
Example
Set scroll padding to 20px from the container to the snap position:
div {
scroll-padding: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding
property specifies 
the distance from the container to the snap position of child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance from the container to the snap position of the child element in focus.
Note:
In the example above, scroll padding is set on all sides, but only the scroll padding on the top side changes the scrolling behaviour because the scroll-snap-align is set to "start".
The
scroll-padding
property is a shorthand property for the following properties:
scroll-padding-top
scroll-padding-bottom
scroll-padding-left
scroll-padding-right
Values for the
scroll-padding
property can be set in different ways:
If the scroll-padding property has four values:
scroll-padding: 15px 30px 60px 90px;
top distance is 15px
right distance is 30px
bottom distance is 60px
left distance is 90px
If the scroll-padding property has three values:
scroll-padding: 15px 30px 60px;
top distance is 15px
left and right distances are 30px
bottom distance is 60px
If the scroll-padding property has two values:
scroll-padding: 15px 30px;
top and bottom distances are 15px
left and right distances are 30px
If the scroll-padding property has one value:
scroll-padding: 10px;
all four distances are 10px
To see the effect from the
scroll-padding
property, the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding
and
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPadding="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-padding:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding
property can be used in an image gallery with snap behaviour, to push images below a fixed element:
#container {
scroll-padding: 30px 0 0 0;
}
Fixed top element
Try it Yourself 
Set scroll-padding at bottom and to the right
The
scroll-padding
property can be set at both the bottom and the right side of the container. Scroll to the next element both horizontally and vertically to see the effect:
#container {
scroll-padding: 0 10px 30px 0;
}
Try it Yourself 
Related Pages
CSS scroll-padding-bottom property:
CSS Scroll-padding-bottom property
CSS scroll-padding-left property:
CSS Scroll-padding-left property
CSS scroll-padding-right property:
CSS Scroll-padding-right property
CSS scroll-padding-top property:
CSS Scroll-padding-top property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS
scroll-margin-top
Property
Example
Set scroll margin top to 20px between the snap position and the container:
div {
scroll-margin-top: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-top
property specifies 
the distance between the snap position and the container.
Note:
This property only works if the snap position is placed at the top of the child element.
To see the effect from the
scroll-margin-top
property, the
scroll-margin-top
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginTop="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-top
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-top:  0|
value
|initial|inherit;
Property Values
Value
Description
0
Scroll-margin-top is zero. This is default
length
Specifies scroll-margin-top in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-margin-top
property can be used in an image gallery with snap behaviour. Here, the scroll-margin-top lets the user see that there is an image at the top. Scroll past the first image to see the effect:
#container > img {
scroll-margin-top: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on top of the child elements for the
scroll-margin-top
property to work. In this example the
writing-mode
property changes the snap position from top to right side of child elements. With the code like this the
scroll-margin-top
property no longer works:
#container {
writing-mode: vertical-rl;
}
#container > div {
scroll-margin-top: 30px;
scroll-snap-align: start none;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-top
Property
Example
Set scroll padding to 20px from the top of the container to the snap position:
div {
scroll-padding-top: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-top
property specifies 
the distance from the top of the container to the snap position on the child elements.
Note:
This property only works if the snap position is placed at the top of the child element.
To see the effect from the
scroll-padding-top
property, the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-top
and
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingTop="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-top
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-padding-top:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-top in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-top
property can be used in an image gallery with snap behaviour, to push images below a fixed element:
#container {
scroll-padding-top: 30px;
}
Fixed top element
Try it Yourself 
Set scroll-padding at the top
The
scroll-padding-top
property can also be set on the container when snap behaviour is set in both directions. Scroll to the next element vertically to see the effect:
#container {
scroll-padding-top: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on top of the child elements for the
scroll-padding-top
property to work. In this example the
writing-mode
property changes the snap position from top to the right side of child elements. With the code like this the
scroll-padding-top
property no longer works:
#container {
writing-mode: vertical-rl;
scroll-padding-top: 30px;
}
#container > div {
scroll-snap-align: start none;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
transition
Property
Example
Hover over a <div> element to gradually change the width from 100px to 
300px:
div
 {
width: 100px;
transition: width 2s;
}
div:hover {
width: 300px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
transition
property is a shorthand property for:
transition-property
transition-duration
transition-timing-function
transition-delay
Note:
Always specify the
transition-duration
property, otherwise the duration 
is 0s, and the transition will have no effect.
Default value:
all 0s ease 0s
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transition="all 2s"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition
26
12
16
9
12.1
CSS Syntax
transition:
property duration timing-function delay
|initial|inherit;
Property Values
Value
Description
transition-property
Specifies the name of the CSS property the transition effect is for
transition-duration
Specifies how many seconds or milliseconds the transition effect takes to complete
transition-timing-function
Specifies the speed curve of the transition effect
transition-delay
Defines when the transition effect will start
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
When an <input type="text"> gets focus, gradually change the width from 100px to 
250px:
input[type=text] {
width: 100px;
transition: width .35s ease-in-out;
}
input[type=text]:focus {
width: 250px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Transitions
HTML DOM reference:
transition property
CSS
transition-delay
Property
Example
Wait 2 seconds before the transition effect starts:
div {
transition-delay: 2s;
}
Try it Yourself 
Definition and Usage
The
transition-delay
property specifies when the transition effect will start.
The
transition-delay
value is defined in seconds (s) or milliseconds (ms).
Default value:
0s
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transitionDelay="2s"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition-delay
26
12
16
9
12.1
CSS Syntax
transition-delay:
time
|initial|inherit;
Property Values
Value
Description
time
Specifies the number of seconds or milliseconds to wait before the transition effect will start
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Transitions
HTML DOM reference:
transitionDelay property
CSS
transition-duration
Property
Example
Let the transition effect 
last for 5 seconds:
div {
transition-duration: 5s;
}
Try it Yourself 
Definition and Usage
The
transition-duration
property specifies how many seconds (s) or milliseconds 
(ms) a 
transition effect takes to complete.
Default value:
0s
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transitionDuration="1s"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition-duration
26
12
16
9
12.1
CSS Syntax
transition-duration:
time
|initial|inherit;
Property Values
Value
Description
time
Specifies how many seconds or milliseconds a transition effect takes to complete. Default value is 0s, meaning there will be no effect
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Transitions
HTML DOM reference:
transitionDuration property
CSS
transition-property
Property
Example
Hover over a <div> element, and change the width with a smooth transition effect:
div
 {
transition-property: width;
}
div:hover {
width: 300px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
transition-property
property specifies the name of the CSS property the transition 
effect is for (the transition effect will start when the specified CSS property changes).
Tip:
A transition effect could typically occur when a user hover over an element.
Note:
Always specify the
transition-duration
property, otherwise the duration is 0, and the transition will have no effect.
Default value:
all
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transitionProperty="width,height"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition-property
26
12
16
9
12.1
CSS Syntax
transition-property: none|all|
property
|initial|inherit;
Property Values
Value
Description
none
No property will get a transition effect
all
Default value. All properties will get a transition effect
property
Defines a comma separated list of CSS property names the transition effect is for
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Hover over a <div> element, and change the width AND height with a smooth 
transition effect:
div {
transition-property: width, height;
}
div:hover {
width: 300px;
height: 300px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Transitions
HTML DOM reference:
transitionProperty property
CSS
vertical-align
Property
Example
Vertical align an image:
img.a {
vertical-align: baseline;
}
img.b {
vertical-align: text-top;
}
img.c {
vertical-align: text-bottom;
}
img.d {
vertical-align: sub;
}
img.e {
vertical-align: super;
}
Try it Yourself 
Definition and Usage
The
vertical-align
property sets the vertical alignment of an element.
Show demo 
Default value:
baseline
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.verticalAlign="top"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
vertical-align
1.0
4.0
1.0
1.0
4.0
CSS Syntax
vertical-align: baseline|
length
|sub|super|top|text-top|middle|bottom|text-bottom|initial|inherit;
Property Values
Value
Description
Demo
baseline
The element is aligned with the baseline of the parent. This is default
Demo 
length
Raises or lower an element by the specified length. Negative values are allowed.
Read about length units
Demo 
%
Raises or lower an element by a percent of the "line-height"
      property. Negative values are allowed
Demo 
sub
The element is aligned with the subscript baseline of the parent
Demo 
super
The element is aligned with the superscript baseline of the parent
Demo 
top
The element is aligned with the top of the 
    tallest element on the line
Demo 
text-top
The element is aligned with the top of
      the parent element's font
Demo 
middle
The element is placed in the middle of the parent element
Demo 
bottom
The element is aligned with the
      lowest element on the line
Demo 
text-bottom
The element is aligned with the
      bottom of the parent element's font
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Alignment
HTML DOM reference:
verticalAlign property
CSS
visibility
Property
Example
Hide a <h3> element:
h3 {
visibility: hidden;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
visibility
property specifies whether or not an element is visible.
Tip:
Hidden elements still take up space on the page. Use the CSS
display
property to both hide and remove an 
element from the document layout!
Show demo 
Default value:
visible
Inherited:
yes
Animatable:
yes.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.visibility="hidden"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
visibility
1.0
4.0
1.0
1.0
4.0
CSS Syntax
visibility: visible|hidden|collapse|initial|inherit;
Property Values
Value
Description
Demo
visible
Default value. The element is visible
Demo 
hidden
The element is hidden (but still takes up space)
Demo 
collapse
Only for table rows (<tr>), row groups (<tbody>), columns (<col>), 
    column groups (<colgroup>), and flex items. This value removes a row or 
    column as if display: none where used.
If collapse is used on other elements,
      it renders as "hidden"
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
This example demonstrates how to make a table row element collapse:
tr.collapse {
visibility: collapse;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Display and 
visibility
HTML DOM reference:
visibility property
CSS
white-space
Property
Example
Demonstrate different values of the white-space property:
p.a {
white-space: nowrap;
}
p.b {
white-space: normal;
}
p.c {
white-space: 
    pre;
}
Try it Yourself 
Definition and Usage
The
white-space
property specifies how white-space inside an element is handled.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS1
JavaScript syntax:
object
.style.whiteSpace="nowrap"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
white-space
1.0
8.0
3.5
3.0
9.5
CSS Syntax
white-space: normal|nowrap|pre|pre-line|pre-wrap|initial|inherit;
Property Values
Value
Description
Demo
normal
Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary. This is default
Demo 
nowrap
Sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line. The text continues on the same line until
      a <br> tag is encountered
Demo 
pre
Whitespace is preserved by the browser. Text will only wrap on line breaks. Acts like the
      <pre> tag in HTML
Demo 
pre-line
Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks
Demo 
pre-wrap
Whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Spacing
HTML DOM reference:
whiteSpace property
CSS
word-wrap
Property
Example
Allow long words to be able to break and wrap onto the next line:
div {
word-wrap: break-word;
}
Try it Yourself 
Definition and Usage
The
word-wrap
property allows long words to be able to be broken and wrap 
onto the next line.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.wordWrap="break-word"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
word-wrap
4.0
5.5
3.5
3.1
10.5
CSS Syntax
word-wrap: normal|break-word|initial|inherit;
Property Values
Value
Description
Demo
normal
Break words only at allowed break points. This is default
Demo 
break-word
Allows unbreakable words to be broken
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Effects
CSS
writing-mode
Property
Example
Specify whether lines of text are laid out horizontally or vertically:
p.test1 {
writing-mode: horizontal-tb;
}
p.test2 {
writing-mode: vertical-rl;
}
span.test2 {
writing-mode: 
    vertical-rl;
}
Try it Yourself 
Definition and Usage
The
writing-mode
property specifies whether lines of text are laid out horizontally or vertically.
Show demo 
Default value:
horizontal-tb
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.writingMode="vertical-rl"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
writing-mode
48.0
12.0
41.0
11.0
35.0
CSS Syntax
writing-mode: horizontal-tb|vertical-rl|vertical-lr;
Property Values
Value
Description
Demo
horizontal-tb
Let the content flow horizontally from left to right, vertically from 
    top to bottom
Demo 
vertical-rl
Let the content flow vertically from top to bottom, horizontally from 
    right to left
Demo 
vertical-lr
Let the content flow vertically from top to bottom, horizontally from 
    left to right
Demo 
Related Pages
CSS tutorial:
CSS Text Effects
CSS
z-index
Property
Example
Set the z-index for an image, so that it is displayed behind the text:
img
 {
position: absolute;
left: 0px;
top: 0px;
z-index: -1;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
z-index
property specifies the stack order of an element.
An element with greater stack order is always in front of an element with a lower stack order.
Note:
z-index
only works on positioned elements (position: absolute, position: relative, position: fixed, 
or position: sticky) and flex items (elements that are direct children of
display:flex
elements).
Note:
If two positioned elements overlap without a
z-index
specified, the element positioned last in the HTML code will be shown on top.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.zIndex="-1"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
z-index
1.0
4.0
3.0
1.0
4.0
CSS Syntax
z-index: auto|
number
|initial|inherit;
Property Values
Value
Description
Demo
auto
Sets the stack order equal to its parents. This is default
Demo 
number
Sets the stack order of the element. Negative numbers are allowed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the z-index for different boxes:
.wrapper {
position: relative;
}
.box1 {
position: relative;
z-index: 1;
border: solid;
height: 100px;
margin: 50px;
}
.box2 {
position: absolute;
z-index: 2;
background: pink;
width: 20%;
left: 65%;
top: -25px;
height: 
    120px;
opacity: 0.9;
}
.box3 {
position: 
    absolute;
z-index: 3;
background: cyan;
width: 
    70%;
left: 40px;
top: 60px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
HTML DOM reference:
zIndex property
CSS
mask-position
Property
Example
Set the position of the mask layer image to center:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 50%;
mask-repeat: no-repeat;
mask-position: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
mask-position
property sets the starting 
position of a mask image (relative to the 
    mask position area).
Tip:
By default, a mask image is placed at the top-left corner of an 
element, and repeated both vertically and horizontally.
Default value:
0% 0%
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS Masking Module Level 1
JavaScript syntax:
object
.style.maskPosition="100px center"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
mask-position
120
120
53
15.4
106
CSS Syntax
mask-position:
value
;
Property Values
Value
Description
left top
left center
left bottom
right top
right center
right bottom
center top
center center
center bottom
If you only specify one keyword, the other value will be "center"
x% y%
The first value is the horizontal position and the second value is the 
    vertical. The top left corner is 0% 0%. The right bottom corner is 100% 
    100%. If you only specify one value, the other value will be 50%. Default value is: 0% 0%
xpos ypos
The first valueis the horizontal position and the second
      value is the vertical. The top left corner is 0 0. Units can be pixels
      (0px 0px) or any other
CSS units
. If you only specify one value, the other value will be 50%. You can mix % and positions
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the position of the mask layer image to right bottom corner:
.mask1 {
-webkit-mask-image: url(w3logo.png);
mask-image: url(w3logo.png);
mask-size: 50%;
mask-repeat: no-repeat;
mask-position: 100% 100%;
}
Try it Yourself 
Related Pages
CSS reference:
mask property
CSS reference:
mask-clip property
CSS reference:
mask-composite property
CSS reference:
mask-image property
CSS reference:
mask-mode property
CSS reference:
mask-origin property
CSS reference:
mask-repeat property
CSS reference:
mask-size property
CSS tutorial:
CSS Masking
CSS
max-width
Property
Example
Set the maximum width of a <p> element to 150 pixels:
p.ex1 {
max-width: 150px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
max-width
property defines the maximum width of an element.
If the content is larger than the maximum width, it will automatically change 
the height of the element.
If the content is smaller than the maximum width, the
max-width
property 
has no effect.
Note:
This prevents the value of the
width
property from becoming larger than
max-width
. The value of the
max-width
property overrides
the width property.
Default value:
none
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.maxWidth="600px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
max-width
1.0
7.0
1.0
1.3
7.0
CSS Syntax
max-width: none|
length
|initial|inherit;
Property Values
Value
Description
Demo
none
No maximum width. This is default
Play it 
length
Defines the maximum width in px, cm, etc.
Read about length units
Play it 
%
Defines the maximum width in percent of the containing block
Play it 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the maximum width of a <p> element to 50% of the container:
p.ex1 {
max-width: 50%;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Height and Width
CSS reference:
min-width property
HTML DOM reference:
maxWidth property
CSS
page-break-after
Property
Example
Always insert a page-break after a <footer> element:
@media print
{
footer {page-break-after: always;}
}
Definition and Usage
The
page-break-after
property adds a page-break after a 
specified
element.
Note:
This property is replaced by the
break-after
property!
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.pageBreakAfter="always"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
page-break-after
1.0
4.0
1.0
1.2
7.0
CSS Syntax
page-break-after: auto|always|avoid|left|right|initial|inherit;
Property Values
Value
Description
auto
Default. Automatic page-break
always
Always insert a page-break after the element
avoid
Avoid a page-break after the element (if possible)
left
Insert page-break after the element so that the next page is   formatted as a left page
right
Insert page-break after the element so that the next page is   formatted as a right page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
HTML DOM reference:
pageBreakAfter property
CSS
pointer-events
Property
Example
Set whether or not an element should react to pointer events:
div.ex1 {
pointer-events: none;
}
div.ex2 {
pointer-events: auto;
}
Try it Yourself 
Definition and Usage
The
pointer-events
property defines whether or not an element reacts to 
pointer events.
Default value:
auto
Inherited:
yes
Animatable:
No.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.pointerEvents="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
pointer-events
2.0
11.0
3.6
4.0
9.0
CSS Syntax
pointer-events: auto|none;
Property Values
Property Value
Description
auto
The element reacts to pointer events, like :hover and click. This is 
    default
none
The element does not react to pointer events
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
right
Property
Example
Set the right edge of the positioned <div> element 150px to the left of the right edge of its nearest positioned ancestor:
div.absolute {
position: absolute;
right: 
  150px;
width: 200px;
height: 120px;
border: 3px solid 
green;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
right
property affects the horizontal 
position of a positioned element. This property has no effect on non-positioned 
elements.
If position: absolute; or position: fixed; - the
right
property sets the right edge of an element to a unit to the right 
  of the right edge of its nearest positioned ancestor.
If position: relative; - the
right
property sets the right edge of an element to a unit to the left/right of its 
  normal position.
If position: sticky; - the
right
property behaves like its position is 
  relative when the element is inside the viewport, and like its position is 
  fixed when it is outside.
If position: static; - the
right
property has no effect.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.right="200px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
right
1.0
5.5
1.0
1.0
5.0
CSS Syntax
right:  auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
Lets the browser calculate the right edge position. This is default
Demo 
length
Sets the right edge position in px, cm, etc. Negative values are allowed.
Read about length units
Demo 
%
Sets the right edge position in % of containing element. Negative values are allowed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Use the right property with a negative value and for an element with no 
positioned ancestors:
div.b {
position: absolute;
right: -20px;
width: 100px;
height: 120px;
border: 3px solid blue;
}
div.c {
position: absolute;
right: 150px;
width: 200px;
height: 120px;
border: 3px solid green;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
left property
CSS reference:
bottom property
CSS reference:
top property
HTML DOM reference:
right property
CSS
quotes
Property
Example
Specify quotation marks for quotations:
#a {
quotes: "'" "'";
}
Try it Yourself 
Definition and Usage
The
quotes
property sets the type of quotation marks for quotations.
Show demo 
Default value:
not specified
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.quotes="'\253' '\273'"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
quotes
11.0
8.0
1.5
5.1
4.0
CSS Syntax
quotes: none|
string
|initial|inherit;
Property Values
Value
Description
Demo
none
Specifies that the "open-quote" and "close-quote" values of the "content" property will not produce any quotation marks
Demo 
string string string string
Specifies which quotation marks to use. The first two values specifies the first level of quotation embedding, the next two values specifies the next level of quote embedding, etc
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Quotation Mark Characters
Result
Description
Entity Number
"
double quote
\0022
'
single quote
\0027

single, left angle quote
\2039

single, right angle quote
\203A

double, left angle quote
\00AB

double, right angle quote
\00BB

left quote (single high-6)
\2018

right quote (single high-9)
\2019

left quote (double high-6)
\201C

right quote (double high-9)
\201D

double quote (double low-9)
\201E
Related Pages
HTML DOM reference:
quotes property
CSS
scroll-snap-align
Property
Example
Make the nearest element snap in to center when the user stop scrolling:
div {
scroll-snap-align: center;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-snap-align
property specifies 
where elements will snap into focus when you stop scrolling.
To acheive scroll snap behaviour, the
scroll-snap-align
property must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollSnapAlign="start"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-snap-align
69.0
79.0
68.0
11.0
56.0
CSS Syntax
scroll-snap-align:  none|start|end|center|
block inline
|initial|inherit;
Property Values
Value
Description
none
No scroll snap effect. This is default
start
Scroll snap at start of elements on x- and y-axis.
end
Scroll snap at end of elements on x- and y-axis.
center
Scroll snap at center of elements on x- and y-axis.
block inline
Two value syntax. First value is how to snap in block direction, and second value is how to snap in the inline direction.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-snap-align
property is good for scrolling through an image gallery. Here, scroll direction is horizontal, and snap alignment is center. When the user lets go of the scroll bar, the nearest image will snap in to the middle of the scrollable area. Try to click on an image, then use right or left arrow keys to scroll through them:
#container > img {
scroll-snap-align: none center;
}
Try it Yourself 
Align snap at the start of elements, vertically
The
scroll-snap-align
property can also be set at start of elements in the block direction, when scrolling vertically:
#container > div {
scroll-snap-align: start none;
}
Try it Yourself 
Related Pages
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS
tab-size
Property
Example
Set the width of the tab character to 16 spaces:
pre {tab-size: 16;}
Try it Yourself 
Definition and Usage
The
tab-size
property specifies the width of a tab character.
In HTML, the tab character is usually displayed as a single space-character, except for some elements,
like <textarea> and <pre>, and the result of the tab-size property will only be visible for those elements.
Show demo 
Default value:
8
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.tabSize="16"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
tab-size
21
79
91
7
15
CSS Syntax
tab-size:
number
|
length
|initial|inherit;
Property Values
Value
Description
Play it
number
The number of space-characters to be displayed for each tab-character. 
    Default value is 8
Demo 
length
The length of a tab-character
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
text-decoration-line
Property
Example
Set different types of text-decoration lines:
div.a
{
text-decoration-line: overline;
}
div.b
{
text-decoration-line: underline;
}
div.c
{
text-decoration-line: line-through;
}
div.d
{
text-decoration-line: overline underline;
}
Try it Yourself 
Definition and Usage
The
text-decoration-line
property sets the kind of text decoration to use 
(like underline, overline, line-through).
Tip:
Also look at the
text-decoration
property,
which is a short-hand property for text-decoration-line, text-decoration-style,  
text-decoration-color, and text-decoration-thickness.
Note:
You can also combine more than one value, like underline
and
overline to display lines both under and over the text.
Show demo 
Default value:
none
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textDecorationLine="overline"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-decoration-line
57
79
36
12.1
44
CSS Syntax
text-decoration-line: none|underline|overline|line-through|initial|inherit;
Property Values
Value
Description
Play it
none
Default value. Specifies no line for the text-decoration
Demo 
underline
Specifies that a line will be displayed under the text
Demo 
overline
Specifies that a line will be displayed over the text
Demo 
line-through
Specifies that a line will be displayed through the text
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecorationLine property
CSS
text-decoration-style
Property
Example
Set different types of text-decoration styles:
div.a
{
text-decoration-line: underline;
text-decoration-style: solid;
}
div.b
{
text-decoration-line: underline;
text-decoration-style: wavy;
}
div.c
{
text-decoration-line: underline;
text-decoration-style: double;
}
div.d
{
text-decoration-line: overline underline;
text-decoration-style: wavy;
}
Try it Yourself 
Definition and Usage
The
text-decoration-style
property sets the style of the text decoration 
(like solid, wavy, dotted, dashed, double).
Tip:
Also look at the
text-decoration
property,
which is a short-hand property for text-decoration-line, text-decoration-style,  
text-decoration-color, and text-decoration-thickness.
Show demo 
Default value:
solid
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textDecorationStyle="wavy"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-decoration-style
57
79
36
12.1
44
CSS Syntax
text-decoration-style: solid|double|dotted|dashed|wavy|initial|inherit;
Property Values
Value
Description
Play it
solid
Default value. The line will display as a single line
Demo 
double
The line will display as a double line
Demo 
dotted
The line will display as a dotted line
Demo 
dashed
The line will display as a dashed line
Demo 
wavy
The line will display as a wavy line
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecorationStyle property
CSS
text-emphasis
Property
Example
Use of the text-emphasis property:
p.ex1 {
text-emphasis: filled;
}
p.ex2 {
text-emphasis: open;
}
p.ex3 {
text-emphasis: double-circle red;
}
p.ex4 {
text-emphasis: triangle blue;
}
Try it Yourself 
Definition and Usage
The
text-emphasis
property is used to apply 
emphasis marks to text.
The
text-emphasis
property is a shorthand for
text-emphasis-style
and
text-emphasis-color
.
Tip:
The size of the emphasis marks is about 50% of the 
size of the font.
Default value:
none currentcolor
Inherited:
yes
Version:
CSS3
JavaScript syntax:
object
.style.textEmphasis="filled blue"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-emphasis
99.0
99.0
46.0
7.0
85.0
CSS Syntax
text-emphasis: 
  none|filled|open|dot|circle|double-circle|triangle|sesame|
string
|
color
|initial|inherit;
Value
Description
none
No emphasis marks are applied
Demo 
filled
The emphasis marks are filled with a solid color
Demo 
open
The emphasis marks are hollow
Demo 
dot
The emphasis marks are small circles
Demo 
circle
The emphasis marks are circles
Demo 
double-circle
The emphasis marks are double circles
Demo 
triangle
The emphasis marks are triangles
Demo 
sesame
The emphasis marks are sesames
Demo 
string
The emphasis marks are the given string (one character)
Demo 
color
Sets the color of the emphasis marks
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
text-emphasis-color
Property
Example
Use of the text-emphasis-color property:
p.ex1 {
text-emphasis-color: red;
}
p.ex2 {
text-emphasis-color: blue;
}
p.ex3 {
text-emphasis-color: rgb(130, 
    180, 150);
}
p.ex4 {
text-emphasis-color: currentcolor;
}
Try it Yourself 
Definition and Usage
The
text-emphasis-color
property sets the 
color of 
emphasis marks.
Tip:
No emphasis marks are shown, unless the
text-emphasis-style
property is set.
Default value:
currentcolor
Inherited:
yes
Version:
CSS3
JavaScript syntax:
object
.style.textEmphasisColor="blue"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-emphasis-color
99.0
99.0
46.0
7.0
85.0
CSS Syntax
text-emphasis-color:
color
|inherit|initial;
Value
Description
color
Sets the color of the emphasis marks. If no color is specified, it uses 
    the currentcolor
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
text-emphasis-position
Property
Example
Use of the text-emphasis-position property:
h3.ex1 {
text-emphasis: double-circle red;
text-emphasis-position: over;
}
h3.ex2 {
text-emphasis: triangle blue;
text-emphasis-position: under;
}
h3.ex3 {
writing-mode: 
    vertical-rl;
text-emphasis: triangle blue;
text-emphasis-position: under right;
}
h3.ex4 {
writing-mode: vertical-rl;
text-emphasis: triangle blue;
text-emphasis-position: under left;
}
Try it Yourself 
Definition and Usage
The
text-emphasis-position
property 
specifies the position of the emphasis marks (over, under, left, right).
Tip:
Use the
writing-mode
property to specify 
horizontal or vertical writing mode.
Default value:
over right
Inherited:
yes
Version:
CSS3
JavaScript syntax:
object
.style.textEmphasisPosition="under"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-emphasis-position
99.0
99.0
46.0
7.0
85.0
CSS Syntax
text-emphasis-position: 
  over|under|left|right|initial|inherit;
Value
Description
over
The emphasis marks are applied over the text (in horizontal writing 
    mode)
Demo 
under
The emphasis marks are applied under the text (in horizontal writing 
    mode)
Demo 
left
The emphasis marks are applied to the left of the text (in vertical 
    writing mode)
right
The emphasis marks are applied to the right of the text (in vertical 
    writing mode)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
text-indent
Property
Example
Indent the first line of text with different values:
div.a {
text-indent: 50px;
}
div.b {
text-indent: -2em;
}
div.c {
text-indent: 
    30%;
}
Try it Yourself 
Definition and Usage
The
text-indent
property specifies the indentation of the first line in a text-block.
Note:
Negative values are allowed. The first line will be indented to the left if the value is negative.
Show demo 
Default value:
0
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.textIndent="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-indent
1.0
3.0
1.0
1.0
3.5
CSS Syntax
text-indent:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Defines a fixed indentation in px, pt, cm, em, etc. Default value is 0.
Read about length units
Demo 
%
Defines the indentation in % of the width of the parent element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Spacing
HTML DOM reference:
textIndent property
CSS
text-justify
Property
Example
Set the justification method to "inter-word" when text-align is set to 
"justify":
div
 {
text-align: justify;
text-justify: inter-word;
}
Try it Yourself 
Definition and Usage
The
text-justify
property specifies the justification method 
of text when text-align is set to "justify".
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textJustify="inter-word"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-justify
Yes*
11.0
55.0
10.0.3
Yes*
*This feature is behind the
Enable Experimental Web Platform Features
preference (needs to be set to 
Enabled). To change preferences in Chrome: type in "chrome://flags" in the 
Chrome browser. To change preferences in Opera: type in "flags" in the Opera 
browser.
CSS Syntax
text-justify: auto|inter-word|inter-character|none|initial|inherit;
Property Values
Value
Description
Demo
auto
The browser determines the justification algorithm
Play it 
inter-word
Increases/Decreases the space between words
Play it 
inter-character
Increases/Decreases the space between characters
Play it 
none
Disables justification methods
Play it 
initial
Sets this property to its default value.
Read about
initial
Play it 
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
outline-offset
Property
Example
Specify a 4 pixels solid red outline 15 pixels outside the border edge:
div
 {
outline: 4px solid red;
outline-offset: 15px;
}
Try it Yourself 
Definition and Usage
The
outline-offset
property adds space between 
the outline and the edge or 
border of an element.
The space between an element and its outline is transparent.
Outlines differ from borders in three ways:
An outline is a line drawn around elements, outside the border edge
An outline does not take up space
An outline may be non-rectangular
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.outlineOffset="15px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outline-offset
4.0
15.0
3.5
3.1
10.5
CSS Syntax
outline-offset:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
The distance the outline is outset from the border edge. Default value is 0
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS User Interface
HTML DOM reference:
outlineOffset property
CSS
outline-width
Property
Example
Set the width of an outline:
div {outline-width: thick;}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An outline is a line that is drawn around elements, outside the borders, to make the element "stand out".
The
outline-width
specifies the width of an outline.
Note:
Always declare the
outline-style
property before the
outline-width
property. An element must have an outline before you change the width of it.
Show demo 
Default value:
medium
Inherited:
no
Animatable:
yes,
see individual properties
.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.outlineWidth="12px"
Try it
Tips and Notes
Note:
Outlines differ from
borders
! 
Unlike border, the outline is drawn outside the element's border, and may 
overlap other content. Also, the outline is NOT a part of the element's 
dimensions; the element's total width and height is not affected by the width of 
the outline.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outline-width
1.0
8.0
1.5
1.2
7.0
CSS Syntax
outline-width: medium|thin|thick|
length
|initial|inherit;
Property Values
Value
Description
Demo
medium
Specifies a medium outline. This is default
Demo 
thin
Specifies a thin outline
Demo 
thick
Specifies a thick outline
Demo 
length
Allows you to define the thickness of the outline.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of the outline to medium (this is default):
div {outline-width: medium;}
Try it Yourself 
Example
Set the width of the outline to thin:
div {outline-width: thin;}
Try it Yourself 
Example
Set the width of the outline to 1px:
div {outline-width: 1px;}
Try it Yourself 
Example
Set the width of the outline to 15px:
div {outline-width: 15px;}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline property
HTML DOM reference:
outlineWidth property
CSS
overscroll-behavior-y
Property
Example
Turn off scroll chaining for a scrollable <div> element:
#yellowDiv {
overscroll-behavior-y: contain;
}
Try it Yourself 
Definition and Usage
The
overscroll-behavior-y
property is used to turn off scroll chaining or overscroll affordance on an element when you try to scroll past the scroll boundary in y-direction.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.overscrollBehaviorY="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
overscroll-behavior-y
63.0
18.0 *
59.0
16.0
50.0
* In Microsoft Edge, the property value 'none' is treated like 'contain', and this is not correct.
CSS Syntax
overscroll-behavior-y:  auto|contain|none|initial|inherit;
Property Values
Value
Description
auto
Allows scroll chaining and overscroll affordance behavior. This is default
contain
Allows overscroll affordance behavior, but not scroll chaining.
none
Does not allow overscroll affordance or scroll chaining behavior.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS overscroll-behavior property:
CSS overscroll-behavior property
CSS overscroll-behavior-block property:
CSS Overscroll-behavior-block property
CSS overscroll-behavior-inline property:
CSS Overscroll-behavior-inline property
CSS overscroll-behavior-x property:
CSS Overscroll-behavior-x property
CSS scroll-behavior property:
CSS Scroll-behavior property
CSS scroll-margin property:
CSS Scroll-margin property
CSS scroll-padding property:
CSS Scroll-padding property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS
padding-inline-start
Property
Example
Set the padding at the start in the inline direction:
div {
padding-inline-start: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-inline-start
is the space from its border to its content, at the start in the inline direction.
The CSS
padding-inline
and
padding-block
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-inline
and
padding-block
properties are dependent on inline and block directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is in the inline direction and the result of the
padding-inline-start
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingInlineStart="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-inline-start
87.0
87.0
41.0
12.1
73.0
CSS Syntax
padding-inline-start: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-inline-start distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the start of the element is moved from left side to top:
div {
writing-mode: vertical-rl;
padding-inline-start: 100px;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the start of the element is moved from left side to right side:
div {
direction: rtl;
padding-inline-start: 100px;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS padding-inline property:
CSS Padding-inline property
CSS padding-inline-end property:
CSS Padding-inline-end property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
padding-inline-end
Property
Example
Set the padding at the end in the inline direction:
div {
padding-inline-end: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's
padding-inline-end
is the space from its border to its content, at the end in the inline direction.
The CSS
padding-inline
and
padding-block
properties are very similar to CSS properties
padding-top
,
padding-bottom
,
padding-left
and
padding-right
, but the
padding-inline
and
padding-block
properties are dependent on inline and block directions.
Note:
The related CSS properties
writing-mode
and
direction
define inline direction. This affects where the start and end of an element is in the inline direction and the result of the
padding-inline-end
property. For pages in English, block direction is downward and inline direction is left to right.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.paddingInlineEnd="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-inline-end
87.0
87.0
41.0
12.1
73.0
CSS Syntax
padding-inline-end: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default padding-inline-end distance.
Demo 
length
Specifies distance in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
Demo 
%
Specifies distance in percent relative to size of parent element in the inline direction.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
With the
writing-mode
property value of a <div> element set to vertical-rl, the inline direction is downwards. The result is that the end of the element is moved from right side to bottom:
div {
writing-mode: vertical-rl;
padding-inline-end: 100px;
}
Try it Yourself 
Example
With the
direction
property value of a <div> element set to rtl, the inline direction is right to left. The result is that the end of the element is moved from right side to left side:
div {
direction: rtl;
padding-inline-end: 100px;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS padding-inline property:
CSS Padding-inline property
CSS padding-inline-start property:
CSS Padding-inline-start property
CSS padding-bottom property:
CSS Padding-bottom property
CSS padding-inline property:
CSS Padding-inline
CSS padding-left property:
CSS Padding-left
CSS padding-right property:
CSS Padding-right
CSS padding-top property:
CSS Padding-top
CSS writing-mode property:
CSS Writing-mode property
CSS
transition-timing-function
Property
Example
A transition effect with the same speed from start to end:
div {
transition-timing-function: linear;
}
Try it Yourself 
Definition and Usage
The
transition-timing-function
property specifies the speed curve of the transition 
effect.
This property allows a transition effect to change speed over its duration.
Default value:
ease
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.transitionTimingFunction="linear"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition-timing-function
26
12
16
9
12.1
CSS Syntax
transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start|end)|cubic-bezier(
n
,
n
,
n
,
n
)|initial|inherit;
Property Values
Value
Description
ease
Default value. Specifies a transition effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1))
linear
Specifies a transition effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))
ease-in
Specifies a transition effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1))
ease-out
Specifies a transition effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1))
ease-in-out
Specifies a transition effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))
step-start
Equivalent to steps(1, start)
step-end
Equivalent to steps(1, end)
steps(int,start|end)
Specifies a stepping function, with two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value "start" or "end", and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value "end"
cubic-bezier(
n
,
n
,
n
,
n
)
Define your own values in the cubic-bezier function.
 Possible values are numeric values from 0 to 1
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Tip:
Try the different values in the examples below to understand how 
it works!
More Examples
Example
To better understand the different function values:
Here are five different div elements with five different values:
#div1 {transition-timing-function: linear;}
#div2 {transition-timing-function: ease;}
#div3 {transition-timing-function: ease-in;}
#div4 {transition-timing-function: ease-out;}
#div5 {transition-timing-function: ease-in-out;}
Try it Yourself 
Example
Same as the example above, but the speed curves are specified with the 
cubic-bezier function:
#div1 {transition-timing-function: cubic-bezier(0,0,1,1);}
#div2 {transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);}
#div3 {transition-timing-function: cubic-bezier(0.42,0,1,1);}
#div4 {transition-timing-function: cubic-bezier(0,0,0.58,1);}
#div5 {transition-timing-function: cubic-bezier(0.42,0,0.58,1);}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Transitions
HTML DOM reference:
transitionTimingFunction property
CSS
translate
Property
Example
Change position of an element:
div
 {
translate: 100px 20px;
}
Try it Yourself 
Definition and Usage
The
translate
property allows you to change the position of elements.
The
translate
property defines x- and y-coordinates of an element in 2D. You can also define the z-coordinate to change position in 3D.
Coordinates can be given as only x-coordinates, x- and y-coordinates, or x-, y- and z-coordinates.
To better understand the
translate
property,
view a demo
.
Tip:
You need to define a value for CSS
perspective
property for the z-property to take effect.
Note:
An alternative technique to translate an element is to use CSS
transform
property with CSS
translate()
function. The CSS
translate
property, as explained on this webpage, is arguably a simpler and more direct way to translate an element.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.translate="10px 20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
translate
104
104
72
14.1
90
CSS Syntax
translate:
x-axis y-axis z-axis
|initial|inherit;
Property Values
Property Value
Description
Demo
x-axis
Defines position at the x-axis. Possible values:
length
%
Demo 
y-axis
Defines position at the y-axis. Possible values:
length
%
Demo 
z-axis
Defines position at the z-axis. Possible values:
length
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
When
translate
property for z-axis is set,
perspective
property must also be set on parent element before we can see any effect:
DIV1 {
perspective: 200px;
}
DIV2 {
translate: 50px 50px 50px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
CSS scale property:
CSS Scale property
CSS rotate property:
CSS Rotate property
CSS perspective property:
CSS Perspective property
CSS
widows
Property
Example
When printing, display at least 4 lines at the bottom and 2 lines at the top of each page:
@media print {
orphans: 4;
widows: 2;
}
Definition and Usage
The
widows
property specifies the minimum 
number of lines that must be left at the top of a page or column.
Tip:
Also look at the
orphans
property.
Default value:
2
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.widows = "3"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
widows
25.0
8.0
Not supported
7.0
10.0
CSS Syntax
widows:
integer
|initial|inherit;
Property Values
Value
Description
integer
Specifies the minimum number of lines that must be left at the top of 
    a page or column. Negative values are not allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
width
Property
Example
Set the width of three <div> elements:
div.a {
width: auto;
border: 1px 
    solid black;
}
div.b {
width: 150px;
border: 1px solid black;
}
div.c {
width: 
    50%;
border: 1px solid black;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
width
property sets the width of an element.
The width of an element does not include padding, borders, or margins!
Note:
The
min-width
and
max-width
properties override the
width
property.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.width="500px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
width
1.0
4.0
1.0
1.0
3.5
CSS Syntax
width: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default value. The browser calculates the width
Demo 
length
Defines the width in px, cm, etc.
Read about length units
Demo 
%
Defines the width in percent of the containing block
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the width of an <img> element using a percent value:
img {
width: 50%;
}
Try it Yourself 
Example
Set the width of an <input type="text"> element to 100px. However, when 
it gets focus, make it 250px wide:
input[type=text] {
width: 100px;
}
input[type=text]:focus {
width: 250px;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Height and Width
CSS tutorial:
CSS Box model
CSS reference:
height property
HTML DOM reference:
width property
CSS
word-spacing
Property
Example
Specify that the space between words in <p> elements should be 30 pixels:
p
 {
word-spacing: 30px;
}
Try it Yourself 
Definition and Usage
The
word-spacing
property increases or decreases the white space between words.
Note:
Negative values are allowed.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.wordSpacing="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
word-spacing
1.0
6.0
1.0
1.0
3.5
CSS Syntax
word-spacing: normal|
length
|initial|inherit;
Property Values
Value
Description
Demo
normal
Defines normal space between words (0.25em). This is default
Demo 
length
Defines an additional space between words (in px, pt, cm, em, etc). Negative values are allowed.
Read about length units
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Spacing
HTML DOM reference:
wordSpacing property
CSS
padding-top
Property
Example
Set the top padding for a <p> element to 25 pixels:
p.ex1 {
padding-top: 25px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
An element's padding is the space between its content and its border.
The
padding-top
property sets the top padding (space) of an element.
Note:
Negative values are not allowed.
Show demo 
Default value:
0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS1
JavaScript syntax:
object
.style.paddingTop="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
padding-top
1.0
4.0
1.0
1.0
3.5
CSS Syntax
padding-top:
length
|initial|inherit;
Property Values
Value
Description
Demo
length
Specifies a fixed top padding in px, pt, cm, etc. Default value is 0.
Read about length units
Demo 
%
Specifies a top padding in percent of the width of the containing element
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Set the top padding for a <p> element to 10% of the width of the 
containing element:
p.ex1 {
padding-top: 10%;
}
Try it Yourself 
Example
Set the top padding for a <p> element to 2 em:
p.ex1 {
padding-top: 2em;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
HTML DOM reference:
paddingTop property
CSS
place-self
Property
Example
Align an individual grid item at the end in the block and inline directions:
#myDiv {
place-self: end;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
place-self
property is used to align individual grid items, and is a shorthand property for the following properties:
align-self
justify-self
If the place-self property has two values:
place-self: start center;
align-self property value is 'start'
justify-self property value is 'center'
If the place-self property has one value:
place-self: end;
align-self and justify-self property values are both 'end'
Show demo 
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.placeSelf="end stretch"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
place-self
59.0
79.0
45.0
11.0
46.0
CSS Syntax
place-self: auto|
value
|initial|inherit;
Property Values
Value
Description
Demo
auto
Default. The element's default place-self value.
Demo 
normal
Dependant on layout context, but similar to 'stretch' for grid layout for grid items when size is not set. If size is set, the property value behaves lik 'start'.
Demo 
stretch
Stretches to fill the grid cell if size is not set.
Demo 
start
Align items at the start in the inline and block directions
Demo 
left
Align items to the left in the inline direction, as the justify-self property value.
Demo 
center
Align items to the center
Demo 
end
Align items at the end in the inline and block directions
Demo 
right
Align items to the right in the inline direction, as the justify-self property value.
Demo 
overflow-alignment
'safe' sets alignment of the item to 'start' if the content overflows
'unsafe' keeps the alignment value regardless of wether or not the item content overflows
baseline alignment
The element is aligned with the baseline of the parent.
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Writing-mode
With the
writing-mode
property value of a <div> element set to 'vertical-rl', the end of the grid cell in block direction is moved from bottom to the left, and the end of the grid cell in the inline direction is moved from right to the bottom:
#contianer {
display: grid;
writing-mode: vertical-rl;
}
#myDiv {
place-self: end;
}
Try it Yourself 
Flexbox
The
place-self
property can also be used for flexbox items, but the second value for
justify-self
will be ignored because it is not applicable with flexbox:
#contianer {
display: flex;
}
#myDiv {
place-self: end stretch;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS grid
CSS tutorial:
CSS flexbox
CSS align-self property:
CSS align-self property
CSS jusitfy-self property:
CSS justify-self property
CSS writing-mode property:
CSS Writing-mode property
CSS
row-gap
Property
Example
Specify a 50 pixels gap between the grid rows:
#grid-container
 {
display: grid;
row-gap: 50px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
row-gap
property specifies the gap between the rows in a flexbox or grid layout.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS Box Alignment Module Level 3
JavaScript syntax:
object
.style.rowGap="50px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
row-gap (in Grid)
66
16
61
12
53
row-gap (in Flexbox)
84
84
63
14.1
70
CSS Syntax
row-gap:
length
|normal|initial|inherit;
Property Values
Value
Description
Demo
length
A specified length or % that will set the gap between the rows
Demo 
normal
Default value. Specifies a normal gap between the rows
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Flexbox layout
Set the gap between rows to 70px in a flexbox layout:
#flex-container {
display: flex;
row-gap: 70px;
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Grid Layout
CSS Tutorial:
CSS Flexbox Layout
CSS Reference:
gap property
CSS Reference:
column-gap property
CSS
scroll-margin-left
Property
Example
Set scroll margin to 20px between the snap position and the container:
div {
scroll-margin-left: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-left
property specifies 
the distance between the snap position and the container.
Note:
This property only works if the snap position is placed on the left side of the child element.
To see the effect from the
scroll-margin-left
property, the
scroll-margin-left
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginLeft="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-left
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-left:  0|
value
|initial|inherit;
Property Values
Value
Description
0
Scroll-margin-left is zero. This is default
length
Specifies scroll-margin-left in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-margin-left
property can be used in an image gallery with snap behaviour. Here, the scroll-margin-left lets the user see that there is an image to the left. Scroll past the first image to see the effect:
#container > img {
scroll-margin-left: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on the left side of the child elements for the
scroll-margin-left
property to work. In this example the
direction
property changes the snap position from left to right side of child elements. With the code like this the
scroll-margin-left
property no longer works:
#container {
direction: rtl;
}
#container > div {
scroll-margin-left: 30px;
scroll-snap-align: none start;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-block-start
Property
Example
Set scroll padding in block direction to 20px from the start of the container to the snap position:
div {
scroll-padding-block-start: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-block-start
property specifies 
the distance in block direction from the start of the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' for the block direction.
To see the effect from the
scroll-padding-block-start
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-block-start
and the
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingBlockStart="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-block-start
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-block-start:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-block-start in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-block-start
property can be used in an image gallery with snap behaviour, to push images below a fixed element:
#container {
scroll-padding-block-start: 30px;
}
Fixed top element
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to vertical-rl, the start of the container and child elements in block direction is moved from top to right side. This affects the scroll snap behaviour, and how the scroll-padding-block-start property works:
#container {
scroll-padding-block-start: 20px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-block-end
Property
Example
Set scroll padding to 20px in block direction from the end of the container to the snap position:
div {
scroll-padding-block-end: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-block-end
property specifies 
the distance in block direction from the end of the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'end' for the block direction.
To see the effect from the
scroll-padding-block-end
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-block-end
and the
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingBlockEnd="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-block-end
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-block-end:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-block-end in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-block-end
property can be used in an image gallery with snap behaviour, to push images above a fixed element:
#container {
scroll-padding-block-end: 30px;
}
Fixed bottom element
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to vertical-rl, the end of the container and child elements in block direction is moved from bottom to left side. This affects the scroll snap behaviour, and how the scroll-padding-block-end property works:
#container {
scroll-padding-block-end: 20px;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-margin-right
Property
Example
Set scroll margin to 20px between the snap position and the container:
div {
scroll-margin-right: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-margin-right
property specifies 
the distance between the snap position and the container.
Note:
This property only works if the snap position is placed on the right side of the child element.
To see the effect from the
scroll-margin-right
property, the
scroll-margin-right
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
0
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollMarginRight="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-margin-right
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-margin-right:  0|
value
|initial|inherit;
Property Values
Value
Description
0
Scroll-margin-right is zero. This is default
length
Specifies scroll-margin-right in px, pt, cm, etc. Negative 
    values are allowed.
Read about length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-margin-right
property can be used in an image gallery with snap behaviour. Here, the scroll-margin-right lets the user see that there is an image to the right. Scroll past the first image to see the effect:
#container > img {
scroll-margin-right: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on the right side of the child elements for the
scroll-margin-right
property to work. In this example the
direction
property changes the snap position from right to left side of child elements. With the code like this the
scroll-margin-right
property no longer works:
#container {
direction: rtl;
}
#container > div {
scroll-margin-right: 30px;
scroll-snap-align: none end;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-bottom
Property
Example
Set scroll padding to 20px from the bottom of the container to the snap position:
div {
scroll-padding-bottom: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-bottom
property specifies 
the distance from the bottom of the container to the snap position on the child elements.
Note:
This property only works if the snap position is placed at the bottom of the child element.
To see the effect from the
scroll-padding-bottom
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-bottom
and the
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingBottom="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-bottom
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-padding-bottom:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-bottom in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-bottom
property can be used in an image gallery with snap behaviour, to push images above a fixed element:
#container {
scroll-padding-bottom: 30px;
}
Fixed bottom element
Try it Yourself 
Set scroll-padding at the bottom
The
scroll-padding-bottom
property can also be set on the container when snap behaviour is set in both directions. Scroll to the next element vertically to see the effect:
#container {
scroll-padding-bottom: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on bottom of the child elements for the
scroll-padding-bottom
property to work. In this example the
writing-mode
property changes the snap position from bottom to left side of child elements. With the code like this the
scroll-padding-bottom
property no longer works:
#container {
writing-mode: vertical-rl;
scroll-padding-bottom: 30px;
}
#container > div {
scroll-snap-align: end none;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-inline-end
Property
Example
Set scroll padding in the inline direction to 20px from the end of the container to the snap position:
div {
scroll-padding-inline-end: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-inline-end
property specifies 
the distance in the inline direction from the end of the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'end' for the inline direction.
To see the effect from the
scroll-padding-inline-end
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-inline-end
and the
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingInlineEnd="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-inline-end
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-inline-end:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-inline-end in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-inline-end
property can be used in an image gallery with snap behaviour, to push images out from behind a fixed element:
#container {
scroll-padding-inline-end: 30px;
}
Fixed
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to 'vertical-rl', the start of the container and child elements in the inline direction is moved from the left side to the top, and the end of the container and child elements is moved from the right side to the bottom. This affects the scroll snap behaviour, and how the scroll-padding-inline-end property works:
#container {
scroll-padding-inline-end: 20px;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of the container element set to 'rtl', the end of the container and child elements in the inline direction is moved from the right side to the left side. This affects the scroll snap behaviour, and how the scroll-padding-inline-end property works:
#container {
scroll-padding-inline-end: 20px;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-inline-start
Property
Example
Set scroll padding in the inline direction to 20px from the start of the container to the snap position:
div {
scroll-padding-inline-start: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-inline-start
property specifies 
the distance in the inline direction from the start of the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' for the inline direction.
To see the effect from the
scroll-padding-inline-start
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-inline-start
and the
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingInlineStart="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-inline-start
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-inline-start:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-inline-start in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-inline-start
property can be used in an image gallery with snap behaviour, to push images out from behind a fixed element:
#container {
scroll-padding-inline-start: 30px;
}
Fixed
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to 'vertical-rl', the start of the container and child elements in the inline direction is moved from top to right side. This affects the scroll snap behaviour, and how the scroll-padding-inline-start property works:
#container {
scroll-padding-inline-start: 20px 0;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of the container element set to 'rtl', the start of the container and child elements in the inline direction is moved from the right side to the left side, and the end of the container and child elements is moved from right side to bottom. This affects the scroll snap behaviour, and how the scroll-padding-inline property works:
#container {
scroll-padding-inline-start: 20px;
diretion: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-block
Property
Example
Set scroll padding to 20px from the container to the snap position, in block direction:
div {
scroll-padding-block: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-block
property specifies 
the distance in block direction, from the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance in block direction, between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' or 'end' for the block direction.
The
scroll-padding-block
property is a shorthand property for the following properties:
scroll-padding-block-start
scroll-padding-block-end
Values for the
scroll-padding-block
property can be set in different ways:
If the scroll-padding-block property has two values:
scroll-padding-block: 10px 50px;
distance at start is 10px
distance at end is 50px
If the scroll-padding-block property has one value:
scroll-padding-block: 10px;
distance at start and end is 10px
To see the effect from the
scroll-padding-block
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-block
and the
scroll-snap-type
properties must be set on the parent element.
The CSS
scroll-padding-block
and
scroll-padding-inline
properties are very similar to CSS properties
scroll-padding-top
,
scroll-padding-bottom
,
scroll-padding-left
and
scroll-padding-right
, but the
scroll-padding-block
and
scroll-padding-inline
properties are dependent on block and inline directions.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingBlock="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-block
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-block:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-block in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-block
property can be used in an image gallery with snap behaviour, to push images below a fixed element:
#container {
scroll-padding-block: 30px 0;
}
Fixed top element
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to vertical-rl, the start of the container and child elements in block direction is moved from top to right side, and the end of the container and child elements is moved from bottom to left side. This affects the scroll snap behaviour, and how the scroll-padding-block property works:
#container {
scroll-padding-block: 20px 0;
writing-mode: vertical-rl;
}
Try it Yourself 
Related Pages
CSS scroll-padding-block-end property:
CSS scroll-padding-block-end property
CSS scroll-padding-block-start property:
CSS scroll-padding-block-start property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-right
Property
Example
Set scroll padding to 20px from the right side of the container to the snap position:
div {
scroll-padding-right: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-right
property specifies 
the distance from the right side of the container to the snap position on the child elements.
Note:
This property only works if the snap position is placed on the right side of the child element.
To see the effect from the
scroll-padding-right
property, the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-right
and
scroll-snap-type
properties must be set on the parent element.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingRight="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-right
69.0
79.0
68.0
14.1
56.0
CSS Syntax
scroll-padding-right:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-right in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-right
property can be used in an image gallery with snap behaviour, to push images into view from behind a fixed element:
#container > img {
scroll-padding-left: 30px;
}
Fixed
Try it Yourself 
Set scroll-padding on the right side
The
scroll-padding-right
property can also be set on the container when snap behaviour is set in both directions. Scroll to the next element horizontally to see the effect:
#container > div {
scroll-padding-right: 30px;
}
Try it Yourself 
Snap position
The snap position must be placed on the right side of the child elements for the
scroll-padding-right
property to work. In this example the
direction
property value 'rtl' changes the snap position from right side to left side of child elements. With the code like this the
scroll-padding-right
property no longer works:
#container {
direction: rtl;
scroll-padding-right: 30px;
}
#container > div {
scroll-snap-align: none end;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-padding-inline
Property
Example
Set scroll padding in the inline direction to 20px from the container to the snap position:
div {
scroll-padding-inline: 20px;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
scroll-padding-inline
property specifies 
the distance in the inline direction from the container to the snap position on the child elements.
This means that when you stop scrolling, the scrolling will quickly adjust and stop at a specified distance between the snap position and the container.
Note:
This property only works if the scroll-snap-align property is set to 'start' or 'end' for the inline direction.
The
scroll-padding-inline
property is a shorthand property for the following properties:
scroll-padding-inline-start
scroll-padding-inline-end
Values for the
scroll-padding-inline
property can be set in different ways:
If the scroll-padding-inline property has two values:
scroll-padding-inline: 10px 50px;
distance at start is 10px
distance at end is 50px
If the scroll-padding-inline property has one value:
scroll-padding-inline: 10px;
distance at start and end is 10px
To see the effect from the
scroll-padding-inline
property,  the
scroll-snap-align
property must be set on the child elements, and the
scroll-padding-inline
and the
scroll-snap-type
properties must be set on the parent element.
The CSS
scroll-padding-block
and
scroll-padding-inline
properties are very similar to CSS properties
scroll-padding-top
,
scroll-padding-bottom
,
scroll-padding-left
and
scroll-padding-right
, but the
scroll-padding-block
and
scroll-padding-inline
properties are dependent on block and inline directions.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollPaddingInline="20px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-padding-inline
69.0
79.0
68.0
15.0
56.0
CSS Syntax
scroll-padding-inline:  auto|
value
|initial|inherit;
Property Values
Value
Description
auto
Default value. The browser calculates the padding
length
Specifies scroll-padding-inline in px, pt, cm, etc. Negative 
    values are not allowed.
Read about length units
%
Specifies the padding in percent of the width of the containing element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Image gallery
The
scroll-padding-inline
property can be used in an image gallery with snap behaviour, to push images out from behind a fixed element:
#container {
scroll-padding-inline: 30px 0;
}
Fixed
Try it Yourself 
Example
With the
writing-mode
property value of the container element set to 'vertical-rl', the start of the container and child elements in the inline direction is moved from left side to top, and the end of the container and child elements is moved from right side to bottom. This affects the scroll snap behaviour, and how the scroll-padding-inline property works:
#container {
scroll-padding-inline: 20px 0;
writing-mode: vertical-rl;
}
Try it Yourself 
Example
With the
direction
property value of the container element set to 'rtl', the start of the container and child elements in the inline direction is moved from the right side to the left side. This affects the scroll snap behaviour, and how the scroll-padding-inline property works:
#container {
scroll-padding-inline: 20px 0;
direction: rtl;
}
Try it Yourself 
Related Pages
CSS direction property:
CSS Direction property
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS writing-mode property:
CSS Writing-mode property
CSS
scroll-snap-stop
Property
Example
Instead of scrolling past elements when swiping fast on a trackpad or a touch screen, force scrolling to stop and snap on the next element:
div {
scroll-snap-stop: always;
}
Try it Yourself 
Definition and Usage
When swiping fast on a trackpad or a touch screen, the
scroll-snap-stop
property specifies whether to scroll past elements or to stop and snap on the next element.
To control scroll snap stop behaviour, the
scroll-snap-stop
and
scroll-snap-align
properties must be set on the child elements, and the
scroll-snap-type
property must be set on the parent element.
Default value:
normal
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.scrollSnapStop="always"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
scroll-snap-stop
75.0
79.0
103.0
15.0
62.0
CSS Syntax
scroll-snap-stop:  normal|always|initial|inherit;
Property Values
Value
Description
normal
Default value. After fast swipe with touchpad or touch screen, the scrolling slows down slowly and passes several elements.
always
After fast swipe with touchpad or touch screen, scrolling stops and the next element snaps into focus.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS scroll-snap-align property:
CSS Scroll-snap-align property
CSS scroll-snap-type property:
CSS Scroll-snap-type property
CSS
text-align-last
Property
Example
Align the last line of text in three <div> elements:
div.a
{
text-align: justify; /* For Edge */
text-align-last: right;
}
div.b
{
text-align: justify;/* For Edge */
text-align-last: center;
}
div.c
{
text-align: justify;/* For Edge */
text-align-last: justify;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
text-align-last
property specifies how to align the last line of a text.
Notice that the
text-align-last
property 
sets the alignment for all last lines within the selected element. So, if you 
have a <div> with three paragraphs in it,
text-align-last
will apply to the last line of EACH of the paragraphs. To use
text-align-last
on only the last paragraph in the container, you can use :last child, see 
example below.
Note:
In Edge prior 79, the
text-align-last
property only works on text that 
has "text-align: justify".
Show demo 
Default value:
auto
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.textAlignLast="right"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-align-last
47
12
49.0
16
34
CSS Syntax
text-align-last: auto|left|right|center|justify|start|end|initial|inherit;
Property Values
Value
Description
Play it
auto
Default value. The last line is justified and aligned left
Demo 
left
The last line is aligned to the left
Demo 
right
The last line is aligned to the right
Demo 
center
The last line is center-aligned
Demo 
justify
The last line is justified as the rest of the lines
Demo 
start
The last line is aligned at the beginning of the line (left if the text-direction is left-to-right, and right is the text-direction is right-to-left)
Demo 
end
The last line is aligned at the end of the line (right if the text-direction is left-to-right, and left is the text-direction is right-to-left)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Use text-align-last on only the very last line in the container:
div.b p:last-child {
text-align-last: center;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text Alignment
HTML DOM reference:
textAlignLast property
CSS
text-decoration-color
Property
Example
Set the color of the text-decoration to red:
p
{
text-decoration: underline;
text-decoration-color: red;
}
Try it Yourself 
Definition and Usage
The
text-decoration-color
property specifies the color of the text-decoration (underlines, overlines, linethroughs).
Tip:
Also look at the
text-decoration
property,
which is a short-hand property for text-decoration-line, text-decoration-style,  
text-decoration-color, and text-decoration-thickness.
Show demo 
Default value:
currentColor
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.textDecorationColor="red"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-decoration-color
57
79
36
12.1
44
CSS Syntax
text-decoration-color:
color
|initial|inherit;
Property Values
Value
Description
Play it
color
Specifies the color of the text-decoration
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Decoration
HTML DOM reference:
textDecorationColor property
CSS
text-emphasis-style
Property
Example
Use of the text-emphasis-style property:
p.ex1 {
text-emphasis-style: filled;
}
p.ex2 {
text-emphasis-style: open;
}
p.ex3 {
text-emphasis-style: 
    double-circle;
}
p.ex4 {
text-emphasis-style: "#";
}
Try it Yourself 
Definition and Usage
The
text-emphasis-style
property sets the 
style of 
emphasis marks.
Tip:
The size of the emphasis marks is about 50% of the 
size of the font.
Default value:
none
Inherited:
yes
Version:
CSS3
JavaScript syntax:
object
.style.textEmphasisStyle="triangle"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
text-emphasis-style
99.0
99.0
46.0
7.0
85.0
CSS Syntax
text-emphasis-style: 
  none|filled|open|dot|circle|double-circle|triangle|sesame|
string
|
color
|initial|inherit;
Value
Description
none
No emphasis marks are applied
Demo 
filled
The emphasis marks are filled with a solid color
Demo 
open
The emphasis marks are hollow
Demo 
dot
The emphasis marks are small circles
Demo 
circle
The emphasis marks are circles
Demo 
double-circle
The emphasis marks are double circles
Demo 
triangle
The emphasis marks are triangles
Demo 
sesame
The emphasis marks are sesames
Demo 
string
The emphasis marks are the given string (one character)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
transform
Property
Example
Rotate, skew, and scale three different <div> elements:
div.a {
transform: rotate(20deg);
}
div.b {
transform: skewY(20deg);
}
div.c {
transform: scaleY(1.5);
}
Try it Yourself 
Definition and Usage
The
transform
property applies a 2D or 3D transformation to an element. This property allows you to rotate, 
scale, move, skew, etc., elements.
Show demo 
Default value:
none
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.transform="rotate(7deg)"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform
36
12
16
9
23
Syntax
transform: none|
transform-functions
|initial|inherit;
Property Values
Value
Description
Demo
none
Defines that there should be no transformation
Demo 
matrix(
n,n,n,n,n,n
)
Defines a 2D transformation, using a matrix of six values
Demo 
matrix3d
(
n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n
)
Defines a 3D transformation, using a 4x4 matrix of 16 values
translate(
x,y
)
Defines a 2D translation
Demo 
translate3d(
x,y,z
)
Defines a 3D translation
translateX(
x
)
Defines a translation, using only the value for the X-axis
translateY(
y
)
Defines a translation, using only the value for the Y-axis
translateZ(
z
)
Defines a 3D translation, using only the value for the Z-axis
scale(
x,y
)
Defines a 2D scale transformation
Demo 
scale3d(
x,y,z
)
Defines a 3D scale transformation
scaleX(
x
)
Defines a scale transformation by giving a value for the X-axis
scaleY(
y
)
Defines a scale transformation by giving a value for the Y-axis
scaleZ(
z
)
Defines a 3D scale transformation by giving a value for the Z-axis
rotate(
angle
)
Defines a 2D rotation, the angle is specified in the  parameter
Demo 
rotate3d(
x,y,z,angle
)
Defines a 3D rotation
rotateX(
angle
)
Defines a 3D rotation along the X-axis
Demo 
rotateY(
angle
)
Defines a 3D rotation along the Y-axis
Demo 
rotateZ(
angle
)
Defines a 3D rotation along the Z-axis
skew(
x-angle,y-angle
)
Defines a 2D skew transformation along the X- and the Y-axis
Demo 
skewX(
angle
)
Defines a 2D skew transformation along the X-axis
Demo 
skewY(
angle
)
Defines a 2D skew transformation along the Y-axis
Demo 
perspective(
n
)
Defines a perspective view for a 3D transformed element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Images 
thrown on the table
This example demonstrates how to create "polaroid" pictures and rotate the 
pictures.
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
HTML DOM reference:
transform property
CSS
top
Property
Example
Set the top edge of the positioned <div> element 50px down from the top edge of 
its nearest positioned ancestor:
div {
position: absolute;
top: 
50px;
border: 3px solid green;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
top
property affects the vertical position of a positioned element. 
This property has no effect on non-positioned elements.
If position: absolute; or position: fixed; - the
top
property sets the top edge of an element to a unit above/below the 
  top edge of its nearest positioned ancestor.
If position: relative; - the
top
property makes the element's 
  top 
  edge to move above/below its normal position.
If position: sticky; - the
top
property behaves like its position is 
  relative when the element is inside the viewport, and like its position is 
  fixed when it is outside.
If position: static; - the
top
property has no effect.
Show demo 
Default value:
auto
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS2
JavaScript syntax:
object
.style.top="100px"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
top
1.0
5.0
1.0
1.0
6.0
CSS Syntax
top: auto|
length
|initial|inherit;
Property Values
Value
Description
Demo
auto
Lets the browser calculate the top edge position. This is default
Demo 
length
Sets the top edge position in px, cm, etc. Negative values are allowed.
Read about length units
Demo 
%
Sets the top edge position in % of containing element. Negative values are allowed
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Use the top property with a negative value and for an element with no 
positioned ancestors:
div.b {
position: absolute;
top: -20px;
border: 3px solid blue;
}
div.c {
position: absolute;
top: 150px;
border: 3px solid green;
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
bottom property
CSS reference:
left property
CSS reference:
right property
HTML DOM reference:
top property
CSS
transform-origin
Property
Example
Set a rotated element's base placement:
div
 {
transform: rotate(45deg);
transform-origin: 20% 40%;
}
Try it Yourself 
Definition and Usage
The
transform-origin
property allows you to change the position of transformed elements.
2D transformations can change the x- and y-axis of an element. 3D transformations 
can also change the z-axis of an element.
To better understand the
transform-origin
property,
view a demo
.
Note:
This property must be used together with the
transform
property.
Tip:
To better understand this property for
3D transforms
,
view a demo
.
Show demo 
Default value:
50% 50% 0
Inherited:
no
Animatable:
yes.
Read about
animatable
Try it
Version:
CSS3
JavaScript syntax:
object
.style.transformOrigin="0 0"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform-origin
36
12
16
9
23
CSS Syntax
transform-origin:
x-axis y-axis z-axis
|initial|inherit;
Property Values
Property Value
Description
x-axis
Defines where the view is placed at the x-axis. Possible values:
left
center
right
length
%
y-axis
Defines where the view is placed at the y-axis. Possible values:
top
center
bottom
length
%
z-axis
Defines where the view is placed at the z-axis (for 3D transformations). Possible values:
length
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS 2D Transforms
CSS tutorial:
CSS 3D Transforms
HTML DOM reference:
transformOrigin property
CSS
unicode-bidi
Property
Example
Override text:
div
 {
direction: rtl;
unicode-bidi: bidi-override;
}
Try it Yourself 
Definition and Usage
The
unicode-bidi
property is used together with the
direction
property to set or return whether the text should be overridden to 
support multiple languages in the same document.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS2
JavaScript syntax:
object
.style.unicodeBidi="bidi-override"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
unicode-bidi
2.0
5.5
1.0
1.3
9.2
CSS Syntax
unicode-bidi: normal|embed|bidi-override|initial|inherit;
Property Values
Value
Description
Demo
normal
The element does not open an additional level of embedding. This is default
Demo 
embed
For inline elements, this value opens an additional level of embedding
Demo 
bidi-override
For inline elements, this creates an override. For block elements, this 
    creates an override for inline-level descendants not within another block 
    element
Demo 
isolate
The element is isolated from its siblings
isolate-override
plaintext
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS tutorial:
CSS Text Alignment
HTML DOM reference:
unicodeBidi 
property
CSS
user-select
Property
Example
Prevent text selection of a <div> element:
div
 {
-webkit-user-select: none; /* Safari */
-ms-user-select: 
    none; /* IE 10 and IE 11 */
user-select: none; /* Standard 
    syntax */
}
Try it Yourself 
Definition and Usage
The
user-select
property specifies whether the text of an element can be selected.
In web browsers, if you double-click on some text it will be selected/highlighted. This property can be used to prevent this.
Default value:
auto
Inherited:
no
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.userSelect="none"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by -webkit- specify the first version that worked with a prefix.
Property
user-select
54.0
79.0
69.0
3.1 -webkit-
41.0
CSS Syntax
user-select: auto|none|text|all;
Property Values
Value
Description
Demo
auto
Default. Text can be selected if the browser allows it
Play it 
none
Prevent text selection
Play it 
text
The text can be selected by the user
Play it 
all
Text selection is made with one click instead of a double-click
Play it 
Related Pages
HTML DOM reference:
userSelect property
CSS
word-break
Property
Example
Break words at any character:
p.a {
word-break: break-all;
}
Try it Yourself 
Definition and Usage
The
word-break
property specifies how words 
should break when reaching the end of a line.
Show demo 
Default value:
normal
Inherited:
yes
Animatable:
no.
Read about
animatable
Version:
CSS3
JavaScript syntax:
object
.style.wordBreak="break-all"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
word-break
4.0
5.5
15.0
3.1
15.0
CSS Syntax
word-break: normal|break-all|keep-all|break-word|initial|inherit;
Property Values
Value
Description
Demo
normal
Default value. Uses default line break rules
break-all
To prevent overflow, word may be broken at any character
Demo 
keep-all
Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. 
    Non-CJK text behavior is the same as value "normal"
Demo 
break-word
Deprecated. To prevent overflow, word may be broken at arbitrary points
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
CSS
zoom
Property
Example
Use the
zoom
property on text:
p.a {
zoom: normal;
}
p.b {
zoom: 150%;
}
p.c {
zoom: 0.6;
}
Try it Yourself 
More "Try it Yourself" examples below.
Definition and Usage
The
zoom
property specifies the zoom factor 
for an element. An element can be zoomed in and out.
Show demo 
Default value:
normal
Inherited:
no
Animatable:
Yes.
Read about
animatable
Version:
CSS Viewport Module Level 1
JavaScript syntax:
object
.style.zoom = "3"
Try it
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
zoom
1
12
126
3.1
15.0
CSS Syntax
zoom: normal|
%
|
number
|unset|initial|inherit;
Property Values
Value
Description
Demo
normal
Default value. The element is rendered as normal
Demo 
%
Specifies the zoom factor in percent. 100% = normal. To zoom in, use 
    values larger than 100%. To zoom out, use values smaller than 100%
Demo 
number
Specifies the zoom factor as a number percent. 1.0 = normal. To zoom in, 
    use values larger than 1.0 To zoom out, use values smaller than 1.0
Demo 
unset
Unsets the zoom factor (goes back to normal)
Demo 
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
More Examples
Example
Use the
zoom
property to resize an element:
div {
border-radius: 100%;
background: #73AD21;
padding: 20px;
width: 80px;
height: 80px;
}
div.a {
zoom: normal;
}
div.b {
zoom: 150%;
}
div.c {
zoom: 0.6;
}
Try it Yourself 
JavaScript
Tutorial
Examples in Each Chapter
With our "Try it Yourself" editor, you can edit the source code and view 
the result.
Example
My First JavaScript
Click me to display Date and Time
Try it Yourself 
Use the Menu
We recommend reading this tutorial, in the sequence listed in the menu.
If you have a large screen, the menu will always be present on the left.
If you have a small screen, open the menu by clicking the top menu sign

.
Learn by Examples
Examples are better than 1000 words. Examples are often easier to understand 
than text explanations.
This tutorial supplements all explanations with clarifying "Try it Yourself" examples.
Why Study JavaScript?
JavaScript is one of the
3 languages
all web developers
must
learn:
1.
HTML
to define the content of web pages
2.
CSS
to specify the layout of web pages
3.
JavaScript
to program the behavior of web pages
Learning Speed
In this tutorial, the learning speed is your choice.
Everything is up to you.
If you are struggling, take a break, or re-read the material.
Always
make sure you understand
all
the "Try-it-Yourself" 
examples.
The only way to become a clever programmer is to:
Practice. Practice. Practice. Code. Code. Code !
Test Yourself With Exercises
Exercise:
Create a variable called
carName
and assign the value
Volvo
to it.
var
= "
";
Submit Answer 
Start the Exercise
Commonly Asked Questions
How do I get JavaScript?
Where can I download JavaScript?
Is JavaScript Free?
You don't have to get or download JavaScript.
JavaScript is already running in your browser on your computer,
on your tablet, and on your smart-phone.
JavaScript is free to use for everyone.
My Learning
Track your progress with the free "My Learning" program here at W3Schools.
Log in to your account, and start earning points!
This is an optional feature. You can study at W3Schools without using My Learning.
JavaScript References
W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.
The reference contains examples for all properties, methods and events, and 
is continuously updated according to the latest web standards.
Complete JavaScript Reference 
JavaScript Quiz Test
Test your JavaScript skills at W3Schools!
Start JavaScript Quiz!
JavaScript Function apply()
Method Reuse
With the
apply()
method, you can write a method that can be used on different 
objects.
The JavaScript apply() Method
The
apply()
method is similar to the
call()
method (previous chapter).
In this example the
fullName
method of
person
is
applied
on
person1
:
Example
const person = {
fullName: function() {
return this.firstName + " " + this.lastName;
}
}
const person1 = {
firstName: "Mary",
lastName: "Doe"
}
// This will return "Mary Doe":
person.fullName.apply(person1);
Try it Yourself 
The Difference Between call() and apply()
The difference is:
The
call()
method takes arguments
separately
.
The
apply()
method takes arguments as an
array
.
The apply() Method with Arguments
The
apply()
method accepts arguments in an array:
Example
const person = {
fullName: function(city, country) {
return this.firstName + " " + this.lastName 
  + "," + city + "," + country;
}
}
const person1 = {
firstName:"John",
lastName: "Doe"
}
person.fullName.apply(person1, ["Oslo", "Norway"]);
Try it Yourself 
Compared with the
call()
method:
Example
const person = {
fullName: function(city, country) {
return this.firstName + " " + this.lastName 
  + "," + city + "," + country;
}
}
const person1 = {
firstName:"John",
lastName: "Doe"
}
person.fullName.call(person1, "Oslo", "Norway");
Try it Yourself 
Simulate a Max Method on Arrays
You can find the largest number (in a list of numbers) using the
Math.max()
method:
Example
Math.max(1,2,3); // Will return 3
Try it Yourself 
Since JavaScript
arrays
do not have a max() method, you can apply the
Math.max()
method instead.
Example
Math.max.apply(null, [1,2,3]); // Will also return 3
Try it Yourself 
The first argument (null) does not matter. It is not used in this example.
These examples will give the same result:
Example
Math.max.apply(Math, [1,2,3]); // Will also return 3
Try it Yourself 
Example
Math.max.apply(" ", [1,2,3]); // Will also return 3
Try it Yourself 
Example
Math.max.apply(0, [1,2,3]); // Will also return 3
Try it Yourself 
JavaScript Strict Mode
In JavaScript strict mode, if the first argument of the
apply()
method is not an object,
it becomes the owner (object) of the invoked function.
In "non-strict" mode, it becomes the global object.
JavaScript Function bind()
Function Borrowing
With the
bind()
method, an object can borrow a method from another object.
The example below creates 2 objects (person and member).
The member object borrows the fullname method from the person object:
Example
const person = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this.firstName + " " + this.lastName;
}
}
const member = {
firstName:"Hege",
lastName: "Nilsen",
}
let fullName = person.fullName.bind(member);
Try it Yourself 
Preserving
this
Sometimes the
bind()
method has to be used to prevent losing
this
.
In the following example, the person object has a display method. In the display method,
this
refers to the person object:
Example
const person = {
firstName:"John",
lastName: "Doe",
display: function () {
let x = document.getElementById("demo");
x.innerHTML = this.firstName + " " + this.lastName;
}
}
person.display();
Try it Yourself 
When a function is used as a callback,
this
is lost.
This example will try to display the person name after 3 seconds, but it will display
undefined
instead:
Example
const person = {
firstName:"John",
lastName: "Doe",
display: function () {
let x = document.getElementById("demo");
x.innerHTML = this.firstName + " " + this.lastName;
}
}
setTimeout(person.display, 3000);
Try it Yourself 
The
bind()
method solves this problem.
In the following example, the
bind()
method is used to bind person.display to person.
This example will display the person name after 3 seconds:
Example
const person = {
firstName:"John",
lastName: "Doe",
display: function () {
let x = document.getElementById("demo");
x.innerHTML = this.firstName + " " + this.lastName;
}
}
let display = person.display.bind(person);
setTimeout(display, 3000);
Try it Yourself 
What is
this
?
In JavaScript, the
this
keyword refers to an
object
.
The
this
keyword refers to
different objects
depending on how it is used:
In an object method,
this
refers to the
object
.
Alone,
this
refers to the
global object
.
In a function,
this
refers to the
global object
.
In a function, in strict mode,
this
is
undefined
.
In an event,
this
refers to the
element
that received the event.
Methods like
call()
,
apply()
,
and
bind()
can refer
this
to
any object
.
JavaScript
Closures
JavaScript variables can belong to the
local
or
global
scope.
Global variables can be made local (private) with
closures
.
Global Variables
A
function
can access all variables defined
inside
the function, like this:
Example
function myFunction() {
let a = 4;
return a * a;
}
Try it Yourself 
But a
function
can also access variables defined
outside
the function, like this:
Example
let a = 4;
function myFunction() {
return a * a;
}
Try it Yourself 
In the last example,
a
is a
global
variable.
In a web page, global variables belong to the page.
Global variables can be used (and changed) by all other scripts in the page.
In the first example,
a
is a
local
variable.
A local variable can only be used inside the function where it is defined. It 
is hidden from other functions and other scripting code.
Global 
and local variables with the same name are  
different variables. Modifying one, does not modify the other.
Example
function myFunction() {
a = 4;
}
Try it Yourself 
Variable Lifetime
Global variables live until the page is discarded, like when you navigate 
to another page or close the window.
Local 
variables have short lives. They are created when the function is 
invoked, and deleted when the function is finished.
A Counter Dilemma
Suppose you want to use a variable for counting something, and you want this 
counter to be available to all functions.
You could use a global variable, and a
function
to increase the counter:
Example
// Initiate counter
let counter = 0;
// Function to increment 
  counter
function add() {
counter += 1;
}
// Call add() 3 times
add();
add();
add();
// The counter should now be 3
Try it Yourself 
There is a problem with the solution above: Any code on the page can change the counter, without 
calling add().
The counter should be local to the
add()
function, to prevent other code from changing 
it:
Example
// Initiate counter
let counter = 0;
// Function to increment 
  counter
function add() {
let counter = 0;
counter += 1;
}
// 
  Call add() 3 times
add();
add();
add();
//The counter should 
  now be 3. But it is 0
Try it Yourself 
It did not work because we display the global counter instead of the local 
counter.
We can remove the global counter and access the local counter by letting the 
function return it:
Example
// Function to increment 
  counter
function add() {
let counter = 0;
counter += 1;
return counter;
}
// 
  Call add() 3 times
add();
add();
add();
//The counter should 
  now be 3. But it is 1.
Try it Yourself 
It did not work because we reset the local counter every time we call the 
function.
A JavaScript inner function can solve this.
JavaScript Nested Functions
All functions have access to the global scope.
In fact, in JavaScript, all functions have access to the scope "above" them.
JavaScript supports nested functions. Nested functions have access to the 
scope "above" them.
In this example, the inner function
plus()
has access 
to the
counter
variable in the parent function:
Example
function add() {
let counter = 0;
function plus() {counter += 1;}
plus();
return counter;
}
Try it Yourself 
This could have solved the counter dilemma, if we could reach the
plus()
function from the outside.
We also need to find a way to execute
counter = 0
only once.
We need a closure.
JavaScript Closures
Remember self-invoking functions? What does this function do?
Example
const add = (function () {
let counter = 0;
return function () {counter += 1; return counter}
})();
add();
add();
add();
// the counter is now 3
Try it Yourself 
Example Explained
The variable
add
is assigned to the return value of a self-invoking 
function.
The self-invoking function only runs once. It sets the counter to zero (0), 
and returns a function expression.
This way add becomes a function. The "wonderful" part is that it can access 
the counter in the parent scope.
This is called a JavaScript
closure.
It makes it possible 
for a function to have "
private
" variables.
The counter is protected by the scope of the anonymous function, 
and can only be changed using the add function.
JavaScript Classes
ECMAScript 2015, also known as ES6, introduced JavaScript Classes.
JavaScript Classes are templates for JavaScript Objects.
JavaScript Class Syntax
Use the keyword
class
to create a class.
Always add a method named
constructor()
:
Syntax
class ClassName {
constructor() { ... }
}
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
}
The example above creates a class named "Car".
The class has two initial properties: "name" and "year".
Using a Class
When you have a class, you can use the class to create objects:
Example
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
Try it Yourself 
The example above uses the
Car class
to create two
Car objects
.
The Constructor Method
The constructor method is a special method:
It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties
If you do not define a constructor method, JavaScript 
will add an empty constructor method.
Class Methods
Class methods are created with the same syntax as object methods.
Use the keyword
class
to create a class.
Always add a
constructor()
method.
Then add any number of methods.
Syntax
class ClassName {
constructor() { ... }
method_1() { ... }
method_2() { ... }
method_3() { ... }
}
Create a Class method named "age", that returns the Car age:
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
age() {
const date = new Date();
return date.getFullYear() - this.year;
}
}
const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";
Try it Yourself 
You can send parameters to Class methods:
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
age(x) {
return x - this.year;
}
}
const date = new Date();
let year = date.getFullYear();
const myCar = new 
  Car("Ford", 2014);
document.getElementById("demo").innerHTML=
"My car is 
  " + myCar.age(year) + " years old.";
Try it Yourself 
Browser Support
The following table defines the first browser version with full support for 
Classes in JavaScript:
Chrome 49
Edge 12
Firefox 45
Safari 9
Opera 36
Mar, 2016
Jul, 2015
Mar, 2016
Oct, 2015
Mar, 2016
"use strict"
The syntax in classes must be written in "strict mode".
You will get an 
error if you do not follow the "strict mode" rules.
Example
In "strict mode" you will get an error if you use a variable without 
declaring it:
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
age() {
// date = new Date();  // This will not work
const date = new Date();  // This will work
return date.getFullYear() - this.year;
}
}
Try it Yourself 
Learn more about "strict mode" in:
JS Strict Mode
.
JavaScript Class Inheritance
Class Inheritance
To create a class inheritance, use the
extends
keyword.
A class created with a class inheritance inherits all the methods from 
another class:
Example
Create a class named "Model" which will inherit the methods from the "Car" 
class:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
present() {
return 'I have a ' + this.carname;
}
}
class Model extends Car {
constructor(brand, mod) {
super(brand);
this.model = mod;
}
show() {
return this.present() + ', it is a ' + this.model;
}
}
let myCar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML 
  = myCar.show();
Try it Yourself 
The
super()
method refers to the parent 
class.
By calling the
super()
method in the 
constructor method, we call the parent's constructor method and gets access to 
the parent's properties and methods.
Getters and Setters
Classes also allows you to use getters and setters.
It can be smart to use getters and setters for your properties, especially if 
you want to do something special with the value before returning them, or before 
you set them.
To add getters and setters in the class, use the
get
and
set
keywords.
Example
Create a getter and a setter for the "carname" property:
class Car {
constructor(brand) {
this.carname 
  = brand;
}
get cnam() {
return this.carname;
}
set cnam(x) {
this.carname = x;
}
}
const myCar = new Car("Ford");
document.getElementById("demo").innerHTML = myCar.cnam;
Try it Yourself 
The name of the getter/setter method cannot be the same as the name of the 
property, in this case
carname
.
Many programmers use an underscore character
_
before the property name to separate the getter/setter from the actual property:
Example
You can use the underscore character to separate the getter/setter from the 
actual property:
class Car {
constructor(brand) {
this._carname 
  = brand;
}
get carname() {
return this._carname;
}
set carname(x) {
this._carname = x;
}
}
const myCar = new Car("Ford");
document.getElementById("demo").innerHTML = myCar.carname;
Try it Yourself 
To use a
setter
, use the same syntax as when you set a property value, without parentheses:
Example
Use a setter to change the carname to "Volvo":
class Car {
constructor(brand) {
this._carname 
  = brand;
}
get carname() {
return this._carname;
}
set carname(x) {
this._carname = x;
}
}
const myCar = new Car("Ford");
myCar.carname = "Volvo";
document.getElementById("demo").innerHTML = myCar.carname;
Try it Yourself 
Hoisting
Unlike functions, and other JavaScript declarations, class declarations are not hoisted.
That means that you must declare a class before you can use it:
Example
//You cannot use the class yet.
//myCar = new Car("Ford") will raise an error.
class Car {
constructor(brand) {
this.carname = brand;
}
}
//Now you can use the class:
const myCar = new Car("Ford")
Try it Yourself 
JavaScript Static Methods
Static class methods are defined on the class itself.
You cannot call a
static
method on an object, only on an object class.
Example
class Car {
constructor(name) {
this.name = 
  name;
}
static hello() {
return "Hello!!";
}
}
const myCar = new Car("Ford");
// You can call 'hello()' on 
  the Car Class:
document.getElementById("demo").innerHTML 
  = Car.hello();
// But NOT on a Car Object:
// document.getElementById("demo").innerHTML 
  = myCar.hello();
// this will raise an error.
Try it Yourself 
If you want to use the myCar object inside the
static
method, you can send it 
as a parameter:
Example
class Car {
constructor(name) {
this.name = 
  name;
}
static hello(x) {
return "Hello " + 
  x.name;
}
}
const myCar = new Car("Ford");
document.getElementById("demo").innerHTML 
  = Car.hello(myCar);
Try it Yourself 
JavaScript
Statements
Example
let x, y, z; // Statement 1
x = 5; // Statement 2
y = 6; // Statement 3
z = x + y; //  Statement 4
Try it Yourself 
JavaScript Programs
A
computer program
is a list of "instructions" to be 
"executed" by a computer.
In a programming language, these programming instructions are called
statements
.
A
JavaScript program
is a list of programming
statements
.
JavaScript Statements
JavaScript statements are composed of:
Values, Operators, Expressions,Keywords, 
and Comments.
This statement tells the browser to write "Hello Dolly." 
inside an HTML element with id="demo":
Example
document.getElementById("demo").innerHTML = "Hello Dolly.";
Try it Yourself 
Most JavaScript 
programs contain many JavaScript statements.
The statements are executed, one by one, in the 
same order as they are written.
Semicolons ;
Semicolons separate JavaScript statements.
Add a semicolon at the end of each executable statement:
Examples
let a, b, c; // Declare 3 variables
a = 5; // Assign the value 5 to a
b = 6; // Assign the 
  value 6 to b
c = a + b; // Assign the sum of a and b to c
Try it Yourself 
When separated by semicolons, multiple statements on one line are allowed:
a = 5; b = 6; c = a + b;
Try it Yourself 
JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.
The following lines are equivalent:
let person = "Hege";
let person="Hege";
A good practice is to put spaces around operators ( = + - * / ):
let x = y + z;
JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 
characters.
If a JavaScript statement does not fit on one line, the best place to break 
it is after an operator:
Example
document.getElementById("demo").innerHTML =
"Hello Dolly!";
Try it Yourself 
JavaScript Code Blocks
JavaScript statements can be grouped together in code blocks, inside curly 
brackets {...}.
The purpose of code blocks is to define statements to be executed together.
One place you will find statements grouped together in blocks, is in 
JavaScript functions:
Example
function myFunction() {
document.getElementById("demo1").innerHTML = "Hello Dolly!";
document.getElementById("demo2").innerHTML = "How are you?";
}
Try it Yourself 
JavaScript Keywords
JavaScript statements often start with a
keyword
to identify the JavaScript action to be performed.
Our
Reserved Words Reference
lists all JavaScript keywords.
Here is a list of some of the keywords you will learn about in 
this tutorial:
Keyword
Description
var
Declares a variable
let
Declares a block variable
const
Declares a block constant
if
Marks a block of statements to be executed on a condition
switch
Marks a block of statements to be executed in different cases
for
Marks a block of statements to be executed in a loop
function
Declares a function
return
Exits a function
try
Implements error handling to a block of statements
JavaScript
Variables
Variables are Containers for Storing Data
JavaScript Variables can be declared in 4 ways:
Automatically
Using
var
Using
let
Using
const
In this first example,
x
,
y
, and
z
are undeclared variables.
They are automatically declared when first used:
Example
x = 5;
y = 6;
z = x + y;
Try it Yourself 
From the examples you can guess:
x stores the value 5
y stores the value 6
z stores the value 11
Example using var
var x = 5;
var y = 6;
var z = x + y;
Try it Yourself 
Example using let
let x = 5;
let y = 6;
let z = x + y;
Try it Yourself 
Example using const
const x = 5;
const y = 6;
const z = x + y;
Try it Yourself 
Mixed Example
const price1 = 5;
const price2 = 6;
let total = price1 + price2;
Try it Yourself 
The two variables
price1
and
price2
are declared with the
const
keyword.
These are constant values and cannot be changed.
The variable
total
is declared with the
let
keyword.
The value
total
can be changed.
Just Like Algebra
Just like in algebra, variables hold values:
let x = 5;
let y = 6;
Just like in algebra, variables are used in expressions:
let z = x + y;
From the example above, you can guess that the total is calculated to be 11.
JavaScript Identifiers
All JavaScript
variables
must be
identified
with
unique names
.
These unique names are called
identifiers
.
Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
The general rules for constructing names for variables (unique identifiers) are:
Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter.
Names can also begin with $ and _ (but we will not use it in this tutorial).
Names are case sensitive (y and Y are different variables).
Reserved words (like JavaScript keywords) cannot be used as names.
The Assignment Operator
In JavaScript, the equal sign (
=
) is an "assignment" operator, not an 
"equal to" operator.
This is different from algebra. The following does not make sense in 
algebra:
x = x + 5
In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to 
x.
(It calculates the value of x + 5 and puts the result into x. The value of x 
is incremented by 5.)
JavaScript Data Types
JavaScript variables can hold numbers like 100 and text values like "John 
Doe".
In programming, text values are called text strings.
JavaScript can handle many types of data, but for now, just think of numbers and strings.
Strings are written inside double or single quotes. Numbers are written 
without quotes.
If you put a number in quotes, it will be treated as a text string.
Example
const pi = 3.14;
let person = "John Doe";
let answer = 'Yes I am!';
Try it Yourself 
Declaring a JavaScript Variable
Creating a variable in JavaScript is called "declaring" a variable.
You declare a JavaScript variable with the
var
or the
let
keyword:
var carName;
or:
let carName;
After the declaration, the variable has no value (technically it is
undefined
).
To
assign
a value to the variable, use the equal sign:
carName = "Volvo";
You can also assign a value to the variable when you declare it:
let carName = "Volvo";
In the example below, we create a variable called
carName
and assign the value 
"Volvo" to it.
Then we "output" the value inside an HTML paragraph with id="demo":
Example
<p id="demo"></p>
<script>
let carName = "Volvo";
document.getElementById("demo").innerHTML = carName;
</script>
Try it Yourself 
One Statement, Many Variables
You can declare many variables in one statement.
Start the statement 
with
let
and separate the variables by
comma
:
Example
let person = "John Doe", carName = "Volvo", price = 200;
Try it Yourself 
A declaration can span multiple lines:
Example
let person = "John Doe",
carName = "Volvo",
price = 200;
Try it Yourself 
Value = undefined
In computer programs, variables are often declared without a value. The value 
can be something that has to be calculated, or something that will be provided 
later, like user input.
A variable declared without a value will have the value
undefined
.
The variable carName will have the value
undefined
after the execution of this statement:
Example
let carName;
Try it Yourself 
Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable declared with
var
, it will not lose its value.
The variable
carName
will still have the value "Volvo" after the execution of these statements:
Example
var carName = "Volvo";
var carName;
Try it Yourself 
JavaScript Arithmetic
As with algebra, you can do arithmetic with JavaScript variables, using 
operators like
=
and
+
:
Example
let x = 5 + 2 + 3;
Try it Yourself 
You can also add strings, but strings will be concatenated:
Example
let x = "John" + " " + "Doe";
Try it Yourself 
Also try this:
Example
let x = "5" + 2 + 3;
Try it Yourself 
Now try this:
Example
let x = 2 + 3 + "5";
Try it Yourself 
JavaScript Dollar Sign $
Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:
Example
let $ = "Hello World";
let $$$ = 2;
let $myMoney = 5;
Try it Yourself 
Using the dollar sign is not very common in JavaScript,
but professional programmers often use it 
as an alias for the main function in a JavaScript library.
In the JavaScript library jQuery, for instance, the main function
$
is used to select HTML elements.
In jQuery
$("p");
means "select all p elements".
JavaScript Underscore (_)
Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:
Example
let _lastName = "Johnson";
let _x = 2;
let _100 = 5;
Try it Yourself 
Using the underscore is not very common in JavaScript,

but a convention among professional programmers is to use it as an alias for
"private (hidden)" variables.
Test Yourself With Exercises
Exercise:
Create a variable called
carName
and assign the value
Volvo
to it.
let
= "
";
Submit Answer 
Start the Exercise
JavaScript
Assignment
JavaScript Assignment Operators
Assignment operators assign values to JavaScript variables.
Operator
Example
Same As
=
x = y
x = y
+=
x += y
x = x + y
-=
x -= y
x = x - y
*=
x *= y
x = x * y
/=
x /= y
x = x / y
%=
x %= y
x = x % y
**=
x **= y
x = x ** y
Shift Assignment Operators
Operator
Example
Same As
<<=
x <<= y
x = x << y
>>=
x >>= y
x = x >> y
>>>=
x >>>= y
x = x >>> y
Bitwise Assignment Operators
Operator
Example
Same As
&=
x &= y
x = x & y
^=
x ^= y
x = x ^ y
|=
x |= y
x = x | y
Logical Assignment Operators
Operator
Example
Same As
&&=
x &&= y
x = x && (x = y)
||=
x ||= y
x = x || (x = y)
??=
x ??= y
x = x ?? (x = y)
The = Operator
The
Simple Assignment Operator
assigns a value to a variable.
Simple Assignment Examples
let x = 10;
Try it Yourself 
let x = 10 + y;
Try it Yourself 
The += Operator
The
Addition Assignment Operator
adds a value to a variable.
Addition Assignment Examples
let x = 10;
x += 5;
Try it Yourself 
let text = "Hello";
text += " World";
Try it Yourself 
The -= Operator
The
Subtraction Assignment Operator
subtracts a value from a variable.
Subtraction Assignment Example
let x = 10;
x -= 5;
Try it Yourself 
The *= Operator
The
Multiplication Assignment Operator
multiplies a variable.
Multiplication Assignment Example
let x = 10;
x *= 5;
Try it Yourself 
The **= Operator
The
Exponentiation Assignment Operator
raises a variable to the power of the operand.
Exponentiation Assignment Example
let x = 10;
x **= 5;
Try it Yourself 
The /= Operator
The
Division Assignment Operator
divides a variable.
Division Assignment Example
let x = 10;
x /= 5;
Try it Yourself 
The %= Operator
The
Remainder Assignment Operator
assigns a remainder to a variable.
Remainder Assignment Example
let x = 10;
x %= 5;
Try it Yourself 
The <<= Operator
The
Left Shift Assignment Operator
left shifts a variable.
Left Shift Assignment Example
let x = -100;
x <<= 5;
Try it Yourself 
The >>= Operator
The
Right Shift Assignment Operator
right shifts a variable (signed).
Right Shift Assignment Example
let x = -100;
x >>= 5;
Try it Yourself 
The >>>= Operator
The
Unsigned Right Shift Assignment Operator
right shifts a variable (unsigned).
Unsigned Right Shift Assignment Example
let x = -100;
x >>>= 5;
Try it Yourself 
The &= Operator
The
Bitwise AND Assignment Operator
does a bitwise AND operation on two operands
and assigns the result to the the variable.
Bitwise AND Assignment Example
let x = 10;
x &= 5;
Try it Yourself 
The |= Operator
The
Bitwise OR Assignment Operator
does a bitwise OR operation on two operands
and assigns the result to the variable.
Bitwise OR Assignment Example
let x = 10;
x |= 5;
Try it Yourself 
The ^= Operator
The
Bitwise XOR Assignment Operator
does a bitwise XOR operation on two operands
and assigns the result to the variable.
Bitwise XOR Assignment Example
let x = 10;
x ^= 5;
Try it Yourself 
The &&= Operator
The
Logical AND assignment operator
is used between two values.
If the first value is true, the second value is assigned.
Logical AND Assignment Example
let x = 10;
x &&= 5;
Try it Yourself 
The ||= Operator
The
Logical OR assignment operator
is used between two values.
If the first value is false, the second value is assigned.
Logical OR Assignment Example
let x = 10;
x ||= 5;
Try it Yourself 
The ??= Operator
The
Nullish coalescing assignment operator
is used between two values.
If the first value is undefined or null, the second value is assigned.
Nullish Coalescing Assignment Example
let x;
x ??= 5;
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use the correct
assignment operator
that will result in
x
being
15
(same as
x = x + y
).
x = 10;
y = 5;
x
y;
Submit Answer 
Start the Exercise
ECMAScript 2021
New Features in ES2021
Promise.any()
String replaceAll()
Numeric Separators (_)
Warning
These features are relatively new.
Older browsers may need an alternative code (Polyfill)
JavaScript Promise.any()
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// Run when any promise fulfill
Promise.any([myPromise1, myPromise2]).then((x) => {
myDisplay(x);
});
Try it Yourself 
Promise.any()
is supported in all modern browsers since September 2020:
Chrome 85
Edge 85
Firefox 79
Safari 14
Opera 71
Aug 2019
Aug 2020
Jul 2020
Sep 2020
Sep 2020
JavaScript String ReplaceAll()
ES2021 introduced the string method
replaceAll()
:
Example
text = text.replaceAll("Cats","Dogs");
text = text.replaceAll("cats","dogs");
Try it Yourself 
The
replaceAll()
method allows you to specify a
regular expression instead of a string to be replaced.
If the parameter is a regular expression, the global flag (g) must be set, otherwise
a TypeError is thrown.
Example
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");
Try it Yourself 
JavaScript Numeric Separator (_)
ES2021 intoduced the numeric separator (_) to make numbers more readable:
Example
const num = 1_000_000_000;
Try it Yourself 
The numeric separator is only for visual use.
Example
const num1 = 1_000_000_000;
const num2 = 1000000000;
(num1 === num2);
Try it Yourself 
The numeric separator can be placed anywhere in a number:
Example
const num1 = 1_2_3_4_5;
Try it Yourself 
The numeric separator is supported in all modern browsers since January 2020:
Chrome 75
Edge 79
Firefox 74
Safari 13.1
Opera 67
Jun 2019
Jan 2020
Oct 2019
Sep 2019
Jun 2019
JavaScript
Output
JavaScript Display Possibilities
JavaScript can "display" data in different ways:
Writing into an HTML element, using
innerHTML
.
Writing into the HTML output using
document.write()
.
Writing into an alert box, using
window.alert()
.
Writing into the browser console, using
console.log()
.
Using innerHTML
To access an HTML element, JavaScript can use the
document.getElementById(id)
method.
The
id
attribute defines the HTML element. The
innerHTML
property defines the HTML content:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<p>My First Paragraph</p>
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>
</body>
</html>
Try it Yourself 
Using document.write()
For testing purposes, it is convenient to use
document.write()
:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<p>My first paragraph.</p>
<script>
document.write(5 + 6);
</script>
</body>
</html>
Try it Yourself 
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<p>My first paragraph.</p>
<button type="button" onclick="document.write(5 + 6)">Try it</button>
</body>
</html>
Try it Yourself 
Using window.alert()
You can use an alert box to display data:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<p>My first paragraph.</p>
<script>
window.alert(5 + 6);
</script>
</body>
</html>
Try it Yourself 
You can skip the
window
keyword.
In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object.
This also means that specifying the
window
keyword is optional:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<p>My first paragraph.</p>
<script>
alert(5 + 6);
</script>
</body>
</html>
Try it Yourself 
Using console.log()
For debugging purposes, you can call the
console.log()
method
in the browser to display data.
Example
<!DOCTYPE html>
<html>
<body>
<script>
console.log(5 + 6);
</script>
</body>
</html>
Try it Yourself 
JavaScript Print
JavaScript does not have any print object or print methods.
You cannot access output devices from JavaScript.
The only exception is that you can call the
window.print()
method in
the browser to print the content of the current window.
Example
<!DOCTYPE html>
<html>
<body>
<button onclick="window.print()">Print this page</button>
</body>
</html>
Try it Yourself 
JavaScript
Reserved Words
In JavaScript you cannot use these reserved words as variables, labels, or 
function names:
abstract
arguments
await*
boolean
break
byte
case
catch
char
class*
const*
continue
debugger
default
delete
do
double
else
enum*
eval
export*
extends*
false
final
finally
float
for
function
goto
if
implements
import*
in
instanceof
int
interface
let*
long
native
new
null
package
private
protected
public
return
short
static
super*
switch
synchronized
this
throw
throws
transient
true
try
typeof
var
void
volatile
while
with
yield
Words marked with* was new in
ECMAScript 5
and
ECMAScript 6
.
Removed Reserved Words
The following reserved words have been removed from the ECMAScript 5/6 standard:
abstract
boolean
byte
char
double
final
float
goto
int
long
native
short
synchronized
throws
transient
volatile
JavaScript Objects, Properties, and Methods
You should also avoid using the name of  
JavaScript built-in objects, properties, and methods:
Array
Date
eval
function
hasOwnProperty
Infinity
isFinite
isNaN
isPrototypeOf
length
Math
NaN
name
Number
Object
prototype
String
toString
undefined
valueOf
Java Reserved Words
JavaScript is often used together with Java. You should avoid using some Java objects 
and properties as JavaScript identifiers:
getClass
java
JavaArray
javaClass
JavaObject
JavaPackage
Other Reserved Words
JavaScript can be used as the programming 
language in many applications.
You should also avoid using the name of HTML 
and Window objects and properties:
alert
all
anchor
anchors
area
assign
blur
button
checkbox
clearInterval
clearTimeout
clientInformation
close
closed
confirm
constructor
crypto
decodeURI
decodeURIComponent
defaultStatus
document
element
elements
embed
embeds
encodeURI
encodeURIComponent
escape
event
fileUpload
focus
form
forms
frame
innerHeight
innerWidth
layer
layers
link
location
mimeTypes
navigate
navigator
frames
frameRate
hidden
history
image
images
offscreenBuffering
open
opener
option
outerHeight
outerWidth
packages
pageXOffset
pageYOffset
parent
parseFloat
parseInt
password
pkcs11
plugin
prompt
propertyIsEnum
radio
reset
screenX
screenY
scroll
secure
select
self
setInterval
setTimeout
status
submit
taint
text
textarea
top
unescape
untaint
window
HTML Event Handlers
In addition you should avoid using the name of all HTML event handlers.
Examples:
onblur
onclick
onerror
onfocus
onkeydown
onkeypress
onkeyup
onmouseover
onload
onmouseup
onmousedown
onsubmit
JavaScript
Versions
ECMAScript Editions
Ver
Official Name
Description
ES1
ECMAScript 1 (1997)
First edition
ES2
ECMAScript 2 (1998)
Editorial changes
ES3
ECMAScript 3 (1999)
Added regular expressions
Added try/catch
Added switch
Added do-while
ES4
ECMAScript 4
Never released
ES5
ECMAScript 5 (2009)
Read More
Added "strict mode"
Added JSON support
Added String.trim()
Added Array.isArray()
Added Array iteration methods
Allows trailing commas for object literals
ES6
ECMAScript 2015
Read More
Added let and const
Added default parameter values
Added Array.find()
Added Array.findIndex()
ECMAScript 2016
Read More
Added exponential operator (**)
Added Array.includes()
ECMAScript 2017
Read More
Added string padding
Added Object.entries()
Added Object.values()
Added async functions
Added shared memory
Allows trailing commas for function parameters
ECMAScript 2018
Read More
Added rest / spread properties
Added asynchronous iteration
Added Promise.finally()
Additions to RegExp
ECMAScript 2019
Read More
String.trimStart()
String.trimEnd()
Array.flat()
Object.fromEntries
Optional catch binding
ECMAScript 2020
Read More
The Nullish Coalescing Operator (??)
Browser Support
ECMAScript 1 - 6 is fully supported in all modern browsers.
Browser Support for ES5 (2009)
Browser
Version
From Date
Chrome
23
Nov 2012
Firefox
21
May 2013
IE
9*
Mar 2011
IE / Edge
10
Sep 2012
Safari
6
Jul 2012
Opera
15
Jul 2013
Browser Support for ES6 (2015)
Browser
Version
Date
Chrome
51
May 2016
Firefox
52
Mar 2017
Edge
14
Aug 2016
Safari
10
Sep 2016
Opera
38
Jun 2016
Browser Support for ECMAScript 2016
Browser
Version
Date
Chrome
52
Jul 2016
Firefox
54
Jun 2017
Edge
14
Aug 2016
Safari
10.1
Mar 2017
Opera
39
Aug 2016
JavaScript
Introduction
JavaScript Can Change HTML Content
One of many JavaScript HTML methods is
getElementById()
.
The example below "finds" an HTML element (with id="demo"), 
and changes the element content (innerHTML) to "Hello JavaScript":
Example
document.getElementById("demo").innerHTML = "Hello JavaScript";
Try it Yourself 
Example
document.getElementById('demo').innerHTML = 'Hello JavaScript';
Try it Yourself 
JavaScript Can Change HTML Attribute Values
In this example JavaScript changes the value of the
src
(source) attribute of an
<img>
tag:
The Light Bulb
Turn on the light
Turn off the light
Try it Yourself 
JavaScript Can Change HTML Styles (CSS)
Changing the style of an HTML element, is a variant of changing an HTML 
attribute:
Example
document.getElementById("demo").style.fontSize = "35px";
Try it Yourself 
JavaScript Can Hide HTML Elements
Hiding HTML elements can be done by changing the
display
style:
Example
document.getElementById("demo").style.display = "none";
Try it Yourself 
JavaScript Can Show HTML Elements
Showing hidden HTML elements can also be done by changing the
display
style:
Example
document.getElementById("demo").style.display = "block";
Try it Yourself 
JavaScript
Best Practices
Avoid global variables, avoid
new
, avoid
==
, avoid
eval()
Avoid Global Variables
Minimize the use of global variables.
This includes all data types, objects, and functions.
Global variables and functions can be overwritten by other scripts.
Use local variables instead, and learn how to use
closures
.
Always Declare Local Variables
All variables used in a function should be declared as
local
variables.
Local variables
must
be declared with the
var
, 
the
let
, or the
const
keyword,
otherwise they will become global variables.
Declarations on Top
It is a good coding practice to put all declarations at the top of each script 
or function.
This will:
Give cleaner code
Provide a single place to look for local variables
Make it easier to avoid unwanted (implied) global variables
Reduce the possibility of unwanted re-declarations
// Declare at the beginning
let firstName, lastName, price, discount, fullPrice;
// Use later
firstName = "John";
lastName = "Doe";
price = 19.90;
discount = 0.10;
fullPrice = price - discount;
This also goes for loop variables:
for (let i = 0; i < 5; i++) 
 {
Initialize Variables
It is a good coding practice to initialize variables when you declare them.
This will:
Give cleaner code
Provide a single place to initialize variables
Avoid undefined values
// Declare and initiate at the beginning
let firstName = "";
let lastName = "";
let price = 0;
let discount = 0;
let fullPrice = 0,
const myArray = [];
const myObject = {};
Declare Objects with
const
Declaring objects with const will prevent any accidental change of type:
Example
let car = {type:"Fiat", model:"500", color:"white"};
car = "Fiat";// Changes object to string
const car = {type:"Fiat", model:"500", color:"white"};
car = "Fiat";// Not possible
Declare Arrays with
const
Declaring arrays with const will prevent any accidential change of type:
Example
let cars = ["Saab", "Volvo", "BMW"];
cars = 3;// Changes array to number
const cars = ["Saab", "Volvo", "BMW"];
cars = 3;// Not possible
Don't Use new Object()
Use
""
instead of
new String()
Use
0
instead of
new Number()
Use
false
instead of
new Boolean()
Use
{}
instead of
new Object()
Use
[]
instead of
new Array()
Use
/()/
instead of
new RegExp()
Use
function (){}
instead of
new Function()
Example
let x1 = ""; // new primitive string
let x2 = 0; // new primitive number
let x3 = false; // new primitive boolean
const x4 = {}; // new object
const x5 = []; // new array object
const x6 = /()/; // new regexp object
const x7 = function(){};// new function object
Try it Yourself 
Beware of Automatic Type Conversions
JavaScript is loosely typed.
A variable can contain all data types.
A variable can change its data type:
Example
let x = "Hello";// typeof x is a string
x = 5;// changes typeof x to a number
Try it Yourself 
Beware that numbers can accidentally be converted to strings or
NaN
(Not a 
Number).
When doing mathematical operations, JavaScript can convert numbers to strings:
Example
let x = 5 + 7; // x.valueOf() is 12, typeof x is a number
let x = 5 + "7"; // x.valueOf() is 57, typeof x is a string
let x = "5" + 7; // x.valueOf() is 57, typeof x is a string
let x = 5 - 7;  // x.valueOf() is -2, typeof x is a number
let x = 5 - "7";  // x.valueOf() is -2, typeof x is a number
let x = "5" - 7;  // x.valueOf() is -2, typeof x is a number
let x = 5 - "x";  // x.valueOf() is NaN, typeof x is a number
Try it Yourself 
Subtracting a string from a string, does not 
generate an error but returns
NaN
(Not a Number):
Example
"Hello" - "Dolly"  // returns NaN
Try it Yourself 
Use === Comparison
The
==
comparison operator always converts (to matching types) before 
comparison.
The
===
operator forces comparison of values and type:
Example
0 == ""; // true
1 == "1";  // true
1 == true; // true
0 === ""; // false
1 === "1";   // false
1 === true; 
// false
Try it Yourself 
Use Parameter Defaults
If a function is called with a missing argument, the value of the missing 
argument is set to
undefined
.
Undefined values can break your code. It is a good habit to assign default 
values to arguments.
Example
function myFunction(x, y) {
if (y === undefined) {
y = 0;
}
}
Try it Yourself 
ECMAScript 2015
allows default parameters in the function definition:
function (a=1, b=1) {/*function code*/  }
Read more about function parameters and arguments at
Function Parameters
End Your Switches with Defaults
Always end your
switch
statements with a
default
. Even if you think there is 
no need for it.
Example
switch (new Date().getDay()) {
case 0:
day = "Sunday";
break;
case 1:
day = "Monday";
break;
case 2:
day = "Tuesday";
break;
case 3:
day = "Wednesday";
break;
case 4:
day = "Thursday";
break;
case 5:
day = "Friday";
break;
case 6:
day = "Saturday";
break;
default:
day = 
 "Unknown";
}
Try it Yourself 
Avoid Number, String, and Boolean as Objects
Always treat numbers, strings, or booleans as primitive values. Not as 
objects.
Declaring these types as objects, slows down execution speed, 
and produces nasty side effects:
Example
let x = "John";
let y = new String("John");
(x === y) // is false because x is a string and y is an object.
Try it Yourself 
Or even worse:
Example
let x = new String("John");
let y = new String("John");
(x == y) // is false because you cannot compare objects.
Try it Yourself 
Avoid Using eval()
The
eval()
function is used to run text as code. In almost all cases, it 
should not be necessary to use it.
Because it allows arbitrary code to be run, it also represents a security 
problem.
JavaScript
Function Definitions
JavaScript functions are
defined
with the
function
keyword.
You can use a function
declaration
or a 
function
expression
.
Function Declarations
Earlier in this tutorial, you learned that functions are
declared
with the 
following syntax:
function
functionName
(
parameters
) {
//
code to be executed
}
Declared functions are not executed immediately. They are "saved for later use", 
and will be executed later, when they are invoked (called upon).
Example
function myFunction(a, b) {
return a * b;
}
Try it Yourself 
Function Expressions
A JavaScript function can also be defined using an
expression
.
A function expression can be stored in a variable:
Example
const x = function (a, b) {return a * b};
Try it Yourself 
After a function expression has been stored in a variable, the variable can 
be used as a function:
Example
const x = function (a, b) {return a * b};
let z = x(4, 3);
Try it Yourself 
The function above is actually an
anonymous function
(a function without a 
name).
Functions stored in variables do not need function names. They are always 
invoked (called) using the variable name.
The Function() Constructor
As you have seen in the previous examples, JavaScript functions are defined 
with the
function
keyword.
Functions can also be defined with a built-in JavaScript function constructor called
Function()
.
Example
const myFunction = new Function("a", "b", "return a * b");
let x = myFunction(4, 3);
Try it Yourself 
You actually don't have to use the function constructor. The example above is the same as writing:
Example
const myFunction = function (a, b) {return a * b};
let x = myFunction(4, 3);
Try it Yourself 
Function Hoisting
Earlier in this tutorial, you learned about "hoisting" (
JavaScript Hoisting
).
Hoisting is JavaScript's default behavior of moving
declarations
to the top of the 
current scope.
Hoisting applies to variable declarations and to function declarations.
Because of this, JavaScript functions can be called before they are declared:
myFunction(5);
function myFunction(y) {
return y * y;
}
Functions defined using an expression are not hoisted.
Self-Invoking Functions
Function expressions can be made "self-invoking".
A self-invoking expression is invoked (started) automatically, without being called.
Function expressions will execute automatically if the expression is followed 
by ().
You cannot self-invoke a function declaration.
You have to add 
parentheses around the function to indicate that it is a function expression:
Example
(function () {
let x = "Hello!!"; // I will invoke myself
})();
Try it Yourself 
The function above is actually an
anonymous self-invoking function
(function 
without name).
Functions Can Be Used as Values
JavaScript functions can be used as values:
Example
function myFunction(a, b) {
return a * b;
}
let x = myFunction(4, 3);
Try it Yourself 
JavaScript functions can be used in expressions:
Example
function myFunction(a, b) {
return a * b;
}
let x = myFunction(4, 3) * 2;
Try it Yourself 
Functions are Objects
The
typeof
operator in JavaScript returns "function" for 
functions.
But, JavaScript functions can best be described as objects.
JavaScript functions have both
properties
and
methods
.
The
arguments.length
property returns the number of arguments received when 
the function was invoked:
Example
function myFunction(a, b) {
return arguments.length;
}
Try it Yourself 
The
toString()
method returns the function as a string:
Example
function myFunction(a, b) {
return a * b;
}
let text = myFunction.toString();
Try it Yourself 
Arrow Functions
Arrow functions allows a short syntax for writing function expressions.
You don't need the
function
keyword, the
return
keyword, and the
curly brackets
.
Example
// ES5
var x = function(x, y) {
return x * y;
}
// ES6
const x = (x, y) => x * y;
Try it Yourself 
Arrow functions do not have their own
this
.
They are not well suited for defining
object methods
.
Arrow functions are not hoisted. They must be defined
before
they are used.
Using
const
is safer than using
var
, because a function expression is 
always constant value.
You can only omit the
return
keyword and the curly brackets if the function is a single statement. 
Because of this, it might be a good habit to always keep them:
Example
const x = (x, y) => { return x * y };
Try it Yourself 
JavaScript For In
The For In Loop
The JavaScript
for in
statement loops through the properties of an Object:
Syntax
for (key in object) {
//
code block to be executed
}
Example
const person = {fname:"John", lname:"Doe", age:25};
let text = "";
for (let x in person) {
text += person[x];
}
Try it Yourself 
Example Explained
The
for in
loop iterates over a
person
object
Each iteration returns a
key
(x)
The key is used to access the
value
of the key
The value of the key is
person[x]
For In Over Arrays
The JavaScript
for in
statement can also loop over the properties of an Array:
Syntax
for (variable in array) {
code
}
Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
for (let x in numbers) {
txt += numbers[x];
}
Try it Yourself 
Array.forEach()
The
forEach()
method calls a function (a callback function) once for each array element.
Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);
function myFunction(value, index, array) {
txt += value;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
The example above uses only the value parameter. It can be rewritten to:
Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);
function myFunction(value) {
txt += value;
}
Try it Yourself 
JavaScript
Syntax
JavaScript syntax is the set ofrules, how 
JavaScript programs are constructed:
// How to create variables:
var x;
let y;
// How to use variables:
x = 5;
y = 6;
let z = x + y;
JavaScript Values
The JavaScript syntax defines two types of values:
Fixed values
Variable values
Fixed values are called
Literals
.
Variable values are called
Variables
.
JavaScript Literals
The two most important syntax rules for fixed values are:
1.
Numbers
are written with or 
without decimals:
10.50
1001
Try it Yourself 
2.
Strings
are text, written within double or single quotes:
"John Doe"
'John Doe'
Try it Yourself 
JavaScript Variables
In a programming language,
variables
are used to
store
data values.
JavaScript uses the keywords
var
,
let
and
const
to
declare
variables.
An
equal sign
is used to
assign values
to variables.
In this example, x is defined as a variable. Then, x is 
assigned (given) the value 
6:
let x;
x = 6;
Try it Yourself 
JavaScript Operators
JavaScript uses
arithmetic operators
(
+
-
*
/
) to
compute
values:
(5 + 6) * 10
Try it Yourself 
JavaScript uses an
assignment operator
(
=
) to
assign
values to variables:
let x, y;
x = 5;
y = 6;
Try it Yourself 
JavaScript Expressions
An expression is a combination of values, variables, and operators, 
which computes to a value.
The computation is called an evaluation.
For example, 5 * 10 evaluates to 50:
5 * 10
Try it Yourself 
Expressions can also contain variable values:
x * 10
Try it Yourself 
The values can be of various types, such as numbers and strings.
For example, "John" + " " + "Doe", evaluates to "John Doe":
"John" + " " + "Doe"
Try it Yourself 
JavaScript Keywords
JavaScript
keywords
are used to 
identify actions to be performed.
The
let
keyword tells the browser to create variables:
let x, y;
x = 5 + 6;
y = x * 10;
Try it Yourself 
The
var
keyword also tells the browser to create variables:
var x, y;
x = 5 + 6;
y = x * 10;
Try it Yourself 
JavaScript Comments
Not all JavaScript statements are "executed".
Code after double slashes
//
or between
/*
and
*/
is treated as a
comment
.
Comments are ignored, and will not be 
executed:
let x = 5; // I will be executed
// x = 6; I will 
NOT be executed
Try it Yourself 
JavaScript Identifiers / Names
Identifiers are JavaScript names.
Identifiers are used to name variables and keywords, and functions.
The rules for legal names are the same in most programming languages.
A JavaScript name must begin with:
A letter (A-Z or a-z)
A dollar sign ($)
Or an underscore (_)
Subsequent characters may be letters, digits, underscores, or dollar signs.
JavaScript is Case Sensitive
All JavaScript identifiers are
case sensitive
.
The variables
lastName
and
lastname
, 
are two different variables:
let lastname, lastName;
lastName = "Doe";
lastname = "Peterson";
Try it Yourself 
JavaScript does not interpret
LET
or
Let
as the keyword
let
.
JavaScript and Camel Case
Historically, programmers have used different ways of joining multiple words into one variable name:
Hyphens:
first-name, last-name, master-card, inter-city.
Underscore:
first_name, last_name, master_card, inter_city.
Upper Camel Case (Pascal Case):
FirstName, LastName, MasterCard, InterCity.
Lower Camel Case:
JavaScript programmers tend to use camel case that starts with a lowercase letter:
firstName, lastName, masterCard, interCity.
JavaScript Character Set
JavaScript uses the
Unicode
character set.
Unicode covers (almost) all the characters, punctuations, and symbols in the world.
For a closer look, please study our
Complete Unicode Reference
.
JavaScript
Arithmetic
JavaScript Arithmetic Operators
Arithmetic operators perform arithmetic on numbers (literals or variables).
Operator
Description
+
Addition
-
Subtraction
*
Multiplication
**
Exponentiation (
ES2016
)
/
Division
%
Modulus (Remainder)
++
Increment
--
Decrement
Arithmetic Operations
A typical arithmetic operation operates on two numbers.
The two numbers can be literals:
Example
let x = 100 + 50;
Try it Yourself 
or variables:
Example
let x = a + b;
Try it Yourself 
or expressions:
Example
let x = (100 + 50) * a;
Try it Yourself 
Operators and Operands
The numbers (in an arithmetic operation) are called
operands
.
The operation (to be performed between the two operands) is defined by an
operator
.
Operand
Operator
Operand
100
+
50
Adding
The
addition
operator (
+
) adds numbers:
Example
let x = 5;
let y = 2;
let z = x + y;
Try it Yourself 
Subtracting
The
subtraction
operator (
-
) subtracts numbers.
Example
let x = 5;
let y = 2;
let z = x - y;
Try it Yourself 
Multiplying
The
multiplication
operator (
*
) multiplies numbers.
Example
let x = 5;
let y = 2;
let z = x * y;
Try it Yourself 
Dividing
The
division
operator (
/
) divides numbers.
Example
let x = 5;
let y = 2;
let z = x / y;
Try it Yourself 
Remainder
The
modulus
operator (
%
) returns the division remainder.
Example
let x = 5;
let y = 2;
let z = x % y;
Try it Yourself 
Incrementing
The
increment
operator (
++
) increments numbers.
Example
let x = 5;
x++;
let z = x;
Try it Yourself 
Decrementing
The
decrement
operator (
--
) decrements numbers.
Example
let x = 5;
x--;
let z = x;
Try it Yourself 
Exponentiation
The
exponentiation
operator (
**
) raises the first operand to the power of the second operand.
Example
let x = 5;
let z =
 x ** 2;
Try it Yourself 
x ** y produces the same result as
Math.pow(x,y)
:
Example
let x = 5;
let z =
  Math.pow(x,2);
Try it Yourself 
Operator Precedence
Operator precedence describes the order in which operations are performed in 
an arithmetic expression.
Example
let x = 100 + 50 * 3;
Try it Yourself 
Is the result of example above the same as 150 * 3, or is it the same as 100 
+ 150?
Is the addition or the multiplication done first?
As in traditional school mathematics, the multiplication is done first.
Multiplication (
*
) and division (
/
) have higher
precedence
than 
addition (
+
) and subtraction (
-
).
And (as in school mathematics) the precedence can be changed by using 
parentheses.
When using parentheses, the operations inside the parentheses are computed 
first:
Example
let x = (100 + 50) * 3;
Try it Yourself 
When many operations have the same precedence (like addition and 
subtraction or multiplication and division), they are computed from left to 
right:
Examples
let x = 100 + 50 - 3;
Try it Yourself 
let x = 100 / 50 * 3;
Try it Yourself 
Test Yourself With Exercises
Exercise:
Divide
10
by
2
, and alert the result.
alert(10
2);
Submit Answer 
Start the Exercise
JavaScript
Object Methods
General Methods
// Copies properties from a source object to a target object
Object.assign(target, source)
// Creates an object from an existing object
Object.create(object)
// Returns an array of the key/value pairs of an object
Object.entries(object)
// Creates an object from a list of keys/values
Object.fromEntries()
// Returns an array of the keys of an object
Object.keys(object)
// Returns an array of the property values of an object
Object.values(object)
// Groups object elements according to a function
Object.groupBy(object, callback)
JavaScript Object.assign()
The
Object.assign()
method copies properties from
one or more source objects to a target object.
Example
// Create Target Object
const person1 = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Create Source Object
const person2 = {firstName: "Anne",lastName: "Smith"};
// Assign Source to Target
Object.assign(person1, person2);
Try it Yourself 
JavaScript Object.entries()
ECMAScript 2017 added the
Object.entries()
method to objects.
Object.entries()
returns an array of the key/value pairs in an object:
Example
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.entries(person);
Try it Yourself 
Object.entries()
makes it simple to use objects in loops:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
let text = "";
for (let [fruit, value] of Object.entries(fruits)) {
text += fruit + ": " + value + "<br>";
}
Try it Yourself 
Object.entries()
also makes it simple to convert objects to maps:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
const myMap = new Map(Object.entries(fruits));
Try it Yourself 
Object.entries()
is supported in all modern browsers since March 2017:
JavaScript Object.fromEntries()
The
fromEntries()
method creates an object from
a list of key/value pairs.
Example
const fruits = [
["apples", 300],
["pears", 900],
["bananas", 500]
];
const myObj = Object.fromEntries(fruits);
Try it Yourself 
JavaScript Object.values()
Object.values()
is similar to
Object.entries()
,
but returns a single dimension array of the object values:
Example
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.values(person);
Try it Yourself 
Object.values()
is supported in all modern browsers since March 2017:
JavaScript Object.groupBy()
ES2024 added the
Object.groupBy()
method to JavaScript.
The
Object.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Object.groupBy()
method does not change the original object.
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Object.groupBy(fruits, myCallback);
Try it Yourself 
Browser Support
Object.groupby()
is an ES2024 feature.
It is supported in new browsers since March 2024:
Chrome 117
Edge 117
Firefox 119
Safari 17.4
Opera 103
Sep 2023
Sep 2023
Oct 2023
Okt 2024
May 2023
Warning
ES2024 features are relatively new.
Older browsers may need an alternative code (Polyfill)
Object.groupBy() vs Map.groupBy()
The difference between Object.groupBy() and Map.groupBy() is:
Object.groupBy() groups elements into a JavaScript object.
Map.groupBy() groups elements into a Map object.
JavaScript Object.keys()
The
Object.keys()
method returns an array with the keys of an object.
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get the Keys
const keys = Object.keys(person);
Try it Yourself 
JavaScript for...in Loop
The JavaScript
for...in
statement loops through the properties of an object.
Syntax
for (let
variable
in
object
) {
// code to be executed
}
The block of code inside of the
for...in
loop will be executed once for each property.
Looping through the properties of an object:
Example
const person = {
fname:" John",
lname:" Doe",
age: 25
};
for (let x in person) {
txt += person[x];
}
Try it Yourself 
JavaScript
Object Constructors
Object Constructor Functions
Sometimes we need to create many objects of the same
type
.
To create an
object type
we use an
object constructor function
.
It is considered good practice to name constructor functions with an upper-case first letter.
Object Type Person
function Person(first, last, age, eye) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eye;
}
Try 
it yourself 
Now we can use
new Person()
to create many new Person objects:
Example
const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");
const mySister = new Person("Anna", "Rally", 18, "green");
const mySelf = new Person("Johnny", "Rally", 22, "green");
Try 
it yourself 
Property Default Values
A
value
given to a property will be a
default value
for all objects
created by the constructor:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
this.nationality = "English";
}
Try it Yourself 
Adding a Property to an Object
Adding a property to a created object is easy:
Example
myFather.nationality = "English";
Try it Yourself 
Adding a Property to a Constructor
You can
NOT
add a new property to an object constructor:
Example
Person.nationality = "English";
Try it Yourself 
To add a new property, you must add it to the constructor function prototype:
Example
Person.prototype.nationality = "English";
Try it Yourself 
Constructor Function Methods
A constructor function can also have
methods
:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
this.fullName = function() {
return this.firstName + " " + this.lastName;
};
}
Try it Yourself 
Adding a Method to an Object
Adding a method to a created object is easy:
Example
myMother.changeName = function (name) {
this.lastName = name;
}
Try it Yourself 
Adding a Method to a Constructor
You cannot add a new method to an object constructor function.
This code will produce a TypeError:
Example
Person.changeName = function (name) {
this.lastName = name;
}
myMother.changeName("Doe");
TypeError: myMother.changeName is not a function
Adding a new method must be done to the constructor function prototype:
Example
Person.prototype.changeName = function (name) {
this.lastName = name;
}
myMother.changeName("Doe");
Try it Yourself 
Built-in JavaScript Constructors
JavaScript has built-in constructors for all native objects:
new Object()// A new Object object
new Array()// A new Array object
new Map() // A new Map object
new Set() // A new Set object
new Date()// A new Date object
new RegExp()// A new RegExp object
new Function()// A new Function object
Try it Yourself 
Did You Know?
Use object literals
{}
instead of
new Object()
.
Use array literals
[]
instead of
new Array()
.
Use pattern literals
/()/
instead of
new RegExp()
.
Use function expressions
() {}
instead of
new Function()
.
Example
""; // primitive string
0; // primitive number
false; // primitive boolean
{}; // object object
[]; // array object
/()/ // regexp object
function(){};// function
Try it Yourself 
JavaScript ES5
ES5 Features
"use strict"
String[
number
] access
Multiline strings
String.trim()
Array.isArray()
Array forEach()
Array map()
Array filter()
Array reduce()
Array reduceRight()
Array every()
Array some()
Array indexOf()
Array lastIndexOf()
JSON.parse()
JSON.stringify()
Date.now()
Date toISOString()
Date toJSON()
Property getters and setters
Reserved words as property names
Object.create()
Object.keys()
Object management
Object protection
Object defineProperty()
Function bind()
Trailing commas
Browser Support
ES5 (JavaScript 2009) fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
10
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
The "use strict" Directive
"use strict"
defines that the JavaScript code should be executed in "strict mode".
With strict mode you can, for example, not use undeclared variables.
Read more in
JS Strict Mode
.
Property Access on Strings
The
charAt()
method returns the character at a specified 
index (position) in a string:
Example
var str = "HELLO WORLD";
str.charAt(0); // returns H
Try it Yourself 
ES5 allows property access on strings:
Example
var str = "HELLO WORLD";
str[0]; // returns H
Try it Yourself 
Strings Over Multiple Lines
ES5 allows string literals over multiple lines if escaped with a backslash:
Example
"Hello \
Dolly!";
Try it Yourself 
A safer way to break up a string literal, is to use string 
addition:
Example
"Hello " +
"Dolly!";
Try it Yourself 
Reserved Words as Property Names
ES5 allows reserved words as property names:
Object Example
var obj = {name: "John", new: "yes"}
Try it Yourself 
String trim()
The
trim()
method removes whitespace from both sides of a string.
Example
var str = " Hello World! ";
alert(str.trim());
Try it Yourself 
Read more in
JS String Methods
.
Array.isArray()
The
isArray()
method checks whether an object is an array.
Example
function myFunction() {
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = document.getElementById("demo");
x.innerHTML = Array.isArray(fruits);
}
Try it Yourself 
Read more in
JS Arrays
.
Array forEach()
The
forEach()
method calls a function once for each array element.
Example
var txt = "";
var numbers = [45, 4, 9, 16, 25];
numbers.forEach(myFunction);
function myFunction(value) {
txt = txt + value + "<br>";
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array map()
This example multiplies each array value by 2:
Example
var numbers1 = [45, 4, 9, 16, 25];
var numbers2 = numbers1.map(myFunction);
function myFunction(value) {
return value * 2;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array filter()
This example creates a new array from elements with a value larger than 18:
Example
var numbers = [45, 4, 9, 16, 25];
var over18 = 
  numbers.filter(myFunction);
function myFunction(value) {
return value > 18;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array reduce()
This example finds the sum of all numbers in an array:
Example
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduce(myFunction);
function myFunction(total, value) {
return total + value;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array reduceRight()
This example also finds the sum of all numbers in an array:
Example
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduceRight(myFunction);
function myFunction(total, value) {
return total + value;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array every()
This example checks if all values are over 18:
Example
var numbers = [45, 4, 9, 16, 25];
var allOver18 = 
  numbers.every(myFunction);
function myFunction(value) {
return 
  value > 18;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array some()
This example checks if some values are over 18:
Example
var numbers = [45, 4, 9, 16, 25];
var allOver18 = 
  numbers.some(myFunction);
function myFunction(value) {
return 
  value > 18;
}
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array indexOf()
Search an array for an element value and returns its position.
Example
var fruits = ["Apple", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple");
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
Array lastIndexOf()
lastIndexOf()
is the same as
indexOf()
, but searches from the end of the array.
Example
var fruits = ["Apple", "Orange", "Apple", "Mango"];
var a = fruits.lastIndexOf("Apple");
Try it Yourself 
Learn more in
JS Array Iteration Methods
.
JSON.parse()
A common use of JSON is to receive data from a web server.
Imagine you received this text string from a web server:
'{"name":"John", "age":30, "city":"New York"}'
The JavaScript function
JSON.parse()
is used to convert the text into a JavaScript object:
var obj = JSON.parse('{"name":"John", "age":30, "city":"New 
  York"}');
Try it Yourself 
Read more in our
JSON Tutorial
.
JSON.stringify()
A common use of JSON is to send data to a web server.
When sending data to a web server, the data has to be 
a string.
Imagine we have this object in JavaScript:
var obj = {name:"John", age:30, city:"New York"};
Use the JavaScript function
JSON.stringify()
to convert it into a string.
var myJSON = JSON.stringify(obj);
myJSON is now a string, and ready to be sent to a server:
Example
var obj = {name:"John", age:30, city:"New York"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
Try it Yourself 
Read more in our
JSON Tutorial
.
Date.now()
Date.now()
returns the number of milliseconds since zero date (January 1. 
1970 00:00:00 UTC).
Example
var timInMSs = Date.now();
Try it Yourself 
Date.now()
returns the same as getTime() performed on a
Date
object.
Learn more in
JS Dates
.
Date toISOString()
The
toISOString()
method converts a Date object to a string, using the ISO standard format:
Example
const d = new Date();
document.getElementById("demo").innerHTML = d.toISOString();
Try it Yourself 
Date toJSON()
toJSON()
converts a Date object into a string, formatted as a JSON date.
JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:
Example
d = new Date();
document.getElementById("demo").innerHTML = d.toJSON();
Try it Yourself 
Property Getters and Setters
ES5 lets you define object methods with a syntax that looks like getting or setting
a property.
This example creates a
getter
for a property called fullName:
Example
// Create an object:
var person = {
firstName: 
  "John",
lastName : "Doe",
get 
  fullName() {
return this.firstName + " " + this.lastName;
}
};
// Display data from the 
  object using a getter:
document.getElementById("demo").innerHTML = 
  person.fullName;
Try it Yourself 
This example creates a
setter
and a
getter
for the language property:
Example
var person = {
firstName: "John",
lastName : "Doe",
language : "NO",
get lang() {
return this.language;
},
set lang(value) {
this.language = value;
}
};
// Set an object 
  property using a setter:
person.lang = "en";
// Display data from the 
  object using a getter:
document.getElementById("demo").innerHTML = 
  person.lang;
Try it Yourself 
This example uses a setter to secure upper case updates of language:
Example
var person = {
firstName: "John",
lastName : "Doe",
language : "NO",
set lang(value) {
this.language = value.toUpperCase();
}
};
// Set an object 
  property using a setter:
person.lang = "en";
// Display data from the 
  object:
document.getElementById("demo").innerHTML = 
  person.language;
Try it Yourself 
Learn more about Gettes and Setters in
JS Object Accessors
Object.defineProperty()
Object.defineProperty()
is a new Object method in ES5.
It lets you define an object property and/or change a property's value and/or 
metadata.
Example
// Create an Object:
const person = {
firstName: 
  "John",
lastName : "Doe",
language : "NO",
};
// Change a Property:
Object.defineProperty
(person, "language", {
value: "EN",
writable : true,
enumerable : true,
configurable : true
});
// 
  Enumerate Properties
let txt = "";
for (let x in person) {
txt += person[x] + "<br>";
}
// Display Properties
document.getElementById("demo").innerHTML = 
  txt;
Try it Yourself 
Next example is the same code, except it hides the language property from enumeration:
Example
// Create an Object:
const person = {
firstName: 
  "John",
lastName : "Doe",
language : "NO",
};
// Change a Property:
Object.defineProperty
(person, "language", {
value: "EN",
writable : true,
enumerable : false,
configurable : true
});
// 
  Enumerate Properties
let txt = "";
for (let x in person) {
txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = 
  txt;
Try it Yourself 
This example creates a setter and a getter to secure upper case updates of language:
Example
// Create an Object:
const person = {
firstName: "John",
lastName : 
  "Doe",
language : "NO"
};
// Change a Property:
Object.defineProperty
(person, "language", {
get : function() { return 
  language },
set : function(value) { language = value.toUpperCase()}
});
// Change Language
person.language = "en";
// Display Language
document.getElementById("demo").innerHTML = person.language;
Try it Yourself 
Object.create()
The
Object.create()
method creates an object from an existing object.
Example
// Create an Object:
const person = {
firstName: "John",
lastName: "Doe"
};
// Create new Object
const man = Object.create(person);
man.firstName = "Peter";
Try it Yourself 
Object.keys()
The
Object.keys()
method returns an array with the keys of an object.
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get the Keys
const keys = Object.keys(person);
Try it Yourself 
Object Management
ES5 added new Object management methods to JavaScript:
Managing Objects
// Adding or changing an object property
Object.defineProperty(object, property, descriptor)
// Adding or changing object properties
Object.defineProperties(object, descriptors)
// Accessing a Property
Object.getOwnPropertyDescriptor(object, property)
// Accessing Properties
Object.getOwnPropertyDescriptors(object)
// Returns all properties as an array
Object.getOwnPropertyNames(object)
// Accessing the prototype
Object.getPrototypeOf(object)
Learn more in
Object Management
.
Object Protection
ES5 added Object protection methods to JavaScript:
Protecting Objects
// Prevents adding properties to an object
Object.preventExtensions(object)
// Returns true if properties can be added to an object
Object.isExtensible(object)
// Prevents changes of object properties (not values)
Object.seal(object)
// Returns true if object is sealed
Object.isSealed(object)
// Prevents any changes to an object
Object.freeze(object)
// Returns true if object is frozen
Object.isFrozen(object)
Learn more in
Object Protection
.
Function Bind()
With the
bind()
method, an object can borrow a method from another object.
This example creates 2 objects (person and member).
The member object borrows the fullname method from the person object:
Example
const person = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this.firstName + " " + this.lastName;
}
}
const member = {
firstName:"Hege",
lastName: "Nilsen",
}
let fullName = person.fullName.bind(member);
Try it Yourself 
Learn more in
Function bind()
.
Trailing Commas
ES5 allows trailing commas in object and array definitions:
Object Example
person = {
firstName: "John",
lastName: "
Doe",
age: 46,
}
Array Example
points = [
1,
5,
10,
25,
40,
100,
];
JSON Objects:
//
  Allowed:
var person = '{"firstName":"John", "lastName":"Doe", 
  "age":46}'
JSON.parse(person)
// Not allowed:
var person = '{"firstName":"John", 
  "lastName":"Doe", "age":46,}'
JSON.parse(person)
JSON Arrays:
//
    Allowed:
points = [40, 100, 1, 5, 25, 10]
// Not allowed:
points = 
    [40, 100, 1, 5, 25, 10,]
JavaScript if, else, and else if
Conditional statements are used to perform different actions based on different conditions.
Conditional Statements
Very often when you write code, you want to perform different actions for different decisions.
You can use conditional statements in your code to do this.
In JavaScript we have the following conditional statements:
Use
if
to specify a block of code to be executed, if a specified condition is true
Use
else
to specify a block of code to be executed, if the same condition is 
  false
Use
else if
to specify a new condition to test, if the first condition is false
Use
switch
to specify many alternative blocks of code to be executed
The if Statement
Use the
if
statement to specify a block of JavaScript code to 
be executed if a condition is true.
Syntax
if (
condition
) {
//
block of code to be executed if the condition is true
}
Example
Make a "Good day" greeting if the hour is less than 
18:00:
if (hour < 18) {
greeting = "Good day";
}
The result of greeting will be:
Try it Yourself 
The else Statement
Use the
else
statement to specify a block of code to be 
executed if the condition is 
false.
if (
condition
) {
//
block of code to be executed if the condition is true
}
else {
//
block of code to be executed if the condition is false
}
Example
If the hour is less than 18, create a "Good day" 
greeting, otherwise "Good evening":
if (hour < 18) {
greeting = "Good day";
}
else {
greeting = "Good evening";
}
The result of greeting will be:
Try it Yourself 
The else ifStatement
Use the
else if
statement to specify a new condition if the first condition is false.
Syntax
if (
condition1
) {
//
block of code to be executed if condition1 is true
}
else if (
condition2
) {
//
block of code to be executed if the condition1 is false and condition2 is true
} else {
//
block of code to be executed if the condition1 is false and condition2 is false
}
Example
If time is less than 10:00, create a "Good 
morning" 
greeting, if not, but time is less than 20:00, create a "Good day" greeting, 
otherwise a "Good evening":
if (time < 10) {
greeting = "Good morning";
}
else if (time < 20){
greeting = "Good day";
}
else{
greeting = "Good evening";
}
The result of greeting will be:
Try it Yourself 
More Examples
Random link
This example will write a link to either W3Schools or to the World Wildlife 
Foundation (WWF). By using a random number, there is a 50% chance for each of the 
links.
Test Yourself With Exercises
Exercise:
Fix the
if
statement to alert "Hello World" if
x
is greater than
y
.
if
x > y
alert("Hello World");
Submit Answer 
Start the Exercise
ECMAScript 2023
New Features in ES2023
Array findLast()
Array findLastIndex()
Array toReversed()
Array toSorted()
Array toSpliced()
Array with()
#! (Shebang)
Warning
These features are relatively new.
Older browsers may need an alternative code (Polyfill)
JavaScript Array findLast() Method
ES2023 added the findLast() method that will start from the end of an array and return
the value of the first element that satisfies a condition.
Example
const temp = [27, 28, 30, 40, 42, 35, 30];
let high = temp.findLast(x => x > 40);
Try it Yourself 
JavaScript Array findLastIndex() Method
The findLastIndex() method finds the index of the last element that satisfies a condition.
Example
const temp = [27, 28, 30, 40, 42, 35, 30];
let pos = temp.findLastIndex(x => x > 40);
Try it Yourself 
JavaScript Array toReversed() Method
ES2023 added the Array toReversed() method as a safe way to reverse an array without altering the original array.
The difference between the new
toReversed()
method and the old
reverse()
method is that the new method
creates a new array, keeping the original array unchanged, while the old method altered the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const reversed = months.toReversed();
Try it Yourself 
JavaScript Array toSorted() Method
ES2023 added the Array toSorted() method as a safe way to sort an array without altering the original array.
The difference between the new
toSorted()
method and the old
sort()
method is that the new method
creates a new array, keeping the original array unchanged, while the old method altered the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const sorted = months.toSorted();
Try it Yourself 
JavaScript Array toSpliced() Method
ES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.
The difference between the new
toSpliced()
method and the old
splice()
method is that the new method
creates a new array, keeping the original array unchanged, while the old method altered the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const spliced = months.toSpliced(0, 1);
Try it Yourself 
JavaScript Array with() Method
ES2023 added the Array with() method as a safe way to update elements in an array without altering the original array.
Example
const months = ["Januar", "Februar", "Mar", "April"];
const new = months.with(2, "March");
Try it Yourself 
#!
JavaScript Shebang
A Shebang is a number sign and an exclamation mark (#!) at the beginning of a script:
#!/usr/bin/env node
The example above tells the operating system to use the node program to run the script.
Now, you can run JavaScript code with
./fileName.js
instead 
of
node fileName.js
.
#! is also called sharp-exclamation, hashbang, pound-bang, or hash-pling.
JavaScript
JSON
JSON is a format for storing and transporting data.
JSON is often used when data is sent from a server to a web 
page.
What is JSON?
JSON stands for
J
ava
S
cript
O
bject
N
otation
JSON is a lightweight data interchange format
JSON is language independent
*
JSON is "self-describing" and easy to understand
* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. 
Code for reading and generating JSON data can be written in any programming 
language.
JSON Example
This JSON syntax defines an employees object: an array of 3 employee records (objects):
JSON Example
{
"employees":[
{"firstName":"John", "lastName":"Doe"},
{"firstName":"Anna", "lastName":"Smith"},
{"firstName":"Peter", "lastName":"Jones"}
]
}
The JSON Format Evaluates to JavaScript Objects
The JSON format is syntactically identical to the code for creating 
JavaScript objects.
Because of this similarity, a JavaScript program 
can easily convert JSON data into native 
JavaScript objects.
JSON Syntax Rules
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays
JSON Data - A Name and a Value
JSON data is written as name/value pairs, just like JavaScript object 
properties.
A name/value pair consists of a field name (in double quotes), 
followed by a colon, followed by a value:
"firstName":"John"
JSON Objects
JSON objects are written inside curly braces.
Just like in JavaScript, objects can contain multiple name/value pairs:
{"firstName":"John", "lastName":"Doe"}
JSON Arrays
JSON arrays are written inside square brackets.
Just like in JavaScript, an array can contain objects:
"employees":[
{"firstName":"John", "lastName":"Doe"},
{"firstName":"Anna", "lastName":"Smith"},
{"firstName":"Peter", "lastName":"Jones"}
]
In the example above, the object "employees" is an array. It contains three 
objects.
Each object is a record of a person (with a first name and a last name).
Converting a JSON Text to a JavaScript Object
A common use of JSON is to read data from a web server, 
and display the data in a web page.
For simplicity, this can be demonstrated using a string as input.
First, create a JavaScript string containing JSON syntax:
let text = '{ "employees" : [' +
'{ "firstName":"John" , "lastName":"Doe" },' +
'{ "firstName":"Anna" , "lastName":"Smith" },' +
'{ "firstName":"Peter" , "lastName":"Jones" } ]}';
Then, use the JavaScript built-in function
JSON.parse()
to convert the string into a JavaScript object:
const obj = JSON.parse(text);
Finally, use the new JavaScript object in your page:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML =
obj.employees[1].firstName + " " + obj.employees[1].lastName;
</script>
Try it Yourself 
ECMAScript 2019
New Features in ES2019
String.trimStart()
String.trimEnd()
Object.fromEntries
Optional catch binding
Array.flat()
Array.flatMap()
Revised Array.Sort()
Revised JSON.stringify()
Separator symbols allowed in string litterals
Revised Function.toString()
JavaScript String trimStart()
ES2019 added the String method
trimStart()
to JavaScript.
The
trimStart()
method works like
trim()
, but removes whitespace only from the start of a string.
Example
let text1 = "Hello World!";
let text2 = text1.trimStart();
Try it Yourself 
JavaScript String
trimStart()
is supported in all modern browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
JavaScript String trimEnd()
ES2019 added the String method
trimEnd()
to JavaScript.
The
trimEnd()
method works like
trim()
, but removes whitespace only from the end of a string.
Example
let text1 = "Hello World!";
let text2 = text1.trimEnd();
Try it Yourself 
JavaScript String
trimEnd()
is supported in all modern browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
JavaScript Object fromEntries()
ES2019 added the Object method
fromEntries()
to JavaScript.
The
fromEntries()
method creates an object from iterable key / value pairs.
Example
const fruits = [
["apples", 300],
["pears", 900],
["bananas", 500]
];
const myObj = Object.fromEntries(fruits);
Try it Yourself 
JavaScript Object
fromEntries()
is supported in all modern browsers since January 2020:
Chrome 73
Edge 79
Firefox 63
Safari 12.1
Opera 60
Mar 2019
Jan 2020
Oct 2018
Mar 2019
Apr 2019
Optional catch Binding
From ES2019 you can omit the catch parameter if you don't need it:.
Example
Before 2019:
try {
// code
} catch (err) {
// code
}
After 2019:
try {
// code
} catch {
// code
}
Optional catch binding is supported in all modern browsers since January 2020:
Chrome 66
Edge 79
Firefox 58
Safari 11.1
Opera 53
Apr 2018
Jan 2020
Jan 2018
Mar 2018
May 2018
JavaScript Array flat()
ES2019 added the Array
flat()
method to JavaScript.
The
flat()
method creates a new array by flattening a nested array.
Example
const myArr = [[1,2],[3,4],[5,6]];
const newArr = myArr.flat();
Try it Yourself 
JavaScript Array
flat()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
JavaScript Array flatMap()
ES2019 added the Array
flatMap()
method to JavaScript.
The
flatMap()
method first maps all elements of an array
and then creates a new array by flattening the array.
Example
const myArr = [1, 2, 3, 4, 5, 6];
const newArr = myArr.flatMap(x => [x, x * 10]);
Try it Yourself 
Stable Array sort()
ES2019
revised
the Array
sort()
method.
Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.
After ES2019, browsers must use a stable sorting algorithm:
When sorting elements on a value, the elements must keep their relative position to other elements with the same value.
Example
const myArr = [
{name:"X00",price:100 },
{name:"X01",price:100 },
{name:"X02",price:100 },
{name:"X03",price:100 },
{name:"X04",price:110 },
{name:"X05",price:110 },
{name:"X06",price:110 },
{name:"X07",price:110 }
];
Try it Yourself 
In the example above, when sorting on price, the result should not have names in a different relative position, such as this:
X01 100
X03 100
X00 100
X03 100
X05 110
X04 110
X06 110
X07 110
Revised JSON.stringify()
ES2019
revised
the JSON
stringify()
method.
Before 2019, JSON could not stringify character encoded with \.
Example
let text = JSON.stringify("\u26D4");
Try it Yourself 
Before ES2019, using
JSON.stringify()
JSON on UTF-8 code points (U+D800 to U+DFFF)
returned broken Unicode characters like    .
After this revision, strings with UTF-8 code points convert safely with
JSON.stringify()
,
and back to the original using
JSON.parse()
.
Separator Symbols
Line separators and paragraph separator symbols (\u2028 and \u2029) are now allowed in string literals.
Before 2019, these were treated as line terminators and resulted in error exceptions:
Example
// This is valid in ES2019:
let text = "\u2028";
Try it Yourself 
Revised Function toString()
ES2019
revised
the Function
toString()
method.
The
toString()
method returns a string representing the source code of a function.
From 2019, toString() must return the source code of the function including comments,
spaces, and syntax details.
Before 2019, different browsers returned different variants of the function (like without comments and spaces).
From 2019 the function should be returned exactly as it is written.
Example
function myFunction(p1, p2) {
return p1 * p2;
}
Try it Yourself 
JavaScript Date Objects
JavaScript
Date Objects
let us work with dates:
Year:
Month:
Day:
Hours:
Minutes:
Seconds:
Examples
const d = new Date();
Try it Yourself 
const d = new Date("2022-03-25");
Try it Yourself 
JavaScript Date Output
By default, JavaScript will use the browser's time zone and display a date as a full text string:
Creating Date Objects
Date objects are created with the
new Date()
constructor.
There are
9 ways
to create a new date object:
new Date()
new Date(
date string
)
new Date(
year,month
)
new Date(
year,month,day
)
new Date(
year,month,day,hours
)
new Date(
year,month,day,hours,minutes
)
new Date(
year,month,day,hours,minutes,seconds
)
new Date(
year,month,day,hours,minutes,seconds,ms
)
new Date(
milliseconds
)
JavaScript new Date()
new Date()
creates a date object with the
current date and time
:
Example
const d = new Date();
Try it Yourself 
new Date(
date string
)
new Date(
date string
)
creates a date object from a
date string
:
Examples
const d = new Date("October 13, 2014 11:13:00");
Try it Yourself 
const d = new Date("2022-03-25");
Try it Yourself 
new Date(
year, month, ...
)
new Date(
year, month, ...
)
creates a date object with a
specified date and time
.
7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):
Example
const d = new Date(2018, 11, 24, 10, 33, 30, 0);
Try it Yourself 
Specifying a month higher than 11, will not result in an error but add the overflow to the next year:
Specifying:
const d = new Date(2018, 15, 24, 10, 33, 30);
Try it Yourself 
Is the same as:
const d = new Date(2019, 3, 24, 10, 33, 30);
Try it Yourself 
Specifying a day higher than max, will not result in an error but add the overflow to the next month:
Specifying:
const d = new Date(2018, 5, 35, 10, 33, 30);
Is the same as:
const d = new Date(2018, 6, 5, 10, 33, 30);
Try it Yourself 
Using 6, 4, 3, or 2 Numbers
6 numbers specify year, month, day, hour, minute, second:
Example
const d = new Date(2018, 11, 24, 10, 33, 30);
Try it Yourself 
5 numbers specify year, month, day, hour, and minute:
Example
const d = new Date(2018, 11, 24, 10, 33);
Try it Yourself 
4 numbers specify year, month, day, and hour:
Example
const d = new Date(2018, 11, 24, 10);
Try it Yourself 
3 numbers specify year, month, and day:
Example
const d = new Date(2018, 11, 24);
Try it Yourself 
2 numbers specify year and month:
Example
const d = new Date(2018, 11);
Try it Yourself 
Example
const d = new Date(2018);
Try it Yourself 
Previous Century
One and two digit years will be interpreted as 19xx:
Example
const d = new Date(99, 11, 24);
Try it Yourself 
Example
const d = new Date(9, 11, 24);
Try it Yourself 
new Date(
milliseconds
)
new Date(
milliseconds
)
creates a new date object as
milliseconds
plus zero time:
Examples
01 January 1970
plus
100 000 000 000 milliseconds is:
const d = new Date(100000000000);
Try it Yourself 
January 01 1970
minus
100 000 000 000 milliseconds is:
const d = new Date(-100000000000);
Try it Yourself 
January 01 1970
plus
24 hours is:
const d = new Date(24 * 60 * 60 * 1000);
// or
const d = new Date(86400000);
Try it Yourself 
01 January 1970
plus
0 milliseconds is:
const d = new Date(0);
Try it Yourself 
Date Methods
When a date object is created, a number of
methods
allow you to operate on 
it.
Date methods allow you to get and set the year, month, day, hour, 
minute, second, and millisecond of date objects, using either local time or UTC 
(universal, or GMT) time.
Displaying Dates
JavaScript will (by default) output dates using the
toString()
method.
This is a string representation of the date, including the time zone.
The format is specified in the ECMAScript specification:
Example
Try it Yourself 
When you display a date object in HTML, it is automatically converted to a 
string, with the
toString()
method.
Example
const d = new Date();
d.toString();
Try it Yourself 
The
toDateString()
method converts a date to a more readable 
format:
Example
const d = new Date();
d.toDateString();
Try it Yourself 
The
toUTCString()
method converts a date to a string using the UTC standard:
Example
const d = new Date();
d.toUTCString();
Try it Yourself 
The
toISOString()
method converts a date to a string using the ISO standard:
Example
const d = new Date();
d.toISOString();
Try it Yourself 
ECMAScript 2018
New Features in ECMAScript 2018
This chapter introduces the new features in ECMAScript 2018:
Asynchronous Iteration
Promise Finally
Object Rest Properties
New RegExp Features
JavaScript Shared Memory
JavaScript Asynchronous Iteration
ECMAScript 2018 added asynchronous iterators and iterables.
With asynchronous iterables, we can use the
await
keyword in
for/of
loops.
Example
for await () {}
JavaScript asynchronous iteration is supported in all modern browsers since January 2020:
Chrome 63
Edge 79
Firefox 57
Safari 11
Opera 50
Dec 2017
Jan 2020
Nov 2017
Sep 2017
Jan 2018
JavaScript Promise.finally
ECMAScript 2018 finalizes the full implementation of the Promise object with
Promise.finally
:
Example
let myPromise = new Promise();
myPromise.then();
myPromise.catch();
myPromise.finally();
Promise.finally
is supported in all modern browsers since November 2018:
Chrome 63
Edge 18
Firefox 58
Safari 11.1
Opera 50
Dec 2017
Nov 2018
Jan 2018
Mar 2018
Jan 2018
JavaScript Object Rest Properties
ECMAScript 2018 added rest properties.
This allows us to destruct an object and collect the leftovers onto a new object:
Example
let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
x; // 1
y; // 2
z; // { a: 3, b: 4 }
Object rest properties is supported in all modern browsers since January 2020:
Chrome 60
Edge 79
Firefox 55
Safari 11.1
Opera 47
Jul 2017
Jan 2020
Aug 2017
Mar 2018
Aug 2017
New JavaScript RegExp Features
ECMAScript 2018 added 4 new RegExp features:
Unicode Property Escapes (\p{...})
Lookbehind Assertions (?<= ) and (?<! )
Named Capture Groups
s (dotAll) Flag
The new RegExp features is supported in all modern browsers since June 2020:
Chrome 64
Edge 79
Firefox 78
Safari 12
Opera 51
Jan 2018
Jan 2020
Jun 2020
Sep 2018
Feb 2018
JavaScript Threads
In JavaScript you use the Web Workers API to create threads.
Worker threads are used to execute code in the background so that the main program can continue execution.
Worker threads run simultaneously with the main program. Simultaneous execution of different parts
of a program can be time-saving.
JavaScript Shared Memory
Shared memory is a feature that allows threads (different parts of a program) to
access and update the same data in the same memory.
Instead of passing data between threads, you can pass a SharedArrayBuffer object
that points to the memory where data is saved.
SharedArrayBuffer
A SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object.
JavaScript Arrow Function
Arrow functions were introduced in ES6.
Arrow functions allow us to write shorter function syntax:
let myFunction = (a, b) => a * b;
Try it Yourself 
Before Arrow:
hello = function() {
return "Hello World!";
}
Try it Yourself 
With Arrow Function:
hello = () => {
return "Hello World!";
}
Try it Yourself 
It gets shorter! If the function has only one statement, and the statement 
returns a value, you can remove the brackets
and
the
return
keyword:
Arrow Functions Return Value by Default:
hello = () => "Hello World!";
Try it Yourself 
If you have parameters, you pass them inside the parentheses:
Arrow Function With Parameters:
hello = (val) => "Hello " + val;
Try it Yourself 
In fact, if you have only one parameter, you can skip the parentheses as well:
Arrow Function Without Parentheses:
hello = val => "Hello " + val;
this
Try it Yourself 
What About
this
?
The handling of
this
is also different in arrow functions compared to regular 
functions.
In short, with arrow functions there are no binding of
this
.
In regular functions the
this
keyword represented the object that called the 
function, which could be the window, the document, a button or whatever.
With arrow functions the
this
keyword
always
represents the 
object that 
defined the arrow function.
Let us take a look at two examples to understand the difference.
Both examples call a method twice, first when the page loads, and once again 
when the user clicks a button.
The first example uses a regular function, and the second example uses an 
arrow function.
The result shows that the first example returns two different objects (window and button), 
and the 
second example returns the window object twice, because the window object is the 
"owner" of the function.
Example
With a regular function
this
represents the 
object that
calls
the function:
// Regular Function:
hello = function() {
document.getElementById("demo").innerHTML 
  += this;
}
// The window object calls the function:
window.addEventListener("load", hello);
// A button object calls the 
  function:
document.getElementById("btn").addEventListener("click", hello);
Try it Yourself 
Example
With an arrow function
this
represents the
owner
of the function:
// Arrow Function:
hello = () => {
document.getElementById("demo").innerHTML 
  += this;
}
// The window object calls the function:
window.addEventListener("load", hello);
// A button object calls the 
  function:
document.getElementById("btn").addEventListener("click", hello);
Try it Yourself 
Remember these differences when you are working with functions. Sometimes the 
behavior of regular functions is what you want, if not, use arrow functions.
Browser Support
The following table defines the first browser versions with full support for 
Arrow Functions in JavaScript:
Chrome 45
Edge 12
Firefox 22
Safari 10
Opera 32
Sep, 2015
Jul, 2015
May, 2013
Sep, 2016
Sep, 2015
ECMAScript 2016
New Features in ECMAScript 2016
This chapter introduces the new features in ECMAScript 2016:
JavaScript Exponentiation (**)
JavaScript Exponentiation assignment (**=)
JavaScript Array includes()
Browser Support
ES 2016 is fully supported in all modern browsers since March 2017:
Chrome 52
Edge 15
Firefox 52
Safari 10.1
Opera 39
Jul 2016
Apr 2017
Mar 2017
May 2017
Aug 2016
ES 2016 is not supported in Internet Explorer.
Exponentiation Operator
The
exponentiation
operator (
**
) raises the first operand to the power of the second operand.
Example
let x = 5;
let z = x ** 2;
Try it Yourself 
x ** y
produces the same result as
Math.pow(x, y)
:
Example
let x = 5;
let z = Math.pow(x,2);
Try it Yourself 
Exponentiation Assignment
The
exponentiation assignment
operator (
**=
) raises the value of a variable to the power of the right operand.
Example
let x = 5;
x **= 2;
Try it Yourself 
The Exponentiation Operator is supported in all modern browsers since March 2017:
Chrome 52
Edge 14
Firefox 52
Safari 10.1
Opera 39
Jul 2016
Aug 2016
Mar 2017
Mar 2017
Aug 2016
JavaScript Array includes()
ECMAScript 2016 introduced
Array.includes
to arrays.
This allows us to check if an element is present in an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango");
Try it Yourself 
Array.includes
is supported in all modern browsers since August 2016:
Chrome 47
Edge 14
Firefox 43
Safari 9
Opera 34
Dec 2015
Aug 2016
Dec 2015
Oct 2015
Dec 2015
JavaScript Classes
ECMAScript 2015, also known as ES6, introduced JavaScript Classes.
JavaScript Classes are templates for JavaScript Objects.
JavaScript Class Syntax
Use the keyword
class
to create a class.
Always add a method named
constructor()
:
Syntax
class ClassName {
constructor() { ... }
}
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
}
The example above creates a class named "Car".
The class has two initial properties: "name" and "year".
Using a Class
When you have a class, you can use the class to create objects:
Example
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
Try it Yourself 
The example above uses the
Car class
to create two
Car objects
.
The Constructor Method
The constructor method is a special method:
It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties
If you do not define a constructor method, JavaScript 
will add an empty constructor method.
Class Methods
Class methods are created with the same syntax as object methods.
Use the keyword
class
to create a class.
Always add a
constructor()
method.
Then add any number of methods.
Syntax
class ClassName {
constructor() { ... }
method_1() { ... }
method_2() { ... }
method_3() { ... }
}
Create a Class method named "age", that returns the Car age:
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
age() {
const date = new Date();
return date.getFullYear() - this.year;
}
}
const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";
Try it Yourself 
You can send parameters to Class methods:
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
age(x) {
return x - this.year;
}
}
const date = new Date();
let year = date.getFullYear();
const myCar = new 
  Car("Ford", 2014);
document.getElementById("demo").innerHTML=
"My car is 
  " + myCar.age(year) + " years old.";
Try it Yourself 
Browser Support
The following table defines the first browser version with full support for 
Classes in JavaScript:
Chrome 49
Edge 12
Firefox 45
Safari 9
Opera 36
Mar, 2016
Jul, 2015
Mar, 2016
Oct, 2015
Mar, 2016
ECMAScript 2017
New Features in ECMAScript 2017
This chapter introduces the new features in ECMAScript 2017:
JavaScript String padding
JavaScript Object entries()
JavaScript Object values()
JavaScript async and await
Trailing Commas in Functions
JavaScript Object.getOwnPropertyDescriptors
ES 2017 is fully supported in all modern browsers since September 2017:
Chrome 57
Edge 15
Firefox 48
Safari 11
Opera 44
Mar 2017
Apr 2017
Aug 2016
Sep 2017
Mar 2017
JavaScript String Padding
ECMAScript 2017 added two string methods to JavaScript:
padStart()
and
padEnd()
to support padding at the beginning and at the end of a string.
Examples
let text = "5";
text = text.padStart(4,0);
Try it Yourself 
let text = "5";
text = text.padEnd(4,0);
Try it Yourself 
JavaScript string padding is supported in all modern browsers since April 2017:
Chrome 57
Edge 15
Firefox 48
Safari 10
Opera 44
Mar 2017
Apr 2017
Aug 2016
Sep 2016
Mar 2017
JavaScript Object Entries
ECMAScript 2017 added the
Object.entries()
method to objects.
Object.entries()
returns an array of the key/value pairs in an object:
Example
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.entries(person);
Try it Yourself 
Object.entries()
makes it simple to use objects in loops:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
let text = "";
for (let [fruit, value] of Object.entries(fruits)) {
text += fruit + ": " + value + "<br>";
}
Try it Yourself 
Object.entries()
also makes it simple to convert objects to maps:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
const myMap = new Map(Object.entries(fruits));
Try it Yourself 
Object.entries()
is supported in all modern browsers since March 2017:
Chrome 47
Edge 14
Firefox 47
Safari 10.1
Opera 41
Jun 2016
Aug 2016
Jun 2016
Mar 2017
Oct 2016
JavaScript Object Values
Object.values()
is similar to
Object.entries()
,
but returns a single dimension array of the object values:
Example
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.values(person);
Try it Yourself 
Object.values()
is supported in all modern browsers since March 2017:
Chrome 54
Edge 14
Firefox 47
Safari 10.1
Opera 41
Oct 2016
Aug 2016
Jun 2016
Mar 2017
Oct 2016
JavaScript Async Functions
Waiting for a Timeout
async function myDisplay() {
let myPromise = new Promise(function(myResolve,  myReject) {
setTimeout(function() { myResolve("I love You !!"); }, 3000);
});
document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
Try it Yourself 
Async functions are supported in all modern browsers since September 2017:
Chrome 55
Edge 15
Firefox 52
Safari 11
Opera 42
Dec 2016
Apr 2017
Mar 2017
Sep 2017
Dec 2016
JavaScript Trailing Commas
JavaScript allows trailing commas wherever a comma-separated list of values is accepted.
In Array and Object Literals, Function Calls, Parameters, Imports and Exports.
Example
function myFunc(x,,,) {};
const myArr = [1,2,3,4,,,];
const myObj = {fname: John, age:50,,,};
Trailing commas are supported in all modern browsers since May 2017:
Chrome 58
Edge 14
Firefox 52
Safari 10
Opera 45
Apr 2017
Aug 2016
Mar 2017
Sep 2016
May 2017
JavaScript Maps
A Map holds key-value pairs where the keys can be any datatype.
A Map remembers the original insertion order of the keys.
How to Create a Map
You can create a JavaScript Map by:
Passing an Array to
new Map()
Create a Map and use
Map.set()
The new Map() Method
You can create a Map by passing an Array to the
new Map()
constructor:
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
Try it Yourself 
The set() Method
You can add elements to a Map with the
set()
method:
Example
// Create a Map
const fruits = new Map();
// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
Try it Yourself 
The
set()
method can also be used to change existing Map values:
Example
fruits.set("apples", 200);
Try it Yourself 
The get() Method
The
get()
method gets the value of a key in a Map:
Example
fruits.get("apples");// Returns 500
Try it Yourself 
Maps are Objects
typeof
returns object:
Example
// Returns object:
typeof fruits;
Try it Yourself 
instanceof
Map returns true:
Example
// Returns true:
fruits instanceof Map;
Try it Yourself 
JavaScript Objects vs Maps
Differences between JavaScript Objects and Maps:
Object
Map
Not directly iterable
Directly iterable
Do not have a size property
Have a size property
Keys must be Strings (or Symbols)
Keys can be any datatype
Keys are not well ordered
Keys are ordered by insertion
Have default keys
Do not have default keys
Browser Support
Map
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Map
is not supported in Internet Explorer.
JavaScript
Scope
Scope determines the accessibility (visibility) of variables.
JavaScript variables have 3 types of scope:
Block scope
Function scope
Global scope
Block Scope
Before ES6 (2015), JavaScript variables had only
Global Scope
and
Function Scope
.
ES6 introduced two important new JavaScript keywords:
let
and
const
.
These two keywords provide
Block Scope
in JavaScript.
Variables declared inside a { } block cannot be accessed 
from outside the block:
Example
{
let x = 2;
}
// x can NOT be used here
Variables declared with the
var
keyword can NOT have block scope.
Variables declared inside a { } block can be accessed from 
outside the block.
Example
{
var x = 2;
}
// x CAN be used here
Local Scope
Variables declared within a JavaScript function, are
LOCAL
to the function:
Example
// code here can NOT use carName
function myFunction() {
let carName = "Volvo";
// code here CAN use carName
}
// code here can NOT use carName
Try it Yourself 
Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
Local variables are created when a function starts, and deleted when the function is completed.
Function Scope
JavaScript has function scope: Each function creates a new scope.
Variables defined inside a function are not accessible (visible) from outside the 
function.
Variables declared with
var
,
let
and
const
are 
quite similar when declared inside a function.
They all have
Function Scope
:
function myFunction() {
var carName = "Volvo"; 
  // Function Scope
}
function myFunction() {
let carName = "Volvo"; // 
  Function Scope
}
function myFunction() {
const carName = "Volvo"; // 
  Function Scope
}
Global JavaScript Variables
A variable declared outside a function, becomes
GLOBAL
.
Example
let carName = "Volvo";
// code here can use carName
function myFunction() {
// code here can also use carName
}
Try it Yourself 
Global Scope
Variables declared
Globally
(outside any function) have
Global Scope
.
Global
variables can be accessed from anywhere in a JavaScript program.
Variables declared with
var
,
let
and
const
are 
quite similar when declared outside a block.
They all have
Global Scope
:
var x = 2; 
  // Global scope
let x = 2; // 
  Global scope
const x = 2; // 
  Global scope
JavaScript Variables
In JavaScript, objects and functions are also variables.
Automatically Global
If you assign a value to a variable that has not been declared, it will automatically become a
GLOBAL
variable.
This code example will declare a global variable
carName
, even if 
the value is assigned inside a function.
Example
myFunction();
// code here can use carName
function myFunction() {
carName = "Volvo";
}
Try it Yourself 
Strict Mode
All modern browsers support running JavaScript in "Strict Mode".
You will learn more about how to use strict mode in a later chapter of this tutorial.
Global Variables in HTML
With JavaScript, the global scope is the JavaScript environment.
In HTML, the global scope is the window object.
Global variables defined with the
var
keyword belong to the window object:
Example
var carName = "Volvo";
// code here 
 can use window.carName
Try it Yourself 
Global variables defined with the
let
keyword do not belong to the window object:
Example
let carName = "Volvo";
// code here can not use window.carName
Try it Yourself 
Warning
The Lifetime of JavaScript Variables
The lifetime of a JavaScript variable starts when it is declared.
Function (local) variables are deleted when the function is completed.
In a web browser, global variables are deleted when you close the browser 
window (or tab).
Function Arguments
Function arguments (parameters) work as local variables inside functions.
JavaScript
For Loop
Loops can execute a block of code a number of times.
JavaScript Loops
Loops are handy, if you want to run the same code over and over again, each 
time with a different value.
Often this is the case when working with arrays:
Instead of writing:
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
text += cars[3] + "<br>";
text += cars[4] + "<br>";
text += cars[5] + "<br>";
You can write:
for (let i = 0; i < cars.length; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
Different Kinds of Loops
JavaScript supports different kinds of loops:
for
- loops through a block of code a number of times
for/in
- loops through the properties of an object
for/of
- loops through the values of an 
  iterable object
while
- loops through a block of code while a specified condition is true
do/while
- also loops through a block of code while a specified condition is true
The For Loop
The
for
statement creates a loop with 3 optional expressions:
for (
expression 1
;
expression 2
;
expression 3
) {
//
code block to be executed
}
Expression 1
is executed (one time) before the execution of the code block.
Expression 2
defines the condition for executing the code block.
Expression 3
is executed (every time) after the code block has been executed.
Example
for (let i = 0; i < 5; i++) {
text += "The number is " + i + "<br>";
}
Try it Yourself 
From the example above, you can read:
Expression 1 sets a variable before the loop starts (let i = 0).
Expression 2 defines the condition for the loop to run (i must be less than 
5).
Expression 3 increases a value (i++) each time the code block in the loop has 
been executed.
Expression 1
Normally you will use expression 1 to initialize the variable used in the loop (let i = 0).
This is not always the case. JavaScript doesn't care. Expression 1 is 
optional.
You can initiate many values in expression 1 (separated by comma):
Example
for (let i = 0, len = cars.length, text = ""; i < len; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
And you can omit expression 1 (like when your values are set 
before the loop starts):
Example
let i = 2;
let len = cars.length;
let text = "";
for (; i < len; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
Expression 2
Often expression 2 is used to evaluate the condition of the initial variable.
This is not always the case. JavaScript doesn't care. Expression 2 is 
also optional.
If expression 2 returns true, the loop will start over again. If it returns false, the 
loop will end.
Expression 3
Often expression 3 increments the value of the initial variable.
This is not always the case. JavaScript doesn't care. Expression 3 is 
optional.
Expression 3 can do anything like negative increment (i--), positive 
increment (i = i + 15), or anything else.
Expression 3 can also be omitted (like when you increment your values inside the loop):
Example
let i = 0;
let len = cars.length;
let text = "";
for (; i < len; ) {
text += cars[i] + "<br>";
i++;
}
Try it Yourself 
Loop Scope
Using
var
in a loop:
Example
var i = 5;
for (var i = 0; i < 10; i++) {
// some code
}
// Here i is 10
Try it Yourself 
Using
let
in a loop:
Example
let i = 5;
for (let i = 0; i < 10; i++) {
// some code
}
// Here i is 5
Try it Yourself 
In the first example, using
var
, the variable declared in 
the loop redeclares the variable outside the loop.
In the second example, using
let
, the variable declared in 
the loop does not redeclare the variable outside the loop.
When
let
is used to declare the i variable in a loop, the i 
variable will only be visible within the loop.
For/Of and For/In Loops
The
for/in
loop and the
for/of
loop are explained in the next chapter.
While Loops
The
while
loop and the
do/while
are explained in the next chapters.
Test Yourself With Exercises
Exercise:
Create a loop that runs from 0 to 9.
let i;
(
=
;
<
;
) {
  console.log(i);
}
Submit Answer 
Start the Exercise
ECMAScript 2020
New Features in ES2020
BigInt
String matchAll()
The Nullish Coalescing Operator (??)
The Optional Chaining Operator (?.)
Logical AND Assignment Operator (&&=)
Logical OR Assignment (||=)
Nullish Coalescing Assignment (??=)
Promise.allSettled()
Dynamic Import
Warning
These features are relatively new.
Older browsers may need an alternative code (Polyfill)
JavaScript BigInt
JavaScript
BigInt
variables are used to store big integer values
that are too big to be represented by a a normal JavaScript
Number
.
JavaScript integers are only accurate up to about 15 digits.
Integer Example
let x = 999999999999999;
let y = 9999999999999999; // too big
Try it Yourself 
BigInt Example
let x = 9999999999999999;
let y = 9999999999999999n;
Try it Yourself 
To create a
BigInt
, append n to the end of an integer or call
BigInt()
:
Example
let x = 1234567890123456789012345n;
let y = BigInt(1234567890123456789012345)
Try it Yourself 
The JavaScript
typeof
a
BigInt
is "bigint":
Example
let x = BigInt(999999999999999);
let type = typeof x;
Try it Yourself 
BigInt
is supported in all modern browsers since September 2020:
Chrome 67
Edge 79
Firefox 68
Safari 14
Opera 54
May 2018
Jan 2020
Jul 2019
Sep 2020
Jun 2018
JavaScript String matchAll()
Before ES2020 there was no string method that could be used to search for all occurrences
of a string in a string.
Example
const iterator = text.matchAll("Cats");
Try it Yourself 
If the parameter is a regular expression, the global flag (g) must be set set, otherwise
a TypeError is thrown.
Example
const iterator = text.matchAll(/Cats/g);
Try it Yourself 
If you want to search case insensitive, the insensitive flag (i) must be set:
Example
const iterator = text.matchAll(/Cats/gi);
Try it Yourself 
The Nullish Coalescing Operator (??)
The
??
operator returns the first argument if it is not
nullish
(
null
or
undefined
).
Otherwise it returns the second.
Example
let name = null;
let text = "missing";
let result = name ?? text;
Try it Yourself 
The nullish operator is supported in all modern browsers since March 2020:
Chrome 80
Edge 80
Firefox 72
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Jan 2020
Mar 2020
Mar 2020
The Optional Chaining Operator (?.)
The
Optional Chaining Operator
returns
undefined
if an object is
undefined
or
null
(instead of throwing an error).
Example
const car = {type:"Fiat", model:"500", color:"white"};
let name = car?.name;
Try it Yourself 
The
?.=
operator is supported in all modern browsers since March 2020:
Chrome 80
Edge 80
Firefox 74
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Mar 2020
Mar 2020
Mar 2020
The &&= Operator
The
Logical AND Assignment Operator
is used between two values.
If the first value is
true
, the second value is assigned.
Logical AND Assignment Example
let x = 10;
x &&= 5;
Try it Yourself 
The
&&=
operator is supported in all modern browsers since September 2020:
Chrome 85
Edge 85
Firefox 79
Safari 14
Opera 71
Aug 2020
Aug 2020
Mar 2020
Sep 2020
Sep 2020
The ||= Operator
The
Logical OR Assignment Operator
is used between two values.
If the first value is
false
, the second value is assigned.
Logical OR Assignment Example
let x = 10;
x ||= 5;
Try it Yourself 
The
||=
operator is supported in all modern browsers since September 2020:
Chrome 85
Edge 85
Firefox 79
Safari 14
Opera 71
Aug 2020
Aug 2020
Mar 2020
Sep 2020
Sep 2020
The ??= Operator
The
Nullish Coalescing Assignment Operator
is used between two values.
If the first value is
undefined
or
null
, the second value is assigned.
Nullish Coalescing Assignment Example
let x;
x ??= 5;
Try it Yourself 
The
??=
operator is supported in all modern browsers since September 2020:
Chrome 85
Edge 85
Firefox 79
Safari 14
Opera 71
Aug 2020
Aug 2020
Mar 2020
Sep 2020
Sep 2020
JavaScript Promise.allSettled()
The
Promise.allSettled()
method returns a single Promise from a list of promises.
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// Settle All
Promise.allSettled([myPromise1, myPromise2]).then((results) =>
results.forEach((x) => myDisplay(x.status)),
);
Try it Yourself 
Promise.allSettled()
is supported in all modern browsers since March 2020:
Chrome 76
Edge 79
Firefox 71
Safari 13
Opera 63
May 2019
Nov 2019
Mar 2020
Sep 2019
Aug 2019
JavaScript Display Objects
How to Display JavaScript Objects?
Displaying a JavaScript object will output
[object Object]
.
Example
// Create an Object
const person = {
name: "John",
age: 30,
city: "New York"
};
document.getElementById("demo").innerHTML = person;
Try it Yourself 
Some solutions to display JavaScript objects are:
Displaying the Object Properties by name
Displaying the Object Properties in a Loop
Displaying the Object using Object.values()
Displaying the Object using JSON.stringify()
Displaying Object Properties
The properties of an object can be displayed as a string:
Example
// Create an Object
const person = {
name: "John",
age: 30,
city: "New York"
};
// Display Properties
document.getElementById("demo").innerHTML =
person.name + "," + person.age + "," + person.city;
Try it Yourself 
Displaying Properties in a Loop
The properties of an object can be collected in a loop:
Example
// Create an Object
const person = {
name: "John",
age: 30,
city: "New York"
};
// Build a Text
let text = "";
for (let x in person) {
text += person[x] + " ";
};
// Display the Text
document.getElementById("demo").innerHTML = text;
Try it Yourself 
Using Object.values()
Object.values()
creates an array from the property values:
// Create an Object
const person = {
name: "John",
age: 30,
city: "New York"
};
// Create an Array
const myArray = Object.values(person);
// Display the Array
document.getElementById("demo").innerHTML = myArray;
Using Object.entries()
Object.entries()
makes it simple to use objects in loops:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
let text = "";
for (let [fruit, value] of Object.entries(fruits)) {
text += fruit + ": " + value + "<br>";
}
Try it Yourself 
Using JSON.stringify()
JavaScript objects can be converted to a string with JSON method
JSON.stringify()
.
JSON.stringify()
is included in JavaScript and supported in all major browsers.
Example
// Create an Object
const person = {
name: "John",
age: 30,
city: "New York"
};
// Stringify Object
let myString = JSON.stringify(person);
// Display String
document.getElementById("demo").innerHTML = myString;
Try it Yourself 
JavaScript
Const
The
const
keyword was introduced in
ES6 (2015)
Variables defined with
const
cannot be
Redeclared
Variables defined with
const
cannot be
Reassigned
Variables defined with
const
have
Block Scope
Cannot be Reassigned
A variable defined with the
const
keyword cannot be reassigned:
Example
const PI = 3.141592653589793;
PI = 3.14; // This will give an error
PI = PI + 10; // This will also give an error
Try it Yourself 
Must be Assigned
JavaScript
const
variables must be assigned a value when they are declared:
Correct
const PI = 3.14159265359;
Incorrect
const PI;
PI = 3.14159265359;
Constant Objects and Arrays
The keyword
const
is a little misleading.
It does not define a constant value. It defines a constant reference to a value.
Because of this you can NOT:
Reassign a constant value
Reassign a constant array
Reassign a constant object
But you CAN:
Change the elements of constant array
Change the properties of constant object
Constant Arrays
You can change the elements of a constant array:
Example
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];
// You can change an element:
cars[0] = "Toyota";
// You can add an element:
cars.push("Audi");
Try it Yourself 
But you can NOT reassign the array:
Example
const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"]; // ERROR
Try it Yourself 
Constant Objects
You can change the properties of a constant object:
Example
// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};
// You can change a property:
car.color = "red";
// You can add a property:
car.owner = "Johnson";
Try it Yourself 
But you can NOT reassign the object:
Example
const car = {type:"Fiat", model:"500", color:"white"};
car = {type:"Volvo", model:"EX60", color:"red"}; // 
  ERROR
Try it Yourself 
Difference Between var, let and const
Scope
Redeclare
Reassign
Hoisted
Binds this
var
No
Yes
Yes
Yes
Yes
let
Yes
No
Yes
No
No
const
Yes
No
No
No
No
What is Good?
let
and
const
have
block scope
.
let
and
const
can not be
redeclared
.
let
and
const
must be
declared
before use.
let
and
const
does
not bind
to
this
.
let
and
const
are
not hoisted
.
What is Not Good?
var
does not have to be declared.
var
is hoisted.
var
binds to this.
Browser Support
The
let
and
const
keywords are
not supported in Internet Explorer 11 or earlier.
The following table defines the first browser versions with full support:
Chrome 49
Edge 12
Firefox 36
Safari 11
Opera 36
Mar, 2016
Jul, 2015
Jan, 2015
Sep, 2017
Mar, 2016
Block Scope
Declaring a variable with
const
is similar to
let
when it comes to
Block Scope
.
The x declared in the block, in this example, is not the same as the x declared outside the block:
Example
const x = 10;
// Here x is 10
{
const x = 2;
// Here x is 2
}
// Here x is 10
Try it Yourself 
You can learn more about block scope in the chapter
JavaScript Scope
.
Redeclaring
Redeclaring a JavaScript
var
variable is allowed 
anywhere in a program:
Example
var x = 2;// Allowed
var x = 3;// Allowed
x = 4;// Allowed
Redeclaring an existing
var
or
let
variable to
const
, in the same scope, is not allowed:
Example
var x = 2;// Allowed
const x = 2;// Not allowed
{
let x = 2;  // Allowed
const x = 2;// Not allowed
}
{
const x = 2; // Allowed
const x = 2;// Not allowed
}
Reassigning an existing
const
variable, in the same scope, is not allowed:
Example
const x = 2;// Allowed
x = 2; // Not allowed
var x = 2; // Not allowed
let x = 2; // Not allowed
const x = 2;// Not allowed
{
const x = 2; // Allowed
x = 2; 
  // Not allowed
var x = 2; 
  // Not allowed
let x = 2; 
  // Not allowed
const x = 2;// Not allowed
}
Redeclaring a variable with
const
, in another scope, or in another block, is allowed:
Example
const x = 2; // Allowed
{
const x = 3; // Allowed
}
{
const x = 4;// Allowed
}
Hoisting
Variables defined with
var
are
hoisted
to the top 
and can be initialized at any time.
Meaning: You can use the variable before it is declared:
Example
This is OK:
carName = "Volvo";
var carName;
Try it Yourself 
If you want to learn more about hoisting, study the chapter
JavaScript Hoisting
.
Variables defined with
const
are also hoisted to the top,
but not initialized.
Meaning: Using a
const
variable before it is declared will result in a
ReferenceError
:
Example
alert (carName);
const carName = "Volvo";
Try it Yourself 
JavaScript Iterables
Iterables are iterable objects (like Arrays).
Iterables can be accessed with simple and efficient code.
Iterables can be iterated over with
for..of
loops
The For Of Loop
The JavaScript
for..of
statement loops 
through the elements of an iterable object.
Syntax
for (variable of iterable) {
//
code block to be executed
}
Iterating
Iterating is easy to understand.
It simply means looping over a sequence of elements.
Here are some easy examples:
Iterating over a String
Iterating over an Array
Iterating Over a String
You can use a
for..of
loop to iterate over the elements of a string:
Example
const name = "W3Schools";
for (const x of name) {
//
code block to be executed
}
Try it Yourself 
Iterating Over an Array
You can use a
for..of
loop to iterate over the elements of an Array:
Example 1
const letters = ["a","b","c"];
for (const x of letters) {
//
code block to be executed
}
Try it Yourself 
Example 2
const numbers = [2,4,6,8];
for (const x of numbers) {
//
code block to be executed
}
Try it Yourself 
Iterating Over a Set
You can use a
for..of
loop to iterate over the elements of a Set:
Example
const letters = new Set(["a","b","c"]);
for (const x of letters) {
//
code block to be executed
}
Try it Yourself 
Iterating Over a Map
You can use a
for..of
loop to iterate over the elements of a Map:
Example
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
for (const x of fruits) {
//
code block to be executed
}
Try it Yourself 
JavaScript Iterators
The
iterator protocol
defines how to produce a
sequence of values
from an object.
An object becomes an
iterator
when it implements a
next()
method.
The
next()
method must return an object with two properties:
value (the next value)
done (true or false)
value
The value returned by the iterator
(Can be omitted if done is true)
done
true
if the iterator has completed
false
if the iterator has produced a new value
Home Made Iterable
This iterable returns never ending: 10,20,30,40,.... Everytime
next()
is called:
Example
// Home Made Iterable
function myNumbers() {
let n = 0;
return {
next: function() {
n += 10;
return {value:n, done:false};
}
};
}
// Create Iterable
const n = myNumbers();
n.next(); // Returns 10
n.next(); // Returns 20
n.next(); // Returns 30
Try it Yourself 
A JavaScript iterable is an object that has a
Symbol.iterator
.
The
Symbol.iterator
is a function that returns a
next()
function.
An iterable can be iterated over with the code:
for (const x of iterable) { }
Example
// Create an Object
myNumbers = {};
// Make it Iterable
myNumbers[Symbol.iterator] = function() {
let n = 0;
done = false;
return {
next() {
n += 10;
if (n == 100) {done = true}
return {value:n, done:done};
}
};
}
Now you can use
for..of
for (const num of myNumbers) {
// Any Code Here
}
Try it Yourself 
The Symbol.iterator method is called automatically by
for..of
.
But we can also do it "manually":
Example
let iterator = myNumbers[Symbol.iterator]();
while (true) {
const result = iterator.next();
if (result.done) break;
// Any Code Here
}
Try it Yourself 
JavaScript BigInt
JavaScript
BigInt
variables are used to store big integer values
that are too big to be represented by a normal JavaScript
Number
.
JavaScript Integer Accuracy
JavaScript integers are only accurate up to 15 digits:
Integer Precision
let x = 999999999999999;
let y = 9999999999999999;
Try it Yourself 
In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).
With this standard, large integer cannot be exactly represented and will be rounded.
Because of this, JavaScript can only safely represent integers:
Up to
9007199254740991
+(2
53
-1)
and
Down to
-9007199254740991
-(2
53
-1).
Integer values outside this range lose precision.
How to Create a BigInt
To create a
BigInt
, append n to the end of an integer or call
BigInt()
:
Examples
let x = 9999999999999999;
let y = 9999999999999999n;
Try it Yourself 
let x = 1234567890123456789012345n;
let y = BigInt(1234567890123456789012345)
Try it Yourself 
BigInt: A new JavaScript Datatype
The JavaScript
typeof
a
BigInt
is "bigint":
Example
let x = BigInt(999999999999999);
let type = typeof x;
Try it Yourself 
BigInt
is the second numeric data type in JavaScript
(after
Number
).
With
BigInt
the total number of supported data types in JavaScript is 8:
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object
BigInt Operators
Operators that can be used on a JavaScript
Number
can also be used on a
BigInt
.
BigInt Multiplication Example
let x = 9007199254740995n;
let y = 9007199254740995n;
let z = x * y;
Try it Yourself 
BigInt Decimals
A
BigInt
can not have decimals.
BigInt Division Example
let x = 5n;
let y = x / 2;
// Error: Cannot mix BigInt and other types, use explicit conversion.
let x = 5n;
let y = Number(x) / 2;
Try it Yourself 
BigInt Hex, Octal and Binary
BigInt
can also be written in hexadecimal, octal, or binary notation:
BigInt Hex Example
let hex = 0x20000000000003n;
let oct = 0o400000000000000003n;
let bin = 0b100000000000000000000000000000000000000000000000000011n;
Try it Yourself 
Precision Curiosity
Rounding can compromise program security:
MAX_SAFE_INTEGER Example
9007199254740992 === 9007199254740993; // is true !!!
Try it Yourself 
Browser Support
BigInt
is supported in all browsers since September 2020:
Chrome 67
Edge 79
Firefox 68
Safari 14
Opera 54
May 2018
Jan 2020
Jul 2019
Sep 2020
Jun 2018
Minimum and Maximum Safe Integers
ES6
added max and min properties to the Number object:
MAX_SAFE_INTEGER
MIN_SAFE_INTEGER
MAX_SAFE_INTEGER Example
let x = Number.MAX_SAFE_INTEGER;
Try it Yourself 
MIN_SAFE_INTEGER Example
let x = Number.MIN_SAFE_INTEGER;
Try it Yourself 
New Number Methods
ES6
also added 2 new methods to the Number object:
Number.isInteger()
Number.isSafeInteger()
The Number.isInteger() Method
The
Number.isInteger()
method returns
true
if the argument is an integer.
Example: isInteger()
Number.isInteger(10);
Number.isInteger(10.5);
Try it Yourself 
The Number.isSafeInteger() Method
A safe integer is an integer that can be exactly represented as a double precision number.
The
Number.isSafeInteger()
method returns
true
if the argument is a safe integer.
Example isSafeInteger()
Number.isSafeInteger(10);
Number.isSafeInteger(12345678901234567890);
Try it Yourself 
JavaScript
Arrays
An array is a special variable, which can hold more than one value:
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
Why Use Arrays?
If you have a list of items (a list of car names, for example), storing the 
cars in single variables could look like this:
let car1 = "Saab";
let car2 = "Volvo";
let car3 = "BMW";
However, what if you want to loop through the cars and find a specific one? 
And what if you had not 3 cars, but 300?
The solution is an array!
An array can hold many values under a single name, and you can 
access the values by referring to an index number.
Creating an Array
Using an array literal is the easiest way to create a JavaScript Array.
Syntax:
const
array_name
= [
item1
,
item2
, ...];
Example
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
Spaces and line breaks are not important. A declaration can span multiple lines:
Example
const cars = [
"Saab",
"Volvo",
"BMW"
];
Try it Yourself 
You can also create an array, and then provide the elements:
Example
const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";
Try it Yourself 
Using the JavaScript Keyword new
The following example also creates an Array, and assigns values to it:
Example
const cars = new Array("Saab", "Volvo", "BMW");
Try it Yourself 
Accessing Array Elements
You access an array element by referring to the
index number
:
const cars = ["Saab", "Volvo", "BMW"];
let car = cars[0];
Try it Yourself 
Changing an Array Element
This statement changes the value of the first element in
cars
:
cars[0] = "Opel";
Example
const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Opel";
Try it Yourself 
Converting an Array to a String
The JavaScript method
toString()
converts an array to a 
string of (comma separated) array values.
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Result:
Banana,Orange,Apple,Mango
Try it Yourself 
Access the Full Array
With JavaScript, the full array can be accessed by referring to the array 
name:
Example
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;
Try it Yourself 
Arrays are Objects
Arrays are a special type of objects. The
typeof
operator in JavaScript returns "object" for 
arrays.
But, JavaScript arrays are best described as arrays.
Arrays use
numbers
to access its "elements". In this 
example,
person[0]
returns John:
Array:
const person = ["John", "Doe", 46];
Try it Yourself 
Objects use
names
to access its "members". In this example,
person.firstName
returns John:
Object:
const person = {firstName:"John", lastName:"Doe", age:46};
Try it Yourself 
Array Elements Can Be Objects
JavaScript variables can be objects. Arrays are special kinds of objects.
Because of this, you can have variables of different types in the 
same Array.
You can have objects in an Array. You can have functions in an Array. You can 
have arrays in an Array:
myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;
Array Properties and Methods
The real strength of JavaScript arrays are the built-in array properties and 
methods:
cars.length// Returns the number of elements
cars.sort()// Sorts the array
Array methods are covered in the next chapters.
The length Property
The
length
property of an array returns the length of an array (the number of array 
elements).
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.length;
Try it Yourself 
Accessing the First Array Element
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[0];
Try it Yourself 
Accessing the Last Array Element
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[fruits.length - 1];
Try it Yourself 
Looping Array Elements
One way to loop through an array, is using a
for
loop:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;
let text = "<ul>";
for (let i = 0; i < fLen; i++) {
text += "<li>" + fruits[i] + "</li>";
}
text 
  += "</ul>";
Try it Yourself 
You can also use the
Array.forEach()
function:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";
function 
  myFunction(value) {
text += "<li>" + value + "</li>";
}
Try it Yourself 
Adding Array Elements
The easiest way to add a new element to an array is using the
push()
method:
Example
const fruits = ["Banana", "Orange", "Apple"];
fruits.push("Lemon");// Adds a new element (Lemon) to fruits
Try it Yourself 
New element can also be added to an array using the
length
property:
Example
const fruits = ["Banana", "Orange", "Apple"];
fruits[fruits.length] = "Lemon";// Adds "Lemon" to fruits
Try it Yourself 
Example
const fruits = ["Banana", "Orange", "Apple"];
fruits[6] = "Lemon";// Creates undefined "holes" in fruits
Try it Yourself 
Associative Arrays
Many programming languages support arrays with named indexes.
Arrays with named indexes are called associative 
arrays (or hashes).
JavaScript does
not
support arrays with named indexes.
In JavaScript,
arrays
always use
numbered indexes
.
Example
const person = [];
person[0] = "John";
person[1] = "Doe";
person[2] = 46;
person.length;// Will return 3
person[0];// Will return "John"
Try it Yourself 
Example:
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;// Will return 0
person[0]; // Will return undefined
Try it Yourself 
The Difference Between Arrays and Objects
In JavaScript,
arrays
use
numbered indexes
.
In JavaScript,
objects
use
named indexes
.
When to Use Arrays. When to use Objects.
JavaScript does not support associative arrays.
You should use
objects
when you want the element names to be
strings (text)
.
You should use
arrays
when you want the element names to be
numbers
.
JavaScript new Array()
JavaScript has a built-in array constructor
new Array()
.
But you can safely use
[]
instead.
These two different statements both create a new empty array named points:
const points = new Array();
const points = [];
These two different statements both create a new array containing 6 numbers:
const points = new Array(40, 100, 1, 5, 25, 10);
const points = [40, 100, 1, 5, 25, 10];
Try it Yourself 
The
new
keyword can produce some unexpected results:
// Create an array with three elements:
const points = new Array(40, 100, 1);
Try it Yourself 
// Create an array with two elements:
const points = new Array(40, 100);
Try it Yourself 
// Create an array with one element ???
const points = new Array(40);
Try it Yourself 
A Common Error
const points = [40];
is not the same as:
const points = new Array(40);
// Create an array with one element:
const points = [40];
Try it Yourself 
// Create an array with 40 undefined elements:
const points = new Array(40);
Try it Yourself 
How to Recognize an Array
A common question is: How do I know if a variable is an array?
The problem is that the JavaScript operator
typeof
returns 
"
object
":
const fruits = ["Banana", "Orange", "Apple"];
let type = typeof fruits;
Try it Yourself 
The typeof operator returns object because a JavaScript array is an 
object.
Solution 1:
To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method
Array.isArray()
:
Array.isArray(fruits);
Try it Yourself 
Solution 2:
The
instanceof
operator returns true if an object is created 
by a given constructor:
const fruits = ["Banana", "Orange", "Apple"];
(fruits instanceof Array);
Try it Yourself 
Nested Arrays and Objects
Values in objects can be arrays, and values in arrays can be objects:
Example
const myObj =
  {
name: "John",
age: 30,
cars: [
{name:"Ford", 
  models:["Fiesta", "Focus", "Mustang"]},
{name:"BMW", models:["320", "X3", "X5"]},
{name:"Fiat", models:["500", "Panda"]}
]
}
To access arrays inside arrays, use a for-in loop for each array:
Example
for (let i in myObj.cars) {
x += "<h1>" + myObj.cars[i].name 
  + "</h1>";
for (let j in myObj.cars[i].models) {
x += myObj.cars[i].models[j];
}
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Get the value "
Volvo
" from the
cars
array.
const cars = ["Saab", "Volvo", "BMW"];
let x =
;
Submit Answer 
Start the Exercise
JavaScript typeof
The typeof Operator
The
typeof
operator returns the
data type
of a JavaScript variable.
Primitive Data Types
In JavaScript, a primitive value is a single value with no properties or methods.
JavaScript has 7 primitive data types:
string
number
boolean
bigint
symbol
null
undefined
The
typeof
operator returns the type of a variable or an expression.
Examples
typeof "John"
// Returns string
typeof ("John"+"Doe")
// Returns string
typeof 3.14
// Returns number
typeof 33
// Returns number
typeof (33 + 66)
// Returns number
typeof true
// Returns boolean
typeof false
// Returns boolean
typeof 1234n
// Returns bigint
typeof Symbol()
// Returns symbol
typeof x
// Returns undefined
Try it Yourself 
typeof null
// Returns object
Try it Yourself 
Complex Data Types
A complex data type can store multiple values
and/or different data types together.
JavaScript has one complex data type:
object
All other complex types like arrays, functions, sets, and maps are just different types of objects.
The
typeof
operator returns only two types:
object
function
Example
typeof {name:'John'}// Returns object
typeof [1,2,3,4]
// Returns object
typeof new Map()
// Returns object
typeof new Set()
// Returns object
typeof function (){} // Returns function
Try it Yourself 
How to Recognize an Array
How to know if a variable is an array?
ECMAScript 5 (2009) defined a new method for this:
Array.isArray()
:
Example
// Create an Array
const fruits = ["apples", "bananas", "oranges"];
Array.isArray(fruits);
Try it Yourself 
The instanceof Operator
The
instanceof
operator returns
true
if an object is an instance of a specified object type:
Examples
// Create a Date
const time = new Date();
(time instanceof Date);
Try it Yourself 
// Create an Array
const fruits = ["apples", "bananas", "oranges"];
(fruits instanceof Array);
Try it Yourself 
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
(fruits instanceof Map);
Try it Yourself 
// Create a Set
const fruits = new Set(["apples", "bananas", "oranges"]);
(fruits instanceof Set);
Try it Yourself 
Undefined Variables
The
typeof
of an undefined variable is
undefined
.
Example
typeof car;
Try it Yourself 
The
typeof
of a variable with no value is
undefined
. The value is also
undefined
.
Example
let car;
typeof car;
Try it Yourself 
Any variable can be emptied, by setting the value to
undefined
.
The type will also be
undefined
.
Example
let car = "Volvo";
car = undefined;
Try it Yourself 
Empty Values
An empty value has nothing to do with
undefined
.
An empty string has both a legal value and a type.
Example
let car = "";
typeof car;
Try it Yourself 
Null
In JavaScript
null
is "nothing". It is supposed to be something that doesn't exist.
Unfortunately, in JavaScript, the data type of
null
is an object.
You can empty an object by setting it to
null
:
Example
// Create an Object
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person = null;
// Now value is null, but type is still an object
Try it Yourself 
You can also empty an object by setting it to
undefined
:
Example
let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person = undefined;
// Now both value and type is undefined
Try it Yourself 
Difference Between Undefined and Null
undefined
and
null
are equal in value but different in type:
typeof undefined
    // undefined
typeof null
    // object
null === undefined
    // false
null == undefined
    // true
Try it Yourself 
The constructor Property
The
constructor
property returns the constructor 
function for all JavaScript variables.
Example
// Returns function Object() {[native code]}:
{name:'John',age:34}.constructor
// Returns function Array() {[native code]}:
[1,2,3,4].constructor
// Returns function Date() {[native code]}:
new Date().constructor
// Returns function Set() {[native code]}:
new Set().constructor
// Returns function Map() {[native code]}:
new Map().constructor
// Returns function Function() {[native code]}:
function () {}.constructor
Try it Yourself 
With the constructor, you can check if an object is an
Array
:
Example
(myArray.constructor === Array);
Try it Yourself 
With the constructor, you can check if an object is a
Date
:
Example
(myDate.constructor === Date);
Try it Yourself 
All Together
typeof "John" 
// Returns "string"
typeof ("John"+"Doe") 
// Returns "string"
typeof 3.14 
// Returns "number"
typeof (33 + 66) 
// Returns "number"
typeof NaN 
// Returns "number"
typeof 1234n
// Returns "bigint"
typeof true
// Returns "boolean"
typeof false
// Returns "boolean"
typeof {name:'John'}
// Returns "object"
typeof [1,2,3,4]
// Returns "object"
typeof {}
// Returns "object"
typeof []
// Returns "object"
typeof new Object() 
// Returns "object"
typeof new Array() 
// Returns "object"
typeof new Date() 
// Returns "object"
typeof new Set() 
// Returns "object"
typeof new Map() 
// Returns "object"
typeof function () {}
// Returns "function"
typeof x 
// Returns "undefined"
typeof null 
// Returns "object"
Try it Yourself 
The void Operator
The
void
operator evaluates an expression and returns
undefined
. This operator is often used to obtain the undefined 
primitive value, using "void(0)" (useful when evaluating an expression without 
using the return value).
Example
<a href="javascript:void(0);">
Useless link
</a>
<a href="javascript:void(document.body.style.backgroundColor='red');">
Click me to change the background color of body to red
</a>
Try it Yourself 
JavaScript Comparison and Logical Operators
Comparison and Logical operators are used to test for
true
or
false
.
Comparison Operators
Comparison operators are used in logical statements to determine equality or difference between variables or values.
Given that
x = 5
, the table below explains the comparison operators:
Operator
Description
Comparing
Returns
Try it
==
equal to
x == 8
false
Try it 
x == 5
true
Try it 
x == "5"
true
Try it 
===
equal value and equal type
x === 5
true
Try it 
x === "5"
false
Try it 
!=
not equal
x != 8
true
Try it 
!==
not equal value or not equal type
x !== 5
false
Try it 
x !== "5"
true
Try it 
x !== 8
true
Try it 
>
greater than
x > 8
false
Try it 
<
less than
x < 8
true
Try it 
>=
greater than or equal to
x >= 8
false
Try it 
<=
less than or equal to
x <= 8
true
Try it 
How Can it be Used
Comparison operators can be used in conditional statements to compare values 
and take action depending on the result:
if (age < 18) text = "Too young to buy alcohol";
You will learn more about the use of conditional statements in the next chapter of this tutorial.
Logical Operators
Logical operators are used to determine the logic between variables or values.
Given that
x = 6
and
y = 3
, the table below explains the logical operators:
Operator
Description
Example
Try it
&&
and
(x < 10 && y > 1) is true
Try it 
||
or
(x == 5 || y == 5) is false
Try it 
!
not
!(x == y) is true
Try it 
Conditional (Ternary) Operator
JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.
Syntax
variablename
= (
condition
) ?
value1
:
value2
Example
let voteable = (age < 18) ? "Too young":"Old enough";
Try it Yourself 
If the variable age is a value below 18, the value of the variable voteable 
will be "Too young", otherwise the value of voteable will be "Old enough".
Comparing Different Types
Comparing data of different types may give unexpected results.
When comparing a string with a number, JavaScript will convert the string to 
a number when doing the comparison. An empty string converts to 0. A non-numeric 
string converts to
NaN
which is always
false
.
Case
Value
Try
2 < 12
true
Try it 
2 < "12"
true
Try it 
2 < "John"
false
Try it 
2 > "John"
false
Try it 
2 == "John"
false
Try it 
"2" < "12"
false
Try it 
"2" > "12"
true
Try it 
"2" == "12"
false
Try it 
When comparing two strings, "2" will be greater than "12", because 
(alphabetically) 1 is less than 2.
To secure a proper result, variables should be converted to the proper type 
before comparison:
age = Number(age);
if (isNaN(age)) {
voteable = "Input is not a number";
} else {
voteable = (age < 18) ? "Too young" : "Old enough";
}
Try it Yourself 
The Nullish Coalescing Operator (??)
The
??
operator returns the first argument if it is not
nullish
(
null
or
undefined
).
Otherwise it returns the second argument.
Example
let name = null;
let text = "missing";
let result = name ?? text;
Try it Yourself 
The nullish operator is supported in all browsers since March 2020:
Chrome 80
Edge 80
Firefox 72
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Jan 2020
Mar 2020
Mar 2020
The Optional Chaining Operator (?.)
The
?.
operator returns
undefined
if an object is
undefined
or
null
(instead of throwing an error).
Example
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};
// Ask for car name:
document.getElementById("demo").innerHTML = car?.name;
Try it Yourself 
The optional chaining operator is supported in all browsers since March 2020:
Chrome 80
Edge 80
Firefox 72
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Jan 2020
Mar 2020
Mar 2020
Test Yourself With Exercises
Exercise:
Choose the correct
comparison operator
to alert
true
, when
x
is greater than
y
.
x = 10;
y = 5;
alert(x
y);
Submit Answer 
Start the Exercise 
JavaScript
Math Object
The JavaScript Math object allows you to perform mathematical tasks on 
numbers.
Example
Math.PI;
Try it Yourself 
The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.
Math Properties (Constants)
The syntax for any Math property is :
Math.
property
.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:
Example
Math.E// returns Euler's number
Math.PI// returns PI
Math.SQRT2// returns the square root of 2
Math.SQRT1_2// returns the square root of 1/2
Math.LN2// returns the natural logarithm of 2
Math.LN10// returns the natural logarithm of 10
Math.LOG2E// returns base 2 logarithm of E
Math.LOG10E// returns base 10 logarithm of E
Try it Yourself 
Math Methods
The syntax for Math any methods is :
Math.
method
(
number
)
Number to Integer
There are 4 common methods to round a number to an integer:
Math.round(x)
Returns x rounded to its nearest integer
Math.ceil(x)
Returns x rounded up to its nearest integer
Math.floor(x)
Returns x rounded down to its nearest integer
Math.trunc(x)
Returns the integer part of x (
new in ES6
)
Math.round()
Math.round(x)
returns the nearest integer:
Examples
Math.round(4.6);
Try it Yourself 
Math.round(4.5);
Try it Yourself 
Math.round(4.4);
Try it Yourself 
Math.ceil()
Math.ceil(x)
returns the value of x rounded
up
to its nearest integer:
Example
Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);
Try it Yourself 
Math.floor()
Math.floor(x)
returns the value of x rounded
down
to its nearest integer:
Example
Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);
Try it Yourself 
Math.trunc()
Math.trunc(x)
returns the integer part of x:
Example
Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);
Try it Yourself 
Math.sign()
Math.sign(x)
returns if x is negative, null or positive:
Example
Math.sign(-4);
Math.sign(0);
Math.sign(4);
Try it Yourself 
Math.pow()
Math.pow(x, y)
returns the value of x to the power of y:
Example
Math.pow(8, 2);
Try it Yourself 
Math.sqrt()
Math.sqrt(x)
returns the square root of x:
Example
Math.sqrt(64);
Try it Yourself 
Math.abs()
Math.abs(x)
returns the absolute (positive) value of x:
Example
Math.abs(-4.7);
Try it Yourself 
Math.sin()
Math.sin(x)
returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.
Example
Math.sin(90 * Math.PI / 180);// returns 1 (the sine of 90 degrees)
Try it Yourself 
Math.cos()
Math.cos(x)
returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.
Example
Math.cos(0 * Math.PI / 180);// returns 1 (the cos of 0 degrees)
Try it Yourself 
Math.min() and Math.max()
Math.min()
and
Math.max()
can be used to find the lowest or highest value in a list of arguments:
Example
Math.min(0, 150, 30, 20, -8, -200);
Try it Yourself 
Example
Math.max(0, 150, 30, 20, -8, -200);
Try it Yourself 
Math.random()
Math.random()
returns a random number between 0 (inclusive), and 1 
(exclusive):
Example
Math.random();
Try it Yourself 
The Math.log() Method
Math.log(x)
returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:
Examples
Math.log(1);
Try it Yourself 
Math.log(2);
Try it Yourself 
Math.log(3);
Try it Yourself 
Math.E and Math.log() are twins.
How many times must we multiply Math.E to get 10?
Math.log(10);
Try it Yourself 
The Math.log2() Method
Math.log2(x)
returns the base 2 logarithm of x.
How many times must we multiply 2 to get 8?
Math.log2(8);
Try it Yourself 
The Math.log10() Method
Math.log10(x)
returns the base 10 logarithm of x.
How many times must we multiply 10 to get 1000?
Math.log10(1000);
Try it Yourself 
JavaScript Math Methods
Method
Description
abs(x)
Returns the absolute value of x
acos(x)
Returns the arccosine of x, in radians
acosh(x)
Returns the hyperbolic arccosine of x
asin(x)
Returns the arcsine of x, in radians
asinh(x)
Returns the hyperbolic arcsine of x
atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)
Returns the arctangent of the quotient of its arguments
atanh(x)
Returns the hyperbolic arctangent of x
cbrt(x)
Returns the cubic root of x
ceil(x)
Returns x, rounded upwards to the nearest integer
cos(x)
Returns the cosine of x (x is in radians)
cosh(x)
Returns the hyperbolic cosine of x
exp(x)
Returns the value of E
x
floor(x)
Returns x, rounded downwards to the nearest integer
log(x)
Returns the natural logarithm (base E) of x
max(x, y, z, ..., n)
Returns the number with the highest value
min(x, y, z, ..., n)
Returns the number with the lowest value
pow(x, y)
Returns the value of x to the power of y
random()
Returns a random number between 0 and 1
round(x)
Rounds x to the nearest integer
sign(x)
Returns if x is negative, null or positive (-1, 0, 1)
sin(x)
Returns the sine of x (x is in radians)
sinh(x)
Returns the hyperbolic sine of x
sqrt(x)
Returns the square root of x
tan(x)
Returns the tangent of an angle
tanh(x)
Returns the hyperbolic tangent of a number
trunc(x)
Returns the integer part of a number (x)
Test Yourself With Exercises
Exercise:
Use the correct Math method to create a random number.
let r =
;
Submit Answer 
Start the Exercise
JavaScript String Search
String Search Methods
String indexOf()
String lastIndexOf()
String search()
See Also:
Basic String Methods
String Templates
String match()
String matchAll()
String includes()
String startsWith()
String endsWith()
JavaScript String indexOf()
The
indexOf()
method returns the
index
(position)
of the
first
occurrence of a string in a string, or it returns -1 if the string is not found:
Example
let text = "Please locate where 'locate' occurs!";
let index = text.indexOf("locate");
Try it Yourself 
JavaScript String lastIndexOf()
The
lastIndexOf()
method returns the
index
of the
last
occurrence of a specified text in a string:
Example
let text = "Please locate where 'locate' occurs!";
let index = text.lastIndexOf("locate");
Try it Yourself 
Both
indexOf()
, and
lastIndexOf()
return -1
if the text is not found:
Example
let text = "Please locate where 'locate' occurs!";
let index = text.lastIndexOf("John");
Try it Yourself 
Both methods accept a second parameter as the starting position for the 
search:
Example
let text = "Please locate where 'locate' occurs!";
let index = text.indexOf("locate", 15);
Try it Yourself 
The
lastIndexOf()
methods searches backwards 
(from the end to the beginning), meaning:
if the second parameter is
15
, the search starts at position 
15, and searches to the beginning of the string.
Example
let text = "Please locate where 'locate' occurs!";
text.lastIndexOf("locate", 15);
Try it Yourself 
JavaScript String search()
The
search()
method searches a string for a string (or a regular expression)
and returns the position of the match:
Examples
let text = "Please locate where 'locate' occurs!";
text.search("locate");
Try it Yourself 
let text = "Please locate where 'locate' occurs!";
text.search(/locate/);
Try it Yourself 
Did You Notice?
The two methods,
indexOf()
and
search()
, are
equal?
They accept the same arguments (parameters), and return the same value?
The two methods are
NOT
equal. These are the differences:
The
search()
method cannot take a second start position argument.
The
indexOf()
method cannot take 
powerful search values (regular expressions).
You will learn more about 
regular expressions in a later chapter.
JavaScript String match()
The
match()
method returns an array containing the results of matching
a string against a string (or a regular expression).
Examples
Perform a search for "ain":
let text = "The rain in SPAIN stays mainly in the plain";
text.match("ain");
Try it Yourself 
Perform a search for "ain":
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/);
Try it Yourself 
Perform a global search for "ain":
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/g);
Try it Yourself 
Perform a global, case-insensitive search for "ain":
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/gi);
Try it Yourself 
JavaScript String matchAll()
The
matchAll()
method returns an iterator containing the results of matching
a string against a string (or a regular expression).
Example
const iterator = text.matchAll("Cats");
Try it Yourself 
If the parameter is a regular expression, the global flag (g) must be set, otherwise
a TypeError is thrown.
Example
const iterator = text.matchAll(/Cats/g);
Try it Yourself 
If you want to search case insensitive, the insensitive flag (i) must be set:
Example
const iterator = text.matchAll(/Cats/gi);
Try it Yourself 
JavaScript String includes()
The
includes()
method returns true if a string contains a specified value.
Otherwise it returns
false
.
Examples
Check if a string includes "world":
let text = "Hello world, welcome to the universe.";
text.includes("world");
Try it Yourself 
Check if a string includes "world". Start at position 12:
let text = "Hello world, welcome to the universe.";
text.includes("world", 12);
Try it Yourself 
JavaScript String startsWith()
The
startsWith()
method returns
true
if a string begins with a specified value.
Otherwise it returns
false
:
Examples
Returns true:
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello");
Try it Yourself 
Returns false:
let text = "Hello world, welcome to the universe.";
text.startsWith("world")
Try it Yourself 
A start position for the search can be specified:
Returns false:
let text = "Hello world, welcome to the universe.";
text.startsWith("world", 5)
Try it Yourself 
Returns true:
let text = "Hello world, welcome to the universe.";
text.startsWith("world", 6)
Try it Yourself 
JavaScript String endsWith()
The
endsWith()
method returns
true
if a string ends with a specified value.
Otherwise it returns
false
:
Examples
Check if a string ends with "Doe":
let text = "John Doe";
text.endsWith("Doe");
Try it Yourself 
Check if the 11 first characters of a string ends with "world":
let text = "Hello world, welcome to the universe.";
text.endsWith("world", 11);
Try it Yourself 
JavaScript
Comments
JavaScript comments can be used to explain JavaScript code, and 
to make it more readable.
JavaScript comments can also be used to prevent execution, when 
testing alternative code.
Single Line Comments
Single line comments start with
//
.
Any text between
//
and the end of the line will be ignored by JavaScript 
(will not be executed).
This example uses a single-line comment before each code line:
Example
// Change heading:
document.getElementById("myH").innerHTML = "My First Page";
// Change paragraph:
document.getElementById("myP").innerHTML = "My first paragraph.";
Try it Yourself 
This example uses a single line comment at the end of each line 
to explain the code:
Example
let x = 5; // Declare x, give it the value of 5
let y = x + 2; // Declare y, give it the value of x + 2
Try it Yourself 
Multi-line Comments
Multi-line comments start with
/*
and end with
*/
.
Any text between
/*
and
*/
will be ignored by JavaScript.
This example uses a multi-line comment (a comment block) to explain the code:
Example
/*
The code below will change
the heading with id = "myH"
and the paragraph with id = "myP"
in my web page:
*/
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
Try it Yourself 
Using Comments to Prevent Execution
Using comments to prevent execution of code is suitable for 
code testing.
Adding
//
in front of a code line changes the code lines from an executable line to 
a comment.
This example uses // to prevent execution of one of the code lines:
Example
//document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
Try it Yourself 
This example uses a comment block to prevent execution of 
multiple lines:
Example
/*
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
*/
Try it Yourself 
JavaScript
Operators
Javascript operators are used to perform different types of mathematical and logical computations.
Examples:
The
Assignment Operator
=
assigns values
The
Addition Operator
+
adds values
The
Multiplication Operator
*
multiplies values
The
Comparison Operator
>
compares values
JavaScript Assignment
The
Assignment Operator
(
=
) assigns a value to a variable:
Assignment Examples
let x = 10;
Try it Yourself 
// Assign the value 5 to x
let x = 5;
// Assign the value 2 to y
let y = 2;
// Assign the value x + y to z:
let z = x + y;
Try it Yourself 
JavaScript Addition
The
Addition Operator
(
+
) adds numbers:
Adding
let x = 5;
let y = 2;
let z = x + y;
Try it Yourself 
JavaScript Multiplication
The
Multiplication Operator
(
*
) multiplies numbers:
Multiplying
let x = 5;
let y = 2;
let z = x * y;
Try it Yourself 
Types of JavaScript Operators
There are different types of JavaScript operators:
Arithmetic Operators
Assignment Operators
Comparison Operators
String Operators
Logical Operators
Bitwise Operators
Ternary Operators
Type Operators
JavaScript Arithmetic Operators
Arithmetic Operators
are used to perform arithmetic on numbers:
Arithmetic Operators Example
let a = 3;
let x = (100 + 50) * a;
Try it Yourself 
Operator
Description
+
Addition
-
Subtraction
*
Multiplication
**
Exponentiation (
ES2016
)
/
Division
%
Modulus (Division Remainder)
++
Increment
--
Decrement
JavaScript Assignment Operators
Assignment operators assign values to JavaScript variables.
The
Addition Assignment Operator
(
+=
) adds a value to a variable.
Assignment
let x = 10;
x += 5;
Try it Yourself 
Operator
Example
Same As
=
x = y
x = y
+=
x += y
x = x + y
-=
x -= y
x = x - y
*=
x *= y
x = x * y
/=
x /= y
x = x / y
%=
x %= y
x = x % y
**=
x **= y
x = x ** y
JavaScript Comparison Operators
Operator
Description
==
equal to
===
equal value and equal type
!=
not equal
!==
not equal value or not equal type
>
greater than
<
less than
>=
greater than or equal to
<=
less than or equal to
?
ternary operator
JavaScript String Comparison
All the comparison operators above can also be used on strings:
Example
let text1 = "A";
let text2 = "B";
let result = text1 < text2;
Try it Yourself 
Note that strings are compared alphabetically:
Example
let text1 = "20";
let text2 = "5";
let result = text1 < text2;
Try it Yourself 
JavaScript String Addition
The
+
can also be used to add (concatenate) strings:
Example
let text1 = "John";
let text2 = "Doe";
let text3 = text1 + " " + text2;
Try it Yourself 
The
+=
assignment operator can also be used to add (concatenate) strings:
Example
let text1 = "What a very ";
text1 += "nice day";
The result of text1 will be:
What a very nice day
Try it Yourself 
Adding Strings and Numbers
Adding two numbers, will return the sum, but adding a number and a string will return a string:
Example
let x = 5 + 5;
let y = "5" + 5;
let z = "Hello" + 5;
The result of
x
,
y
, and
z
will be:
10
55
Hello5
Try it Yourself 
JavaScript Logical Operators
Operator
Description
&&
logical and
||
logical or
!
logical not
JavaScript Type Operators
Operator
Description
typeof
Returns the type of a variable
instanceof
Returns true if an object is an instance of an object type
JavaScript Bitwise Operators
Bit operators work on 32 bits numbers.
Any numeric operand in the operation is converted into a 32 bit number.
The result is converted back to a JavaScript number.
Operator
Description
Example
Same as
Result
Decimal
&
AND
5 & 1
0101 & 0001
0001
1
|
OR
5 | 1
0101 | 0001
0101
5
~
NOT
~ 5
~0101
1010
10
^
XOR
5 ^ 1
0101 ^ 0001
0100
4
<<
left shift
5 << 1
0101 << 1
1010
10
>>
right shift
5 >> 1
0101 >> 1
0010
2
>>>
unsigned right shift
5 >>> 1
0101 >>> 1
0010
2
Test Yourself With Exercises
Exercise:
Multiply
10
with
5
, and alert the result.
alert(10
5);
Submit Answer 
Start the Exercise
JavaScript
Break and Continue
The
break
statement "jumps out" of a loop.
The
continue
statement "jumps over" one iteration in 
the loop.
The Break Statement
You have already seen the
break
statement used in an earlier 
chapter of this tutorial. It was used to "jump out" of a
switch()
statement.
The
break
statement can also be used to jump out of a loop:
Example
for (let i = 0; i < 10; i++) {
if (i === 3) { break; }
text += "The number is " + i + "<br>";
}
Try it Yourself 
In the example above, the
break
statement ends the loop ("breaks" the loop)
when the loop counter (i) is 3.
The Continue Statement
The
continue
statement breaks one iteration (in the loop), if a specified 
condition occurs, and continues with the next iteration in the loop.
This example skips the value of 3:
Example
for (let i = 0; i < 10; i++) {
if (i === 3) { continue; }
text += "The number is " + i + "<br>";
}
Try it Yourself 
JavaScript Labels
To label JavaScript statements you precede the statements with a label name 
and a colon:
label:
statements
The
break
and the
continue
statements are the only JavaScript statements that 
can "jump out of" a code block.
Syntax:
break
labelname
;
continue
labelname
;
The
continue
statement (with or without a label reference) can only be used to
skip one 
loop iteration
.
The
break
statement, without a label reference, can only be used to
jump out of a loop 
or a switch
.
With a label reference, the break statement can be used to
jump out 
of any code block
:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
list: {
text += cars[0] + "<br>";
text += cars[1] + "<br>";
break list;
text += cars[2] + "<br>";
text += cars[3] + "<br>";
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Make the loop stop when
i
is 5.
for (i = 0; i < 10; i++) {
  console.log(i);
  if (i == 5) {
;
  }
}
Submit Answer 
Start the Exercise
JavaScript
Object Prototypes
All JavaScript objects inherit properties and methods 
from a prototype.
In the previous chapter we learned how to use an
object constructor
:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
}
const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");
Try it Yourself 
We also learned that you can
not
add a new property to an existing object constructor:
Example
Person.nationality = "English";
Try it Yourself 
To add a new property to a constructor, you must add it to the 
constructor function:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
this.nationality = "English";
}
Try it Yourself 
Prototype Inheritance
All JavaScript objects inherit properties and methods from a prototype:
Date
objects inherit from
Date.prototype
Array
objects inherit from
Array.prototype
Person
objects inherit from
Person.prototype
The
Object.prototype
is on the top of the prototype inheritance chain:
Date
objects,
Array
objects, and
Person
objects inherit from
Object.prototype
.
Adding Properties and Methods to Objects
Sometimes you want to add new properties (or methods) to all existing objects of a given type.
Sometimes you want to add new properties (or methods) to an object 
constructor.
Using the
prototype
Property
The JavaScript
prototype
property allows you to add new properties to object 
constructors:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
The JavaScript
prototype
property also allows you to add new methods to objects 
constructors:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
}
Person.prototype.name = function() {
return this.firstName + " " + this.lastName;
};
Try it Yourself 
JavaScript History
JavaScript / ECMAScript
JavaScript
was invented by
Brendan Eich
in 1995.
It was developed for
Netscape 2
, and became the
ECMA-262
standard in 1997.
After Netscape handed JavaScript over to ECMA, the Mozilla foundation 
continued to develop JavaScript for the Firefox browser.
Mozilla's latest version was 1.8.5. (Identical to ES5).
Internet Explorer
(IE4) was the first browser to support ECMA-262 Edition 1 (ES1).
Year
ECMA
Browser
1995
JavaScript was invented by Brendan Eich
1996
Netscape 2 was released with JavaScript 1.0
1997
JavaScript became an ECMA standard (ECMA-262)
1997
ES1
ECMAScript 1 was released
1997
ES1
IE 4 was the first browser to support ES1
1998
ES2
ECMAScript 2 was released
1998
Netscape 42 was released with JavaScript 1.3
1999
ES2
IE 5 was the first browser to support ES2
1999
ES3
ECMAScript 3 was released
2000
ES3
IE 5.5 was the first browser to support ES3
2000
Netscape 62 was released with JavaScript 1.5
2000
Firefox 1 was released with JavaScript 1.5
2008
ES4
ECMAScript 4 was abandoned
2009
ES5
ECMAScript 5 was released
2011
ES5
IE 9 was the first browser to support ES5 *
2011
ES5
Firefox 4 was released with JavaScript 1.8.5
2012
ES5
Full support for ES5 in Safari 6
2012
ES5
Full support for ES5 in IE 10
2012
ES5
Full support for ES5 in Chrome 23
2013
ES5
Full support for ES5 in Firefox 21
2013
ES5
Full support for ES5 in Opera 15
2014
ES5
Full support for ES5 in all browsers
2015
ES6
ECMAScript 6 was released
2016
ES6
Full support for ES6 in Chrome 51
2016
ES6
Full support for ES6 in Opera 38
2016
ES6
Full support for ES6 in Safari 10
2017
ES6
Full support for ES6 in Firefox 54
2017
ES6
Full support for ES6 in Edge 15
2018
ES6
Full support for ES6 in all browsers **
The ECMA Technical Committee 39
In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization,
and a technical committee (TC39) was created to develop the language.
ECMA-262 Edition 1 was released in June 1997.
From ES4 to ES6
When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into
2 very different camps:
The ECMAScript 3.1 Camp
:
Microsoft and Yahoo who wanted an incremental upgrade from ES3.
The ECMAScript 4 Camp
:
Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.
August 13 2008, Brendan Eich wrote an
email
:
It's no secret that the JavaScript standards body, Ecma's Technical  
Committee 39, has been split for over a year, with some members  
favoring ES4, a major fourth edition to ECMA-262, and others  
advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  
specification. Now, I'm happy to report, the split is over.
The solution was to work together:
ECMAScript 4 was renamed to ES5
ES5 should be an incremental upgrade of ECMAScript 3.
Features of ECMAScript 4 should be picked up in later versions.
TC39 should develop a new major release, bigger in scope than ES5.
The planned new release (ES6) was codenamed "Harmony" (Because of the split it created?).
ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully
compliant by July 2013:
Chrome 23
IE10 / Edge
Firefox 21
Safari 6
Opera 15
Nov 2012
Sep 2012
May 2013
Jul 2012
Jul 2013
ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:
Chrome 51
Edge 14
Firefox 52
Safari 10
Opera 38
May 2016
Aug 2016
Mar 2017
Sep 2016
Jun 2016
JavaScript Object Protection
Object Protection Methods
// Prevents re-assignment
const car = {type:"Fiat", model:"500", color:"white"};
// Prevents adding object properties
Object.preventExtensions(object)
// Returns true if properties can be added to an object
Object.isExtensible(object)
// Prevents adding and deleting object properties
Object.seal(object)
// Returns true if object is sealed
Object.isSealed(object)
// Prevents any changes to an object
Object.freeze(object)
// Returns true if object is frozen
Object.isFrozen(object)
Using const
The most common way to protect an object from being changed
is by using the
const
keyword.
With
const
you can not re-assign the object,
but you can still change the value of a property, delete a property or create a new property.
JavaScript Object.preventExtensions()
The
Object.preventExtensions()
method prevents adding properties to an object.
Example
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Prevent Extensions
Object.preventExtensions(person);
// This will throw an error
person.nationality = "English";
Try it Yourself 
Since arrays are objects, arrays can be prevented from extensions too:
Example
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.preventExtensions(fruits);
// This will throw an error:
fruits.push("Kiwi");
Try it Yourself 
JavaScript Object.isExtensible()
You can use
Object.isExtensible()
to check if an object is extensible.
The
Object.isExtensible()
returns true if an object is extensible.
Examples
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Prevent Extensions
Object.preventExtensions(person);
// This will return false
let answer = Object.isExtensible(person);
Try it Yourself 
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Prevent Extensions
Object.preventExtensions(fruits);
// This will return false
let answer = Object.isExtensible(fruits);
Try it Yourself 
JavaScript Object.seal()
The
Object.seal()
method prevents additions or deletions of new properties.
The
Object.seal()
method makes existing properties non-configurable.
The
Object.isSealed()
method can be used to check if an object is sealed.
Example
"use strict"
// Create Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Seal Object
Object.seal(person)
// This will throw an error
delete person.age;
Try it Yourself 
Since arrays are objects, arrays can be sealed too:
Example
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.seal(fruits);
// This will throw an error:
fruits.push("Kiwi");
Try it Yourself 
JavaScript Object.isSealed()
The
Object.isSealed()
method can be used to check if an object is sealed.
The
Object.isSealed()
returns true if an object is sealed.
Examples
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Seal Object
Object.seal(person);
// This will return true
let answer = Object.isSealed(person);
Try it Yourself 
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Seal Array
Object.seal(fruits);
// This will return true
let answer = Object.isSealed(fruits);
Try it Yourself 
JavaScript Object.freeze()
The
Object.freeze()
method prevents any changes to an object.
Frozen objects are read-only.
No modification, addition or deletion of properties are allowed.
Example
"use strict"
// Create Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Freeze Object
Object.freeze(person)
// This will throw an error
person.age = 51;
Try it Yourself 
Since arrays are objects, arrays can be frozen too:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.freeze(fruits);
// This will trow an error:
fruits.push("Kiwi");
Try it Yourself 
JavaScript Object.isFrozen()
The
Object.isFrozen()
method can be used to check if an object is frozen.
The
Object.isFrozen()
returns true if an object is frozen.
Examples
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Freeze Object
Object.freeze(person);
// This will return true
let answer = Object.isFrozen(person);
Try it Yourself 
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.freeze(fruits);
// This will return true:
let answer = Object.isFrozen(fruits);
Try it Yourself 
JavaScript Object Accessors
JavaScript Accessors (Getters and Setters)
ECMAScript 5 (ES5 2009) introduced Getter and Setters.
Getters and setters allow you to define Object Accessors (Computed 
Properties).
JavaScript Getter (The get Keyword)
This example uses a
lang
property to
get
the value of the
language
property.
Example
// Create an object:
const person = {
firstName: "John",
lastName: "Doe",
language: "en",
get lang() {
return this.language;
}
};
// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.lang;
Try it Yourself 
JavaScript Setter (The set Keyword)
This example uses a
lang
property to
set
the value of the
language
property.
Example
const person = {
firstName: "John",
lastName: "Doe",
language: "",
set lang(lang) {
this.language = lang;
}
};
// Set an object 
property using a setter:
person.lang = "en";
// Display data from the object:
document.getElementById("demo").innerHTML = person.language;
Try it Yourself 
JavaScript Function or Getter?
What is the differences between these two examples?
Example 1
const person = {
firstName: "John",
lastName: "Doe",
fullName: function() {
return this.firstName + " " + 
this.lastName;
}
};
// Display data from the object using a method:
document.getElementById("demo").innerHTML = person.fullName();
Try it Yourself 
Example 2
const person = {
firstName: "John",
lastName: "Doe",
get fullName() {
return this.firstName + " " + 
this.lastName;
}
};
// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.fullName;
Try it Yourself 
Example 1 access fullName as a function: person.fullName().
Example 2 access fullName as a property: person.fullName.
The second example provides a simpler syntax.
Data Quality
JavaScript can secure better data quality when using getters and setters.
Using the
lang
property, in this example, returns the value 
of the
language
property in upper case:
Example
// Create an object:
const person = {
firstName: "John",
lastName: "Doe",
language: "en",
get lang() {
return this.language.toUpperCase();
}
};
// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.lang;
Try it Yourself 
Using the
lang
property, in this example, stores an upper case 
value in the
language
property:
Example
const person = {
firstName: "John",
lastName: "Doe",
language: "",
set lang(lang) {
this.language = lang.toUpperCase();
}
};
// Set an object 
property using a setter:
person.lang = "en";
// Display data from the object:
document.getElementById("demo").innerHTML = person.language;
Try it Yourself 
Why Using Getters and Setters?
It gives simpler syntax
It allows equal syntax for properties and methods
It can secure better data quality
It is useful for doing things behind-the-scenes
Object.defineProperty()
The
Object.defineProperty()
method can also be used to add Getters and 
Setters:
A Counter Example
// Define object
const obj = {counter : 0};
// Define setters and getters
Object.defineProperty(obj, "reset", {
get : function () {this.counter = 0;}
});
Object.defineProperty(obj, "increment", {
get : function () {this.counter++;}
});
Object.defineProperty(obj, "decrement", {
get : function () {this.counter--;}
});
Object.defineProperty(obj, "add", {
set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, "subtract", {
set : function (value) {this.counter -= value;}
});
// Play with the counter:
obj.reset;
obj.add = 5;
obj.subtract = 1;
obj.increment;
obj.decrement;
Try it Yourself 
JavaScript
Function Parameters
A JavaScript
function
does not perform any checking on 
parameter values (arguments).
Function Parameters and Arguments
Earlier in this tutorial, you learned that functions can have
parameters
:
function
functionName
(
parameter1, parameter2, parameter3
) {
//
code to be executed
}
Function
parameters
are the
names
listed in 
the function definition.
Function
arguments
are the real
values
passed to (and received by) the function.
Parameter Rules
JavaScript function definitions do not specify data types for 
parameters.
JavaScript functions do not perform type checking on the passed 
arguments.
JavaScript functions do not check the number of arguments received.
Default Parameters
If a function is called with
missing arguments
(less than declared), the missing values are set to
undefined
.
Sometimes this is acceptable, but sometimes it is better to assign a default 
value to the parameter:
Example
function myFunction(x, y) {
if (y === undefined) {
y = 2;
}
}
Try it Yourself 
Default Parameter Values
ES6
allows function parameters to have default values.
Example
If y is not passed or undefined, then y = 10.
function myFunction(x, y = 10) {
return x + y;
}
myFunction(5);
Try it Yourself 
Function Rest Parameter
The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:
Example
function sum(...args) {
let sum = 0;
for (let arg of args) sum += arg;
return sum;
}
let x = sum(4, 9, 16, 25, 29, 100, 66, 77);
Try it Yourself 
The Arguments Object
JavaScript functions have a built-in object called the arguments 
object.
The argument object contains an array of the arguments used when the function 
was called (invoked).
This way you can simply use a function to find (for instance) the highest 
value in a list of numbers:
Example
x = findMax(1, 123, 500, 115, 44, 88);
function findMax() {
let max = -Infinity;
for (let i = 0; i < arguments.length; i++) {
if (arguments[i] > max) {
max = arguments[i];
}
}
return max;
}
Try it Yourself 
Or create a function to sum all input values:
Example
x = sumAll(1, 123, 500, 115, 44, 88);
function sumAll() {
let sum = 0;
for (let i = 0; i < arguments.length; i++) {
sum += arguments[i];
}
return sum;
}
Try it Yourself 
Arguments are Passed by Value
The parameters, in a function call, are the function's arguments.
JavaScript arguments are passed by
value
: The function only 
gets to know the values, not the argument's locations.
If a function changes an argument's value, it does not change the parameter's 
original value.
Changes to arguments are not visible (reflected) outside the function.
Objects are Passed by Reference
In JavaScript, object references are values.
Because of this, objects will behave like they are passed by
reference:
If a function changes an object property, it changes the original value.
Changes to object properties are visible (reflected) outside the function.
JavaScript Function call()
Method Reuse
With the
call()
method, you can write a method that can be used on different 
objects.
All Functions are Methods
In JavaScript all functions are object methods.
If a function is not a method of a JavaScript object, it is a function of the 
global object (see previous chapter).
The example below creates an object with 3 
properties, firstName, lastName, fullName.
Example
const person = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this.firstName + " " + this.lastName;
}
}
// This will return "John Doe":
person.fullName();
Try it Yourself 
In the example above,
this
refers to the
person object
.
this.firstName
means the
firstName
property of
this
.
Same as:
this.firstName
means the
firstName
property of
person
.
What is
this
?
In JavaScript, the
this
keyword refers to an
object
.
The
this
keyword refers to
different objects
depending on how it is used:
In an object method,
this
refers to the
object
.
Alone,
this
refers to the
global object
.
In a function,
this
refers to the
global object
.
In a function, in strict mode,
this
is
undefined
.
In an event,
this
refers to the
element
that received the event.
Methods like
call()
,
apply()
,
and
bind()
can refer
this
to
any object
.
The JavaScript call() Method
The
call()
method is a predefined 
JavaScript method.
It can be used to invoke (call) a method 
with an owner object as an argument (parameter).
This example calls the
fullName
method of person, using it on
person1
:
Example
const person = {
fullName
: function() {
return this.firstName + " " + this.lastName;
}
}
const person1 = {
firstName:"John",
lastName: "Doe"
}
const person2 = {
firstName:"Mary",
lastName: "Doe"
}
// This will return "John Doe":
person.fullName.call(
person1
);
Try it Yourself 
This example calls the
fullName
method of person, using it on
person2
:
Example
const person = {
fullName
: function() {
return this.firstName + " " + this.lastName;
}
}
const person1 = {
firstName:"John",
lastName: "Doe"
}
const person2 = {
firstName:"Mary",
lastName: "Doe"
}
// This will return "Mary Doe"
person.fullName.call(
person2
);
Try it Yourself 
The call() Method with Arguments
The
call()
method can accept arguments:
Example
const person = {
fullName: function(city, country) {
return this.firstName + " " + this.lastName 
  + "," + city + "," + country;
}
}
const person1 = {
firstName:"John",
lastName: "Doe"
}
person.fullName.call(person1, "Oslo", "Norway");
Try it Yourself 
JavaScript Object Definition
Methods for Defining JavaScript Objects
Using an Object Literal
Using the
new
Keyword
Using an Object Constructor
Using
Object.assign()
Using
Object.create()
Using
Object.fromEntries()
JavaScript Object Literal
An object literal is a list of property
names:values
inside curly braces
{}
.
{firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Creating a JavaScript Object
Examples
Create an empty JavaScript object using
{}
, and add 4 properties:
// Create an Object
const person = {};
// Add Properties
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Try it Yourself 
Create an empty JavaScript object using
new Object()
, and add 4 properties:
// Create an Object
const person = new Object();
// Add Properties
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Try it Yourself 
Object Constructor Functions
Sometimes we need to create many objects of the same
type
.
To create an
object type
we use an
object constructor function
.
It is considered good practice to name constructor functions with an upper-case first letter.
Object Type Person
function Person(first, last, age, eye) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eye;
}
Try 
it yourself 
Now we can use
new Person()
to create many new Person objects:
Example
const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");
const mySister = new Person("Anna", "Rally", 18, "green");
const mySelf = new Person("Johnny", "Rally", 22, "green");
Try 
it yourself 
Property Default Values
A
value
given to a property will be a
default value
for all objects
created by the constructor:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.age = age;
this.eyeColor = eyecolor;
this.nationality = "English";
}
Try it Yourself 
JavaScript Object Methods
JavaScript Object Methods can be grouped into:
General Methods
Property Management Methods
Object Protection Methods
General Methods
// Copies properties from a source object to a target object
Object.assign(target, source)
// Creates an object from an existing object
Object.create(object)
// Returns an array of the key/value pairs of an object
Object.entries(object)
// Creates an object from a list of keys/values
Object.fromEntries()
// Returns an array of the keys of an object
Object.keys(object)
// Returns an array of the property values of an object
Object.values(object)
// Groups object elements according to a function
Object.groupBy(object, callback)
JavaScript General Object Methods
Property Management Methods
// Adding or changing an object property
Object.defineProperty(object, property, descriptor)
// Adding or changing object properties
Object.defineProperties(object, descriptors)
// Accessing a Property
Object.getOwnPropertyDescriptor(object, property)
// Accessing Properties
Object.getOwnPropertyDescriptors(object)
// Returns all properties as an array
Object.getOwnPropertyNames(object)
// Accessing the prototype
Object.getPrototypeOf(object)
JavaScript Property Management Methods
Object Protection Methods
// Prevents re-assignment
const car = {type:"Fiat", model:"500", color:"white"};
// Prevents adding object properties
Object.preventExtensions(object)
// Returns true if properties can be added to an object
Object.isExtensible(object)
// Prevents adding and deleting object properties
Object.seal(object)
// Returns true if object is sealed
Object.isSealed(object)
// Prevents any changes to an object
Object.freeze(object)
// Returns true if object is frozen
Object.isFrozen(object)
Using const
The most common way to protect an object from being changed
is by using the
const
keyword.
With
const
you can not re-assign the object,
but you can still change the value of a property, delete a property or create a new property.
JavaScript Object Protection Methods
JavaScript
Object Properties
Property Management Methods
// Adding or changing an object property
Object.defineProperty(object, property, descriptor)
// Adding or changing object properties
Object.defineProperties(object, descriptors)
// Accessing a Property
Object.getOwnPropertyDescriptor(object, property)
// Accessing Properties
Object.getOwnPropertyDescriptors(object)
// Returns all properties as an array
Object.getOwnPropertyNames(object)
// Accessing the prototype
Object.getPrototypeOf(object)
JavaScript Object.defineProperty()
The
Object.defineProperty()
method can be used to:
Adding a new property to an object
Changing property values
Changing property metadata
Changing object getters and setters
Syntax:
Object.defineProperty(
object, property, descriptor
)
Adding a new Property
This example adds a new property to an object:
Example
// Create an Object:
const person = {
firstName: "John",
lastName : 
  "Doe",
language : "EN"
};
// Add a Property
Object.defineProperty(person, "year", 
  {value:"2008"});
Try it Yourself 
Changing a Property Value
This example changes a property value:
Example
// Create an Object:
const person = {
firstName: "John",
lastName : "Doe",
language : "EN"
};
// Change a Property
Object.defineProperty(person, "language", 
  {value : "NO"});
Try it Yourself 
Property Attributes
All properties have a name. In addition they also have a value.
The value is one of the property's attributes.
Other attributes are: enumerable, configurable, and writable.
These attributes define how the property can be accessed (is it readable?, is 
it writable?)
In JavaScript, all attributes can be read, but only the value attribute can 
be changed (and only if the property is writable).
( ECMAScript 5 has methods for both getting and setting all property 
attributes)
Changing Meta Data
The following property meta data can be changed:
writable : true // Property value can be changed
enumerable : true  // Property can be enumerated
configurable : true // Property can be reconfigured
writable : false // Property value can not be changed
enumerable : false // Property can be not enumerated
configurable : false // Property can be not reconfigured
Getters and setters can also be changed:
// Defining a getter
get: function() { return language }
// Defining a setter
set: function(value) { language = value }
This example makes language read-only:
Object.defineProperty(person, "language", {writable:false});
This example makes language not enumerable:
Object.defineProperty(person, "language", {enumerable:false});
JavaScript getOwnPropertyNames()
The
Object.getOwnPropertyNames()
method can:
List object properties
Syntax
Object.getOwnPropertyNames(
object
)
List all Object Properties
This example gets all properties of an object:
Example
// Create an Object
const person = {
firstName: "John",
lastName : "Doe",
language : "EN"
};
// Get all Properties
Object.getOwnPropertyNames(person);
Try it Yourself 
Object.getOwnPropertyNames()
will also list properties that is not enumerable:
Example
// Create an Object
const person = {
firstName: "John",
lastName : "Doe",
language : "EN"
};
// Set the language Property not enumerable
Object.defineProperty(person, "language", {enumerable:false});
// Get all Properties
Object.getOwnPropertyNames(person);
Try it Yourself 
JavaScript Object.keys()
The
Object.keys()
method can:
List enumerable object properties
Syntax
Object.keys(
object
)
List Enumerable Object Properties
This example uses
Object.keys()
insted of
Object.getOwnPropertyNames()
:
Example
// Create an Object
const person = {
firstName: "John",
lastName : "Doe",
language : "EN"
};
// Change the "language" Property
Object.defineProperty(person, "language", {enumerable:false});
// Get all Enumerable Properties
Object.keys(person);
Try it Yourself 
Adding Getters and Setters
The
Object.defineProperty()
method can also be used to add Getters and 
Setters:
Example
//Create an object
const person = {firstName:"John", lastName:"Doe"};
// Define a getter
Object.defineProperty(person, "fullName", {
get: 
function () {return this.firstName + " " + this.lastName;}
});
Try it Yourself 
A Counter Example
Example
// Define object
const obj = {counter:0};
// Define setters
Object.defineProperty(obj, "reset", {
get : function () {this.counter = 0;}
});
Object.defineProperty(obj, "increment", {
get : function () {this.counter++;}
});
Object.defineProperty(obj, "decrement", {
get : function () {this.counter--;}
});
Object.defineProperty(obj, "add", {
set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, "subtract", {
set : function (i) {this.counter -= i;}
});
// Play with the counter:
obj.reset;
obj.add = 5;
obj.subtract = 1;
obj.increment;
obj.decrement;
Try it Yourself 
Prototype Properties
JavaScript objects inherit the properties of their prototype.
The
delete
keyword does not delete inherited properties, but if you delete a 
prototype property, it will affect all objects 
inherited from the prototype.
JavaScript
Function Invocation
The code inside a JavaScript
function
will execute when "something" invokes it.
Invoking a JavaScript Function
The code inside a function is not executed when the function is
defined
.
The code inside a function is executed when the function is
invoked
.
It is common to use the term "
call a function
" instead of "
invoke 
a function
".
It is also common to say "call upon a function", "start a function", or 
"execute a function".
In this tutorial, we will use
invoke
, because a 
JavaScript function can be invoked without being called.
Invoking a Function as a Function
Example
function myFunction(a, b) {
return a * b;
}
myFunction(10, 2); // 
  Will return 20
Try it Yourself 
The function above does not belong to any object. But in JavaScript there 
is always a default global object.
In HTML the default global object is the HTML page itself, so the function above "belongs" to the 
HTML page.
In a browser the page object is the browser window. The function above 
automatically becomes a window function.
myFunction() and window.myFunction() is the same function:
Example
function myFunction(a, b) {
return a * b;
}
window.myFunction(10, 2);  // Will also return 20
Try it Yourself 
What is
this
?
In JavaScript, the
this
keyword refers to an
object
.
The
this
keyword refers to
different objects
depending on how it is used:
In an object method,
this
refers to the
object
.
Alone,
this
refers to the
global object
.
In a function,
this
refers to the
global object
.
In a function, in strict mode,
this
is
undefined
.
In an event,
this
refers to the
element
that received the event.
Methods like
call()
,
apply()
,
and
bind()
can refer
this
to
any object
.
The Global Object
When a function is called without an owner object, the value of
this
becomes the global object.
In a web browser the global object is the browser window.
This example returns the window object as the value of
this
:
Example
let x = myFunction();
 // x will be the window object
function myFunction() {
return this;
}
Try it Yourself 
Invoking a Function as a Method
In JavaScript you can define functions as object methods.
The following example creates an object (
myObject
), with two 
properties (
firstName
and
lastName
), and a 
method (
fullName
):
Example
const myObject = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this.firstName + " " + this.lastName;
}
}
myObject.fullName(); // Will return "John Doe"
Try it Yourself 
The
fullName
method is a function. The function belongs to 
the object.
myObject
is the owner of the function.
The thing called
this
, is the object that 
"owns" the JavaScript code. In this case the value of
this
is
myObject
.
Test it! Change the
fullName
method to return the value of
this
:
Example
const myObject = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this;
}
}
// This will return [object Object] (the owner object)
myObject.fullName();
Try it Yourself 
Invoking a Function with a Function Constructor
If a function invocation is preceded with the
new
keyword, 
it is a constructor invocation.
It looks like you create a new function, but since JavaScript functions are 
objects you actually create a new object:
Example
// This is a function constructor:
function myFunction(arg1, arg2) {
this.firstName = arg1;
this.lastName = arg2;
}
// This creates a new object
const myObj = new myFunction("John", "Doe");
// This will return "John"
myObj.firstName;
Try it Yourself 
A constructor invocation creates a new object. The new object inherits the 
properties and methods from its constructor.
JavaScript
Hoisting
Hoisting is JavaScript's default behavior of moving declarations to the 
top.
JavaScript Declarations are Hoisted
In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.
Example 1
gives the same result as
Example 2
:
Example 1
x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x; 
// Display x in the element
var x; // Declare x
Try it Yourself 
Example 2
var x; // Declare x
x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x; 
// Display x in the element
Try it Yourself 
To understand this, you have to understand the term "hoisting".
Hoisting is JavaScript's default behavior of moving all declarations to the 
top of the current scope (to the top of the current script or the current function).
The let and const Keywords
Variables defined with
let
and
const
are hoisted to the top 
of the block, but not
initialized
.
Meaning: The block of code is aware of the 
variable, but it cannot be used until it has been declared.
Using a
let
variable before it is declared will result in a
ReferenceError
.
The variable is in a "temporal dead zone" from the start 
of the block until it is declared:
Example
This will result in a
ReferenceError
:
carName = "Volvo";
let carName;
Try it Yourself 
Using a
const
variable before it is declared, is a syntax error,
so the code will simply not run.
Example
This code will not run.
carName = "Volvo";
const carName;
Try it Yourself 
Read more about let and const in
JS Let / Const
.
JavaScript Initializations are Not Hoisted
JavaScript only hoists declarations, not initializations.
Example 1
does
not
give the same result as
Example 2
:
Example 1
var x = 5; // Initialize x
var y = 7; // Initialize y
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;// Display x and y
Try it Yourself 
Example 2
var x = 5; // Initialize x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;// Display x and y
var y = 7; // Initialize y
Try it Yourself 
Does it make sense that y is undefined in the last example?
This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.
Because of hoisting, y has been declared before it is used, but because 
initializations are not hoisted, the value of y is undefined.
Example 2 is the same as writing:
Example
var x = 5; // Initialize x
var y; // Declare y
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;// Display x and y
y = 7; // Assign 7 to y
Try it Yourself 
Declare Your Variables At the Top !
Hoisting is (to many developers) an unknown or overlooked behavior of  
JavaScript.
If a developer doesn't understand hoisting, programs may contain bugs (errors).
To avoid bugs, always declare all variables at the beginning of 
every scope.
Since this is how JavaScript interprets the 
code, it is always a good rule.
JavaScript Operator Precedence
Operator precedence describes the order in which operations are performed in 
an arithmetic expression.
Multiplication (
*
) and division (
/
) have higher
precedence
than 
addition (
+
) and subtraction (
-
).
As in traditional mathematics, multiplication is done first:
let x = 100 + 50 * 3;
Try it Yourself 
When using parentheses, operations inside the parentheses are computed first:
let x = (100 + 50) * 3;
Try it Yourself 
Operations with the same precedence (like * and /) are computed from left to right:
let x = 100 / 50 * 3;
Try it Yourself 
Operator Precedence Values
Expressions in parentheses are computed
before
the rest of the expression
Function are executed
before
the result is used in the rest of the expression
Val
Operator
Description
Example
18
( )
Expression Grouping
(100 + 50) * 3
17
.
Member Of
person.name
17
[]
Member Of
person["name"]
17
?.
Optional Chaining
ES2020
x ?. y
17
()
Function Call
myFunction()
17
new
New with Arguments
new Date("June 5,2022")
16
new
New without Arguments
new Date()
Increment Operators
Postfix increments are executed
before
prefix increments
15
++
Postfix Increment
i++
15
--
Postfix Decrement
i--
14
++
Prefix Increment
++i
14
--
Prefix Decrement
--i
NOT Operators
14
!
Logical NOT
!(x==y)
14
~
Bitwise NOT
~x
Unary Operators
14
+
Unary Plus
+x
14
-
Unary Minus
-x
14
typeof
Data Type
typeof x
14
void
Evaluate Void
void(0)
14
delete
Property Delete
delete myCar.color
Arithmetic Operators
Exponentiations are executed
before
multiplications
Multiplications and divisions are executed
before
additions and subtractions
13
**
Exponentiation
ES2016
10 ** 2
12
*
Multiplication
10 * 5
12
/
Division
10 / 5
12
%
Division Remainder
10 % 5
11
+
Addition
10 + 5
11
-
Subtraction
10 - 5
11
+
Concatenation
"John" + "Doe"
Shift Operators
10
<<
Shift Left
x << 2
10
>>
Shift Right (signed)
x >> 2
10
>>>
Shift Right (unsigned)
x >>> 2
Relational Operators
9
in
Property in Object
"PI" in Math
9
instanceof
Instance of Object
x instanceof Array
Comparison Operators
9
<
Less than
x < y
9
<=
Less than or equal
x <= y
9
>
Greater than
x > y
9
>=
Greater than or equal
x >= Array
8
==
Equal
x == y
8
===
Strict equal
x === y
8
!=
Unequal
x != y
8
!==
Strict unequal
x !== y
Bitwise Operators
7
&
Bitwise AND
x & y
6
^
Bitwise XOR
x ^ y
5
|
Bitwise OR
x | y
Logical Operators
4
&&
Logical AND
x && y
3
||
Logical OR
x || y
3
??
Nullish Coalescing
ES2020
x ?? y
Conditional (ternary) Operator
2
? :
Condition
? "yes" : "no"
Assignment Operators
Assignments are executed
after
other operations
2
=
Simple Assignment
x = y
2
:
Colon Assignment
x: 5
2
+=
Addition Assignment
x += y
2
-=
Subtraction Assignment
x -= y
2
*=
Multiplication Assignment
x *= y
2
**=
Exponentiation Assignment
x **= y
2
/=
Division Assignment
x /= y
2
%=
Remainder Assignment
x %= y
2
<<=
Left Shift Assignment
x <<= y
2
>>=
Right Shift Assignment
x >>= y
2
>>>=
Unsigned Right Shift
x >>>= y
2
&=
Bitwise AND Assignment
x &= y
2
|=
Bitwise OR Assignment
x |= y
2
^=
Bitwise XOR Assignment
x ^= y
2
&&=
Logical AND Assignment
x &&= y
2
||=
Logical OR Assignment
x ||= y
2
=>
Arrow
x => y
2
yield
Pause / Resume
yield x
2
yield*
Delegate
yield* x
2
...
Spread
... x
1
,
Comma
x , y
JavaScript
Data Types
JavaScript has 8 Datatypes
String
Number
Bigint
Boolean
Undefined
Null
Symbol
Object
The Object Datatype
The object data type can contain both
built-in objects
, and
user defined objects
:
Built-in object types can be:
objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.
Examples
// Numbers:
let length = 16;
let weight = 7.5;
// Strings:
let color = "Yellow";
let lastName = "Johnson";
// Booleans
let x = true;
let y = false;
// Object:
const person = {firstName:"John", lastName:"Doe"};
// Array object:
const cars = ["Saab", "Volvo", "BMW"];
// Date object:
const date = new Date("2022-03-25");
The Concept of Data Types
In programming, data types is an important concept.
To be able to operate on variables, it is important to know something about 
the type.
Without data types, a computer cannot safely solve this:
let x = 16 + "Volvo";
Does it make any sense to add "Volvo" to sixteen? Will it produce an 
error or will it produce a result?
JavaScript will treat the example above as:
let x = "16" + "Volvo";
Example
let x = 16 + "Volvo";
Try it Yourself 
Example
let x = "Volvo" + 16;
Try it Yourself 
JavaScript evaluates expressions from left to right. Different sequences can 
produce different results:
JavaScript:
let x = 16 + 4 + "Volvo";
Result:
20Volvo
Try it Yourself 
JavaScript:
let x = "Volvo" + 16 + 4;
Result:
Volvo164
Try it Yourself 
In the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo".
In the second example, since the first operand is a string, all operands are 
treated as strings.
JavaScript Types are Dynamic
JavaScript has dynamic types. This means that the same variable can be used 
to hold 
different data types:
Example
let x; // Now x is undefined
x = 5; // Now x is a Number
x = "John"; // Now x is a String
Try 
it Yourself 
JavaScript Strings
A string (or a text string) is a series of characters like "John Doe".
Strings are written with quotes. You can use single or double quotes:
Example
// Using double quotes:
let carName1 = "Volvo XC60";
// Using single quotes:
let carName2 = 'Volvo XC60';
Try 
it Yourself 
You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:
Example
// Single quote inside double quotes:
let answer1 = "It's alright";
// Single quotes inside double quotes:
let answer2 = "He is called 'Johnny'";
// Double quotes inside single quotes:
let answer3 = 'He is called "Johnny"';
Try 
it Yourself 
JavaScript Numbers
All JavaScript numbers are stored as decimal numbers (floating point).
Numbers can be written with, or without decimals:
Example
// With decimals:
let x1 = 34.00;
// Without decimals:
let x2 = 34;
Try 
it Yourself 
Exponential Notation
Extra large or extra small numbers can be written with scientific 
(exponential) notation:
Example
let y = 123e5;// 12300000
let z = 123e-5;// 0.00123
Try 
it Yourself 
JavaScript BigInt
All JavaScript numbers are stored in a 64-bit floating-point format.
JavaScript BigInt is a new datatype (
ES2020
) that can be used to store integer values that are too big to be represented
by a normal JavaScript Number.
Example
let x = BigInt("123456789012345678901234567890");
Try 
it Yourself 
JavaScript Booleans
Booleans can only have two values:
true
or
false
.
Example
let x = 5;
let y = 5;
let z = 6;
(x == y) 
  // Returns true
(x == z) // Returns 
  false
Try it Yourself 
Booleans are often used in conditional testing.
JavaScript Arrays
JavaScript arrays are written with square brackets.
Array items are separated by commas.
The following code declares (creates) an array called
cars
, containing three 
items (car names):
Example
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
Array indexes are zero-based, which means the first item is [0], second is 
[1], and so on.
JavaScript Objects
JavaScript objects are written with curly braces
{}
.
Object 
properties are written as name:value pairs, separated by commas.
Example
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Try it Yourself 
The object (person) in the example above has 4 properties: firstName, 
lastName, age, and eyeColor.
The typeof Operator
You can use the JavaScript
typeof
operator to find the type 
of a JavaScript variable.
The
typeof
operator returns the type of a variable or an expression:
Example
typeof "" // Returns 
 "string"
typeof "John"// Returns 
 "string"
typeof "John Doe"// Returns 
 "string"
Try it Yourself 
Example
typeof 0 // Returns 
 "number"
typeof 314 // Returns 
 "number"
typeof 3.14 // Returns 
 "number"
typeof (3) // Returns 
 "number"
typeof (3 + 4) // Returns 
 "number"
Try it Yourself 
Undefined
In JavaScript, a variable without a value, has the value
undefined
. 
The type is also
undefined
.
Example
let car; // Value is undefined, 
    type is undefined
Try it Yourself 
Any variable can be emptied, by setting the value to
undefined
. 
The type will also be
undefined
.
Example
car = undefined; // Value is undefined, 
    type is undefined
Try it Yourself 
Empty Values
An empty value has nothing to do with
undefined
.
An empty string has both a legal value and a type.
Example
let car = ""; // 
    The value is 
    "", the typeof is "string"
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use comments to describe the correct data type of the following variables:
let length = 16;            //
let lastName = "Johnson";   //
const x = {
  firstName: "John",
  lastName: "Doe"
};                          //
Submit Answer 
Start the Exercise
JavaScript For Of
The For Of Loop
The JavaScript
for of
statement loops 
through the values of an iterable object.
It lets you loop over iterable data structures 
such as Arrays, Strings, Maps, NodeLists, and more:
Syntax
for (variable of iterable) {
//
code block to be executed
}
variable
- For every iteration the value of the next property is 
assigned to the variable.
Variable
can be declared with
const
,
let
, or
var
.
iterable
- An object that has iterable properties.
Browser Support
For/of
was added to JavaScript in 2015 (
ES6
)
Safari 7 was the first browser to support for of:
Chrome 38
Edge 12
Firefox 51
Safari 7
Opera 25
Oct 2014
Jul 2015
Oct 2016
Oct 2013
Oct 2014
For/of
is not supported in Internet Explorer.
Looping over an Array
Example
const cars = ["BMW", "Volvo", "Mini"];
let text = "";
for (let x of cars) {
text += x;
}
Try it Yourself 
Looping over a String
Example
let language = "JavaScript";
let text = "";
for (let x of language) {
text += x;
}
Try it Yourself 
The While Loop
The
while
loop and the
do/while
loop are explained in the next chapter.
JavaScript Sets
A JavaScript Set is a collection of unique values.
Each value can only occur once in a Set.
The values can be of any type, primitive values or objects.
How to Create a Set
You can create a JavaScript Set by:
Passing an array to
new Set()
Create an empty set and use
add()
to add values
The new Set() Method
Pass an array to the
new Set()
constructor:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
Try it Yourself 
Create a Set and add values:
Example
// Create a Set
const letters = new Set();
// Add Values to the Set
letters.add("a");
letters.add("b");
letters.add("c");
Try it Yourself 
Create a Set and add variables:
Example
// Create a Set
const letters = new Set();
// Create Variables
const a = "a";
const b = "b";
const c = "c";
// Add Variables to the Set
letters.add(a);
letters.add(b);
letters.add(c);
Try it Yourself 
The add() Method
Example
letters.add("d");
letters.add("e");
Try it Yourself 
If you add equal elements, only the first will be saved:
Example
letters.add("a");
letters.add("b");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
Try it Yourself 
Listing the Elements
You can list all Set elements (values) with a
for..of
loop:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Elements
let text = "";
for (const x of letters) {
text += x;
}
Try it Yourself 
Sets are Objects
typeof
returns object:
typeof letters;// Returns object
Try it Yourself 
instanceof Set
returns true:
letters instanceof Set;// Returns true
Try it Yourself 
Browser Support
Set
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Set
is not supported in Internet Explorer.
JavaScript
Use Strict
"use strict";
Defines that 
JavaScript code should be executed in 
"strict mode".
The "use strict" Directive
The
"use strict"
directive was new in ECMAScript version 5.
It is not a statement, but a literal expression, ignored by earlier versions 
of JavaScript.
The purpose of
"use strict"
is to indicate that the code should be executed in "strict mode".
With strict mode, you can not, for example, use undeclared variables.
All modern browsers support "use strict" except Internet Explorer 9 and lower:
Directive
"use strict"
13.0
10.0
4.0
6.0
12.1
The numbers in the table specify the first browser version that fully supports the directive.
Declaring Strict Mode
Strict mode is declared by adding
"use strict";
to the beginning of a 
script or a function.
Declared at the beginning of a script, it has global scope (all code 
in the script will execute in strict mode):
Example
"use strict";
x = 3.14; // This will cause an error 
 because x is not declared
Try it Yourself 
Example
"use strict";
myFunction();
function myFunction() {
y = 3.14; // This will also cause an error 
 because y is not declared
}
Try it Yourself 
Declared inside a function, it has local scope (only the code inside the function is 
in strict mode):
x = 3.14; // This will not cause an error.
myFunction();
function 
 myFunction() {
"use strict";
y = 3.14; // This will cause an error
}
Try it Yourself 
The "use strict"; Syntax
The syntax, for declaring strict mode, was designed to be compatible with 
older versions of JavaScript.
Compiling a numeric literal (4 + 5;) or a string literal ("John Doe";) in a 
JavaScript program has no side effects. It simply compiles to a non existing 
variable and dies.
So
"use strict";
only matters to new compilers that "understand" the meaning 
of it.
Why Strict Mode?
Strict mode makes it easier to write "secure" JavaScript.
Strict mode changes previously accepted "bad syntax" into real errors.
As an example, in normal JavaScript, mistyping a variable name creates a new 
global variable. In strict mode, this will throw an error, making it impossible 
to accidentally create a global variable.
In normal JavaScript, a developer will not receive any error feedback 
assigning values to non-writable properties.
In strict mode, any assignment to a non-writable property, a getter-only 
property, a non-existing property, a non-existing variable, or a non-existing 
object, will throw an error.
Not Allowed in Strict Mode
Using a variable, without declaring it, is not allowed:
"use strict";
x = 3.14; // This will cause an error
Try it Yourself 
Using an object, without declaring it, is not allowed:
"use strict";
x = {p1:10, p2:20}; // This will cause an error
Try it Yourself 
Deleting a variable (or object) is not allowed.
"use strict";
let x = 3.14;
delete x;  // This 
will cause an error
Try it Yourself 
Deleting a function is not allowed.
"use strict";
function x(p1, p2) {};
delete x; 
 // This will cause an error
Try it Yourself 
Duplicating a parameter name is not allowed:
"use strict";
function x(p1, p1) {}; // This will cause an error
Try it Yourself 
Octal numeric literals are not allowed:
"use strict";
let x = 010; // This 
will cause an error
Try it Yourself 
Octal escape characters are not allowed:
"use strict";
let x = "\010"; // This will cause an error
Try it Yourself 
Writing to a read-only property is not allowed:
"use strict";
const obj = {};
Object.defineProperty(obj, "x", {value:0, writable:false});
obj.x = 3.14;  // This 
will cause an error
Try it Yourself 
Writing to a get-only property is not allowed:
"use strict";
const obj = {get x() 
{return 0} };
obj.x = 3.14; // This 
will cause an error
Try it Yourself 
Deleting an undeletable property is not allowed:
"use strict";
delete Object.prototype; // This will cause an error
Try it Yourself 
The word
eval
cannot be used as a variable:
"use strict";
let eval = 3.14; // This will cause an error
Try it Yourself 
The word
arguments
cannot be used as a variable:
"use strict";
let arguments = 3.14; // This will cause an error
Try it Yourself 
The
with
statement is not allowed:
"use strict";
with (Math){x = cos(2)}; // This will cause an error
Try it Yourself 
For security reasons,
eval()
is not allowed to create  
variables in the scope from which it was called.
In strict mode, a variable can not be used before it is declared:
"use strict";
eval ("x = 2");
alert (x); // This 
will cause an error
Try it Yourself 
In strict mode, eval() can not declare a variable using the var keyword:
"use strict";
eval ("var x = 2");
alert (x);// This 
will cause an error
Try it Yourself 
eval() can not declare a variable using the let keyword:
eval ("let x = 2");
alert (x); // This 
will cause an error
Try it Yourself 
The
this
keyword in functions behaves 
differently in strict mode.
The
this
keyword refers to the object that 
called the function.
If the object is not specified, functions in strict mode 
will return
undefined
and functions in normal 
mode will return the global object (window):
"use strict";
function myFunction() {
alert(this); // will alert "undefined"
}
myFunction();
Try it Yourself 
Future Proof!
Keywords reserved for future JavaScript versions can NOT be used as variable 
names in strict mode.
These are:
implements
interface
let
package
private
protected
public
static
yield
"use strict";
let public = 1500; // This will cause an error
Try it Yourself 
JavaScript Let
The
let
keyword was introduced in
ES6 (2015)
Variables declared with
let
have
Block Scope
Variables declared with
let
must be
Declared
before use
Variables declared with
let
cannot be
Redeclared
in the same scope
Block Scope
Before ES6 (2015), JavaScript did not have
Block Scope
.
JavaScript had
Global Scope
and
Function Scope
.
ES6 introduced the two new JavaScript keywords:
let
and
const
.
These two keywords provided
Block Scope
in JavaScript:
Example
Variables declared inside a { } block cannot be accessed 
from outside the block:
{
let x = 2;
}
// x can NOT be used here
Global Scope
Variables declared with the
var
always have
Global Scope
.
Variables declared with the
var
keyword can NOT have block scope:
Example
Variables declared with
var
inside a { } block can be accessed from 
outside the block:
{
var x = 2;
}
// x CAN be used here
Cannot be Redeclared
Variables defined with
let
can not
be redeclared.
You can not accidentally redeclare a variable declared with
let
.
With
let
you
can not
do this:
let x = "John Doe";
let x = 0;
Variables defined with
var
can
be redeclared.
With
var
you
can
do this:
var x = "John Doe";
var x = 0;
Redeclaring Variables
Redeclaring a variable using the
var
keyword can impose problems.
Redeclaring a variable inside a block will also redeclare the variable 
outside the block:
Example
var x = 10;
// Here x is 10
{
var x = 2;
// Here x is 2
}
// Here x is 2
Try it Yourself 
Redeclaring a variable using the
let
keyword can solve this problem.
Redeclaring a variable inside a block will not redeclare the variable outside 
the block:
Example
let x = 10;
// Here x is 10
{
let x = 2;
// Here x is 2
}
// Here x is 10
Try it Yourself 
Difference Between var, let and const
Scope
Redeclare
Reassign
Hoisted
Binds this
var
No
Yes
Yes
Yes
Yes
let
Yes
No
Yes
No
No
const
Yes
No
No
No
No
What is Good?
let
and
const
have
block scope
.
let
and
const
can not be
redeclared
.
let
and
const
must be
declared
before use.
let
and
const
does
not bind
to
this
.
let
and
const
are
not hoisted
.
What is Not Good?
var
does not have to be declared.
var
is hoisted.
var
binds to this.
Browser Support
The
let
and
const
keywords are
not supported in Internet Explorer 11 or earlier.
The following table defines the first browser versions with full support:
Chrome 49
Edge 12
Firefox 36
Safari 11
Opera 36
Mar, 2016
Jul, 2015
Jan, 2015
Sep, 2017
Mar, 2016
Redeclaring
Redeclaring a JavaScript variable with
var
is allowed 
anywhere in a program:
Example
var x = 2;
// Now x is 2
var x = 3;
// Now x is 3
Try it Yourself 
With
let
, redeclaring a variable in the same block is NOT allowed:
Example
var x = 2;// Allowed
let x = 3;// Not allowed
{
let x = 2;// Allowed
let x = 3;// Not allowed
}
{
let x = 2;// Allowed
var x = 3;// Not allowed
}
Redeclaring a variable with
let
, in another block, IS allowed:
Example
let x = 2;// Allowed
{
let x = 3;// Allowed
}
{
let x = 4;// Allowed
}
Try it Yourself 
Let Hoisting
Variables defined with
var
are
hoisted
to the top 
and can be initialized at any time.
Meaning: You can use the variable before it is declared:
Example
This is OK:
carName = "Volvo";
var carName;
Try it Yourself 
If you want to learn more about hoisting, study the chapter
JavaScript Hoisting
.
Variables defined with
let
are also hoisted to the top 
of the block, but not initialized.
Meaning: Using a
let
variable before it is declared will result in a
ReferenceError
:
Example
carName = "Saab";
let carName = "Volvo";
Try it Yourself 
JavaScript Style Guide
Always use the same coding conventions for all your JavaScript 
projects.
JavaScript Coding Conventions
Coding conventions are
style guidelines for programming
. 
They typically cover:
Naming and declaration rules for variables and functions.
Rules for the use of white space, indentation, and comments.
Programming practices and principles.
Coding conventions
secure quality
:
Improve code readability
Make code maintenance easier
Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.
Variable Names
At W3schools we use
camelCase
for identifier names (variables and functions).
All names start with a
letter
.
At the bottom of this page, you will find a wider discussion about naming 
rules.
firstName = "John";
lastName = "Doe";
price = 19.90;
tax = 0.20;
fullPrice = price + (price * tax);
Spaces Around Operators
Always put spaces around operators ( = + - * / ), and after commas:
Examples:
let x = y + z;
const myArray = ["Volvo", "Saab", 
 "Fiat"];
Code Indentation
Always use 2 spaces for indentation of code blocks:
Functions:
function toCelsius(fahrenheit) {
return (5 / 9) * (fahrenheit - 32);
}
Statement Rules
General rules for simple statements:
Always end a simple statement with a semicolon.
Examples:
const cars = ["Volvo", "Saab", 
 "Fiat"];
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: 
 "blue"
};
General rules for complex (compound) statements:
Put the opening bracket at the end of the first line.
Use one space before the opening bracket.
Put the closing bracket on a new line, without leading spaces.
Do not end a complex statement with a semicolon.
Functions:
function toCelsius(fahrenheit) {
return (5 / 9) * (fahrenheit - 32);
}
Loops:
for (let i = 0; i < 5; i++) {
x += i;
}
Conditionals:
if (time < 20) {
greeting = "Good day";
} else {
greeting = "Good evening";
}
Object Rules
General rules for object definitions:
Place the opening bracket on the same line as the object name.
Use colon plus one space between each property and its value.
Use quotes around string values, not around numeric values.
Do not add a comma after the last property-value pair.
Place the closing bracket on a new line, without 
 leading spaces.
Always endan object definition with a semicolon.
Example
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: 
 "blue"
};
Short objects can be written compressed, on one line, using spaces only 
between properties, like this:
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Line Length < 80
For readability, avoid lines longer than 80 
characters.
If a JavaScript statement does not fit on one line, the best place to break 
it, is after an operator or a comma.
Example
document.getElementById("demo").innerHTML =
"Hello Dolly.";
Try it Yourself 
Naming Conventions
Always use the same naming convention for all your code. For example:
Variable and function names written as
camelCase
Global variables written in
UPPERCASE
(We don't, but it's 
quite common)
Constants (like PI) written in
UPPERCASE
Should you use
hyp-hens
,
camelCase
, or
under_scores
in variable names?
This is a question programmers often discuss. The answer depends on who you 
ask:
Hyphens in HTML and CSS:
HTML5 attributes can start with data- (data-quantity, data-price).
CSS uses hyphens in property-names (font-size).
Underscores:
Many programmers prefer to use underscores (date_of_birth), especially in SQL 
databases.
Underscores are often used in PHP documentation.
PascalCase:
PascalCase is often preferred by C programmers.
camelCase:
camelCase is used by JavaScript itself, by jQuery, and other JavaScript 
libraries.
Loading JavaScript in HTML
Use simple syntax for loading external scripts (the type attribute is not 
necessary):
<script src="myscript.js"></script>
Accessing HTML Elements
A consequence of using "untidy" HTML styles, might result in JavaScript errors.
These two JavaScript statements will produce different results:
const obj = getElementById("Demo")
const obj = getElementById("demo")
If possible, use the same naming convention (as JavaScript) in HTML.
Visit the HTML Style Guide
.
File Extensions
HTML files should have a
.html
extension (
.htm
is allowed).
CSS files should have a
.css
extension.
JavaScript files should have a
.js
extension.
Use Lower Case File Names
Most web servers (Apache, Unix) are case sensitive about file names:
london.jpg cannot be accessed as London.jpg.
Other web servers (Microsoft, IIS) are not case sensitive:
london.jpg can be accessed as London.jpg or london.jpg.
If you use a mix of upper and lower case, you have to be extremely 
consistent.
If you move from a case insensitive, to a case sensitive server, even small 
errors can break your web site.
To avoid these problems, always use lower case file names (if possible).
Performance
Coding conventions are not used by computers. Most rules have 
little impact on the execution of programs.
Indentation and extra spaces are not significant in small scripts.
For code in development, readability should be preferred. Larger production 
scripts should be minimized.
JavaScript
Switch
Statement
The
switch
statement is used to perform different actions based on different conditions.
The JavaScript Switch Statement
Use the
switch
statement to select one of many code blocks to be executed.
Syntax
switch(
expression
) {
case
x
:
// code block
break;
case
y
:
// code block
break;
default:
//
code block
}
This is how it works:
The switch expression is evaluated once.
The value of the expression is compared with the values of each case.
If there is a match, the associated block of code is executed.
If there is no match, the default code block is executed.
Example
The
getDay()
method returns the weekday as a number between 
 0 and 6.
(Sunday=0, Monday=1, Tuesday=2 ..)
This example uses the weekday number to calculate the weekday name:
switch (new Date().getDay()) {
case 0:
day = "Sunday";
break;
case 1:
day = "Monday";
break;
case 2:
day = "Tuesday";
break;
case 3:
day = "Wednesday";
break;
case 4:
day = "Thursday";
break;
case 5:
day = "Friday";
break;
case 6:
day = "Saturday";
}
The result of day will be:
Try it Yourself 
The break Keyword
When JavaScript reaches a
break
keyword, it breaks out of the switch block.
This will stop the execution inside the switch block.
It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.
The default Keyword
The
default
keyword specifies the code to run if there is no 
case match:
Example
The
getDay()
method returns the weekday as a number between 
 0 and 6.
If today is neither Saturday (6) nor Sunday (0), write a default message:
switch (new Date().getDay()) {
case 6:
text = "Today is Saturday";
break;
case 0:
text = "Today is Sunday";
break;
default:
text = "Looking forward to the Weekend";
}
The result of text will be:
Try it Yourself 
The
default
case does not have to be the last case in a switch 
block:
Example
switch (new Date().getDay()) {
default:
text = "Looking forward to the Weekend";
break;
case 6:
text = "Today is Saturday";
break;
case 0:
text = "Today is Sunday";
}
Try it Yourself 
Common Code Blocks
Sometimes you will want different 
switch cases to use the same 
code.
In this example case 4 and 5 share the same code block, and 0 and 6 share 
another code block:
Example
switch (new Date().getDay()) {
case 4:
case 5:
text = "Soon it is Weekend";
break;
case 0:
case 6:
text = "It is Weekend";
break;
default:
text = "Looking forward to the Weekend";
}
Try it Yourself 
Switching Details
If multiple cases matches a case value, the
first
case is selected.
If no matching cases are found, the program continues to the
default
label.
If no default label is found, the program continues to the statement(s)
after the switch
.
Strict Comparison
Switch cases use
strict
comparison (===).
The values must be of the same type to match.
A strict comparison can only be true if the operands are of the same type.
In this example there will be no match for x:
Example
let x = "0";
switch (x) {
case 0:
text = "Off";
break;
case 1:
text = "On";
break;
default:
text = "No value found";
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Create a
switch
statement that will alert "Hello" if
fruits
is "banana", and "Welcome" if
fruits
is "apple".
(fruits) {
"Banana":
    alert("Hello")
    break;
"Apple":
    alert("Welcome")
    break;    
}
Submit Answer 
Start the Exercise
Javascript ES6
New Features in ES6
The let keyword
The const keyword
Arrow Functions
The {a,b} = Operator
The [a,b] = Operator
The ... Operator
For/of
Map Objects
Set Objects
Classes
Promises
Symbol
Default Parameters
Function Rest Parameter
String.includes()
String.startsWith()
String.endsWith()
Array entries()
Array.from()
Array keys()
Array find()
Array findIndex()
Math.trunc
Math.sign
Math.cbrt
Math.log2
Math.log10
Number.EPSILON
Number.MIN_SAFE_INTEGER
Number.MAX_SAFE_INTEGER
Number.isInteger()
Number.isSafeInteger()
New Global Methods
JavaScript Modules
Browser Support for ES6 (2015)
ES6 is fully supported in all modern browsers since June 2017:
Chrome
51
Edge
15
Firefox
54
Safari
10
Opera
38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
ES6 is not supported in Internet Explorer.
JavaScript let
The
let
keyword allows you to declare a variable with 
block scope.
Example
var x = 10;
// Here x is 10
{
let x = 2;
// Here x is 2
}
// Here x is 10
Try it Yourself 
Read more about
let
in the chapter:
JavaScript Let
.
JavaScript const
The
const
keyword allows you to declare a constant (a 
JavaScript variable with a constant value).
Constants are similar to let variables, except that the value cannot be changed.
Example
var x = 10;
// Here x is 10
{
const x = 2;
// Here x is 2
}
// Here x is 10
Try it Yourself 
Read more about
const
in the chapter:
JavaScript Const
.
Arrow Functions
Arrow functions allows a short syntax for writing function expressions.
You don't need the
function
keyword, the
return
keyword, and the
curly brackets
.
Example
// ES5
var x = function(x, y) {
return x * y;
}
// ES6
const x = (x, y) => x * y;
Try it Yourself 
Arrow functions do not have their own
this
.
They are not well suited for defining
object methods
.
Arrow functions are not hoisted. They must be defined
before
they are used.
Using
const
is safer than using
var
, because a function expression is 
always a constant value.
You can only omit the
return
keyword and the curly brackets if the function is a single statement. 
Because of this, it might be a good habit to always keep them:
Example
const x = (x, y) => { return x * y };
Try it Yourself 
Learn more about Arrow Functions in the chapter:
JavaScript Arrow Function
.
Object Destructuring
Destructuring assignment makes it easy to assign array values and object properties to variables.
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Destructuring Assignment
let { firstName, age } = person;
Try it Yourself 
Array Destructuring
Destructuring assignment makes it easy to assign array values and object properties to variables.
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Destructuring Assignment
let [fruit1, fruit2] = fruits;
Try it Yourself 
The Spread (...) Operator
The ... operator expands an iterable (like an array) into more elements:
Example
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];
const year = [...q1, ...q2, ...q3, ...q4];
Try it Yourself 
The ... operator can be used to expand an iterable into more arguments for function calls:
Example
const numbers = [23,55,21,87,56];
let maxValue = Math.max(...numbers);
Try it Yourself 
The For/Of Loop
The JavaScript
for/of
statement loops 
through the values of an iterable objects.
for/of
lets you loop over data structures 
that are iterable such as Arrays, Strings, Maps, NodeLists, and more.
The
for/of
loop has the following syntax:
for (
variable
of
iterable
) {
//
code block to be executed
}
variable
- For every iteration the value of the next property is 
assigned to the variable.
Variable
can be declared with
const
,
let
, or
var
.
iterable
- An object that has iterable properties.
Looping over an Array
Example
const cars = ["BMW", "Volvo", "Mini"];
let text = "";
for (let x of cars) {
text += x + " ";
}
Try it Yourself 
Looping over a String
Example
let language = "JavaScript";
let text = "";
for (let x of language) {
text += x + " ";
}
Try it Yourself 
Learn more in the chapter:
JavaScript Loop For/In/Of
.
JavaScript Maps
Example
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
Try it Yourself 
Learn more about Map objects, and the difference between a Map and an Array, in the the chapter:
JavaScript Maps
.
JavaScript Sets
Example
// Create a Set
const letters = new Set();
// Add some values to the Set
letters.add("a");
letters.add("b");
letters.add("c");
Try it Yourself 
Learn more about Set objects in the the chapter:
JavaScript Sets
.
JavaScript Classes
JavaScript Classes are templates for JavaScript Objects.
Use the keyword
class
to create a class.
Always add a method named
constructor()
:
Syntax
class ClassName {
constructor() { ... }
}
Example
class Car {
constructor(name, year) {
this.name = name;
this.year = year;
}
}
The example above creates a class named "Car".
The class has two initial properties: "name" and "year".
Using a Class
When you have a class, you can use the class to create objects:
Example
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
Try it Yourself 
Learn more about classes in the the chapter:
JavaScript Classes
.
JavaScript Promises
A Promise is a JavaScript object that links "Producing Code" and "Consuming Code".
"Producing Code" can take some time and "Consuming Code" must wait for the result.
Promise Syntax
const myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)
myResolve(); // when successful
myReject(); // when error
});
// "Consuming Code" (Must wait for a fulfilled Promise).
myPromise.then(
function(value) { /* code if successful */ },
function(error) { /* code if some error */ }
);
Example Using a Promise
const myPromise = new Promise(function(myResolve, myReject) {
setTimeout(function() { myResolve("I love You !!"); }, 3000);
});
myPromise.then(function(value) {
document.getElementById("demo").innerHTML = value;
});
Try it Yourself 
Learn more about Promises in the the chapter:
JavaScript Promises
.
The Symbol Type
A JavaScript Symbol is a primitive data type just like Number, String, or Boolean.
It represents a unique "hidden" identifier that no other code can accidentally access.
For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,
they could mix each others values.
Using Symbol() to create a unique identifiers, solves this problem:
Example
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
let id = Symbol('id');
person[id] = 140353;
// Now person[id] = 140353
// but person.id is still undefined
Try it Yourself 
Default Parameter Values
ES6 allows function parameters to have default values.
Example
function myFunction(x, y = 10) {
// y is 10 if not passed or undefined
return x + y;
}
myFunction(5); // will return 15
Try it Yourself 
Function Rest Parameter
The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:
Example
function sum(...args) {
let sum = 0;
for (let arg of args) sum += arg;
return sum;
}
let x = sum(4, 9, 16, 25, 29, 100, 66, 77);
Try it Yourself 
String.includes()
The
includes()
method returns
true
if a string contains a specified value,
otherwise
false
:
Example
let text = "Hello world, welcome to the universe.";
text.includes("world")// Returns true
Try it Yourself 
String.startsWith()
The
startsWith()
method returns
true
if a string begins with a specified value, otherwise
false
:
Example
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello")// Returns true
Try it Yourself 
String.endsWith()
The
endsWith()
method returns
true
if a string ends with a specified value, otherwise
false
:
Example
var text = "John Doe";
text.endsWith("Doe")// Returns true
Try it Yourself 
Array entries()
Example
Create an Array Iterator, and then iterate over the key/value pairs:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();
for (let x of f) {
document.getElementById("demo").innerHTML += x;
}
Try it Yourself 
The
entries()
method returns an Array Iterator object with key/value pairs:
[0, "Banana"]
[1, "Orange"]
[2, "Apple"]
[3, "Mango"]
The
entries()
method does not change the original array.
Array.from()
The
Array.from()
method returns an Array object from any object with a length 
property or any iterable object.
Example
Create an Array from a String:
Array.from("ABCDEFG")// Returns [A,B,C,D,E,F,G]
Try it Yourself 
Array keys()
The
keys()
method returns an Array Iterator object with the keys of an array.
Example
Create an Array Iterator object, containing the keys of the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();
let text = "";
for (let x of keys) {
text += x + "<br>";
}
Try it Yourself 
Array find()
The
find()
method returns the value of the first array element that passes a 
test function.
This example finds (returns the value of ) the first element that is larger 
than 18:
Example
const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.find(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
Array findIndex()
The
findIndex()
method returns the index of the first array element that 
passes a test function.
This example finds the index of the first element that is larger than 18:
Example
const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.findIndex(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
New Math Methods
ES6 added the following methods to the Math object:
Math.trunc()
Math.sign()
Math.cbrt()
Math.log2()
Math.log10()
The Math.trunc() Method
Math.trunc(x)
returns the integer part of x:
Example
Math.trunc(4.9);// returns 4
Math.trunc(4.7);// returns 4
Math.trunc(4.4);// returns 4
Math.trunc(4.2);// returns 4
Math.trunc(-4.2);// returns -4
Try it Yourself 
The Math.sign() Method
Math.sign(x)
returns if x is negative, null or positive:
Example
Math.sign(-4);// returns -1
Math.sign(0);// returns 0
Math.sign(4);// returns 1
Try it Yourself 
The Math.cbrt() Method
Math.cbrt(x)
returns the cube root of x:
Example
Math.cbrt(8);// returns 2
Math.cbrt(64);// returns 4
Math.cbrt(125);// returns 5
Try it Yourself 
The Math.log2() Method
Math.log2(x)
returns the base 2 logarithm of x:
Example
Math.log2(2);// returns 1
Try it Yourself 
The Math.log10() Method
Math.log10(x)
returns the base 10 logarithm of x:
Example
Math.log10(10);// returns 1
Try it Yourself 
New Number Properties
ES6 added the following properties to the Number object:
EPSILON
MIN_SAFE_INTEGER
MAX_SAFE_INTEGER
EPSILON Example
let x = Number.EPSILON;
Try it Yourself 
MIN_SAFE_INTEGER Example
let x = Number.MIN_SAFE_INTEGER;
Try it Yourself 
MAX_SAFE_INTEGER Example
let x = Number.MAX_SAFE_INTEGER;
Try it Yourself 
The Number.isInteger() Method
The
Number.isInteger()
method returns
true
if the argument is an integer.
Example
Number.isInteger(10); // returns true
Number.isInteger(10.5); // returns false
Try it Yourself 
The Number.isSafeInteger() Method
A safe integer is an integer that can be exactly represented as a double precision number.
The
Number.isSafeInteger()
method returns
true
if the argument is a safe integer.
Example
Number.isSafeInteger(10);// returns true
Number.isSafeInteger(12345678901234567890); // returns false
Try it Yourself 
New Global Methods
ES6 added 2 new global number methods:
isFinite()
isNaN()
The isFinite() Method
The global
isFinite()
method returns
false
if the argument is
Infinity
or
NaN
.
Otherwise it returns
true
:
Example
isFinite(10/0); // returns false
isFinite(10/1); // returns true
Try it Yourself 
The isNaN() Method
The global
isNaN()
method returns
true
if the argument is
NaN
. Otherwise it returns
false
:
Example
isNaN("Hello"); // returns true
Try it Yourself 
Modules
Modules are imported in two different ways:
Import from named exports
Import named exports from the file person.js:
import { name, age } from "./person.js";
Try it Yourself 
Import from default exports
Import a default export from the file message.js:
import message from "./message.js";
Try it Yourself 
Learn more about Modules in:
JavaScript Modules
.
JavaScript
Object Properties
An Object is an Unordered Collection of Properties
Properties are the most important part of JavaScript objects.
Properties can be changed, added, deleted, and some are read only.
Accessing JavaScript Properties
The syntax for accessing the property of an object is:
//
objectName.property
let age = person.age;
or
//
objectName
["
property
"]
let age = person["age"];
or
//
objectName
[
expression
]
let age = person[x];
Examples
person.firstname + " is " + person.age + " years old.";
Try it Yourself 
person["firstname"] + " is " + person["age"] + " years old.";
Try it Yourself 
let x = "firstname";
let y = "age";
person[x] + " is " + person[y] + " years old.";
Try it Yourself 
Adding New Properties
You can add new properties to an existing object by simply giving it a value:
Example
person.nationality = "English";
Try it Yourself 
Deleting Properties
The
delete
keyword deletes a property from an object:
Example
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
delete person.age;
Try it Yourself 
or delete person["age"];
Example
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
delete person["age"];
Try it Yourself 
Nested Objects
Property values in an object can be other objects:
Example
myObj = {
name:"John",
age:30,
myCars: {
car1:"Ford",
car2:"BMW",
car3:"Fiat"
}
}
You can access nested objects using the dot notation or the bracket notation:
Examples
myObj.myCars.car2;
Try it Yourself 
myObj.myCars["car2"];
Try it Yourself 
myObj["myCars"]["car2"];
Try it Yourself 
let p1 = "myCars";
let p2 = "car2";
myObj[p1][p2];
Try it Yourself 
JavaScript Template Strings
String Templates
Template Strings
Template Literals
Beloved child has many names
Back-Tics Syntax
Template Strings
use back-ticks (``) rather than the quotes ("") to define a string:
Example
let text = `Hello World!`;
Try it Yourself 
Quotes Inside Strings
Template Strings
allow both single and double quotes inside a string:
Example
let text = `He's often called "Johnny"`;
Try it Yourself 
Multiline Strings
Template Strings
allow multiline strings:
Example
let text =
`The quick
brown fox
jumps over
the lazy dog`;
Try it Yourself 
Interpolation
Template String
provide an easy way to interpolate variables and expressions into strings.
The method is called string interpolation.
The syntax is:
${...}
Variable Substitutions
Template Strings
allow variables in strings:
Example
let firstName = "John";
let lastName = "Doe";
let text = `Welcome ${firstName}, ${lastName}!`;
Try it Yourself 
Expression Substitution
Template Strings
allow expressions in strings:
Example
let price = 10;
let VAT = 0.25;
let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;
Try it Yourself 
HTML Templates
Example
let header = "Template Strings";
let tags = ["template strings", "javascript", "es6"];
let html = `<h2>${header}</h2><ul>`;
for (const x of tags) {
html += `<li>${x}</li>`;
}
html += `</ul>`;
Try it Yourself 
Browser Support
Template Strings
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Template Strings
is not supported in Internet Explorer.
JavaScript
Set Date Methods
Set Date methods let you set date values (years, 
months, days, hours, minutes, seconds, milliseconds) for a Date Object.
Set Date Methods
Set Date methods are used for setting a part of a date:
Method
Description
setDate()
Set the day as a number (1-31)
setFullYear()
Set the year (optionally month and day)
setHours()
Set the hour (0-23)
setMilliseconds()
Set the milliseconds (0-999)
setMinutes()
Set the minutes (0-59)
setMonth()
Set the month (0-11)
setSeconds()
Set the seconds (0-59)
setTime()
Set the time (milliseconds since January 1, 1970)
The setFullYear() Method
The
setFullYear()
method sets the year of a date object. In this example to 2020:
Example
const d = new Date();
d.setFullYear(2020);
Try it Yourself 
The
setFullYear()
method can
optionally
set month and day:
Example
const d = new Date();
d.setFullYear(2020, 11, 3);
Try it Yourself 
The setMonth() Method
The
setMonth()
method sets the month of a date object (0-11):
Example
const d = new Date();
d.setMonth(11);
Try it Yourself 
The setDate() Method
The
setDate()
method sets the day of a date object (1-31):
Example
const d = new Date();
d.setDate(15);
Try it Yourself 
The
setDate()
method can also be used to
add days
to a date:
Example
const d = new Date();
d.setDate(d.getDate() + 50);
Try it Yourself 
The setHours() Method
The
setHours()
method sets the hours of a date object (0-23):
Example
const d = new Date();
d.setHours(22);
Try it Yourself 
The setMinutes() Method
The
setMinutes()
method sets the minutes of a date object (0-59):
Example
const d = new Date();
d.setMinutes(30);
Try it Yourself 
The setSeconds() Method
The
setSeconds()
method sets the seconds of a date object (0-59):
Example
const d = new Date();
d.setSeconds(30);
Try it Yourself 
Compare Dates
Dates can easily be compared.
The following example compares today's date with January 14, 2100:
Example
let text = "";
const today = new Date();
const someday = new Date();
someday.setFullYear(2100, 0, 14);
if (someday > today) {
text = "Today is before January 14, 2100.";
} else {
text = "Today is after January 14, 2100.";
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use the correct Date method to set the year of a date object to 2020.
const d = new Date();
d.
;
Submit Answer 
Start the Exercise
JavaScript
Number Methods
JavaScript Number Methods
These
number methods
can be used on all JavaScript numbers:
Method
Description
toString()
Returns a number as a string
toExponential()
Returns a number written in exponential notation
toFixed()
Returns a number written with a number of decimals
toPrecision()
Returns a number written with a specified length
valueOf()
Returns a number as a number
The toString() Method
The
toString()
method returns a number as a string.
All number methods can be used on any type of numbers (literals, variables, or expressions):
Example
let x = 123;
x.toString();
(123).toString();
(100 + 23).toString();
Try it Yourself 
The toExponential() Method
toExponential()
returns a string, with a number rounded and written using exponential notation.
A parameter defines the number of characters behind the decimal point:
Example
let x = 9.656;
x.toExponential(2);
x.toExponential(4);
x.toExponential(6);
Try 
it Yourself 
The parameter is optional. If you don't specify it, JavaScript will not round the number.
The toFixed() Method
toFixed()
returns a string, with the number 
written with a specified number of 
decimals:
Example
let x = 9.656;
x.toFixed(0);
x.toFixed(2);
x.toFixed(4);
x.toFixed(6);
Try 
it Yourself 
The toPrecision() Method
toPrecision()
returns a string, with a number written with a 
specified length:
Example
let x = 9.656;
x.toPrecision();
x.toPrecision(2);
x.toPrecision(4);
x.toPrecision(6);
Try it Yourself 
The valueOf() Method
valueOf()
returns a number as a number.
Example
let x = 123;
x.valueOf();
(123).valueOf();
(100 + 23).valueOf();
Try it Yourself 
In JavaScript, a number can be a primitive value (typeof = number) or an 
object (typeof = object).
The
valueOf()
method is used internally in JavaScript to convert Number 
objects to primitive values.
There is no reason to use it in your code.
Converting Variables to Numbers
There are 3 JavaScript methods that can be used 
to convert a variable to a number:
Method
Description
Number()
Returns a number converted from its argument.
parseFloat()
Parses its argument and returns a floating point number
parseInt()
Parses its argument and returns a whole number
The Number() Method
The
Number()
method can be used to convert JavaScript variables to numbers:
Example
Number(true);
Number(false);
Number("10");
Number(" 10");
Number("10 ");
Number(" 10 ");
Number("10.33");
Number("10,33");
Number("10 33");
Number("John");
Try it Yourself 
The Number() Method Used on Dates
Number()
can also convert a date to a number.
Example
Number(new Date("1970-01-01"))
Try it Yourself 
The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:
Example
Number(new Date("1970-01-02"))
Try it Yourself 
Example
Number(new Date("2017-09-30"))
Try it Yourself 
The parseInt() Method
parseInt()
parses a string and returns a whole number. Spaces are 
allowed. Only the first number is returned:
Example
parseInt("-10");
parseInt("-10.33");
parseInt("10");
parseInt("10.33");
parseInt("10 20 30");
parseInt("10 years");
parseInt("years 10");
Try 
it Yourself 
If the number cannot be converted,
NaN
(Not a Number) is returned.
The parseFloat() Method
parseFloat()
parses a string and returns a number. Spaces are 
allowed. Only the first number is returned:
Example
parseFloat("10");
parseFloat("10.33");
parseFloat("10 20 30");
parseFloat("10 years");
parseFloat("years 10");
Try 
it Yourself 
If the number cannot be converted,
NaN
(Not a Number) is returned.
Number Object Methods
These
object methods
belong to the
Number
object:
Method
Description
Number.isInteger()
Returns true if the argument is an integer
Number.isSafeInteger()
Returns true if the argument is a safe integer
Number.parseFloat()
Converts a string to a number
Number.parseInt()
Converts a string to a whole number
The Number.isInteger() Method
The
Number.isInteger()
method returns
true
if the argument is an integer.
Example
Number.isInteger(10);
Number.isInteger(10.5);
Try it Yourself 
The Number.isSafeInteger() Method
A safe integer is an integer that can be exactly represented as a double precision number.
The
Number.isSafeInteger()
method returns
true
if the argument is a safe integer.
Example
Number.isSafeInteger(10);
Number.isSafeInteger(12345678901234567890);
Try it Yourself 
The Number.parseFloat() Method
Number.parseFloat()
parses a string and returns a number.
Spaces are allowed. Only the first number is returned:
Example
Number.parseFloat("10");
Number.parseFloat("10.33");
Number.parseFloat("10 20 30");
Number.parseFloat("10 years");
Number.parseFloat("years 10");
Try 
it Yourself 
If the number cannot be converted,
NaN
(Not a Number) is returned.
The Number.parseInt() Method
Number.parseInt()
parses a string and returns a whole number.
Spaces are allowed. Only the first number is returned:
Example
Number.parseInt("-10");
Number.parseInt("-10.33");
Number.parseInt("10");
Number.parseInt("10.33");
Number.parseInt("10 20 30");
Number.parseInt("10 years");
Number.parseInt("years 10");
Try 
it Yourself 
If the number cannot be converted,
NaN
(Not a Number) is returned.
JavaScript
Object Methods
Object methods
are actions that can be performed on objects.
A method is a
function definition
stored as a
property value
.
Property
Value
firstName
John
lastName
Doe
age
50
eyeColor
blue
fullName
function() {return this.firstName + " " + this.lastName;}
Example
const
person
= {
firstName: "John",
lastName: "Doe",
id: 5566,
fullName: function() {
return
this
.firstName + " " +
this
.lastName;
}
};
Try it Yourself 
In the example above,
this
refers to the
person object
:
this.firstName
means the
firstName
property of
person
.
this.lastName
means the
lastName
property of
person
.
Accessing Object Methods
You access an object method with the following syntax:
objectName.methodName()
If you invoke the
fullName property
with (), it will execute as a
function
:
Example
name = person.fullName();
Try it Yourself 
If you access the
fullName property
without (), it 
will return the
function definition
:
Example
name = person.fullName;
Try it Yourself 
Adding a Method to an Object
Adding a new method to an object is easy:
Example
person.name = function () {
return this.firstName + " " + this.lastName;
};
Try it Yourself 
Using JavaScript Methods
This example uses the JavaScript
toUpperCase()
method to convert a text 
to uppercase:
Example
person.name = function () {
return (this.firstName + " " + this.lastName).toUpperCase();
};
Try it Yourself 
JavaScript
String Methods
Basic String Methods
Javascript strings are primitive and immutable:
All string methods produce a new string without altering the original string.
String length
String charAt()
String charCodeAt()
String at()
String [ ]
String slice()
String substring()
String substr()
See Also:
String Search Methods
String Templates
String toUpperCase()
String toLowerCase()
String concat()
String trim()
String trimStart()
String trimEnd()
String padStart()
String padEnd()
String repeat()
String replace()
String replaceAll()
String split()
JavaScript String Length
The
length
property returns the length of a string:
Example
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;
Try it Yourself 
Extracting String Characters
There are 4 methods for extracting string characters:
The
at(
position
)
Method
The
charAt(
position
)
Method
The
charCodeAt(
position
)
Method
Using property access [] like in arrays
JavaScript String charAt()
The
charAt()
method returns the character at a specified 
index (position) in a string:
Example
let text = "HELLO WORLD";
let char = text.charAt(0);
Try it Yourself 
JavaScript String charCodeAt()
The
charCodeAt()
method returns the code of the character 
at a specified index in a string:
The method returns a UTF-16 code (an integer between 0 and 65535).
Example
let text = "HELLO WORLD";
let char = text.charCodeAt(0);
Try it Yourself 
JavaScript String at()
ES2022
introduced the string method
at()
:
Examples
Get the third letter of name:
const name = "W3Schools";
let letter = name.at(2);
Try it Yourself 
Get the third letter of name:
const name = "W3Schools";
let letter = name[2];
Try it Yourself 
The
at()
method returns the character at a specified index (position) in a string.
The
at()
method is supported in all modern browsers since March 2022:
Browser Support
at()
is an ES2022 feature.
JavaScript 2022 (ES2022) is supported in all modern browsers since March 2023:
Chrome 94
Edge 94
Firefox 93
Safari 16.4
Opera 79
Sep 2021
Sep 2021
Oct 2021
Mar 2023
Oct 2021
Property Access [ ]
Example
let text = "HELLO WORLD";
let char = text[0];
Try it Yourself 
Example
let text = "HELLO WORLD";
text[0] = "A";// Gives no error, but does not work
Try it Yourself 
Extracting String Parts
There are 3 methods for extracting a part of a string:
slice(
start
,
end
)
substring(
start
,
end
)
substr(
start
,
length
)
JavaScript String slice()
slice()
extracts a part of a string and returns the 
extracted part in a new string.
The method takes 2 parameters: start position, and end position (end not included).
Example
Slice out a portion of a string from position 7 to position 13:
let text = "Apple, Banana, Kiwi";
let part = text.slice(7, 13);
Try it Yourself 
Examples
If you omit the second parameter, the method will slice out the rest of the string:
let text = "Apple, Banana, Kiwi";
let part = text.slice(7);
Try it Yourself 
If a parameter is negative, the position is counted from the end of the string:
let text = "Apple, Banana, Kiwi";
let part = text.slice(-12);
Try it Yourself 
This example slices out a portion of a string from position -12 to position -6:
let text = "Apple, Banana, Kiwi";
let part = text.slice(-12, -6);
Try it Yourself 
JavaScript String substring()
substring()
is similar to
slice()
.
The difference is that start and end values less than 0 are treated as 0 in
substring()
.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substring(7, 13);
Try it Yourself 
If you omit the second parameter,
substring()
will slice out the rest of the 
string.
JavaScript String substr()
substr()
is similar to
slice()
.
The difference is 
that the second parameter specifies the
length
of the extracted part.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7, 6);
Try it Yourself 
If you omit the second parameter,
substr()
will slice out the rest of the 
string.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7);
Try it Yourself 
If the first parameter is negative, the position counts from the end of the 
string.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(-4);
Try it Yourself 
Converting to Upper and Lower Case
A string is converted to upper case with
toUpperCase()
:
A string is converted to lower case with
toLowerCase()
:
JavaScript String toUpperCase()
Example
let text1 = "Hello World!";
let text2 = text1.toUpperCase();
Try it Yourself 
JavaScript String toLowerCase()
Example
let text1 = "Hello World!"; // String
let text2 = text1.toLowerCase();// text2 is text1 
converted to lower
Try it Yourself 
JavaScript String concat()
concat()
joins two or more strings:
Example
let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);
Try it Yourself 
The
concat()
method can be used instead of the plus operator. 
These two lines do the same:
Example
text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");
JavaScript String trim()
The
trim()
method removes whitespace from both sides of a string:
Example
let text1 = " Hello World! ";
let text2 = text1.trim();
Try it Yourself 
JavaScript String trimStart()
ECMAScript 2019
added the String method
trimStart()
to JavaScript.
The
trimStart()
method works like
trim()
, but removes whitespace only from the start of a string.
Example
let text1 = "Hello World!";
let text2 = text1.trimStart();
Try it Yourself 
JavaScript String
trimStart()
is supported in all modern browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
JavaScript String trimEnd()
ECMAScript 2019
added the string method
trimEnd()
to JavaScript.
The
trimEnd()
method works like
trim()
, but removes whitespace only from the end of a string.
Example
let text1 = "Hello World!";
let text2 = text1.trimEnd();
Try it Yourself 
JavaScript String
trimEnd()
is supported in all modern browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
JavaScript String Padding
ECMAScript 2017
added two new string methods to JavaScript:
padStart()
and
padEnd()
to support padding at the beginning and at the end of a string.
JavaScript String padStart()
The
padStart()
method pads a string from the start.
It pads a string with another string (multiple times) until it reaches a given length.
Examples
Pad a string with "0" until it reaches the length 4:
let text = "5";
let padded = text.padStart(4,"0");
Try it Yourself 
Pad a string with "x" until it reaches the length 4:
let text = "5";
let padded = text.padStart(4,"x");
Try it Yourself 
Example
let numb = 5;
let text = numb.toString();
let padded = text.padStart(4,"0");
Try it Yourself 
Browser Support
padStart()
is an
ECMAScript 2017
feature.
ES2017 is supported in all modern browsers since September 2017:
Chrome 58
Edge 15
Firefox 52
Safari 11
Opera 45
Apr 2017
Apr 2017
Mar 2017
Sep 2017
May 2017
padStart()
is not supported in Internet Explorer.
JavaScript String padEnd()
The
padEnd()
method pads a string from the end.
It pads a string with another string (multiple times) until it reaches a given length.
Examples
let text = "5";
let padded = text.padEnd(4,"0");
Try it Yourself 
let text = "5";
let padded = text.padEnd(4,"x");
Try it Yourself 
Example
let numb = 5;
let text = numb.toString();
let padded = text.padEnd(4,"0");
Try it Yourself 
Browser Support
padEnd()
is an
ECMAScript 2017
feature.
ES2017 is supported in all modern browsers since September 2017:
Chrome 58
Edge 15
Firefox 52
Safari 11
Opera 45
Apr 2017
Apr 2017
Mar 2017
Sep 2017
May 2017
padEnd()
is not supported in Internet Explorer.
JavaScript String repeat()
The
repeat()
method returns a string with a number of copies of a string.
The
repeat()
method returns a new string.
The
repeat()
method does not change the original string.
Examples
Create copies of a text:
let text = "Hello world!";
let result = text.repeat(2);
Try it Yourself 
let text = "Hello world!";
let result = text.repeat(4);
Try it Yourself 
Syntax
string
.repeat(
count
)
Parameters
Parameter
Description
count
Required.
The number of copies wanted.
Return Value
Type
Description
String
A new string containing the copies.
Browser Support
repeat()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
repeat()
is not supported in Internet Explorer.
Replacing String Content
The
replace()
method replaces a specified value with another 
value in a string:
Example
let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");
Try it Yourself 
By default, the
replace()
method replaces
only the first
match:
Example
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");
Try it Yourself 
By default, the
replace()
method is case sensitive. Writing MICROSOFT (with 
upper-case) will not work:
Example
let text = "Please visit Microsoft!";
let newText = text.replace("MICROSOFT", "W3Schools");
Try it Yourself 
To replace case insensitive, use a
regular expression
with an
/i
flag (insensitive):
Example
let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");
Try it Yourself 
To replace all matches, use a
regular expression
with a
/g
flag (global match):
Example
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");
Try it Yourself 
JavaScript String ReplaceAll()
In 2021, JavaScript introduced the string method
replaceAll()
:
Example
text = text.replaceAll("Cats","Dogs");
text = text.replaceAll("cats","dogs");
Try it Yourself 
The
replaceAll()
method allows you to specify a
regular expression instead of a string to be replaced.
If the parameter is a regular expression, the global flag (g) must be set, otherwise
a TypeError is thrown.
Example
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");
Try it Yourself 
Converting a String to an Array
JavaScript String split()
A string can be converted to an array with the
split()
method:
Example
text.split(",")// Split on commas
text.split(" ")// Split on spaces
text.split("|")// Split on pipe
Try it Yourself 
If the separator is omitted, the returned array will contain the whole string 
in index [0].
If the separator is "", the returned array will be an array of single 
characters:
Example
text.split("")
Try it Yourself 
Test Yourself With Exercises
Exercise:
Convert the text into an UPPERCASE text:
let txt = "Hello World!";
txt = txt.
;
Submit Answer 
Start the Exercise
JavaScript Random
Math.random()
Math.random()
returns a random number between 0 (inclusive), and 1 
(exclusive):
Example
// Returns a random number:
Math.random();
Try it Yourself 
JavaScript Random Integers
Math.random()
used with
Math.floor()
can be used to return random integers.
Example
// Returns a random integer from 0 to 9:
Math.floor(Math.random() * 10);
Try it Yourself 
Example
// Returns a random integer from 0 to 10:
Math.floor(Math.random() * 11);
Try it Yourself 
Example
// Returns a random integer from 0 to 99:
Math.floor(Math.random() * 100);
Try it Yourself 
Example
// Returns a random integer from 0 to 100:
Math.floor(Math.random() * 101);
Try it Yourself 
Example
// Returns a random integer from 1 to 10:
Math.floor(Math.random() * 10) + 1;
Try it Yourself 
Example
// Returns a random integer from 1 to 100:
Math.floor(Math.random() * 100) + 1;
Try it Yourself 
A Proper Random Function
As you can see from the examples above, it might be a good idea to create a proper random function
to use for all random integer purposes.
This JavaScript function always returns a random number between min (included) and 
max (excluded):
Example
function getRndInteger(min, max) {
return Math.floor(Math.random() * (max - min) ) + min;
}
Try it Yourself 
This JavaScript function always returns a random number between min and max (both included):
Example
function getRndInteger(min, max) {
return Math.floor(Math.random() * (max - min + 1) ) + min;
}
Try it Yourself 
JavaScript
Performance
How to speed up your JavaScript code.
Reduce Activity in Loops
Loops are often used in programming.
Each statement in a loop, including the for statement, is executed for each iteration of the 
loop.
Statements or assignments that can be placed outside the loop will make the 
loop run faster.
Bad:
for (let i = 0; i < arr.length; i++) {
Better Code:
let l = arr.length;
for (let i = 0; i < l; i++) {
The bad code accesses the length property of an array each time the loop is 
iterated.
The better code accesses the length property outside the loop and makes the 
loop run faster.
Reduce DOM Access
Accessing the HTML DOM is very slow, compared to other JavaScript statements.
If you expect to access a DOM element several times, access it once, and use 
it as a local variable:
Example
const obj = document.getElementById("demo");
obj.innerHTML = "Hello";
Try it Yourself 
Reduce DOM Size
Keep the number of elements in the HTML DOM small.
This will always 
improve page loading, and speed up rendering (page display), especially on smaller devices.
Every attempt to search the DOM (like getElementsByTagName) will benefit 
from a smaller DOM.
Avoid Unnecessary Variables
Don't create new variables if you don't plan to save values.
Often you can replace code like this:
let fullName = firstName + " " + lastName;
document.getElementById("demo").innerHTML = fullName;
With this:
document.getElementById("demo").innerHTML = firstName + " " + lastName;
Delay JavaScript Loading
Putting your scripts at the bottom of the page body lets the browser load the 
page first.
While a script is downloading, the browser will not start any other 
downloads. In addition all parsing and rendering activity might be blocked.
An alternative is to use
defer="true"
in the script tag. The 
defer attribute specifies that the script should be executed after the page has 
finished parsing, but it only works for external scripts.
If possible, you can add your script to the page by code, after the page has loaded:
Example
<script>
window.onload = function() {
const element = document.createElement("script");
element.src = "myScript.js";
document.body.appendChild(element);
};
</script>
Avoid Using with
Avoid using the
with
keyword. It has a negative effect on 
speed. It also clutters up JavaScript scopes.
The
with
keyword is
not allowed
in strict mode.
JavaScript
Type Conversion
Converting Strings to Numbers
Converting Numbers to Strings
Converting Dates to Numbers
Converting Numbers to Dates
Converting Booleans to Numbers
Converting Numbers to Booleans
JavaScript Type Conversion
JavaScript variables can be converted to a new variable and another data type:
By the use of a JavaScript function
Automatically
by JavaScript itself
Converting Strings to Numbers
The global method
Number()
converts a variable (or a value) into a number.
A numeric string (like "3.14") converts to a number (like 3.14).
An empty string (like "") converts to 0.
A non numeric string (like "John") converts to
NaN
(Not a Number).
Examples
These will convert:
Number("3.14")
Number(Math.PI)
Number(" ")
Number("")
These will not convert:
Number("99 88")
Number("John")
Try it Yourself 
Number Methods
In the chapter
Number Methods
, you 
will find more methods that can be used to convert strings to 
numbers:
Method
Description
Number()
Returns a number, converted from its argument
parseFloat()
Parses a string and returns a floating point number
parseInt()
Parses a string and returns an integer
The Unary + Operator
The
unary + operator
can be used to 
convert a variable to a number:
Example
let y = "5";
// y is a string
let x = + y; 
// x is a number
Try it Yourself 
If the 
variable cannot be converted, it will still become a number, but with the value
NaN
(Not a Number):
Example
let y = "John";
// y is a string
let x = + y;// x is a number (NaN)
Try it Yourself 
Converting Numbers to Strings
The global method
String()
can convert numbers to strings.
It can be used on any type of numbers, literals, variables, or expressions:
Example
String(x)// returns a string from a number variable x
String(123)  // returns a string from a number literal 123
String(100 + 23) // returns a string from a number from an expression
Try it Yourself 
The Number method
toString()
does the same.
Example
x.toString()
(123).toString()
(100 + 23).toString()
Try it Yourself 
More Methods
In the chapter
Number Methods
, you 
will find more methods that can be used to convert numbers to 
strings:
Method
Description
toExponential()
Returns a string, with a number rounded and written using exponential notation.
toFixed()
Returns a string, with a number rounded and written with a specified number of decimals.
toPrecision()
Returns a string, with a number written with a specified length
Converting Dates to Numbers
The global method
Number()
can be used to convert dates to 
numbers.
d = new Date();
Number(d)  // returns 1404568027739
The date method
getTime()
does the same.
d = new Date();
d.getTime()   // returns 1404568027739
Converting Dates to Strings
The global method
String()
can convert dates to 
strings.
String(Date()) // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"
The Date method
toString()
does the same.
Example
Date().toString() // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"
In the chapter
Date Methods
, you 
will find more methods that can be used to convert dates to 
strings:
Method
Description
getDate()
Get the day as a number (1-31)
getDay()
Get the weekday a number (0-6)
getFullYear()
Get the four digit year (yyyy)
getHours()
Get the hour (0-23)
getMilliseconds()
Get the milliseconds (0-999)
getMinutes()
Get the minutes (0-59)
getMonth()
Get the month (0-11)
getSeconds()
Get the seconds (0-59)
getTime()
Get the time (milliseconds since January 1, 1970)
Converting Booleans to Numbers
The global method
Number()
can also convert booleans to numbers.
Number(false) // returns 0
Number(true)  // returns 1
Converting Booleans to Strings
The global method
String()
can convert booleans to 
strings.
String(false) // returns "false"
String(true)  // returns "true"
The Boolean method
toString()
does the same.
false.toString()// returns "false"
true.toString()  // returns "true"
Automatic Type Conversion
When JavaScript tries to operate on a "wrong" data type, it will try to 
convert the value to a "right" type.
The result is not always what you expect:
5 + null // returns 5 because null is converted to 0
"5" + null // returns "5null" because null is converted to "null"
"5" + 2 // returns 
    "52" because 2 is converted to "2"
"5" - 2 // returns 3 because "5" is converted to 5
"5" * "2" // returns 
    10 because "5" and "2" are 
    converted to 5 and 2
Try it Yourself 
Automatic String Conversion
JavaScript automatically calls the variable's
toString()
function when you try 
to "output" an object or a variable:
document.getElementById("demo").innerHTML = myVar;
// if myVar = {name:"Fjohn"} // toString converts to "[object Object]"
// if myVar = [1,2,3,4] // toString converts to "1,2,3,4"
// if myVar = new Date() // toString converts to "Fri Jul 18 2014 09:08:55 GMT+0200"
Numbers and booleans are also converted, but this is not very visible:
// if myVar = 123  // toString converts to "123"
// if myVar = true  // toString converts to "true"
// if myVar = false // toString converts to "false"
JavaScript Type Conversion Table
This table shows the result of converting different JavaScript values to Number, String, and Boolean:
Original
Value
Converted
to Number
Converted
to String
Converted
to Boolean
Try it
false
0
"false"
false
Try it 
true
1
"true"
true
Try it 
0
0
"0"
false
Try it 
1
1
"1"
true
Try it 
"0"
0
"0"
true
Try it 
"000"
0
"000"
true
Try it 
"1"
1
"1"
true
Try it 
NaN
NaN
"NaN"
false
Try it 
Infinity
Infinity
"Infinity"
true
Try it 
-Infinity
-Infinity
"-Infinity"
true
Try it 
""
0
""
false
Try it 
"20"
20
"20"
true
Try it 
"twenty"
NaN
"twenty"
true
Try it 
[ ]
0
""
true
Try it 
[20]
20
"20"
true
Try it 
[10,20]
NaN
"10,20"
true
Try it 
["twenty"]
NaN
"twenty"
true
Try it 
["ten","twenty"]
NaN
"ten,twenty"
true
Try it 
function(){}
NaN
"function(){}"
true
Try it 
{ }
NaN
"[object Object]"
true
Try it 
null
0
"null"
false
Try it 
undefined
NaN
"undefined"
false
Try it 
Values in quotes indicate string values.
Red values
indicate values (some) programmers might not expect.
JavaScript
Bitwise Operations
JavaScript Bitwise Operators
Operator
Name
Description
&
AND
Sets each bit to 1 if both bits are 1
|
OR
Sets each bit to 1 if one of two bits is 1
^
XOR
Sets each bit to 1 if only one of two bits is 1
~
NOT
Inverts all the bits
<<
Zero fill left shift
Shifts left by pushing zeros in from the right and let the leftmost bits fall off
>>
Signed right shift
Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits 
fall off
>>>
Zero fill right shift
Shifts right by pushing zeros in from the left, and let the rightmost bits fall off
Examples
Operation
Result
Same as
Result
5 & 1
1
0101 & 0001
0001
5 | 1
5
0101 | 0001
0101
~ 5
10
~0101
1010
5 << 1
10
0101 << 1
1010
5 ^ 1
4
0101 ^ 0001
0100
5 >> 1
2
0101 >> 1
0010
5 >>> 1
2
0101 >>> 1
0010
JavaScript Uses 32 bits Bitwise Operands
JavaScript stores numbers as 64 bits floating point numbers, but all bitwise 
operations are performed on 32 bits binary numbers.
Before a bitwise operation is performed, JavaScript converts numbers to 32 bits 
signed integers.
After the bitwise operation is performed, the result is converted back to 64 bits JavaScript 
numbers.
JavaScript Bitwise AND
When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.
One bit example:
Operation
Result
0 & 0
0
0 & 1
0
1 & 0
0
1 & 1
1
4 bits example:
Operation
Result
1111 & 0000
0000
1111 & 0001
0001
1111 & 0010
0010
1111 & 0100
0100
JavaScript Bitwise OR
When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1:
One bit example:
Operation
Result
0 | 0
0
0 | 1
1
1 | 0
1
1 | 1
1
4 bits example:
Operation
Result
1111 | 0000
1111
1111 | 0001
1111
1111 | 0010
1111
1111 | 0100
1111
JavaScript Bitwise XOR
When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:
One bit example:
Operation
Result
0 ^ 0
0
0 ^ 1
1
1 ^ 0
1
1 ^ 1
0
4 bits example:
Operation
Result
1111 ^ 0000
1111
1111 ^ 0001
1110
1111 ^ 0010
1101
1111 ^ 0100
1011
JavaScript Bitwise AND (&)
Bitwise AND returns 1 only if both bits are 1:
Decimal
Binary
5
00000000000000000000000000000101
1
00000000000000000000000000000001
5 & 1
00000000000000000000000000000001 (1)
Example
let x = 5 & 1;
Try it Yourself 
JavaScript Bitwise OR (|)
Bitwise OR returns 1 if one of the bits is 1:
Decimal
Binary
5
00000000000000000000000000000101
1
00000000000000000000000000000001
5 | 1
00000000000000000000000000000101 (5)
Example
let x = 5 | 1;
Try it Yourself 
JavaScript Bitwise XOR (^)
Bitwise XOR returns 1 if the bits are different:
Decimal
Binary
5
00000000000000000000000000000101
1
00000000000000000000000000000001
5 ^ 1
00000000000000000000000000000100 (4)
Example
let x = 5 ^ 1;
Try it Yourself 
JavaScript Bitwise NOT (~)
Decimal
Binary
5
00000000000000000000000000000101
~5
11111111111111111111111111111010 (-6)
Example
let x = ~5;
Try it Yourself 
JavaScript (Zero Fill) Bitwise Left Shift (<<)
This is a zero fill left shift. One or more zero bits are pushed in from the right,
and the leftmost bits fall off:
Decimal
Binary
5
00000000000000000000000000000101
5 << 1
00000000000000000000000000001010 (10)
Example
let x = 5 << 1;
Try it Yourself 
JavaScript (Sign Preserving) Bitwise Right Shift (>>)
This is a sign preserving right shift. Copies of the leftmost bit are pushed 
in from the left, and the rightmost bits fall off:
Decimal
Binary
-5
11111111111111111111111111111011
-5 >> 1
11111111111111111111111111111101 (-3)
Example
let x = -5 >> 1;
Try it Yourself 
JavaScript (Zero Fill) Right Shift (>>>)
This is a zero fill right shift. One or more zero bits are pushed in from the left,
and the rightmost bits fall off:
Decimal
Binary
5
00000000000000000000000000000101
5 >>> 1
00000000000000000000000000000010 (2)
Example
let x = 5 >>> 1;
Try it Yourself 
Binary Numbers
Binary numbers with only one bit set are easy to understand:
Binary Representation
Decimal value
00000000000000000000000000000001
1
00000000000000000000000000000010
2
00000000000000000000000000000100
4
00000000000000000000000000001000
8
00000000000000000000000000010000
16
00000000000000000000000000100000
32
00000000000000000000000001000000
64
Setting a few more bits reveals the binary pattern:
Binary Representation
Decimal value
00000000000000000000000000000101
5 (4 + 1)
00000000000000000000000000001101
13 (8 + 4 + 1)
00000000000000000000000000101101
45 (32 + 8 + 4 + 1)
JavaScript binary numbers are stored in two's complement format.
This means that a negative number is the bitwise NOT of the number plus 1:
Binary Representation
Decimal value
00000000000000000000000000000101
5
11111111111111111111111111111011
-5
00000000000000000000000000000110
6
11111111111111111111111111111010
-6
00000000000000000000000000101000
40
11111111111111111111111111011000
-40
Converting Decimal to Binary
Example
function dec2bin(dec){
return (dec >>> 0).toString(2);
}
Try it Yourself 
Converting Binary to Decimal
Example
function bin2dec(bin){
return parseInt(bin, 2).toString(10);
}
Try it Yourself 
JavaScript
Events
HTML events are
"things"
that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can
"react"
on 
these events.
HTML Events
An HTML event can be something the browser does, or something a user does.
Here are some examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Often, when events happen, you may want to do something.
JavaScript lets you execute code when events are detected.
HTML allows event handler attributes,
with JavaScript code
, to be added to HTML elements.
With single quotes:
<
element
event
=
'
some JavaScript
'
>
With double quotes:
<
element
event
=
"
some JavaScript
"
>
In the following example, an
onclick
attribute (with code), is added to a
<button>
element:
Example
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
Try it Yourself 
In the example above, the JavaScript code changes the content of 
the element with id="demo".
In the next example, the code changes the content of 
its own element (using
this
.innerHTML
):
Example
<button onclick="this.innerHTML = Date()">The time is?</button>
Try it Yourself 
Example
<button onclick="displayDate()">The time is?</button>
Try it Yourself 
Common HTML Events
Here is a list of some common HTML events:
Event
Description
onchange
An HTML element has been changed
onclick
The user clicks an HTML element
onmouseover
The user moves the mouse over an HTML element
onmouseout
The user moves the mouse away from an HTML element
onkeydown
The user pushes a keyboard key
onload
The browser has finished loading the page
The list is much longer:
W3Schools JavaScript Reference HTML DOM Events
.
JavaScript Event Handlers
Event handlers can be used to handle and verify user input, user actions, 
and browser actions:
Things that should be done every time a page loads
Things that should be done when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
And more ...
Many different methods can be used to let JavaScript work with events:
HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...
Test Yourself With Exercises
Exercise:
The
<button>
element should do something when someone clicks on it. Try to fix it!
<button
="alert('Hello')">Click me.</button>
Submit Answer 
Start the Exercise
JavaScript
Strings
Strings are for
storing text
Strings are written
with quotes
Using Quotes
A JavaScript string is zero or more characters written inside quotes.
Example
let text = "John Doe";
Try it Yourself 
You can use single or double quotes:
Example
let carName1 = "Volvo XC60"; 
  // Double quotes
let carName2 = 'Volvo XC60'; // Single quotes
Try it Yourself 
Quotes Inside Quotes
You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:
Example
let answer1 = "It's alright";
let answer2 = "He is called 'Johnny'";
let answer3 = 'He is called "Johnny"';
Try it Yourself 
Template Strings
Templates were introduced with ES6 (JavaScript 2016).
Templates are strings enclosed in backticks (`This is a template string`).
Templates allow single and double quotes inside a string:
Example
let text = `He's often called "Johnny"`;
Try it Yourself 
String Length
To find the length of a string, use the built-in
length
property:
Example
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = text.length;
Try it Yourself 
Escape Characters
Because strings must be written within quotes, JavaScript will misunderstand this string:
let text = "We are the so-called "Vikings" from the north.";
The string will be chopped to "We are the so-called ".
To solve this problem, you can use an
backslash escape character
.
The backslash escape character (
\
) turns special characters into string characters:
Code
Result
Description
\'
'
Single quote
\"
"
Double quote
\\
\
Backslash
Examples
\" inserts a double quote in a string:
let text = "We are the so-called \"Vikings\" from the north.";
Try it Yourself 
\' inserts a single quote in a string:
let text= 'It\'s alright.';
Try it Yourself 
\\ inserts a backslash in a string:
let text = "The character \\ is called backslash.";
Try it Yourself 
Six other escape sequences are valid in JavaScript:
Code
Result
\b
Backspace
\f
Form Feed
\n
New Line
\r
Carriage Return
\t
Horizontal Tabulator
\v
Vertical Tabulator
Breaking Long Lines
For readability, programmers often like to avoid long code lines.
A safe way to break up a
statement
is after an operator:
Example
document.getElementById("demo").innerHTML =
"Hello Dolly!";
Try it Yourself 
A safe way to break up a
string
is by using string addition:
Example
document.getElementById("demo").innerHTML = "Hello " +
"Dolly!";
Try it Yourself 
Template Strings
Templates were introduced with ES6 (JavaScript 2016).
Templates are strings enclosed in backticks (`This is a template string`).
Templates allow multiline strings:
Example
let text =
`The quick
brown fox
jumps over
the lazy dog`;
Try it Yourself 
JavaScript Strings as Objects
Normally, JavaScript strings are primitive values, created from literals:
let x = "John";
But strings can also be defined as objects with the keyword
new
:
let y = new String("John");
Example
let x = "John";
let y = new String("John");
Try it Yourself 
When using the
==
operator, x and y are
equal
:
let x = "John";
let y = new String("John");
Try it Yourself 
When using the
===
operator, x and y are
not equal
:
let x = "John";
let y = new String("John");
Try it Yourself 
(x == y)
true or false?
let x = new String("John");
let y = new String("John");
Try it Yourself 
(x === y)
true or false?
let x = new String("John");
let y = new String("John");
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use the
length
property to alert the length of
txt
.
let txt = "Hello World!";
let x =
;
alert(x);
Submit Answer 
Start the Exercise
JavaScript
Functions
A JavaScript function is a block of code designed to perform a 
particular task.
A JavaScript function is executed when 
"something" invokes it (calls it).
Example
//  Function to compute the product of p1 and p2
function myFunction(p1, p2) {
return p1 * p2;
}
Try it Yourself 
JavaScript Function Syntax
A JavaScript function is defined with the
function
keyword, 
followed by a
name
, followed by parentheses
()
.
Function names can contain letters, digits, underscores, and dollar signs 
(same rules as variables).
The parentheses may include parameter names separated by commas:
(
parameter1, parameter2, ...
)
The code to be executed, by the function, is placed inside curly brackets:
{}
function
name
(
parameter1, parameter2, parameter3
) {
//
code to be executed
}
Function
parameters
are listed inside the parentheses () in 
the function definition.
Function
arguments
are the
values
received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.
Function Invocation
The code inside the function will execute when "something"
invokes
(calls) the 
function:
When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)
You will learn a lot more about function invocation later in this 
tutorial.
Function Return
When JavaScript reaches a
return
statement, 
the function will stop executing.
If the function was invoked from a statement, JavaScript will 
"return" to execute the code after the invoking statement.
Functions often compute a
return value
. The return value is 
"returned" back to 
the "caller":
Example
Calculate the product of two numbers, and return the result:
// Function is called, the return value will end up in x
let x = myFunction(4, 3);
function myFunction(a, b) {
// Function returns the product of a and b
return a * b;
}
Try it Yourself 
The () Operator
The () operator invokes (calls) the function:
Example
Convert Fahrenheit to Celsius:
function toCelsius(fahrenheit) {
return (5/9) * (fahrenheit-32);
}
let value = toCelsius(77);
Try it Yourself 
Accessing a function with incorrect parameters can return an incorrect answer:
Example
function toCelsius(fahrenheit) {
return (5/9) * (fahrenheit-32);
}
let value = toCelsius();
Try it Yourself 
Accessing a function without () returns the function and not the function result:
Example
function toCelsius(fahrenheit) {
return (5/9) * (fahrenheit-32);
}
let value = toCelsius;
Try it Yourself 
Functions Used as Variable Values
Functions can be used the same way as you use variables, in all types of formulas, assignments, and 
calculations.
Example
Instead of using a variable to store the return value of a function:
let x = toCelsius(77);
let text = "The temperature is " + x + " Celsius";
You can use the function directly, as a variable value:
let text = "The temperature is " + toCelsius(77) + " Celsius";
Try it Yourself 
Local Variables
Variables declared within a JavaScript function, become
LOCAL
to 
the function.
Local variables can only be accessed 
from within the function.
Example
// code here can NOT use carName
function myFunction() {
let carName = "Volvo";
// code here CAN use carName
}
// code here can NOT use carName
Try it Yourself 
Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
Local variables are created when a function starts, and deleted when the function is completed.
Test Yourself With Exercises
Exercise:
Execute the function named
myFunction
.
function myFunction() {
  alert("Hello World!");
}
;
Submit Answer 
Start the Exercise
JavaScript Array Search
Array Find and Search Methods
Array indexOf()
Array lastIndexOf()
Array includes()
See Also:
Basic Methods
Sort Methods
Iteration Methods
Array find()
Array findIndex()
Array findLast()
Array findLastIndex()
JavaScript Array indexOf()
The
indexOf()
method searches an array for an element value and returns its position.
Example
Search an array for the item "Apple":
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.indexOf("Apple") + 1;
Try it Yourself 
Syntax
array
.indexOf(
item
,
start
)
item
Required. The item to search for.
start
Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.
Array.indexOf()
returns -1 if the item is not found.
If the item is present more than once, it returns the position of the first 
occurrence.
JavaScript Array lastIndexOf()
Array.lastIndexOf()
is the same as
Array.indexOf()
, but 
returns the position of the last occurrence of the specified element.
Example
Search an array for the item "Apple":
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let position = fruits.lastIndexOf("Apple") + 1;
Try it Yourself 
Syntax
array
.lastIndexOf(
item
,
start
)
item
Required. The item to search for
start
Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning
JavaScript Array includes()
ECMAScript 2016 introduced
Array.includes()
to arrays.
This allows us to check if an element is present in an array (including NaN, unlike indexOf).
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango"); // is true
Try it Yourself 
Syntax
array
.includes(
search-item
)
Browser Support
includes()
is an
ECMAScript 2016
feature.
ES 2016 is fully supported in all modern browsers since March 2017:
Chrome 52
Edge 15
Firefox 52
Safari 10.1
Opera 39
Jul 2016
Apr 2017
Mar 2017
May 2017
Aug 2016
includes()
is not supported in Internet Explorer.
JavaScript Array find()
The
find()
method returns the value of the first array element that passes a 
test function.
This example finds (returns the value of) the first element that is larger 
than 18:
Example
const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.find(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
Browser Support
find()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
find()
is not supported in Internet Explorer.
JavaScript Array findIndex()
The
findIndex()
method returns the index of the first array element that 
passes a test function.
This example finds the index of the first element that is larger than 18:
Example
const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.findIndex(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
Browser Support
findIndex()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
findIndex()
is not supported in Internet Explorer.
JavaScript Array findLast() Method
ES2023 added the findLast() method that will start from the end of an array and return
the value of the first element that satisfies a condition.
Example
const temp = [27, 28, 30, 40, 42, 35, 30];
let high = temp.findLast(x => x > 40);
Try it Yourself 
Browser Support
findLast()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array findLastIndex() Method
The findLastIndex() method finds the index of the last element that satisfies a condition.
Example
const temp = [27, 28, 30, 40, 42, 35, 30];
let pos = temp.findLastIndex(x => x > 40);
Try it Yourself 
Browser Support
findLastIndex()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript
Number Properties
Property
Description
EPSILON
The difference between 1 and the smallest number > 1.
MAX_VALUE
The largest number possible in JavaScript
MIN_VALUE
The smallest number possible in JavaScript
MAX_SAFE_INTEGER
The maximum safe integer (2
53
- 1)
MIN_SAFE_INTEGER
The minimum safe integer -(2
53
- 1)
POSITIVE_INFINITY
Infinity (returned on overflow)
NEGATIVE_INFINITY
Negative infinity (returned on overflow)
NaN
A "Not-a-Number" value
JavaScript EPSILON
Number.EPSILON
is the difference between
the smallest floating point number greater than 1 and 1.
Example
let x = Number.EPSILON;
Try 
it Yourself 
JavaScript MAX_VALUE
Number.MAX_VALUE
is a constant representing the largest possible number in JavaScript.
Example
let x = Number.MAX_VALUE;
Try 
it Yourself 
Example
let x = 6;
x.MAX_VALUE
Try 
it Yourself 
JavaScript MIN_VALUE
Number.MIN_VALUE
is a constant representing the lowest possible number in JavaScript.
Example
let x = Number.MIN_VALUE;
Try 
it Yourself 
JavaScript MAX_SAFE_INTEGER
Number.MAX_SAFE_INTEGER
represents the maximum safe integer in JavaScript.
Number.MAX_SAFE_INTEGER
is (2
53
- 1).
Example
let x = Number.MAX_SAFE_INTEGER;
Try 
it Yourself 
JavaScript MIN_SAFE_INTEGER
Number.MIN_SAFE_INTEGER
represents the minimum safe integer in JavaScript.
Number.MIN_SAFE_INTEGER
is -(2
53
- 1).
Example
let x = Number.MIN_SAFE_INTEGER;
Try 
it Yourself 
JavaScript POSITIVE_INFINITY
Example
let x = Number.POSITIVE_INFINITY;
Try 
it Yourself 
POSITIVE_INFINITY
is returned on overflow:
let x = 1 / 0;
Try 
it Yourself 
JavaScript NEGATIVE_INFINITY
Example
let x = Number.NEGATIVE_INFINITY;
Try 
it Yourself 
NEGATIVE_INFINITY
is returned on overflow:
let x = -1 / 0;
Try 
it Yourself 
JavaScript NaN - Not a Number
NaN
is a JavaScript reserved word for a number that is not a legal number.
Examples
let x = Number.NaN;
Try 
it Yourself 
Trying to do arithmetic with a non-numeric string will result in
NaN
(Not a 
Number):
let x = 100 / "Apple";
Try it Yourself 
JavaScript Array Methods
Basic Array Methods
Array length
Array toString
()
Array at()
Array join()
Array pop()
Array push()
See Also:
Search Methods
Sort Methods
Iteration Methods
Array shift()
Array unshift()
Array delete()
Array concat()
Array copyWithin()
Array flat()
Array splice()
Array toSpliced()
Array slice()
JavaScript Array length
The
length
property returns the length (size) of an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let size = fruits.length;
Try it Yourself 
JavaScript Array toString()
The JavaScript method
toString()
converts an array to a 
string of (comma separated) array values.
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Result:
Banana,Orange,Apple,Mango
Try it Yourself 
JavaScript Array at()
ES2022
intoduced the array method
at()
:
Examples
Get the third element of fruits using at():
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.at(2);
Try it Yourself 
Get the third element of fruits using []:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[2];
Try it Yourself 
The
at()
method returns an indexed element from an array.
The
at()
method returns the same as
[]
.
The
at()
method is supported in all modern browsers since March 2022:
Chrome 92
Edge 92
Firefox 90
Safari 15.4
Opera 78
Apr 2021
Jul 2021
Jul 2021
Mar 2022
Aug 2021
JavaScript Array join()
The
join()
method also joins all array elements into a string.
It behaves just like
toString()
, but in addition you can specify the separator:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");
Result:
Banana * Orange * Apple * Mango
Try it Yourself 
Popping and Pushing
When you work with arrays, it is easy to remove elements and add 
new elements.
This is what popping and pushing is:
Popping items
out
of an array, or pushing 
items
into
an array.
JavaScript Array pop()
The
pop()
method removes the last element from an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();
Try it Yourself 
The
pop()
method returns the value that was "popped out":
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.pop();
Try it Yourself 
JavaScript Array push()
The
push()
method adds a new element to an array (at the end):
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");
Try it Yourself 
The
push()
method returns the new array length:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.push("Kiwi");
Try it Yourself 
Shifting Elements
Shifting is equivalent to popping, but working on the first element instead of 
the last.
JavaScript Array shift()
The
shift()
method removes the first array element and "shifts" all 
other elements to a lower index.
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();
Try it Yourself 
The
shift()
method returns the value that was "shifted out":
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.shift();
Try it Yourself 
JavaScript Array unshift()
The
unshift()
method adds a new element to an array (at the beginning), and "unshifts" 
older elements:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");
Try it Yourself 
The
unshift()
method returns the new array length:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");
Try it Yourself 
Changing Elements
Array elements are accessed using their
index number
:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0] = "Kiwi";
Try it Yourself 
JavaScript Array length
The
length
property provides an easy way to append a new element to an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";
Try it Yourself 
JavaScript Array delete()
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];
Try it Yourself 
Merging Arrays (Concatenating)
In programming languages, concatenation means joining strings end-to-end.
Concatenation "snow" and "ball" gives "snowball".
Concatenating arrays means joining arrays end-to-end.
JavaScript Array concat()
The
concat()
method creates a new array by merging (concatenating) 
existing arrays:
Example (Merging Two Arrays)
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];
const myChildren = myGirls.concat(myBoys);
Try it Yourself 
Example (Merging Three Arrays)
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);
Try it Yourself 
The
concat()
method can also take strings as arguments:
Example (Merging an Array with Values)
const arr1 = ["Emil", "Tobias", "Linus"];
const myChildren = arr1.concat("Peter");
Try it Yourself 
Array copyWithin()
The
copyWithin()
method copies array elements to another position in an array:
Examples
Copy to index 2, all elements from index 0:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.copyWithin(2, 0);
Try it Yourself 
Copy to index 2, the elements from index 0 to 2:
const fruits = ["Banana", "Orange", "Apple", "Mango", "Kiwi"];
fruits.copyWithin(2, 0, 2);
Try it Yourself 
Flattening an Array
Flattening an array is the process of reducing the dimensionality of an array.
Flattening is useful when you want to convert a multi-dimensional array into a one-dimensional array.
JavaScript Array flat()
ES2019
Introduced the Array flat() method.
The
flat()
method creates a new array with sub-array elements concatenated to a specified depth.
Example
const myArr = [[1,2],[3,4],[5,6]];
const newArr = myArr.flat();
Try it Yourself 
Browser Support
JavaScript Array
flat()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
JavaScript Array flatMap()
ES2019 added the Array
flatMap()
method to JavaScript.
The
flatMap()
method first maps all elements of an array
and then creates a new array by flattening the array.
Example
const myArr = [1, 2, 3, 4, 5, 6];
const newArr = myArr.flatMap(x => [x, x * 10]);
Try it Yourself 
Browser Support
JavaScript Array
flatMap()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
Splicing and Slicing Arrays
The
splice()
method adds new items to an array.
The
slice()
method slices out a piece of an array.
JavaScript Array splice()
The
splice()
method can be used to add new items to an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
Try it Yourself 
The first parameter (2) defines the position
where
new elements should be
added
(spliced in).
The second parameter (0) defines
how many
elements should be
removed
.
The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be
added
.
The
splice()
method returns an array with the deleted items:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 2, "Lemon", "Kiwi");
Try it Yourself 
Using splice() to Remove Elements
With clever parameter setting, you can use
splice()
to remove elements without leaving 
"holes" in the array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);
Try it Yourself 
The first parameter (0) defines the position where new elements should be
added
(spliced in).
The second parameter (1) defines
how many
elements should be
removed
.
The rest of the parameters are omitted. No new elements will be added.
JavaScript Array toSpliced()
ES2023
added the Array toSpliced() method as a safe way to splice an array without altering the original array.
The difference between the new
toSpliced()
method and the old
splice()
method is that the new method
creates a new array, keeping the original array unchanged, while the old method altered the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const spliced = months.toSpliced(0, 1);
Try it Yourself 
JavaScript Array slice()
The
slice()
method slices out a piece of an array into a new 
array:
Example
Slice out a part of an array starting from array element 1 ("Orange"):
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);
Try it Yourself 
Example
Slice out a part of an array starting from array element 3 ("Apple"):
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(3);
Try it Yourself 
The
slice()
method can take two arguments like
slice(1, 3)
.
The method then selects elements from the start argument, and up to (but not 
including) the end argument.
Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);
Try it Yourself 
If the end argument is omitted, like in the first examples, the
slice()
method slices out the rest of the array.
Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(2);
Try it Yourself 
Automatic toString()
JavaScript automatically converts an array to a comma separated string when a 
primitive value is expected.
This is always the case when you try to output an array.
These two examples will produce the same result:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Try it Yourself 
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;
Try it Yourself 
Searching Arrays
Searching arrays
are covered in the next chapter of this tutorial.
Sorting Arrays
Sorting arrays
covers the methods used to sort arraysg.
Iterating Arrays
Iterating arrays
covers methods that operate on all array elements.
Test Yourself With Exercises
Exercise:
Use the correct Array method to remove the
last item
of the
fruits
array.
const fruits = ["Banana", "Orange", "Apple"];
;
Submit Answer 
Start the Exercise
JavaScript Array Iteration
Array Iteration Methods
Array iteration methods operate on every array item:
Array forEach
Array map()
Array flatMap()
Array filter()
Array reduce()
Array reduceRight()
See Also:
Basic Array Methods
Array Search Methods
Array Sort Methods
Array every()
Array some()
Array from()
Array keys()
Array entries()
Array with()
Array Spread (...)
JavaScript Array forEach()
The
forEach()
method calls a function (a callback function) once for each array element.
Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);
function myFunction(value, index, array) {
txt += value + "<br>";
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
The example above uses only the value parameter. The example can be rewritten 
to:
Example
const numbers = [45, 4, 9, 16, 25];
let txt = "";
numbers.forEach(myFunction);
function myFunction(value) {
txt += value + "<br>";
}
Try it Yourself 
JavaScript Array map()
The
map()
method creates a new array by performing a function on each array element.
The
map()
method does not execute the function for array 
elements without values.
The
map()
method does not change the original array.
This example multiplies each array value by 2:
Example
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);
function myFunction(value, index, array) {
return value * 2;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
When a callback function uses only the value parameter, the index and array 
parameters can be omitted:
Example
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);
function myFunction(value) {
return value * 2;
}
Try it Yourself 
JavaScript Array flatMap()
ES2019
added the Array
flatMap()
method to JavaScript.
The
flatMap()
method first maps all elements of an array
and then creates a new array by flattening the array.
Example
const myArr = [1, 2, 3, 4, 5, 6];
const newArr = myArr.flatMap((x) => x * 2);
Try it Yourself 
Browser Support
JavaScript Array
flatMap()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
JavaScript Array filter()
The
filter()
method creates a new array with array elements that pass a test.
This example creates a new array from elements with a value larger than 18:
Example
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {
return value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
In the example above, the callback function does not use the index and array 
parameters, so they can be omitted:
Example
const numbers = [45, 4, 9, 16, 25];
const over18 = 
  numbers.filter(myFunction);
function myFunction(value) {
return value > 18;
}
Try it Yourself 
JavaScript Array reduce()
The
reduce()
method runs a function on each array element to produce (reduce it to) a single value.
The
reduce()
method works from left-to-right in the array. See also
reduceRight()
.
This example finds the sum of all numbers in an array:
Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value, index, array) {
return total + value;
}
Try it Yourself 
Note that the function takes 4 arguments:
The total (the initial value / previously returned value)
The item value
The item index
The array itself
The example above does not use the index and array parameters. It can be 
rewritten to:
Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value) {
return total + value;
}
Try it Yourself 
The
reduce()
method can accept an initial value:
Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 
  100);
function myFunction(total, value) {
return total + value;
}
Try it Yourself 
JavaScript Array reduceRight()
The
reduceRight()
method runs a function on each array element to produce (reduce it to) a single value.
The
reduceRight()
works from right-to-left in the array. See also
reduce()
.
This example finds the sum of all numbers in an array:
Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);
function myFunction(total, value, index, array) {
return total + value;
}
Try it Yourself 
Note that the function takes 4 arguments:
The total (the initial value / previously returned value)
The item value
The item index
The array itself
The example above does not use the index and array parameters. It can be 
rewritten to:
Example
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);
function myFunction(total, value) {
return total + value;
}
Try it Yourself 
JavaScript Array every()
The
every()
method checks if all array values pass a test.
This example checks if all array values are larger than 18:
Example
const numbers = [45, 4, 9, 16, 25];
let allOver18 = 
  numbers.every(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
When a callback function uses the first parameter only (value), the other 
parameters can be omitted:
Example
const numbers = [45, 4, 9, 16, 25];
let allOver18 = 
  numbers.every(myFunction);
function myFunction(value) {
return 
  value > 18;
}
Try it Yourself 
JavaScript Array some()
The
some()
method checks if some array values pass a test.
This example checks if some array values are larger than 18:
Example
const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);
function myFunction(value, index, array) {
return 
  value > 18;
}
Try it Yourself 
Note that the function takes 3 arguments:
The item value
The item index
The array itself
JavaScript Array.from()
The
Array.from()
method returns an Array object from any object with a length 
property or any iterable object.
Example
Create an Array from a String:
Array.from("ABCDEFG");
Try it Yourself 
Browser Support
from()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
from()
is not supported in Internet Explorer.
JavaScript Array keys()
The
Array.keys()
method returns an Array Iterator object with the keys of an array.
Example
Create an Array Iterator object, containing the keys of the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();
for (let x of keys) {
text += x + "<br>";
}
Try it Yourself 
Browser Support
keys()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
keys()
is not supported in Internet Explorer.
JavaScript Array entries()
Example
Create an Array Iterator, and then iterate over the key/value pairs:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();
for (let x of f) {
document.getElementById("demo").innerHTML += x;
}
Try it Yourself 
The
entries()
method returns an Array Iterator object with key/value pairs:
[0, "Banana"]
[1, "Orange"]
[2, "Apple"]
[3, "Mango"]
The
entries()
method does not change the original array.
Browser Support
entries()
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
entries()
is not supported in Internet Explorer.
JavaScript Array with() Method
ES2023
added the Array with() method as a safe way to update elements in an array without altering the original array.
Example
const months = ["Januar", "Februar", "Mar", "April"];
const myMonths = months.with(2, "March");
Try it Yourself 
JavaScript Array Spread (...)
The ... operator expands an iterable (like an array) into more elements:
Example
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];
const year = [...q1, ...q2, ...q3, ...q4];
Try it Yourself 
Browser Support
...
is an
ES6  feature
(JavaScript 2015).
ES6 is fully supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
...
is not supported in Internet Explorer.
JavaScript
While Loop
Loops can execute a block of code
as long as a specified condition is true.
The While Loop
The
while
loop loops through a block of code as long as a specified condition is true.
Syntax
while (
condition
) {
// code block to be executed
}
Example
In the following example, the code in the loop will run, over and over again, as long as 
a variable (i) is less than 10:
Example
while (i < 10) {
text += "The number is " + i;
i++;
}
Try it Yourself 
The Do While Loop
The
do while
loop is a variant of the while loop. This loop will 
execute the code block once, before checking if the condition is true, then it will
repeat the loop as long as the condition is true.
Syntax
do {
// code block to be executed
}
while (
condition
);
Example
The example below uses a
do while
loop. The loop will always be 
executed at least once, even if the condition is false, because the code block 
is executed before the condition is tested:
Example
do {
text += "The number is " + i;
i++;
}
while (i < 10);
Try it Yourself 
Do not forget to increase the variable used in the condition, otherwise 
the loop will never end!
Comparing For and While
If you have read the previous chapter, about the for loop, you will discover that a while loop is 
much the same as a for loop, with statement 1 and statement 3 omitted.
The loop in this example uses a
for
loop to collect the car 
names from the cars array:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 0;
let text = "";
for (;cars[i];) {
text += cars[i];
i++;
}
Try it Yourself 
The loop in this example uses a
while
loop to collect the 
car names from the cars array:
Example
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 0;
let text = "";
while (cars[i]) {
text += cars[i];
i++;
}
Try it Yourself 
Test Yourself With Exercises
Exercise:
Create a loop that runs as long as
i
is less than 10.
let i = 0;
(i
10) {
  console.log(i);
  i++
}
Submit Answer 
Start the Exercise
ECMAScript 2022
New Features in ES2022
Array at()
String at()
RegExp /d
Object.hasOwn()
error.cause
await import
Class field declarations
Private methods and fields
Warning
These features are relatively new.
Older browsers may need an alternative code (Polyfill)
JavaScript Array at()
ES2022 intoduced the array method
at()
:
Examples
Get the third element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.at(2);
Try it Yourself 
Get the third element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[2];
Try it Yourself 
The
at()
method returns an indexed element from an array.
The
at()
method returns the same as
[]
.
The
at()
method is supported in all modern browsers since March 2022:
Chrome 92
Edge 92
Firefox 90
Safari 15.4
Opera 78
Apr 2021
Jul 2021
Jul 2021
Mar 2022
Aug 2021
JavaScript String at()
ES2022 intoduced the string method
at()
:
Examples
Get the third letter of name:
const name = "W3Schools";
let letter = name.at(2);
Try it Yourself 
Get the third letter of name:
const name = "W3Schools";
let letter = name[2];
Try it Yourself 
The
at()
method returns an indexed element from an string.
The
at()
method returns the same as
[]
.
The
at()
method is supported in all modern browsers since March 2022:
Chrome 92
Edge 92
Firefox 90
Safari 15.4
Opera 78
Apr 2021
Jul 2021
Jul 2021
Mar 2022
Aug 2021
RegExp d Modifier
ES2022 added the /d modifier to express the start and end of the match.
Example
let text = "aaaabb";
let result = text.match(/(aa)(bb)/d);
Try it Yourself 
RegExp Modifiers are used to spescfy case-insensitive, and other global searches:
Modifier
Description
Try it
i
Perform case-insensitive matching
Try it 
g
Perform a global match (find all)
Try it 
m
Perform multiline matching
Try it 
d
Perform substring matches (New in ES2022)
Try it 
Object hasOwn
ES2022 provides a safe way to check if a property is the own property of an object.
Object.hasOwn()
is similar to
Object.prototype.hasOwnProperty
but supports all object types.
Example
Object.hasOwn("initProp")
Try it Yourself 
Error Cause
ES2022 let you specify the reason behind an error with
error.cause
.
Example
try {
  connectData();
} catch (err) {
  throw new Error("Connecting failed.", { cause: err });
}
Try it Yourself 
JavaScript await import
JavasSript modules can now wait for resources that require import before running:
import {myData} from './myData.js';
const data = await myData();
JavaScript Class Field Declarations
class Hello {
counter = 0; // Class field
}
const myClass = new Hello();
let x = myClass.counter;
Class Field Declarations is supported in all modern browsers since April 2021:
Chrome 72
Edge 79
Firefox 69
Safari 14.1
Opera 60
Jan 2019
Jan 2020
Sep 2019
Apr 2021
Jan 2020
JavaScript Private Methods and Fields
class Hello {
#counter = 0; // Private field
#myMethod() {} // Private method
}
const myClass = new Hello();
let x = myClass.#counter;  // Error
myClass.#myMethod(); // Error
Private Methods and Fields is supported in all modern browsers since June 2021:
Chrome 74
Edge 79
Firefox 90
Safari 14.1
Opera 62
Apr 2019
Jan 2020
Jun 2021
Apr 2021
Jun 2019
JavaScript
Common Mistakes
This chapter points out some common JavaScript mistakes.
Accidentally Using the Assignment Operator
JavaScript programs may generate unexpected results if a programmer 
accidentally uses an assignment operator (
=
), instead of a comparison operator 
(
==
) in an if statement.
This
if
statement returns
false
(as 
expected) because x is 
not equal to 10:
let x = 0;
if (x == 10)
Try it Yourself 
This
if
statement returns
true
(maybe not 
as expected), because 10 is  
true:
let x = 0;
if (x = 10)
Try it Yourself 
This
if
statement returns
false
(maybe not 
as expected), because 0 is  
false:
let x = 0;
if (x = 0)
Try it Yourself 
Expecting Loose Comparison
In regular comparison, data type does not matter. This
if
statement returns 
true:
let x = 10;
let y = "10";
if (x == y)
Try it Yourself 
In strict comparison, data type does matter. This
if
statement returns false:
let x = 10;
let y = "10";
if (x === y)
Try it Yourself 
It is a common mistake to forget that
switch
statements use strict 
comparison:
This
case switch
will display an alert:
let x = 10;
switch(x) {
case 10: alert("Hello");
}
Try it Yourself 
This
case switch
will not display an alert:
let x = 10;
switch(x) {
case "10": alert("Hello");
}
Try it Yourself 
Confusing Addition & Concatenation
Addition
is about adding
numbers
.
Concatenation
is about adding
strings
.
In JavaScript both operations use the same
+
operator.
Because of this, adding a number as a number will produce a different 
result from adding a number as a string:
let x = 10;
x = 10 + 5; // 
    Now x is 15
let y = 10;
y += "5"; 
    // Now y is "105"
Try it Yourself 
When adding two variables, it can be difficult to anticipate the result:
let x = 10;
let y = 5;
let z = x + y;// Now z is 15
let x = 10;
let y = "5";
let z = x + y; // Now z is "105"
Try it Yourself 
Misunderstanding Floats
All numbers in JavaScript are stored as 64-bits
Floating point numbers
(Floats).
All programming languages, including JavaScript, have difficulties with 
precise floating point values:
let x = 0.1;
let y = 0.2;
let z = x + y 
    // the result in z will not be 0.3
Try it Yourself 
To solve the problem above, it helps to multiply and divide:
Example
let z = (x * 10 + y * 10) / 10; // z will be 0.3
Try it Yourself 
Breaking a JavaScript String
JavaScript will allow you to break a statement into two lines:
Example 1
let x =
"Hello World!";
Try it Yourself 
But, breaking a statement in the middle of a string will not work:
Example 2
let x = "Hello
World!";
Try it Yourself 
You must use a "backslash" if you must break a statement in a string:
Example 3
let x = "Hello \
World!";
Try it Yourself 
Misplacing Semicolon
Because of a misplaced semicolon, this code block will execute regardless of 
the value of x:
if (x == 19);
{
// code block
}
Try it Yourself 
Breaking a Return Statement
It is a default JavaScript behavior to close a statement automatically at the 
end of a line.
Because of this, these two examples will return the same result:
Example 1
function myFunction(a) {
let power = 10
return a * power
}
Try it Yourself 
Example 2
function myFunction(a) {
let power = 10;
return a * power;
}
Try it Yourself 
JavaScript will also allow you to break a statement into two lines.
Because of this, example 3 will also return the same result:
Example 3
function myFunction(a) {
let
power = 10;
return a * power;
}
Try it Yourself 
But, what will happen if you break the return statement in two lines like 
this:
Example 4
function myFunction(a) {
let
power = 10;
return
a * power;
}
Try it Yourself 
The function will return
undefined
!
Why? Because JavaScript thought you meant:
Example 5
function myFunction(a) {
let
power = 10;
return;
a * power;
}
Try it Yourself 
Explanation
If a statement is incomplete like:
let
JavaScript will try to complete the statement by reading the next line:
power = 10;
But since this statement is complete:
return
JavaScript will automatically close it like this:
return;
This happens because closing (ending) statements with semicolon is optional in 
JavaScript.
JavaScript will close the return statement at the end of the line, because 
it is a complete statement.
Accessing Arrays with Named Indexes
Many programming languages support arrays with named indexes.
Arrays with named indexes are called associative 
arrays (or hashes).
JavaScript does
not
support arrays with named indexes.
In JavaScript,
arrays
use
numbered indexes
:
Example
const person = [];
person[0] = "John";
person[1] = "Doe";
person[2] = 46;
person.length; 
 // person.length will return 3
person[0]; 
 // person[0] will return "John"
Try it Yourself 
In JavaScript,
objects
use
named indexes
.
If you use a named index, when accessing an array, JavaScript will redefine 
the array to a standard object.
After the automatic redefinition, array methods and properties will produce undefined or 
incorrect results:
Example:
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length; // person.length will 
 return 0
person[0]; 
 // person[0] will return undefined
Try it Yourself 
Ending Definitions with a Comma
Trailing commas in object and array definition are legal in ECMAScript 5.
Object Example:
person = {firstName:"John", lastName:"Doe", age:46,}
Array Example:
points = [40, 100, 1, 5, 25, 10,];
JSON:
person = {"firstName":"John", "lastName":"Doe", "age":46}
JSON:
points = [40, 100, 1, 5, 25, 10];
Undefined is Not Null
JavaScript objects, variables, properties, and methods can be
undefined
.
In addition, empty JavaScript objects can have the value
null
.
This can make it a little bit difficult to test if an object is empty.
You can test if an object exists by testing if the type is
undefined
:
Example:
if (typeof myObj === "undefined")
Try it Yourself 
But you cannot test if an object is
null
, because this will throw an error if the 
object is
undefined
:
Incorrect:
if (myObj === null)
To solve this problem, you must test if an object is not
null
, 
and not
undefined
.
But this can still throw an error:
Incorrect:
if (myObj !== null && typeof myObj 
  !== "undefined")
Because of this, you must test for not
undefined
before you can 
test for not
null
:
Correct:
if (typeof myObj !== "undefined" && myObj !== null)
Try it Yourself 
JavaScript Map Methods
The new Map() Method
You can create a map by passing an array to the
new Map()
constructor:
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
Try it Yourself 
Map.get()
You get the value of a key in a map with the
get()
method
Example
fruits.get("apples");
Try it Yourself 
Map.set()
You can add elements to a map with the
set()
method:
Example
// Create a Map
const fruits = new Map();
// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
Try it Yourself 
The
set()
method can also be used to change existing map values:
Example
fruits.set("apples", 500);
Try it Yourself 
Map.size
The
size
property returns the number of elements in a map:
Example
fruits.size;
Try it Yourself 
Map.delete()
The
delete()
method removes a map element:
Example
fruits.delete("apples");
Try it Yourself 
Map.clear()
The
clear()
method removes all the elements from a map:
Example
fruits.clear();
Try it Yourself 
Map.has()
The
has()
method returns true if a key exists in a map:
Example
fruits.has("apples");
Try it Yourself 
Try This:
fruits.delete("apples");
fruits.has("apples");
Try it Yourself 
Map.forEach()
The
forEach()
method invokes a callback for each key/value pair in a map:
Example
// List all entries
let text = "";
fruits.forEach (function(value, key) {
text += key + ' = ' + value;
})
Try it Yourself 
Map.entries()
The
entries()
method returns an iterator object with the [key,values] in a map:
Example
// List all entries
let text = "";
for (const x of fruits.entries()) {
text += x;
}
Try it Yourself 
Map.keys()
The
keys()
method returns an iterator object with the keys in a map:
Example
// List all keys
let text = "";
for (const x of fruits.keys()) {
text += x;
}
Try it Yourself 
Map.values()
The
values()
method returns an iterator object with the values in a map:
Example
// List all values
let text = "";
for (const x of fruits.values()) {
text += x;
}
Try it Yourself 
You can use the
values()
method to sum the values in a map:
Example
// Sum all values
let total = 0;
for (const x of fruits.values()) {
total += x;
}
Try it Yourself 
Objects as Keys
Example
// Create Objects
const apples = {name: 'Apples'};
const bananas = {name: 'Bananas'};
const oranges = {name: 'Oranges'};
// Create a Map
const fruits = new Map();
// Add new Elements to the Map
fruits.set(apples, 500);
fruits.set(bananas, 300);
fruits.set(oranges, 200);
Try it Yourself 
Remember: The key is an object (apples), not a string ("apples"):
Example
fruits.get("apples");// Returns undefined
Try it Yourself 
JavaScript Map.groupBy()
ES2024 added the
Map.groupBy()
method to JavaScript.
The
Map.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Map.groupBy()
method does not change the original object.
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Map.groupBy(fruits, myCallback);
Try it Yourself 
Browser Support
Map.groupby()
is an ES2024 feature.
It is supported in new browsers since March 2024:
Chrome 117
Edge 117
Firefox 119
Safari 17.4
Opera 103
Sep 2023
Sep 2023
Oct 2023
Okt 2024
May 2023
Warning
ES2024 features are relatively new.
Older browsers may need an alternative code (Polyfill)
Object.groupBy() vs Map.groupBy()
The difference between Object.groupBy() and Map.groupBy() is:
Object.groupBy() groups elements into a JavaScript object.
Map.groupBy() groups elements into a Map object.
JavaScript Set Methods
The new Set() Method
Pass an array to the
new Set()
constructor:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
Try it Yourself 
The add() Method
Example
letters.add("d");
letters.add("e");
Try it Yourself 
If you add equal elements, only the first will be saved:
Example
letters.add("a");
letters.add("b");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
Try it Yourself 
Listing Set Elements
You can list all Set elements (values) with a
for..of
loop:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Elements
let text = "";
for (const x of letters) {
text += x;
}
Try it Yourself 
The has() Method
The
has()
method returns
true
if a specified value exists in a set.
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Does the Set contain "d"?
answer = letters.has("d");
Try it Yourself 
The forEach() Method
The
forEach()
method invokes a function for each Set element:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all entries
let text = "";
letters.forEach (function(value) {
text += value;
})
Try it Yourself 
The values() Method
The
values()
method returns an Iterator object with the values in a Set:
Example 1
// Create a Set
const letters = new Set(["a","b","c"]);
// Get all Values
const myIterator = letters.values();
// List all Values
let text = "";
for (const entry of myIterator) {
text += entry;
}
Try it Yourself 
Example 2
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Values
let text = "";
for (const entry of letters.values()) {
text += entry;
}
Try it Yourself 
The keys() Method
The
keys()
method returns an Iterator object with the values in a Set:
Example 1
// Create a Set
const letters = new Set(["a","b","c"]);
// Create an Iterator
const myIterator = letters.keys();
// List all Elements
let text = "";
for (const x of myIterator) {
text += x;
}
Try it Yourself 
Example 2
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Elements
let text = "";
for (const x of letters.keys()) {
text += x;
}
Try it Yourself 
The entries() Method
The
entries()
method returns an Iterator with [value,value] pairs from a Set.
Example 1
// Create a Set
const letters = new Set(["a","b","c"]);
// Get all Entries
const myIterator = letters.entries();
// List all Entries
let text = "";
for (const entry of myIterator) {
text += entry;
}
Try it Yourself 
Example 2
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Entries
let text = "";
for (const entry of letters.entries()) {
text += entry;
}
Try it Yourself 
JavaScript
Array Const
ECMAScript 2015 (ES6)
In 2015, JavaScript introduced an important new keyword:
const
.
It has become a common practice to declare arrays using
const
:
Example
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
Cannot be Reassigned
An array declared with
const
cannot be reassigned:
Example
const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"]; // ERROR
Try it Yourself 
Arrays are Not Constants
The keyword
const
is a little misleading.
It does NOT define a constant array. It defines a constant reference to an array.
Because of this, we can still change the elements of a constant array.
Elements Can be Reassigned
You can change the elements of a constant array:
Example
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];
// You can change an element:
cars[0] = "Toyota";
// You can add an element:
cars.push("Audi");
Try it Yourself 
Browser Support
The
const
keyword is not supported in Internet Explorer 10 or earlier.
The following table defines the first browser versions with full support for the
const
keyword:
Chrome 49
IE 11 / Edge
Firefox 36
Safari 10
Opera 36
Mar, 2016
Oct, 2013
Feb, 2015
Sep, 2016
Mar, 2016
Assigned when Declared
JavaScript
const
variables must be assigned a value when they are declared:
Meaning: An array declared with
const
must be initialized when it is declared.
Using
const
without initializing the array is a syntax 
error:
Example
This will not work:
const cars;
cars = ["Saab", "Volvo", "BMW"];
Arrays declared with
var
can be initialized at any time.
You can even use the array before it is declared:
Example
This is OK:
cars = ["Saab", "Volvo", "BMW"];
var cars;
Try it Yourself 
Const Block Scope
An array declared with
const
has
Block Scope
.
An array declared in a block is not the same as an array declared outside the block:
Example
const cars = ["Saab", "Volvo", "BMW"];
// Here cars[0] is "Saab"
{
const cars = ["Toyota", "Volvo", "BMW"];
// Here cars[0] is "Toyota"
}
// Here cars[0] is
"Saab"
Try it Yourself 
An array declared with
var
does not have block scope:
Example
var cars = ["Saab", "Volvo", "BMW"];
// Here cars[0] is "Saab"
{
var cars = ["Toyota", "Volvo", "BMW"];
// Here cars[0] is "Toyota"
}
// Here cars[0] is
"Toyota"
Try it Yourself 
You can learn more about Block Scope in the chapter:
JavaScript Scope
.
Redeclaring Arrays
Redeclaring an array declared with
var
is allowed anywhere in a program:
Example
var cars = ["Volvo", "BMW"]; // Allowed
var cars = ["Toyota", "BMW"]; // Allowed
cars = ["Volvo", "Saab"]; // Allowed
Redeclaring or reassigning an array to
const
, in the same scope, or in 
the same block, is not allowed:
Example
var cars = ["Volvo", "BMW"];// Allowed
const cars = ["Volvo", "BMW"];// Not allowed
{
var cars = ["Volvo", "BMW"];// Allowed
const cars = ["Volvo", "BMW"];// Not allowed
}
Redeclaring or reassigning an existing
const
array, in the same scope, or in 
the same block, is not allowed:
Example
const cars = ["Volvo", "BMW"];// Allowed
const cars = ["Volvo", "BMW"];// Not allowed
var cars = ["Volvo", "BMW"]; // Not allowed
cars = ["Volvo", "BMW"];// Not allowed
{
const cars = ["Volvo", "BMW"];// Allowed
const cars = ["Volvo", "BMW"];// Not allowed
var cars = ["Volvo", "BMW"];// Not allowed
cars = ["Volvo", "BMW"];// Not allowed
}
Redeclaring an array with
const
, in another scope, or in another block, is allowed:
Example
const cars = ["Volvo", "BMW"];// Allowed
{
const cars = ["Volvo", "BMW"];// Allowed
}
{
const cars = ["Volvo", "BMW"];// Allowed
}
JavaScript Destructuring
Destructuring Assignment Syntax
The destructuring assignment syntax unpack object properties into variables:
let {firstName, lastName} = person;
It can also unpack arrays and any other iterables:
let [firstName, lastName] = person;
Object Destructuring
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50
};
// Destructuring
let {firstName, lastName} = person;
Try it Yourself 
The order of the properties does not matter:
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50
};
// Destructuring
let {lastName, firstName} = person;
Try it Yourself 
Object Default Values
For potentially missing properties we can set default values:
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50
};
// Destructuring
let {firstName, lastName, country = "US"} = person;
Try it Yourself 
Object Property Alias
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50
};
// Destructuring
let {lastName : name} = person;
Try it Yourself 
String Destructuring
One use for destructuring is unpacking string characters.
Example
// Create a String
let name = "W3Schools";
// Destructuring
let [a1, a2, a3, a4, a5] = name;
Try it Yourself 
Array Destructuring
We can pick up array variables into our own variables:
Example
// Create an Array
const fruits = ["Bananas", "Oranges", "Apples", "Mangos"];
// Destructuring
let [fruit1, fruit2] = fruits;
Try it Yourself 
Skipping Array Values
We can skip array values using two or more commas:
Example
// Create an Array
const fruits = ["Bananas", "Oranges", "Apples", "Mangos"];
// Destructuring
let [fruit1,,,fruit2] = fruits;
Try it Yourself 
Array Position Values
We can pick up values from specific index locations of an array:
Example
// Create an Array
const fruits = ["Bananas", "Oranges", "Apples", "Mangos"];
// Destructuring
let {[0]:fruit1 ,[1]:fruit2} = fruits;
Try it Yourself 
The Rest Property
You can end a destructuring syntax with a rest property.
This syntax will store all remaining values into a new array:
Example
// Create an Array
const numbers = [10, 20, 30, 40, 50, 60, 70];
// Destructuring
const [a,b, ...rest] = numbers
Try it Yourself 
Destructuring Maps
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Destructing
let text = "";
for (const [key, value] of fruits) {
text += key + " is " + value;
}
Try it Yourself 
Swapping JavaScript Variables
You can swap the values of two variables using a destructuring assignment:
Example
let firstName = "John";
let lastName = "Doe";
// Destructing
[firstName, lastName] = [lastName, firstName];
Try it Yourself 
Internet Explorer Retirement
Microsoft ended all support for Internet Explorer
June 15, 2022.
Earlier Announcements
Microsoft Edge Legacy
Edge was the default browser for Windows 10.
It was built with Microsoft's browser engine
EdgeHTML
and their
Chakra
JavaScript engine.
The first versions of Edge (12-18), are now referred to as "
Edge Legacy
".
The Microsoft support for Edge Legacy ended on March 9, 2021.
Future Windows updates will replace Edge Legacy with
The New Edge
.
The New Edge
The new Microsoft Edge is
Chromium
based with
Blink
and
V8
engines.
It was released in January 2020, and is available for Windows 7, 8, and 10.
It can also be downloaded for macOS, iOS, and Android.
The new Edge follows the
Modern Lifecycle Policy
(updates on an approx. six-week cycle).
Google
Old Operating Systems
Internet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy
for these products:
System
Default Browser
Windows 7
Internet Explorer 11
Windows 8.X
Internet Explorer 11
Windows 10
Internet Explorer 11
Windows Server 2012
Internet Explorer 11
Windows Server 2012 R2
Internet Explorer 11
Windows Server 2016
Internet Explorer 11
Windows Embedded Standard 7
Internet Explorer 11
Windows Embedded POSReady 7
Internet Explorer 11
Windows Thin PC
Internet Explorer 11
Windows Embedded 8 Standard
Internet Explorer 11
Windows 8.1 Industry Update
Internet Explorer 11
Old Applications
Some old PCs (like in public libraries) are still using Internet Explorer.
Some legacy web applications are using Internet Explorer.
Some legacy web applications are using Internet Explorer runtime DLLs.
Some AJAX based applications are using Microsoft ActiveX components.
In order to ease the migration from Internet Explorer,
Microsoft Edge offers
Internet Explorer Mode
, providing backward compatibility
and enabling customers to continue to run legacy web applications.
JavaScript Callbacks
Function Sequence
JavaScript functions are executed in the sequence they are called.
Not in the sequence they are defined.
This example will end up displaying "Goodbye":
Example
function myFirst() {
myDisplayer("Hello");
}
function 
  mySecond() {
myDisplayer("Goodbye");
}
myFirst();
mySecond();
Try it Yourself 
This example will end up displaying "Hello":
Example
function myFirst() {
myDisplayer("Hello");
}
function 
  mySecond() {
myDisplayer("Goodbye");
}
mySecond();
myFirst();
Try it Yourself 
Sequence Control
Sometimes you would like to have better control over when to execute a function.
Suppose you want to do a calculation, and then display the result.
You could call a calculator function (
myCalculator
), save the result,
and then call another function (
myDisplayer
) to display the result:
Example
function myDisplayer(some) {
document.getElementById("demo").innerHTML = some;
}
function myCalculator(num1, num2) {
let sum = num1 + num2;
return sum;
}
let result = myCalculator(5, 5);
myDisplayer(result);
Try it Yourself 
Or, you could call a calculator function (
myCalculator
),
and let the calculator function call the display function (
myDisplayer
):
Example
function myDisplayer(some) {
document.getElementById("demo").innerHTML 
  = some;
}
function myCalculator(num1, num2) {
let sum = num1 + num2;
myDisplayer(sum);
}
myCalculator(5, 5);
Try it Yourself 
The problem with the first example above, is that you have to call two functions to display the result.
The problem with the second example, is that you cannot prevent the calculator function from 
displaying the result.
Now it is time to bring in a callback.
JavaScript Callbacks
Using a callback, you could call the calculator function (
myCalculator
)
with a callback (
myCallback
), and let the calculator function run the callback after the calculation is finished:
Example
function myDisplayer(some) {
document.getElementById("demo").innerHTML 
  = some;
}
function myCalculator(num1, num2, myCallback) {
let sum = num1 + num2;
myCallback(sum);
}
myCalculator(5, 5, myDisplayer);
Try it Yourself 
In the example above,
myDisplayer
is a called a
callback function
.
It is passed to
myCalculator()
as an
argument
.
Example
// Create an Array
const myNumbers = [4, 1, -20, -7, 5, 9, -6];
// Call removeNeg with a callback
const posNumbers = removeNeg(myNumbers, (x) => x >= 0);
// Display Result
document.getElementById("demo").innerHTML = posNumbers;
// Keep only positive numbers
function removeNeg(numbers, callback) {
const myArray = [];
for (const x of numbers) {
if (callback(x)) {
myArray.push(x);
}
}
return myArray;
}
Try it Yourself 
In the example above,
(x) => x >= 0
is a
callback function
.
It is passed to
removeNeg()
as an
argument
.
When to Use a Callback?
The examples above are not very exciting.
They are simplified to teach you the callback syntax.
Where callbacks really shine are in asynchronous functions, 
where one function has to wait for another function (like waiting for a file to load).
Asynchronous functions are covered in the next chapter.
JavaScript Errors
Throw, and Try...Catch...Finally
The
try
statement defines a code block to run (to try).
The
catch
statement defines a code block to handle any error.
The
finally
statement defines a code block to run regardless of the result.
The
throw
statement defines a custom error.
Errors Will Happen!
When executing JavaScript code, different errors can 
occur.
Errors can be coding errors made by the programmer, errors due to wrong 
input, and other unforeseeable things.
Example
In this example we misspelled "alert" as "adddlert" to deliberately produce an error:
<p id="demo"></p>
<script>
try {
adddlert("Welcome guest!");
}
catch(err) {
document.getElementById("demo").innerHTML = err.message;
}
</script>
Try it Yourself 
JavaScript try and catch
The
try
statement allows you to define a block of code to be 
tested for errors while it is being executed.
The
catch
statement allows you to define a block of code to 
be executed, if an error occurs in the try block.
The JavaScript statements
try
and
catch
come in pairs:
try {
Block of code to try
}
catch(
err
) {
Block of code to handle errors
}
JavaScript Throws Errors
When an error occurs, JavaScript will 
normally stop and generate an error message.
The technical term for this is: JavaScript will
throw an 
exception (throw an error)
.
The throw Statement
The
throw
statement allows you to create a custom error.
Technically you can
throw an exception (throw an error)
.
The exception can be a JavaScript
String
, a
Number
, a
Boolean
or an
Object
:
throw "Too big"; // throw a text
throw 500; // throw a number
If you use
throw
together with
try
and
catch
, you can control program 
flow and generate custom error messages.
Input Validation Example
This example examines input. If the value is wrong, 
an exception (err) is thrown.
The exception (err) is caught by the catch statement and a custom error message is displayed:
<!DOCTYPE html>
<html>
<body>
<p>Please input a number between 
5 and 10:</p>
<input id="demo" type="text">
<button type="button" 
onclick="myFunction()">Test Input</button>
<p id="p01"></p>
<script>
function myFunction() {
const message = 
document.getElementById("p01");
message.innerHTML = "";
let x = 
document.getElementById("demo").value;
try {
if(x.trim() == "") throw "empty";
if(isNaN(x)) throw "not a number";
x = Number(x);
if(x < 5) throw 
 "too low";
if(x > 10) throw "too 
 high";
}
catch(err) {
message.innerHTML = 
"Input is " + err;
}
}
</script>
</body>
</html>
Try it Yourself 
HTML Validation
The code above is just an example.
Modern browsers will often use a combination of JavaScript and built-in HTML 
validation, using predefined validation rules defined in HTML attributes:
<input id="demo" type="number" min="5" max="10" step="1">
You can read more about forms validation in a later chapter of this tutorial.
The finally Statement
The
finally
statement lets you execute code, after try and 
catch, regardless of the result:
Syntax
try {
Block of code to try
}
catch(
err
) {
Block of code to handle errors
}
finally {
Block of code to be executed regardless of the try / catch result
}
Example
function myFunction() {
const message = 
document.getElementById("p01");
message.innerHTML = "";
let x = 
document.getElementById("demo").value;
try {
if(x.trim() == "") throw "is empty";
if(isNaN(x)) 
throw "is not a number";
x = Number(x);
if(x > 
10) throw "is too high";
if(x < 
5) throw "is too low";
}
catch(err) 
{
message.innerHTML = "Error: " + 
err + ".";
}
finally {
document.getElementById("demo").value = "";
}
}
Try it Yourself 
The Error Object
JavaScript has a built in error object that provides error information when 
an error occurs.
The error object provides two useful properties: name and message.
Error Object Properties
Property
Description
name
Sets or returns an error name
message
Sets or returns an error message (a string)
Error Name Values
Six different values can be returned by the error name property:
Error Name
Description
EvalError
An error has occurred in the eval() function
RangeError
A number "out of range" has occurred
ReferenceError
An illegal reference has occurred
SyntaxError
A syntax error has occurred
TypeError
A type error has occurred
URIError
An error in encodeURI() has occurred
The six different values are described below.
Eval Error
An
EvalError
indicates an error in the eval() function.
Range Error
A
RangeError
is thrown if you use a number that is outside 
the range of legal values.
For example: You cannot set the number of significant digits of a number to 
500.
Example
let num = 1;
try {
num.toPrecision(500); // A number cannot have 500 
 significant digits
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
Reference Error
A
ReferenceError
is thrown if you use (reference) a variable 
that has not been declared:
Example
let x = 5;
try {
x = y + 1; // y cannot be used (referenced)
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
Syntax Error
A
SyntaxError
is thrown if you try to evaluate code with a 
syntax error.
Example
try {
eval("alert('Hello)"); // 
 Missing ' will produce an error
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
Type Error
A
TypeError
is thrown if an operand or argument 
is incompatible with the type expected by an operator or function.
Example
let num = 1;
try {
num.toUpperCase(); // You cannot convert a number 
 to upper case
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
URI (Uniform Resource Identifier) Error
A
URIError
is thrown if you use illegal characters in a URI function:
Example
try {
decodeURI("%%%"); // You cannot URI decode 
  percent signs
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
Non-Standard Error Object Properties
Complete Error Reference
For a complete reference of the Error object, go to our
Complete 
JavaScript Error Reference
.
JavaScript
Debugging
Code Debugging
Programming code might contain syntax errors, or logical errors.
Many of these errors are difficult to diagnose.
Often, when programming code contains errors, nothing will happen. There are 
no error messages, and you will get no indications where to search for errors.
Searching for (and fixing) errors in programming code is called code debugging.
JavaScript Debuggers
Debugging is not easy. But fortunately, all modern browsers have a built-in 
JavaScript debugger.
Built-in debuggers can be turned on and off, forcing errors to be reported to 
the user.
With a debugger, you can also set breakpoints (places where code execution 
can be stopped), and examine variables while the code is executing.
Normally (otherwise follow the steps at the bottom of this page), you activate debugging in your browser with 
the F12 key, and select "Console" in the debugger menu.
The console.log() Method
If your browser supports debugging, you can use
console.log()
to 
display JavaScript values in the debugger window:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
<script>
a = 5;
b = 6;
c = a + b;
console.log(c);
</script>
</body>
</html>
Try it Yourself 
Setting Breakpoints
In the debugger window, you can set breakpoints in the JavaScript code.
At each breakpoint, JavaScript will stop executing, and let you examine 
JavaScript values.
After examining values, you can resume the execution of code (typically with 
a play button).
The debugger Keyword
The
debugger
keyword stops the execution of JavaScript, 
and calls (if available) the debugging function.
This has the same function as setting a breakpoint in the debugger.
If no debugging is available, the debugger statement has no effect.
With the debugger turned on, this code will stop executing before it 
executes the third line.
Example
let x = 15 * 5;
debugger;
document.getElementById("demo").innerHTML = x;
Try it Yourself 
Major Browsers' Debugging Tools
Normally, you activate debugging in your browser with F12, and select "Console" in the debugger menu.
Otherwise follow these steps:
Chrome
Open the browser.
From the menu, select "More tools".
From tools, choose "Developer tools".
Finally, select Console.
Firefox
Open the browser.
From the menu, select "Web Developer".
Finally, select "Web Console".
Edge
Open the browser.
From the menu, select "Developer Tools".
Finally, select "Console".
Opera
Open the browser.
From the menu, select "Developer".
From "Developer", select "Developer tools".
Finally, select "Console".
Safari
Go to Safari, Preferences, Advanced in the main menu.
Check "Enable Show Develop menu in menu bar".
When the new option "Develop" appears in the menu:
Choose "Show Error 
 Console".
Did You Know?
JavaScript
Regular Expressions
A regular expression is a sequence of characters that forms a 
search pattern.
The search pattern can be used for text search and text replace 
operations.
What Is a Regular Expression?
A regular expression is a sequence of characters that forms a
search 
pattern
.
When you search for data in a text, you can use this search pattern to describe what you are searching for.
A regular expression can be a single character, or a more complicated pattern.
Regular expressions can be used to perform all types of
text search
and
text replace
operations.
Syntax
/
pattern
/
modifiers
;
Example
/w3schools/i;
Example explained:
/w3schools/i
is a regular expression.
w3schools
is a pattern (to be used in a search).
i
is a modifier (modifies the search to be case-insensitive).
Using String Methods
In JavaScript, regular expressions are often used with the two
string 
methods
:
search()
and
replace()
.
The
search()
method uses an expression to search for a 
match, and returns the position of the match.
The
replace()
method returns a modified string where the 
pattern is replaced.
Using String search() With a String
The
search()
method searches a string for a specified value and returns the position of the match:
Example
Use a string to do a search for "W3schools" in a string:
let text = "Visit W3Schools!";
let n = text.search("W3Schools");
The result in
n
will be:
6
Try it Yourself 
Using String search() With a Regular Expression
Example
Use a regular expression to do a case-insensitive search for "w3schools" in a string:
let text = "Visit W3Schools";
let n = text.search(/w3schools/i);
The result in
n
will be:
6
Try it Yourself 
Using String replace() With a String
The
replace()
method replaces a specified value with another value in a string:
let text = "Visit Microsoft!";
let result = text.replace("Microsoft", "W3Schools");
Try it Yourself 
Use String replace() With a Regular Expression
Example
Use a case insensitive regular expression to replace Microsoft with W3Schools 
in a string:
let text = "Visit Microsoft!";
let result = text.replace(/microsoft/i, "W3Schools");
The result in
res
will be:
Visit W3Schools!
Try it Yourself 
Did You Notice?
Regular Expression Modifiers
Modifiers
can be used to perform case-insensitive more global searches:
Modifier
Description
Try it
i
Perform case-insensitive matching
Try it 
g
Perform a global match (find all)
Try it 
m
Perform multiline matching
Try it 
d
Perform start and end matching (New in
ES2022
)
Try it 
Regular Expression Patterns
Brackets
are used to find a range of characters:
Expression
Description
Try it
[abc]
Find any of the characters between the brackets
Try it 
[0-9]
Find any of the digits between the brackets
Try it 
(x|y)
Find any of the alternatives separated with |
Try it 
Metacharacters
are characters with a special meaning:
Metacharacter
Description
Try it
\d
Find a digit
Try it 
\s
Find a whitespace character
Try it 
\b
Find a match at the beginning of a word like this: \bWORD, or at the end of a word 
    like this: WORD\b
Try it 
Try it 
\uxxxx
Find the Unicode character specified by the hexadecimal number xxxx
Try it 
Quantifiers
define quantities:
Quantifier
Description
Try it
n+
Matches any string that contains at least one
n
Try it 
n*
Matches any string that contains zero or more occurrences of
n
Try it 
n?
Matches any string that contains zero or one occurrences of
n
Try it 
Using the RegExp Object
In JavaScript, the RegExp object is a regular expression object with 
predefined properties and methods.
Using test()
The
test()
method is a RegExp expression method.
It searches a string for a pattern, and returns true 
or false, depending on the result.
The following example searches a string for the character "e":
Example
const pattern = /e/;
pattern.test("The best things in life are free!");
Since there is an "e" in the string, the output of the code above will be:
true
Try it Yourself 
You don't have to put the regular expression in a variable first. The two 
lines above can be shortened to one:
/e/.test("The best things in life are free!");
Using exec()
The
exec()
method is a RegExp expression method.
It searches a string for a specified pattern, and returns the found text as 
an object.
If no match is found, it returns an empty
(null)
object.
The following example searches a string for the character "e":
Example
/e/.exec("The best things in life are free!");
Try it Yourself 
Complete RegExp Reference
For a complete reference, go to our
Complete 
JavaScript RegExp Reference
.
The reference contains descriptions and examples of all RegExp 
properties and methods.
The JavaScript
this
Keyword
Example
const
person
= {
firstName: "John",
lastName : "Doe",
id :5566,
fullName : function() {
return
this
.firstName + " " +
this
.lastName;
}
};
Try it Yourself 
What is
this
?
In JavaScript, the
this
keyword refers to an
object
.
The
this
keyword refers to
different objects
depending on how it is used:
In an object method,
this
refers to the
object
.
Alone,
this
refers to the
global object
.
In a function,
this
refers to the
global object
.
In a function, in strict mode,
this
is
undefined
.
In an event,
this
refers to the
element
that received the event.
Methods like
call()
,
apply()
,
and
bind()
can refer
this
to
any object
.
this
in a Method
When used in an object method,
this
refers to the
object
.
In the example on top of this page,
this
refers to the
person
object.
Because the
fullName
method is a method of the
person
object.
fullName : function() {
return
this
.firstName + " " +
this
.lastName;
}
Try it Yourself 
this
Alone
When used alone,
this
refers to the
global object
.
Because
this
is running in the global scope.
In a browser window the global object is
[object Window]
:
Example
let x = this;
Try it Yourself 
In
strict mode
, when used alone,
this
also refers to the
global object
:
Example
"use strict";
let x = this;
Try it Yourself 
this
in a Function (Default)
In a function, the
global object
is the default binding for
this
.
In a browser window the global object is
[object Window]
:
Example
function myFunction() {
return this;
}
Try it Yourself 
this
in a Function (Strict)
JavaScript
strict mode
does not allow default binding.
So, when used in a function, in strict mode,
this
is
undefined
.
Example
"use strict";
function myFunction() {
return this;
}
Try it Yourself 
this
in Event Handlers
In HTML event handlers,
this
refers to the HTML element that received the 
event:
Example
<button onclick="this.style.display='none'">
Click to 
  Remove Me!
</button>
Try it Yourself 
Object Method Binding
In these examples,
this
is the
person object
:
Example
const
person
= {
firstName : "John",
lastName : "Doe",
id :5566,
myFunction : function() {
return
this
;
}
};
Try it Yourself 
Example
const
person
= {
firstName: "John",
lastName : "Doe",
id :5566,
fullName : function() {
return
this
.firstName + " " +
this
.lastName;
}
};
Try it Yourself 
i.e.
this.firstName
is the
firstName
property of
this
(the person object).
Explicit Function Binding
The
call()
and
apply()
methods are predefined JavaScript methods.
They can both be used to call an object method with another object as argument.
The example below calls person1.fullName with person2 as an argument,
this
refers to person2,
even if fullName is a method of person1:
Example
const person1 = {
fullName: function() {
return this.firstName + " " + this.lastName;
}
}
const person2 = {
firstName:"John",
lastName: "Doe",
}
// Return "John Doe":
person1.fullName.call(person2);
Try it Yourself 
Function Borrowing
With the
bind()
method, an object can borrow a method from another object.
This example creates 2 objects (person and member).
The member object borrows the fullname method from the person object:
Example
const person = {
firstName:"John",
lastName: "Doe",
fullName: function () {
return this.firstName + " " + this.lastName;
}
}
const member = {
firstName:"Hege",
lastName: "Nilsen",
}
let fullName = person.fullName.bind(member);
Try it Yourself 
This
Precedence
To determine which object
this
refers to; use the following precedence of order.
Precedence
Object
1
bind()
2
apply() and call()
3
Object method
4
Global scope
Is
this
in a function being called using bind()?
Is
this
in a function being called using apply()?
Is
this
in a function being called using call()?
Is
this
in an object function (method)?
Is
this
in a function in the global scope.
JavaScript
Objects
Real Life Objects
In real life,
objects
are things like:
houses, cars, people, animals, or any other subjects.
Here is a
car object
example:
Car Object
Properties
Methods
car.name = Fiat
car.model = 500
car.weight = 850kg
car.color = white
car.start()
car.drive()
car.brake()
car.stop()
Object Properties
A real life car has
properties
like weight and color:
car.name = Fiat, car.model = 500, car.weight = 850kg, car.color = white.
Car objects have the same
properties
, but the
values
differ from car to car.
Object Methods
A real life car has
methods
like start and stop:
car.start(), car.drive(), car.brake(), car.stop().
Car objects have the same
methods
, but the methods are performed
at different times
.
JavaScript Variables
JavaScript variables are containers for data values.
This code assigns a
simple value
(Fiat) to a
variable
named car:
Example
let car = "Fiat";
Try it Yourself 
JavaScript Objects
Objects are variables too. But objects can contain many 
values.
This code assigns
many values
(Fiat, 500, white) to an
object
named car:
Example
const car = {type:"Fiat", model:"500", color:"white"};
Try it Yourself 
JavaScript Object Definition
How to Define a JavaScript Object
Using an Object Literal
Using the
new
Keyword
Using an Object Constructor
JavaScript Object Literal
An object literal is a list of
name:value
pairs inside curly braces
{}
.
{firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}
Creating a JavaScript Object
These examples create a JavaScript object with 4 properties:
Examples
// Create an Object
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Try it Yourself 
Spaces and line breaks are not important. An object initializer can span multiple lines:
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
Try it Yourself 
This example creates an empty JavaScript object, 
and then adds 4 properties:
// Create an Object
const person = {};
// Add Properties
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Try it Yourself 
Using the new Keyword
This example create a new JavaScript object using
new Object()
, 
and then adds 4 properties:
Example
// Create an Object
const person = new Object();
// Add Properties
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";
Try it Yourself 
Object Properties
The
named values
, in JavaScript objects, are called
properties
.
Property
Value
firstName
John
lastName
Doe
age
50
eyeColor
blue
Objects written as name value pairs are similar to:
Associative arrays in PHP
Dictionaries in Python
Hash tables in C
Hash maps in Java
Hashes in Ruby and Perl
Accessing Object Properties
You can access object properties in two ways:
objectName.propertyName
objectName["propertyName"]
Examples
person.lastName;
Try it Yourself 
person["lastName"];
Try it Yourself 
JavaScript Object Methods
Methods are
actions
that can be performed on objects.
Methods are
function definitions
stored as
property values
.
Property
Property Value
firstName
John
lastName
Doe
age
50
eyeColor
blue
fullName
function() {return this.firstName + " " + this.lastName;}
Example
const person = {
firstName: "John",
lastName : "Doe",
id :5566,
fullName : function() {
return this.firstName + " " + this.lastName;
}
};
Try it Yourself 
In the example above,
this
refers to the
person object
:
this.firstName
means the
firstName
property of
person
.
this.lastName
means the
lastName
property of
person
.
In JavaScript, Objects are King.
If you Understand Objects, you Understand JavaScript.
In JavaScript, almost "everything" is an object.
Objects are objects
Maths are objects
Functions are objects
Dates are objects
Arrays are objects
Maps are objects
Sets are objects
All JavaScript values, except primitives, are objects.
JavaScript Primitives
A
primitive value
is a value that has no properties or methods.
3.14
is a primitive value
A
primitive data type
is data that has a primitive value.
JavaScript defines 7 types of primitive data types:
string
number
boolean
null
undefined
symbol
bigint
Value
Type
Comment
"Hello"
string
"Hello" is always "Hello"
3.14
number
3.14 is always 3.14
true
boolean
true is always true
false
boolean
false is always false
null
null (object)
null is always null
undefined
undefined
undefined is always undefined
JavaScript Objects are Mutable
Objects are mutable: They are addressed by reference, not by value.
If person is an object, the following statement will not create a copy of person:
const x = person;
The object x is
not a copy
of person. The object x
is
person.
The object x and the object person share the same memory address.
Any changes to x will also change person:
Example
//Create an Object
const person = {
firstName:"John",
lastName:"Doe",
age:50, eyeColor:"blue"
}
// Create a copy
const x = person;
// Change Age in both
x.age = 10;
Try it Yourself 
Test Yourself With Exercises
Exercise:
Alert
"John"
by extracting information from the
person
object.
const person = {
  firstName: "John",
  lastName: "Doe"
};

alert(
);
Submit Answer 
Start the Exercise
JavaScript
Where To
The <script> Tag
In HTML, JavaScript code is inserted between
<script>
and
</script>
tags.
Example
<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script>
Try it Yourself 
JavaScript Functions and Events
A JavaScript
function
is a block of JavaScript code, that can be executed when "called" for.
For example, a function can be called when an
event
occurs, like when the user clicks a button.
JavaScript in <head> or <body>
You can place any number of scripts in an HTML document.
Scripts can be placed in the
<body>
, or in the
<head>
section of an HTML page, or in both.
JavaScript in <head>
In this example, a JavaScript
function
is placed in the
<head>
section 
of an HTML page.
The function is invoked (called) when a button is clicked:
Example
<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>
<h2>Demo JavaScript in Head</h2>
<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try 
it</button>
</body>
</html>
Try it Yourself 
JavaScript in <body>
In this example, a JavaScript
function
is placed in the
<body>
section of an HTML page.
The function is invoked (called) when a button is clicked:
Example
<!DOCTYPE html>
<html>
<body>
<h2>Demo JavaScript in Body</h2>
<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try 
it</button>
<script>
function myFunction() {
document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</body>
</html>
Try it Yourself 
External JavaScript
Scripts can also be placed in external files:
External file: myScript.js
function myFunction() {
document.getElementById("demo").innerHTML = "Paragraph changed.";
}
External scripts are practical when the same code is used in many different web pages.
JavaScript files have the file extension
.js
.
To use an external script, put the name of the script file in the
src
(source) attribute of 
a
<script>
tag:
Example
<script src="myScript.js"></script>
Try it Yourself 
You can place an external script reference in
<head>
or
<body>
as you like.
The script will behave as if it was located exactly where the
<script>
tag is located.
External JavaScript Advantages
Placing scripts in external files has some advantages:
It separates HTML and code
It makes HTML and JavaScript easier to read and maintain
Cached JavaScript files can speed up page loads
To add several script files to one page - use several script tags:
Example
<script src="myScript1.js"></script>
<script src="myScript2.js"></script>
External References
An external script can be referenced in 3 different ways:
With a full URL (a full web address)
With a file path (like /js/)
Without any path
This example uses a
full URL
to link to myScript.js:
Example
<script src="https://www.w3schools.com/js/myScript.js"></script>
Try it Yourself 
This example uses a
file path
to link to myScript.js:
Example
<script src="/js/myScript.js"></script>
Try it Yourself 
This example uses no path to link to myScript.js:
Example
<script src="myScript.js"></script>
Try it Yourself 
JavaScript
Date Formats
JavaScript Date Input
There are generally 3 types of JavaScript date input formats:
Type
Example
ISO Date
"2015-03-25"  (The International Standard)
Short Date
"03/25/2015"
Long Date
"Mar 25 2015" or "25 Mar 2015"
JavaScript Date Output
Independent of input format, JavaScript will (by default) output dates in full 
text string format:
JavaScript ISO Dates
ISO 8601 is the international standard for the representation of dates and 
times.
The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:
Example (Complete date)
const d = new Date("2015-03-25");
Try it Yourself 
ISO Dates (Year and Month)
ISO dates can be written without specifying the day (YYYY-MM):
Example
const d = new Date("2015-03");
Try it Yourself 
ISO Dates (Only Year)
ISO dates can be written without month and day (YYYY):
Example
const d = new Date("2015");
Try it Yourself 
ISO Dates (Date-Time)
ISO dates can be written with added hours, minutes, and seconds 
(YYYY-MM-DDTHH:MM:SSZ):
Example
const d = new Date("2015-03-25T12:00:00Z");
Try it Yourself 
Date and time is separated with a capital T.
UTC time is defined with a capital letter Z.
If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM 
instead:
Example
const d = new Date("2015-03-25T12:00:00-06:30");
Try it Yourself 
Time Zones
When setting a date, without specifying the time zone, JavaScript will use 
the browser's time zone.
When getting a date, without specifying the time zone, the result is 
converted to the browser's time zone.
In other words: If a date/time is created in GMT (Greenwich Mean Time), the 
date/time will be converted to CDT (Central US Daylight Time) if a user browses 
from central US.
JavaScript Short Dates.
Short dates are written with an "MM/DD/YYYY" syntax like this:
Example
const d = new Date("03/25/2015");
Try it Yourself 
WARNINGS !
In some browsers, months or days with no leading zeroes may produce an error:
const d = new Date("2015-3-25");
The behavior of "YYYY/MM/DD" is undefined.
Some browsers will 
try to guess the format. Some will return NaN.
const d = new Date("2015/03/25");
The behavior of "DD-MM-YYYY" is also undefined.
Some browsers will 
try to guess the format. Some will return NaN.
const d = new Date("25-03-2015");
JavaScript Long Dates.
Long dates are most often written with a "MMM DD YYYY" syntax like this:
Example
const d = new Date("Mar 25 2015");
Try it Yourself 
Month and day can be in any order:
Example
const d = new Date("25 Mar 2015");
Try it Yourself 
And, month can be written in full (January), or abbreviated (Jan):
Example
const d = new Date("January 25 2015");
Try it Yourself 
Example
const d = new Date("Jan 25 2015");
Try it Yourself 
Commas are ignored. Names are case insensitive:
Example
const d = new Date("JANUARY, 25, 2015");
Try it Yourself 
Date Input - Parsing Dates
If you have a valid date string, you can use the
Date.parse()
method to convert it to milliseconds.
Date.parse()
returns the number of milliseconds between the date and January 
1, 1970:
Example
let msec = Date.parse("March 21, 2012");
Try it Yourself 
You can then use the number of milliseconds to
convert it to a date
object:
Example
let msec = Date.parse("March 21, 2012");
const d = new Date(msec);
Try it Yourself 
JavaScript
Numbers
JavaScript has only one type of number.
Numbers can be written with or without decimals.
Example
let x = 3.14; // A number with decimals
let y = 3; // A number without decimals
Try it 
Yourself 
Extra large or extra small numbers can be written with scientific (exponent) notation:
Example
let x = 123e5; // 12300000
let y = 123e-5; // 0.00123
Try it 
Yourself 
JavaScript Numbers are Always 64-bit Floating Point
Unlike many other programming languages, 
JavaScript does not define different types of numbers, like integers, short, long, 
floating-point etc.
JavaScript numbers are always stored as double precision floating point 
numbers, following the international IEEE 754 standard.
This format 
stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 
to 51, the exponent in bits 52 to 62, and the sign in bit 63:
Value (aka Fraction/Mantissa)
Exponent
Sign
52 bits (0 - 51)
11 bits (52 - 62)
1 bit (63)
Integer Precision
Integers (numbers without a period or exponent notation) are accurate up to 15 digits.
Example
let x = 999999999999999; // x will be 999999999999999
let y = 9999999999999999; // y will be 10000000000000000
Try it Yourself 
The maximum number of decimals is 17.
Floating Precision
Floating point arithmetic is not always 100% accurate:
let x = 0.2 + 0.1;
Try it 
Yourself 
To solve the problem above, it helps to multiply and divide:
let x = (0.2 * 10 + 0.1 * 10) / 10;
Try it Yourself 
Adding Numbers and Strings
If you add two numbers, the result will be a number:
Example
let x = 10;
let y = 20;
let z = x + y;
Try it Yourself 
If you add two strings, the result will be a string concatenation:
Example
let x = "10";
let y = "20";
let z = x + y;
Try it Yourself 
If you add a number and a string, the result will be a string concatenation:
Example
let x = 10;
let y = "20";
let z = x + y;
Try it Yourself 
If you add a string and a number, the result will be a string concatenation:
Example
let x = "10";
let y = 20;
let z = x + y;
Try it Yourself 
A common mistake is to expect this result to be 30:
Example
let x = 10;
let y = 20;
let z = "The result is: " + x + y;
Try it Yourself 
A common mistake is to expect this result to be 102030:
Example
let x = 10;
let y = 20;
let z = "30";
let result = x + y + z;
Try it Yourself 
Numeric Strings
JavaScript strings can have numeric content:
let x = 100; // x is a number
let y = "100"; // y is a 
string
JavaScript will try to convert strings to numbers in all numeric operations:
This will work:
let x = "100";
let y = "10";
let z = x / y;
Try it Yourself 
This will also work:
let x = "100";
let y = "10";
let z = x * y;
Try it Yourself 
And this will work:
let x = "100";
let y = "10";
let z = x - y;
Try it Yourself 
But this will not work:
let x = "100";
let y = "10";
let z = x + y;
Try it Yourself 
NaN - Not a Number
NaN
is a JavaScript reserved word indicating that a number is not a legal number.
Trying to do arithmetic with a non-numeric string will result in
NaN
(Not a 
Number):
Example
let x = 100 / "Apple";
Try it Yourself 
However, if the string is numeric, the result will be a 
number:
Example
let x = 100 / "10";
Try it Yourself 
You can use the global JavaScript function
isNaN()
to find out if a value is a not a number:
Example
let x = 100 / "Apple";
isNaN(x);
Try it Yourself 
Watch out for
NaN
. If you use
NaN
in a mathematical operation, the result will also be
NaN
:
Example
let x = NaN;
let y = 5;
let z = x + y;
Try it Yourself 
Or the result might be a concatenation like NaN5:
Example
let x = NaN;
let y = "5";
let z = x + y;
Try it Yourself 
NaN
is a number:
typeof NaN
returns
number
:
Example
typeof NaN;
Try it Yourself 
Infinity
Infinity
(or
-Infinity
) is the value JavaScript will return if you calculate a number outside the largest 
possible number.
Example
let myNumber = 2;
// Execute until Infinity
while (myNumber != Infinity) {
myNumber = myNumber * myNumber;
}
Try 
it Yourself 
Division by 0 (zero) also generates
Infinity
:
Example
let x = 2 / 0;
let y = -2 / 0;
Try it Yourself 
Infinity
is a number:
typeof Infinity
returns
number
.
Example
typeof Infinity;
Try it Yourself 
Hexadecimal
JavaScript interprets numeric constants as hexadecimal if they are preceded by 
0x.
Example
let x = 0xFF;
Try it Yourself 
By default, JavaScript displays numbers as
base 10
decimals.
But you can use the
toString()
method to output numbers from
base 2
to
base 36
.
Hexadecimal is
base 16
. Decimal is
base 10
. 
Octal is
base 8
. Binary is
base 2
.
Example
let myNumber = 32;
myNumber.toString(32);
myNumber.toString(16);
myNumber.toString(12);
myNumber.toString(10);
myNumber.toString(8);
myNumber.toString(2);
Try it Yourself 
JavaScript Numbers as Objects
Normally JavaScript numbers are primitive values created from literals:
let x = 123;
But numbers can also be defined as objects with the keyword
new
:
let y = new Number(123);
Example
let x = 123;
let y = new Number(123);
Try 
it Yourself 
When using the
==
operator, x and y are
equal
:
let x = 500;
let y = new Number(500);
Try it Yourself 
When using the
===
operator, x and y are
not equal
.
let x = 500;
let y = new Number(500);
Try it Yourself 
(x == y)
true or false?
let x = new Number(500);
let y = new Number(500);
Try it Yourself 
(x === y)
true or false?
let x = new Number(500);
let y = new Number(500);
Try it Yourself 
Asynchronous JavaScript
Asynchronous JavaScript
The examples used in the previous chapter, was very simplified.
The purpose of the examples was to demonstrate the syntax of callback functions:
Example
function myDisplayer(something) {
document.getElementById("demo").innerHTML 
  = something;
}
function myCalculator(num1, num2, myCallback) {
let sum = num1 + num2;
myCallback(sum);
}
myCalculator(5, 5, myDisplayer);
Try it Yourself 
In the example above,
myDisplayer
is the name of a function.
It is passed to
myCalculator()
as an argument.
Waiting for a Timeout
When using the JavaScript function
setTimeout()
,
you can specify a callback function to be executed on time-out:
Example
setTimeout(myFunction, 3000);
function myFunction() {
document.getElementById("demo").innerHTML = "I love You !!";
}
Try it Yourself 
In the example above,
myFunction
is used as a callback.
myFunction
is passed to
setTimeout()
as an argument.
3000 is the number of milliseconds before time-out, so
myFunction()
will be called after 3 seconds.
Instead of passing the name of a function as an argument to another function,
you can always pass a whole function instead:
Example
setTimeout(function() { myFunction("I love You !!!"); }, 3000);
function myFunction(value) {
document.getElementById("demo").innerHTML = value;
}
Try it Yourself 
In the example above,
function(){ myFunction("I love You !!!"); }
is used as a callback. It is a complete function.
The complete function is passed to setTimeout() as an argument.
3000 is the number of milliseconds before time-out, so
myFunction()
will be called after 3 seconds.
Waiting for Intervals:
When using the JavaScript function
setInterval()
,
you can specify a callback function to be executed for each interval:
Example
setInterval(myFunction, 1000);
function myFunction() {
let d = new Date();
document.getElementById("demo").innerHTML=
d.getHours() + ":" +
d.getMinutes() + ":" +
d.getSeconds();
}
Try it Yourself 
In the example above,
myFunction
is used as a callback.
myFunction
is passed to
setInterval()
as an argument.
1000 is the number of milliseconds between intervals, so
myFunction()
will be called every second.
Callback Alternatives
With asynchronous programming, JavaScript programs can start long-running tasks,
and continue running other tasks in parallel.
But, asynchronus programmes are difficult to write and difficult to debug.
Because of this, most modern asynchronous JavaScript methods don't use callbacks.
Instead, in JavaScript, asynchronous programming is solved using
Promises
instead.
JavaScript
Get Date Methods
The new Date() Constructor
In JavaScript, date objects are created with
new Date()
.
new Date()
returns a date object with the current date and time.
Get the Current Time
const date = new Date();
Try it Yourself 
Date Get Methods
Method
Description
getFullYear()
Get
year
as a four digit number (yyyy)
getMonth()
Get
month
as a number (0-11)
getDate()
Get
day
as a number (1-31)
getDay()
Get
weekday
as a number (0-6)
getHours()
Get
hour
(0-23)
getMinutes()
Get
minute
(0-59)
getSeconds()
Get
second
(0-59)
getMilliseconds()
Get
millisecond
(0-999)
getTime()
Get
time
(milliseconds since January 1, 1970)
The getFullYear() Method
The
getFullYear()
method returns the year of a date as a four digit number:
Examples
const d = new Date("2021-03-25");
d.getFullYear();
Try it Yourself 
const d = new Date();
d.getFullYear();
Try it Yourself 
Warning !
Old JavaScript code might use the non-standard method getYear().
getYear() is supposed to return a 2-digit year.
getYear() is deprecated. Do not use it!
The getMonth() Method
The
getMonth()
method returns the month of a date as a number (0-11).
Examples
const d = new Date("2021-03-25");
d.getMonth();
Try it Yourself 
const d = new Date();
d.getMonth();
Try it Yourself 
Examples
const months = ["January", "February", "March", "April", "May",
"June", "July", "August", "September", "October",
"November", "December"];
const d = new Date("2021-03-25");
let month = months[d.getMonth()];
Try it Yourself 
const months = ["January", "February", "March", "April", "May",
"June", "July", "August", "September", "October",
"November", "December"];
const d = new Date();
let month = months[d.getMonth()];
Try it Yourself 
The getDate() Method
The
getDate()
method returns the day of a date as a number (1-31):
Examples
const d = new Date("2021-03-25");
d.getDate();
Try it Yourself 
const d = new Date();
d.getDate();
Try it Yourself 
The getHours() Method
The
getHours()
method returns the hours of a date as a number (0-23):
Examples
const d = new Date("2021-03-25");
d.getHours();
Try it Yourself 
const d = new Date();
d.getHours();
Try it Yourself 
The getMinutes() Method
The
getMinutes()
method returns the minutes of a date as a number (0-59):
Examples
const d = new Date("2021-03-25");
d.getMinutes();
Try it Yourself 
const d = new Date();
d.getMinutes();
Try it Yourself 
The getSeconds() Method
The
getSeconds()
method returns the seconds of a date as a number (0-59):
Examples
const d = new Date("2021-03-25");
d.getSeconds();
Try it Yourself 
const d = new Date();
d.getSeconds();
Try it Yourself 
The getMilliseconds() Method
The
getMilliseconds()
method returns the milliseconds of a date as a number (0-999):
Examples
const d = new Date("2021-03-25");
d.getMilliseconds();
Try it Yourself 
const d = new Date();
d.getMilliseconds();
Try it Yourself 
The getDay() Method
The
getDay()
method returns the weekday of a date as a number (0-6).
Examples
const d = new Date("2021-03-25");
d.getDay();
Try it Yourself 
const d = new Date();
d.getDay();
Try it Yourself 
Examples
const days = ["Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday"];
const d = new Date("2021-03-25");
let day = days[d.getDay()];
Try it Yourself 
const days = ["Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday"];
const d = new Date();
let day = days[d.getDay()];
Try it Yourself 
The getTime() Method
The
getTime()
method returns the number of milliseconds since January 1, 1970:
Examples
const d = new Date("1970-01-01");
d.getTime();
Try it Yourself 
const d = new Date("2021-03-25");
d.getTime();
Try it Yourself 
const d = new Date();
d.getTime();
Try it Yourself 
The Date.now() Method
Date.now()
returns the number of milliseconds since January 1, 1970.
Examples
let ms = Date.now();
Try it Yourself 
Calculate the number of years since 1970/01/01:
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;
let years = Math.round(Date.now() / year);
Try it Yourself 
Date.now()
is a static method of the Date object.
You cannot use it on a date object like
myDate.now()
.
The syntax is always
Date.now()
.
UTC Date Get Methods
Method
Same As
Description
getUTCDate()
getDate()
Returns the UTC date
getUTCFullYear()
getFullYear()
Returns the UTC year
getUTCMonth()
getMonth()
Returns the UTC month
getUTCDay()
getDay()
Returns the UTC day
getUTCHours()
getHours()
Returns the UTC hour
getUTCMinutes()
getMinutes()
Returns the UTC minutes
getUTCSeconds()
getSeconds()
Returns the UTC seconds
getUTCMilliseconds()
getMilliseconds()
Returns the UTC milliseconds
UTC methods use UTC time (Coordinated Universal Time).
UTC time is the same as GMT (Greenwich Mean Time).
The difference between Local time and UTC time can be up to 24 hours.
Local Time?
UTC Time?
The getTimezoneOffset() Method
The
getTimezoneOffset()
method returns the difference (in minutes)
between local time an UTC time:
Example
let diff = d.getTimezoneOffset();
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use the correct Date method to get the month (0-11) out of a date object.
const d = new Date();
month =
;
Submit Answer 
Start the Exercise
JavaScript
Sorting Arrays
Array Sort Methods
Alpabetic Sort
Array sort()
Array reverse
()
Array toSorted()
Array toReversed()
Sorting Objects
See Also:
Basic Methods
Search Methods
Iteration Methods
Numeric Sort
Numeric Sort
Random Sort
Math.min()
Math.max()
Home made Min()
Home made Max()
Sorting an Array
The
sort()
method sorts an array alphabetically:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
Try it Yourself 
Reversing an Array
The
reverse()
method reverses the elements in an array:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.reverse();
Try it Yourself 
By combining
sort()
and
reverse()
,
you can sort an array in descending order:
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
fruits.reverse();
Try it Yourself 
JavaScript Array toSorted() Method
ES2023
added the
toSorted()
method as a safe way
to sort an array without altering the original array.
The difference between
toSorted()
and
sort()
is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const sorted = months.toSorted();
Try it Yourself 
JavaScript Array toReversed() Method
ES2023
added the
toReversed()
method as a safe way
to reverse an array without altering the original array.
The difference between
toReversed()
and
reverse()
is that the first method
creates a new array, keeping the original array unchanged, while the last method alters the original array.
Example
const months = ["Jan", "Feb", "Mar", "Apr"];
const reversed = months.toReversed();
Try it Yourself 
Numeric Sort
By default, the
sort()
function sorts values as
strings
.
This works well for strings ("Apple" comes before "Banana").
If numbers are sorted as strings, "25" is bigger than "100", 
because "2" is bigger than "1".
Because of this, the
sort()
method will produce incorrect result when sorting 
numbers.
You can fix this by providing a
compare function
:
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
Try it Yourself 
Use the same trick to sort an array descending:
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
Try it Yourself 
The Compare Function
The purpose of the compare function is to define an alternative sort 
order.
The compare function should return a negative, zero, or positive value, depending on 
the arguments:
function(a, b){return a - b}
When the
sort()
function compares two values, it sends the values to the 
compare function, and sorts the values according to the returned (negative, 
zero, positive) value.
If the result is negative,
a
is sorted before
b
.
If the result is positive,
b
is sorted 
before
a
.
If the result is 0, no changes are done with the sort order of the two 
values.
Example:
The compare function compares all the values in the array, two values at a 
time
(a, b)
.
When comparing 40 and 100, the
sort()
method calls the compare function(40, 100).
The function calculates 40 - 100
(a - b)
, and 
since the result is negative (-60), the sort function will sort 40 as a value lower than 100.
You can use this code snippet to experiment with numerically and 
alphabetically sorting:
<button onclick="myFunction1()">Sort Alphabetically</button>
<button 
 onclick="myFunction2()">Sort Numerically</button>
<p id="demo"></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;
function 
 myFunction1() {
points.sort();
document.getElementById("demo").innerHTML 
 = points;
}
function myFunction2() {
points.sort(function(a, b){return 
 a - b});
document.getElementById("demo").innerHTML = points;
}
</script>
Try it Yourself 
Sorting an Array in Random Order
Using a sort function, like explained above, you can sort an numeric array in random order
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(){return 0.5 - Math.random()});
Try it Yourself 
The Fisher Yates Method
The points.sort() method in the example above is not accurate. It will favor some 
numbers over others.
The most popular correct method, is called the Fisher Yates shuffle, and was 
introduced in data science as early as 1938!
In JavaScript the method can be translated to this:
Example
const points = [40, 100, 1, 5, 25, 10];
for (let i = points.length -1; i > 0; i--) {
let j = Math.floor(Math.random() * (i+1));
let k = points[i];
points[i] = points[j];
points[j] = k;
}
Try it Yourself 
Find the Lowest (or Highest) Array Value
There are no built-in functions for finding the max or min 
value in an array.
To find the lowest or highest value you have 3 options:
Sort the array and read the first or last element
Use Math.min() or Math.max()
Write a home made function
Find Min or Max with sort()
After you have sorted an array, you can use the 
index to obtain the highest and lowest values.
Sort Ascending:
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
// now points[0] contains the lowest value
// and points[points.length-1] contains the highest value
Try it Yourself 
Sort Descending:
Example
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
// now points[0] contains the highest value
// and points[points.length-1] contains the lowest value
Try it Yourself 
Using Math.min() on an Array
You can use
Math.min.apply
to find the lowest number in an array:
Example
function myArrayMin(arr) {
return Math.min.apply(null, arr);
}
Try it Yourself 
Math.min.apply(null, [1, 2, 3])
is equivalent to
Math.min(1, 2, 3)
.
Using Math.max() on an Array
You can use
Math.max.apply
to find the highest number in an array:
Example
function myArrayMax(arr) {
return Math.max.apply(null, arr);
}
Try it Yourself 
Math.max.apply(null, [1, 2, 3])
is equivalent to
Math.max(1, 2, 3)
.
JavaScript Array Minimum Method
There is no built-in function for finding the lowest value in a JavaScript array.
The fastest code to find the lowest number is to use a
home made
method.
This function loops through an array comparing each value with the lowest value found:
Example (Find Min)
function myArrayMin(arr) {
let len = arr.length;
let min = Infinity;
while (len--) {
if (arr[len] < min) {
min = arr[len];
}
}
return min;
}
Try it Yourself 
JavaScript Array Maximum Method
There is no built-in function for finding the highest value in a JavaScript array.
The fastest code to find the highest number is to use a
home made
method.
This function loops through an array comparing each value with the highest value found:
Example (Find Max)
function myArrayMax(arr) {
let len = arr.length;
let max = -Infinity;
while (len--) {
if (arr[len] > max) {
max = arr[len];
}
}
return max;
}
Try it Yourself 
Sorting Object Arrays
JavaScript arrays often contain objects:
Example
const cars = [
{type:"Volvo", year:2016},
{type:"Saab", year:2001},
{type:"BMW", year:2010}
];
Even if objects have properties of different data types, the
sort()
method 
can be used to sort the array.
The solution is to write a compare function to compare the property values:
Example
cars.sort(function(a, b){return a.year - b.year});
Try it Yourself 
Comparing string properties is a little more complex:
Example
cars.sort(function(a, b){
let x = a.type.toLowerCase();
let y = b.type.toLowerCase();
if (x < y) {return -1;}
if (x > y) {return 1;}
return 0;
});
Try it Yourself 
Stable Array sort()
ES2019
revised
the Array
sort()
method.
Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.
After ES2019, browsers must use a stable sorting algorithm:
When sorting elements on a value, the elements must keep their relative position to other elements with the same value.
Example
const myArr = [
{name:"X00",price:100 },
{name:"X01",price:100 },
{name:"X02",price:100 },
{name:"X03",price:100 },
{name:"X04",price:110 },
{name:"X05",price:110 },
{name:"X06",price:110 },
{name:"X07",price:110 }
];
Try it Yourself 
In the example above, when sorting on price, the result is not allowed to come out with the names
in an other relative position like this:
X01 100
X03 100
X00 100
X03 100
X05 110
X04 110
X06 110
X07 110
Test Yourself With Exercises
Exercise:
Use the correct Array method to sort the
fruits
array alphabetically.
const fruits = ["Banana", "Orange", "Apple", "Kiwi"];
;
Submit Answer 
Start the Exercise
JavaScript
HTML DOM
With the HTML DOM, JavaScript can access and change all the elements of an HTML 
document.
The HTML DOM (Document Object Model)
When a web page is loaded, the browser creates a
D
ocument
O
bject
M
odel of the page.
The
HTML DOM
model is constructed as a tree of
Objects
:
The HTML DOM Tree of Objects
With the object model, JavaScript gets all the power it needs to create 
dynamic HTML:
JavaScript can change all the HTML elements in the page
JavaScript can change all the HTML attributes in the page
JavaScript can change all the CSS styles in the page
JavaScript can remove existing HTML elements and attributes
JavaScript can add new HTML elements and attributes
JavaScript can react to all existing HTML events in the page
JavaScript can create new HTML events in the page
What You Will Learn
In the next chapters of this tutorial you will learn:
How to change the content of HTML elements
How to change the style (CSS) of HTML elements
How to react to HTML DOM events
How to add and delete HTML elements
What is the DOM?
The DOM is a W3C (World Wide Web Consortium) standard.
The DOM defines a standard for accessing documents:
"The W3C Document Object Model (DOM) is a platform and language-neutral 
interface that allows programs and scripts to dynamically access and update the 
content, structure, and style of a document."
The W3C DOM standard is separated into 3 different parts:
Core DOM - standard model for all document types
XML DOM - standard model for XML documents
HTML DOM - standard model for HTML documents
What is the HTML DOM?
The HTML DOM is a standard
object
model and
programming interface
for HTML. It defines:
The HTML elements as
objects
The
properties
of all HTML elements
The
methods
to access all HTML elements
The
events
for all HTML elements
In other words:
The HTML DOM is a standard for how to get, change, add, or delete HTML elements.
JavaScript -
HTML DOM Methods
HTML DOM methods are
actions
you can perform (on HTML 
Elements).
HTML DOM properties are
values
(of HTML Elements) that you can 
set or change.
The DOM Programming Interface
The HTML DOM can be accessed with JavaScript 
(and with other programming languages).
In the DOM, all HTML elements are defined as
objects
.
The programming interface is 
the properties and methods of each object.
A
property
is a value that you can get or set (like changing the 
content of an HTML element).
A
method
is an action you can do (like add 
or deleting an HTML element).
Example
The following example changes the content (the
innerHTML
) of the
<p>
element with
id="demo"
:
Example
<html>
<body>
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>
</body>
</html>
Try it Yourself 
In the example above,
getElementById
is a
method
, while
innerHTML
is a
property
.
The getElementById Method
The most common way to access an HTML element is to use the
id
of the 
element.
In the example above the
getElementById
method used
id="demo"
to find the 
element.
The innerHTML Property
The easiest way to get the content of an element is by using the
innerHTML
property.
The
innerHTML
property is useful for getting or replacing the content of HTML elements.
JavaScript
HTML DOM Document
The HTML DOM document object is the owner of all other objects in your web page.
The HTML DOM Document Object
The document object represents your web page.
If you want to access any element in an HTML page, you always start with accessing the 
document object.
Below are some examples of how you can use the document object to access and 
manipulate HTML.
Finding HTML Elements
Method
Description
document.getElementById(
id
)
Find an element by element id
document.getElementsByTagName(
name
)
Find elements by tag name
document.getElementsByClassName(
name
)
Find elements by class name
Changing HTML Elements
Property
Description
element
.innerHTML =
new html content
Change the inner HTML of an element
element
.
attribute = new value
Change the attribute value of an HTML element
element
.style.
property = new style
Change the style of an HTML element
Method
Description
element
.setAttribute
(attribute, value)
Change the attribute value of an HTML element
Adding and Deleting Elements
Method
Description
document.createElement(
element
)
Create an HTML element
document.removeChild(
element
)
Remove an HTML element
document.appendChild(
element
)
Add an HTML element
document.replaceChild(
new, old
)
Replace an HTML element
document.write(
text
)
Write into the HTML output stream
Adding Events Handlers
Method
Description
document.getElementById(
id
).onclick = function(){
code
}
Adding event handler code to an onclick event
Finding HTML Objects
The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.
Later, in HTML DOM Level 3, more objects, collections, and properties were added.
Property
Description
DOM
document.anchors
Returns all <a> elements that have a name attribute
1
document.applets
Deprecated
1
document.baseURI
Returns the absolute base URI of the document
3
document.body
Returns the <body> element
1
document.cookie
Returns the document's cookie
1
document.doctype
Returns the document's doctype
3
document.documentElement
Returns the <html> element
3
document.documentMode
Returns the mode used by the browser
3
document.documentURI
Returns the URI of the document
3
document.domain
Returns the domain name of the document server
1
document.domConfig
Obsolete.
3
document.embeds
Returns all <embed> elements
3
document.forms
Returns all <form> elements
1
document.head
Returns the <head> element
3
document.images
Returns all <img> elements
1
document.implementation
Returns the DOM implementation
3
document.inputEncoding
Returns the document's encoding (character set)
3
document.lastModified
Returns the date and time the document was updated
3
document.links
Returns all <area> and <a> elements that have a href attribute
1
document.readyState
Returns the (loading) status of the document
3
document.referrer
Returns the URI of the referrer (the linking document)
1
document.scripts
Returns all <script> elements
3
document.strictErrorChecking
Returns if error checking is enforced
3
document.title
Returns the <title> element
1
document.URL
Returns the complete URL of the document
1
JavaScript
HTML DOM Elements
This page teaches you how to find and access HTML elements in 
an HTML page.
Finding HTML Elements
Often, with JavaScript, you want to manipulate HTML elements.
To do so, you have to find the elements first. There are several ways to do this:
Finding HTML elements by id
Finding HTML elements by tag name
Finding HTML elements by class name
Finding HTML elements by CSS selectors
Finding HTML elements by HTML object collections
Finding HTML Element by Id
The easiest way to find an HTML element in the DOM, is by using the element id.
This example finds the element with
id="intro"
:
Example
const element = document.getElementById("intro");
Try it Yourself 
If the element is found, the method will return the element as an object (in element).
If the element is not found, element will contain
null
.
Finding HTML Elements by Tag Name
This example finds all
<p>
elements:
Example
const element = document.getElementsByTagName("p");
Try it Yourself 
This example finds the element with
id="main"
, and then finds all
<p>
elements 
inside
"main"
:
Example
const x = document.getElementById("main");
const y = x.getElementsByTagName("p");
Try it Yourself 
Finding HTML Elements by Class Name
If you want to find all HTML elements with the same class name, use
getElementsByClassName()
.
This example returns a list of all elements with
class="intro"
.
Example
const x = document.getElementsByClassName("intro");
Try it Yourself 
Finding HTML Elements by CSS Selectors
If you want to find all HTML elements that match a specified CSS selector 
(id, class names, types, attributes, values of attributes, etc), use the
querySelectorAll()
method.
This example returns a list of all
<p>
elements with
class="intro"
.
Example
const x = document.querySelectorAll("p.intro");
Try it Yourself 
Finding HTML Elements by HTML Object Collections
This example finds the form element with
id="frm1"
, in the forms 
collection, and displays all element 
values:
Example
const x = document.forms["frm1"];
let text = "";
for (let i = 0; i < x.length; i++) {
text += x.elements[i].value + "<br>";
}
document.getElementById("demo").innerHTML = text;
Try it Yourself 
The following HTML objects (and object collections) are also accessible:
document.anchors
document.body
document.documentElement
document.embeds
document.forms
document.head
document.images
document.links
document.scripts
document.title
Test Yourself With Exercises
Exercise:
Use the
getElementById
method to find the
<p>
element, and change its text to "Hello".
<p id="demo"></p>

<script>
= "Hello";
</script>
Submit Answer 
Start the Exercise
ECMAScript 2024
New Features in ES2024
Object.groupBy()
Map.groupBy()
Temporal.PlainDate()
Temporal.PlainTime()
Temporal.PlainMonthDay()
Temporal.PlainYearMonth()
Warning
These features are relatively new.
Older browsers may need an alternative code (Polyfill)
JavaScript Object.groupBy()
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Object.groupBy(fruits, myCallback);
Try it Yourself 
Description
The
Object.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Object.groupBy()
method does not change the original object.
JavaScript Map.groupBy()
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Map.groupBy(fruits, myCallback);
Try it Yourself 
Description
The
Map.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Map.groupBy()
method does not change the original object.
Object.groupBy() vs Map.groupBy()
The difference between Object.groupBy() and Map.groupBy() is:
Object.groupBy() groups elements into a JavaScript object.
Map.groupBy() groups elements into a Map object.
JavaScript Temporal.PlainDate()
Example
const date = Temporal.PlainDate(2024, 5, 1);
Try it Yourself 
JavaScript Temporal.PlainTime()
Example
const date = new Temporal.PlainTime(10, 30);
Try it Yourself 
JavaScript Temporal.PlainMonthDay()
Example
const date = new Temporal.PlainMonthDay(5, 1);
Try it Yourself 
JavaScript Temporal.YearMonth()
Example
const date = new Temporal.PlainYearMonth(2024, 5);
Try it Yourself 
JavaScript HTML DOM Animation
Learn to create HTML animations using JavaScript.
A Basic Web Page
To demonstrate how to create HTML animations with JavaScript, we will use a simple 
web page:
Example
<!DOCTYPE html>
<html>
<body>
<h1>My First 
 JavaScript Animation</h1>
<div id="animation">My animation will go here</div>
</body>
</html>
Create an Animation Container
All animations should be relative to a container element.
Example
<div id ="container">
<div id ="animate">My 
 animation will go here</div>
</div>
Style the Elements
The container element should be created with style = "
position: relative
".
The animation element should be created with style = "
position: absolute
".
Example
#container {
width: 400px;
height: 
 400px;
position: relative;
background: yellow;
}
#animate {
width: 50px;
height: 
 50px;
position: absolute;
background: red;
}
Try it Yourself 
Animation Code
JavaScript animations are done by programming gradual changes in an element's 
style.
The changes are called by a timer. When the timer interval is small, the 
animation looks continuous.
The basic code is:
Example
id = setInterval(frame, 5);
function frame() {
if (/* 
 test for finished */) {
clearInterval(id);
} else {
/* code to change the element style */
}
}
Create the Full Animation Using JavaScript
Example
function myMove() {
let id = null;
const elem = document.getElementById("animate");
let pos = 0;
clearInterval(id);
id = setInterval(frame, 5);
function frame() {
if (pos == 
 350) {
clearInterval(id);
} else {
pos++;
elem.style.top = pos + 'px';
elem.style.left = pos + 'px';
}
}
}
Try it Yourself 
JavaScript
HTML DOM Navigation
With the HTML DOM, you can navigate the node tree using node 
relationships.
DOM Nodes
According to the W3C HTML DOM standard, everything in an HTML document is a node:
The entire document is a document node
Every HTML element is an element node
The text inside HTML elements are text nodes
Every HTML attribute is an attribute node (deprecated)
All comments are comment nodes
With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.
New nodes can be created, and all 
nodes can be modified or deleted.
Node Relationships
The nodes in the node tree have a hierarchical relationship to each other.
The terms parent, child, and sibling are used to describe the relationships.
In a node tree, the top node is called the root (or root node)
Every node has exactly one parent, except the root (which has no parent)
A node can have a number of children
Siblings (brothers or sisters) are nodes with the same parent
<html>
<head>
<title>DOM Tutorial</title>
</head>
<body>
<h1>DOM Lesson one</h1>
<p>Hello world!</p>
</body>
</html>
From the HTML above you can read:
<html>
is the root node
<html>
has no parents
<html>
is the parent of
<head>
and
<body>
<head>
is the first child of
<html>
<body>
is the last child of
<html>
and:
<head>
has one child:
<title>
<title>
has one child (a text node): "DOM Tutorial"
<body>
has two children:
<h1>
and
<p>
<h1>
has one child: "DOM Lesson one"
<p>
has one child: "Hello world!"
<h1>
and
<p>
are siblings
Navigating Between Nodes
You can use the following node properties to navigate between nodes with 
JavaScript:
parentNode
childNodes[
nodenumber
]
firstChild
lastChild
nextSibling
previousSibling
Child Nodes and Node Values
Example:
<title 
 id="demo">DOM Tutorial</title>
The element node
<title>
(in the example above) does
not
contain text.
It contains a
text node
with the value "DOM Tutorial".
The value of the text node can be accessed by the 
node's
innerHTML
property:
myTitle = document.getElementById("demo").innerHTML;
Accessing the innerHTML property is the same as accessing the
nodeValue
of the first child:
myTitle = document.getElementById("demo").firstChild.nodeValue;
Accessing the first child can also be done like this:
myTitle = document.getElementById("demo").childNodes[0].nodeValue;
All the (3) following examples retrieves the text of an
<h1>
element and copies it 
into a
<p>
element:
Example
<html>
<body>
<h1 id="id01">My First Page</h1>
<p id="id02"></p>
<script>
document.getElementById("id02").innerHTML 
 = document.getElementById("id01").innerHTML;
</script>
</body>
</html>
Try it Yourself 
Example
<html>
<body>
<h1 id="id01">My First Page</h1>
<p id="id02"></p>
<script>
document.getElementById("id02").innerHTML = document.getElementById("id01").firstChild.nodeValue;
</script>
</body>
</html>
Try it Yourself 
Example
<html>
<body>
<h1 id="id01">My First Page</h1>
<p id="id02">Hello!</p>
<script>
document.getElementById("id02").innerHTML = document.getElementById("id01").childNodes[0].nodeValue;
</script>
</body>
</html>
Try it Yourself 
InnerHTML
In this tutorial we use the innerHTML property to retrieve the content of an 
HTML element.
However, learning 
the other methods above is useful for understanding the tree structure and the 
navigation of the DOM.
DOM Root Nodes
There are two special properties that allow access to the full document:
document.body
- The body of the document
document.documentElement
- The full document
Example
<html>
<body>
<h2>JavaScript HTMLDOM</h2>
<p>Displaying document.body</p>
<p 
id="demo"></p>
<script>
document.getElementById("demo").innerHTML 
= document.body.innerHTML;
</script>
</body>
</html>
Try it Yourself 
Example
<html>
<body>
<h2>JavaScript HTMLDOM</h2>
<p>Displaying document.documentElement</p>
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = 
document.documentElement.innerHTML;
</script>
</body>
</html>
Try it Yourself 
The nodeName Property
The
nodeName
property specifies the name of a node.
nodeName is read-only
nodeName of an element node is the same as the tag name
nodeName of an attribute node is the attribute name
nodeName of a text node is always #text
nodeName of the document node is always #document
Example
<h1 id="id01">My First Page</h1>
<p id="id02"></p>
<script>
document.getElementById("id02").innerHTML 
 = document.getElementById("id01").nodeName;
</script>
Try it Yourself 
The nodeValue Property
The
nodeValue
property specifies the value of a node.
nodeValue for element nodes is
null
nodeValue for text nodes is the text itself
nodeValue for attribute nodes is the attribute value
The nodeType Property
The
nodeType
property is read only. It returns the type of a node.
Example
<h1 id="id01">My First Page</h1>
<p id="id02"></p>
<script>
document.getElementById("id02").innerHTML 
 = document.getElementById("id01").nodeType;
</script>
Try it Yourself 
The most important nodeType properties are:
Node
Type
Example
ELEMENT_NODE
1
<h1 class="heading">W3Schools</h1>
ATTRIBUTE_NODE
2
class = "heading" (deprecated)
TEXT_NODE
3
W3Schools
COMMENT_NODE
8
<!-- This is a comment -->
DOCUMENT_NODE
9
The HTML document itself (the parent of <html>)
DOCUMENT_TYPE_NODE
10
<!Doctype html>
JavaScript
Window Location
The
window.location
object can be used to get 
the current page address (URL) and to redirect the browser to a new page.
Window Location
The
window.location
object can be written without the window prefix.
Some examples:
window.location.href
returns the href (URL) of the current page
window.location.hostname
returns the domain name of the web host
window.location.pathname
returns the path and filename of the current page
window.location.protocol
returns the web protocol used (http: or https:)
window.location.assign()
loads a new document
Window Location Href
The
window.location.href
property returns the URL of the current page.
Example
Display the href (URL) of the current page:
document.getElementById("demo").innerHTML =
"Page location is " + window.location.href;
Result is:
Try it Yourself 
Window Location Hostname
The
window.location.hostname
property returns the name of the internet host (of the current page).
Example
Display the name of the host:
document.getElementById("demo").innerHTML =
"Page hostname is " + window.location.hostname;
Result is:
Try it Yourself 
Window Location Pathname
The
window.location.pathname
property returns the pathname of 
the current page.
Example
Display the path name of the current URL:
document.getElementById("demo").innerHTML =
"Page path is " + window.location.pathname;
Result is:
Try it Yourself 
Window Location Protocol
The
window.location.protocol
property returns the web protocol of the page.
Example
Display the web protocol:
document.getElementById("demo").innerHTML =
"Page protocol is " + window.location.protocol;
Result is:
Try it Yourself 
Window Location Port
The
window.location.port
property returns the number of the internet host 
port (of the current page).
Example
Display the name of the host:
document.getElementById("demo").innerHTML =
"Port 
  number is " + window.location.port;
Result is:
Try it Yourself 
Window Location Assign
The
window.location.assign()
method loads a new document.
Example
Load a new document:
<html>
<head>
<script>
function newDoc(){
window.location.assign("https://www.w3schools.com")
}
</script>
</head>
<body>
<input type="button" value="Load new document"
onclick="newDoc()">
</body>
</html>
Try it Yourself 
JavaScript
Popup Boxes
JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.
Alert Box
An alert box is often used if you want to make sure information comes through to the user.
When an alert box pops up, the user will have to click "OK" to proceed.
Syntax
window.alert("
sometext
");
The
window.alert()
method can be written without the window 
prefix.
Example
alert("I am an alert box!");
Try it Yourself 
Confirm Box
A confirm box is often used if you want the user to verify or accept something.
When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.
If the user clicks "OK", the box returns
true
. If the user clicks "Cancel", the box returns
false
.
Syntax
window.confirm("
sometext
");
The
window.confirm()
method can be written without the window prefix.
Example
if (confirm("Press a button!")) {
txt = "You 
  pressed OK!";
} else {
txt = "You pressed Cancel!";
}
Try it Yourself 
Prompt Box
A prompt box is often used if you want the user to input a value before entering a page.
When a prompt box pops up, the user will have to click either "OK" or "Cancel" 
to proceed after entering an input value.
If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.
Syntax
window.prompt("
sometext
","
defaultText
");
The
window.prompt()
method can be written without the window prefix.
Example
let person = prompt("Please enter your name", "Harry Potter");
let text;
if 
  (person == null || person == "") {
text = "User cancelled 
  the prompt.";
} else {
text = "Hello " + person + "! 
  How are you today?";
}
Try it Yourself 
Line Breaks
To display line breaks inside a popup box, use a back-slash followed by the character n.
Example
alert("Hello\nHow are you?");
Try it Yourself 
JavaScript
Timing Events
1
2
3
4
5
6
7
8
9
10
11
12
JavaScript can be executed in time-intervals.
This is called timing events.
Timing Events
The
window
object allows execution of code at specified time intervals.
These time intervals are called timing events.
The two key methods to use with JavaScript are:
setTimeout(
function, milliseconds
)
Executes a function, after waiting a specified number of milliseconds.
setInterval(
function, milliseconds
)
Same as setTimeout(), but repeats the execution 
    of the function continuously.
The setTimeout() Method
window.setTimeout(
function
,
milliseconds
);
The
window.setTimeout()
method can be written without the window prefix.
The first parameter is a function to be executed.
The second parameter indicates the number of milliseconds before execution.
Example
Click a button. Wait 3 seconds, and the page will alert "Hello":
<button onclick="setTimeout(myFunction, 3000)">Try it</button>
<script>
function myFunction() {
alert('Hello');
}
</script>
Try it Yourself 
How to Stop the Execution?
The
clearTimeout()
method stops the execution of the function 
specified in setTimeout().
window.clearTimeout(
timeoutVariable
)
The
window.clearTimeout()
method can be written without the window prefix.
The
clearTimeout()
method uses the variable 
returned from
setTimeout()
:
myVar = setTimeout(
function
,
milliseconds
);
clearTimeout(myVar);
If the function has not already been executed, you can stop the execution by calling the
clearTimeout()
method:
Example
Same example as above, but with an added "Stop" button:
<button onclick="myVar = setTimeout(myFunction, 3000)">Try it</button>
<button onclick="clearTimeout(myVar)">Stop it</button>
Try it Yourself 
The setInterval() Method
The
setInterval()
method repeats a given function at every given 
time-interval.
window.setInterval(
function
,
milliseconds
);
The
window.setInterval()
method can be written without the window prefix.
The first parameter is the function to be executed.
The second parameter indicates the length of the time-interval between each 
execution.
This example executes a function called "myTimer" once every second (like a digital 
watch).
Example
Display the current time:
setInterval(myTimer, 1000);
function myTimer() {
const d = new Date();
document.getElementById("demo").innerHTML = d.toLocaleTimeString();
}
Try it Yourself 
How to Stop the Execution?
The
clearInterval()
method stops the executions of the function 
specified in the setInterval() method.
window.clearInterval(
timerVariable
)
The
window.clearInterval()
method can be written without the window prefix.
The
clearInterval()
method uses the variable returned from
setInterval()
:
let myVar = setInterval(
function
,
milliseconds
);
clearInterval(myVar);
Example
Same example as above, but we have added a "Stop time" button:
<p id="demo"></p>
<button onclick="clearInterval(myVar)">Stop time</button>
<script>
let myVar = setInterval(myTimer, 1000);
function myTimer() {
const d = new Date();
document.getElementById("demo").innerHTML = d.toLocaleTimeString();
}
</script>
Try it Yourself 
More Examples
Another simple timing
A clock created with a timing event
Web APIs - Introduction
What is Web API?
API stands for
A
pplication
P
rogramming
I
nterface.
A Web API is an application programming interface for the Web.
A Browser API can extend the functionality of a web browser.
A Server API can extend the functionality of a web server.
Browser APIs
All browsers have a set of built-in Web APIs 
to support complex operations, and to help accessing data.
For example, the Geolocation API can return the coordinates of where the browser is located.
Example
Get the latitude and longitude of the user's position:
const myElement = document.getElementById("demo");
function getLocation() {
if (navigator.geolocation) {
navigator.geolocation.getCurrentPosition(showPosition);
} else {
myElement.innerHTML = "Geolocation is not supported by this browser.";
}
}
function showPosition(position) {
myElement.innerHTML = "Latitude: " + position.coords.latitude +
"<br>Longitude: " + position.coords.longitude;
}
Try it Yourself 
Third Party APIs
Third party APIs are not built into your browser.
To use these APIs, you will have to download the code from the Web.
Examples:
YouTube API - Allows you to display videos on a web site.
Twitter API - Allows you to display Tweets on a web site.
Facebook API - Allows you to display Facebook info on a web site.
Web Storage API
The Web Storage API is a simple syntax for storing and retrieving data in the browser.
It is very easy to use:
Example
localStorage.setItem("name", "John Doe");
localStorage.getItem("name");
Try it Yourself 
The Web Storage API is supported in all browsers:
Chrome
IE/Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
The localStorage Object
The localStorage object provides access to a local storage for a particular Web Site.
It allows you to store, read, add, modify, and delete data items for that domain.
The data is stored with no expiration date, and will not be deleted when the browser is closed.
The data will be available for days, weeks, and years.
The setItem() Method
The localStorage.setItem() method stores a data item in a storage.
It takes a name and a value as parameters:
Example
localStorage.setItem("name", "John Doe");
The getItem() Method
The localStorage.getItem() method retrieves a data item from the storage.
It takes a name as parameter:
Example
localStorage.getItem("name");
The sessionStorage Object
The sessionStorage object is identical to the localStorage object.
The difference is that the sessionStorage object stores data for one session.
The data is deleted when the browser is closed.
Example
sessionStorage.getItem("name");
Try it Yourself 
The setItem() Method
The sessionStorage.setItem() method stores a data item in a storage.
It takes a name and a value as parameters:
Example
sessionStorage.setItem("name", "John Doe");
The getItem() Method
The sessionStorage.getItem() method retrieves a data item from the storage.
It takes a name as parameter:
Example
sessionStorage.getItem("name");
Storage Object Properties and Methods
Property/Method
Description
key(
n
)
Returns the name of the
n
th key in the storage
length
Returns the number of data items stored in the Storage object
getItem(
keyname
)
Returns the value of the specified key name
setItem(
keyname
,
value
)
Adds a key to the storage, or updates a key value (if it already exists)
removeItem(
keyname
)
Removes that key from the storage
clear()
Empty all key out of the storage
Related Pages for Web Storage API
Property
Description
window.localStorage
Allows to save key/value pairs in a web browser. Stores the data with no 
    expiration date
window.sessionStorage
Allows to save key/value pairs in a web browser. Stores the data for one 
    session
Web Workers API
A web worker is a JavaScript running in the background, without affecting the performance of the page.
What is a Web Worker?
When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.
A web worker is a JavaScript that runs in the background, independently 
of other scripts, without affecting the performance of the page. You can continue to do whatever you want: 
clicking, selecting things, etc., while the web worker runs in the background.
Browser Support
The numbers in the table specify the first browser versions that fully support Web Workers:
Chrome 4
IE 10
Firefox 3.5
Safari 4
Opera 11.5
Jan 2010
Sep 2012
Jun 2009
Jun 2009
Jun 2011
Web Workers Example
The example below creates a simple web worker that count numbers in the background:
Example
Count numbers:
Start Worker
Stop Worker
Try it Yourself 
Check Web Worker Support
Before creating a web worker, check whether the user's browser supports it:
if (typeof(Worker) !== "undefined") {
// Yes! Web worker support!
//
Some code.....
}
 else {
// Sorry! No Web Worker support..
}
Create a Web Worker File
Now, let's create our web worker in an external JavaScript.
Here, we create a script that counts. The script is stored in the "demo_workers.js" file:
let i = 0;
function timedCount()
{
i ++;
postMessage(i);
setTimeout("timedCount()",500);
}
timedCount();
The important part of the code above is the
postMessage()
method - which is used to post a message back to the HTML page.
Note:
Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.
Create a Web Worker Object
Now that we have the web worker file, we need to call it from an HTML page.
The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in 
"demo_workers.js":
if (typeof(w) == "undefined") {
w = new Worker("demo_workers.js");
}
Then we can send and receive messages from the web worker.
Add an "onmessage" event listener to the web worker.
w.onmessage = function(event){
document.getElementById("result").innerHTML = event.data;
};
When the web worker posts a message, the code within the event listener is executed. The data 
from the web worker is stored in event.data.
Terminate a Web Worker
When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.
To terminate a web worker, and free browser/computer resources, use the
terminate()
method:
w.terminate();
Reuse the Web Worker
If you set the worker variable to undefined, after it has been terminated, 
you can reuse the code:
w = undefined;
Full Web Worker Example Code
We have already seen the Worker code in the .js file. Below is the code for the HTML page:
Example
<!DOCTYPE html>
<html>
<body>
<p>Count numbers: <output id="result"></output></p>
<button onclick="startWorker()">Start Worker</button>
<button onclick="stopWorker()">Stop Worker</button>
<script>
let w;
function startWorker()
{
if (typeof(w) == "undefined") {
w = new Worker("demo_workers.js");
}
w.onmessage = function(event) {
document.getElementById("result").innerHTML = event.data;
};
}
function stopWorker()
{
w.terminate();
w = undefined;
}
</script>
</body>
</html>
Try it Yourself 
Web Workers and the DOM
Since web workers are in external files, they do not have access to the following JavaScript objects:
The window object
The document object
The parent object
JavaScript Fetch API
The Fetch API interface allows web browser to make HTTP requests to web servers.

No need for XMLHttpRequest anymore.
Browser Support
The numbers in the table specify the first browser versions that fully support Fetch API:
Chrome 42
Edge 14
Firefox 40
Safari 10.1
Opera 29
Apr 2015
Aug 2016
Aug 2015
Mar 2017
Apr 2015
A Fetch API Example
The example below fetches a file and displays the content:
Example
fetch(file)
.then(x => x.text())
.then(y => myDisplay(y));
Try it Yourself 
Since Fetch is based on async and await, the example above might be easier to understand like this:
Example
async function getText(file) {
let x = await fetch(file);
let y = await x.text();
myDisplay(y);
}
Try it Yourself 
Or even better: Use understandable names instead of x and y:
Example
async function getText(file) {
let myObject = await fetch(file);
let myText = await myObject.text();
myDisplay(myText);
}
Try it Yourself 
AJAX - The XMLHttpRequest Object
The keystone of AJAX is the XMLHttpRequest object.
Create an XMLHttpRequest object
Define a callback function
Open the XMLHttpRequest object
Send a Request to a server
The XMLHttpRequest Object
All modern browsers support the
XMLHttpRequest
object.
The
XMLHttpRequest
object can be used to exchange data with a web server behind the 
scenes. This means that it is possible to update parts of a web page, without 
reloading the whole page.
Create an XMLHttpRequest Object
All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in
XMLHttpRequest
object.
Syntax for creating an
XMLHttpRequest
object:
variable
= new XMLHttpRequest();
Define a Callback Function
A callback function is a function passed as a parameter to another function.
In this case, the callback function should contain the code to execute when the 
response is ready.
xhttp.onload = function() {
// What to do when the response is ready
}
Send a Request
To send a request to a server, you can use the open() and send() methods of the
XMLHttpRequest
object:
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
Example
// Create an XMLHttpRequest object
const xhttp = new XMLHttpRequest();
// Define a callback function
xhttp.onload = function() {
// Here you can use the Data
}
// Send a request
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
Try it Yourself 
Access Across Domains
For security reasons, modern browsers do not allow access across domains.
This means that both the web page and the XML file it tries to load, must be located on the same server.
The examples on W3Schools all open XML files located on the W3Schools domain.
If you want to use the example above on one of your own web pages,
the XML files you load must be located on your own server.
XMLHttpRequest Object Methods
Method
Description
new XMLHttpRequest()
Creates a new XMLHttpRequest object
abort()
Cancels the current request
getAllResponseHeaders()
Returns header information
getResponseHeader()
Returns specific header information
open(
method, url, async, user, psw
)
Specifies the request
method
: the request type GET or POST
url
: the file location
async
: true (asynchronous) or false (synchronous)
user
: optional user name
psw
: optional password
send()
Sends the request to the server
Used for GET requests
send(
string
)
Sends the request to the server.
Used for POST requests
setRequestHeader()
Adds a label/value pair to the header to be sent
XMLHttpRequest Object Properties
Property
Description
onload
Defines a function to be called when the request is received (loaded)
onreadystatechange
Defines a function to be called when the readyState property changes
readyState
Holds the status of the XMLHttpRequest.
0: request not initialized
1: server connection established
2: request received
3: processing request
4: request finished and response is ready
responseText
Returns the response data as a string
responseXML
Returns the response data as XML data
status
Returns the status-number of a request
200: "OK"
403: "Forbidden"
404: "Not Found"
For a complete list go to the
Http 
    Messages Reference
statusText
Returns the status-text (e.g. "OK" or "Not Found")
The onload Property
With the
XMLHttpRequest
object you can define a callback function to be executed when 
the request receives an answer.
The function is defined in the
onload
property of the
XMLHttpRequest
object:
Example
xhttp.onload = function() {
document.getElementById("demo").innerHTML = this.responseText;
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
Try it Yourself 
Multiple Callback Functions
If you have more than one AJAX task in a website, you should create one function for 
executing the
XMLHttpRequest
object, and one callback function for each 
AJAX task.
The function call should contain the URL and what function to call when the 
response is ready.
Example
loadDoc("
url-1
", myFunction1);
loadDoc("
url-2
", myFunction2);
function loadDoc(url, cFunction) {
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {cFunction(this);}
xhttp.open("GET", url);
xhttp.send();
}
function myFunction1(xhttp) {
// action goes here
}
function myFunction2(xhttp) {
// action goes here
}
The onreadystatechange Property
The
readyState
property holds the status of the XMLHttpRequest.
The
onreadystatechange
property defines a callback function to be executed when the readyState changes.
The
status
property and the
statusText
properties hold the status of the XMLHttpRequest object.
Property
Description
onreadystatechange
Defines a function to be called when the readyState property changes
readyState
Holds the status of the XMLHttpRequest.
0: request not initialized
1: server connection established
2: request received
3: processing request
4: request finished and response is ready
status
200: "OK"
403: "Forbidden"
404: "Page not found"
For a complete list go to the
Http Messages Reference
statusText
Returns the status-text (e.g. "OK" or "Not Found")
The
onreadystatechange
function is called every time the readyState changes.
When
readyState
is 4 and status is 200, the response is ready:
Example
function loadDoc() {
const xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
if (this.readyState == 4 && this.status == 200) {
document.getElementById("demo").innerHTML =
this.responseText;
}
};
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
}
Try it Yourself 
JavaScript Modules
Modules
JavaScript modules allow you to break up your code into separate files.
This makes it easier to maintain a code-base.
Modules are imported from external files with the
import
statement.
Modules also rely on
type="module"
in the <script> tag.
Example
<script type="module">
import message from "./message.js";
</script>
Try it Yourself 
Export
Modules with
functions
or
variables
can be stored in any external file.
There are two types of exports:
Named Exports
and
Default Exports
.
Named Exports
Let us create a file named
person.js
, and 
fill it with the things we want to export.
You can create named exports two ways. In-line individually, or all at once at the bottom.
In-line individually:
person.js
export const name = "Jesse";
export const age = 40;
All at once at the bottom:
person.js
const name = "Jesse";
const age = 40;
export {name, age};
Default Exports
Let us create another file, named
message.js
, and 
use it for demonstrating default export.
You can only have one default export in a file.
Example
message.js
const message = () => {
const name = "Jesse";
const age = 40;
return name + ' is ' + age + 'years old.';
};
export default message;
Import
You can import modules into a file in two ways, based on if they are named 
exports or default exports.
Named exports are constructed using curly braces. Default exports are not.
Import from named exports
Import named exports from the file person.js:
import { name, age } from "./person.js";
Try it Yourself 
Import from default exports
Import a default export from the file message.js:
import message from "./message.js";
Try it Yourself 
JavaScript Async
Async Syntax
The keyword
async
before a function makes the function return a promise:
Example
async function myFunction() {
return "Hello";
}
Is the same as:
function myFunction() {
return Promise.resolve("Hello");
}
Here is how to use the Promise:
myFunction().then(
function(value) { /* code if successful */ },
function(error) { /* code if some error */ }
);
Example
async function myFunction() {
return "Hello";
}
myFunction().then(
function(value) {myDisplayer(value);},
function(error) {myDisplayer(error);}
);
Try it Yourself 
Or simpler, since you expect a normal value (a normal response, not an error):
Example
async function myFunction() {
return "Hello";
}
myFunction().then(
function(value) {myDisplayer(value);}
);
Try it Yourself 
Await Syntax
The
await
keyword can only be used inside an
async
function.
The
await
keyword makes the function pause the execution 
and wait for a resolved promise before it continues:
let value = await promise;
Example
Let's go slowly and learn how to use it.
Basic Syntax
async function myDisplay() {
let myPromise = new Promise(function(resolve,  reject) {
resolve("I love You !!");
});
document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
Try it Yourself 
Example without reject
async function myDisplay() {
let myPromise = new Promise(function(resolve) {
resolve("I love You !!");
});
document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
Try it Yourself 
Waiting for a Timeout
async function myDisplay() {
let myPromise = new Promise(function(resolve) {
setTimeout(function() {resolve("I love You !!");}, 3000);
});
document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();
Try it Yourself 
Waiting for a File
async function getFile() {
let myPromise = new Promise(function(resolve) {
let req = new XMLHttpRequest();
req.open('GET', "mycar.html");
req.onload = function() {
if (req.status == 200) {
resolve(req.response);
} else {
resolve("File not Found");
}
};
req.send();
});
document.getElementById("demo").innerHTML = await myPromise;
}
getFile();
Try it Yourself 
Browser Support
ECMAScript 2017 introduced the JavaScript keywords
async
and
await
.
The following table defines the first browser version with full support for both:
Chrome 55
Edge 15
Firefox 52
Safari 11
Opera 42
Dec, 2016
Apr, 2017
Mar, 2017
Sep, 2017
Dec, 2016
XML
Applications
This chapter demonstrates some HTML applications using 
XML, HTTP, DOM, and JavaScript.
The XML Document Used
In this chapter we will use the XML file called
"cd_catalog.xml"
.
Display XML Data in an HTML Table
This example loops through each <CD> element, and displays the values of the <ARTIST> and the 
<TITLE> elements in an HTML table:
Example
<table id="demo"></table>
<script>
function loadXMLDoc() {
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
const xmlDoc = xhttp.responseXML;
const cd = xmlDoc.getElementsByTagName("CD");
myFunction(cd);
}
xhttp.open("GET", "cd_catalog.xml");
xhttp.send();
}
function myFunction(cd) {
let table="<tr><th>Artist</th><th>Title</th></tr>";
for (let i = 0; i < cd.length; i++) {
table += "<tr><td>" +
cd[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue 
 +
"</td><td>" +
cd[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue 
 +
"</td></tr>";
}
document.getElementById("demo").innerHTML = table;
}
</script>
</body>
</html>
Try it Yourself 
For more information about using JavaScript and the XML DOM, go to
DOM Intro.
Display the First CD in an HTML div Element
This example uses a function to display the first CD element in an HTML element with id="showCD":
Example
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
const xmlDoc = xhttp.responseXML;
const cd = xmlDoc.getElementsByTagName("CD");
myFunction(cd, 0);
}
xhttp.open("GET", "cd_catalog.xml");
xhttp.send();
function myFunction(cd, i) {
document.getElementById("showCD").innerHTML =
"Artist: " +
cd[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue +
"<br>Title: " +
cd[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue +
"<br>Year: " +
cd[i].getElementsByTagName("YEAR")[0].childNodes[0].nodeValue;
}
Try it Yourself 
Navigate Between the CDs
To navigate between the CDs in the example above, create a
next()
and
previous()
function:
Example
function next()
{
// display the next CD, unless you are on the last CD
if (i < len-1) {
i++;
displayCD(i);
}
}
function previous()
{
// display the previous CD, unless you are on the first CD
if (i > 0) {
i--;
displayCD(i);
}
}
Try it Yourself 
Show Album Information When Clicking On a CD
The last example shows how you can show album information when the user clicks on a CD:
Example
function displayCD(i) {
document.getElementById("showCD").innerHTML =
"Artist: " +
cd[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue +
"<br>Title: " +
cd[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue +
"<br>Year: " +
cd[i].getElementsByTagName("YEAR")[0].childNodes[0].nodeValue;
}
Try it Yourself 
AJAX
Database Example
AJAX can be used for interactive communication with a database.
AJAX Database Example
The following example will demonstrate how a web page can fetch 
information from a database with AJAX:
Example
Select a customer:
Alfreds Futterkiste
North/South
Wolski Zajazd
Customer info will be listed here...
Try it Yourself 
Example Explained - The showCustomer() Function
When a user selects a customer in the dropdown list above, a function called
showCustomer()
is executed. The 
function is triggered by the
onchange
event:
showCustomer
function showCustomer(str) {
if (str == "") {
document.getElementById("txtHint").innerHTML = "";
return;
}
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
document.getElementById("txtHint").innerHTML = this.responseText;
}
xhttp.open("GET", "getcustomer.php?q="+str);
xhttp.send();
}
The
showCustomer()
function does the following:
Check if a customer is selected
Create an XMLHttpRequest object
Create the function to be executed when the server response is ready
Send the request off to a file on the server
Notice that a parameter (q) is added to the URL (with the content of the dropdown list)
The AJAX Server Page
The page on the server called by the JavaScript above is a PHP file called "getcustomer.php".
The source code in "getcustomer.php" runs a query against a database, and returns the result in an HTML 
table:
<?php
$mysqli = new mysqli("
servername
", "
username
", 
  "
password
", "
dbname
");
if($mysqli->connect_error) {
exit('Could not connect');
}
$sql = "SELECT customerid, companyname, 
  contactname, address, city, postalcode, country
FROM customers WHERE 
  customerid = ?";
$stmt = $mysqli->prepare($sql);
$stmt->bind_param("s", $_GET['q']);
$stmt->execute();
$stmt->store_result();
$stmt->bind_result($cid, 
  $cname, $name, $adr, $city, $pcode, $country);
$stmt->fetch();
$stmt->close();
echo "<table>";
echo "<tr>";
echo "<th>CustomerID</th>";
echo 
  "<td>" . $cid . "</td>";
echo "<th>CompanyName</th>";
echo "<td>" . $cname 
  . "</td>";
echo "<th>ContactName</th>";
echo "<td>" . $name . "</td>";
echo "<th>Address</th>";
echo "<td>" . 
  $adr . "</td>";
echo "<th>City</th>";
echo "<td>" . $city . "</td>";
echo "<th>PostalCode</th>";
echo "<td>" . 
  $pcode . "</td>";
echo "<th>Country</th>";
echo "<td>" . $country . 
  "</td>";
echo "</tr>";
echo "</table>";
?>
AJAX
Examples
Simple Examples
Create a simple XMLHttpRequest, and retrieve data from a TXT file
Create a XMLHttpRequest with a callback function, and retrieve data from a TXT file
Examples explained
Request Header Information
Retrieve all header information 
of a resource (file)
Retrieve specific header information 
of a resource (file)
Examples explained
Request XML Files
Load an XML file with AJAX
Retrieve the content of an XML file
Examples explained
Retrieve Server Data with PHP and ASP
Retrieve the content of a PHP file
Retrieve the content of an ASP file
Examples explained
Retrieve Database Information
Retrieve content from a database
Examples explained
AJAX Applications
View an XML CD catalog
Display XML data in an HTML table
Show XML data inside an HTML div element
Navigate through XML nodes
A simple CD catalog application
Examples explained
AJAX
PHP Example
AJAX is used to create more interactive applications.
AJAX PHP Example
The following example demonstrates how a web page can communicate with a 
web server while a user types characters in an input field:
Example
Start typing a name in the input field below:
Suggestions:
First name:
Example Explained
In the example above, when a user types a character in the input field, a function 
called
showHint()
is executed.
The function is triggered by the
onkeyup
event.
Here is the code:
Example
<p>Start typing a name in the input field below:</p>
<p>Suggestions: <span id="txtHint"></span></p>
<form>
First name: <input type="text" onkeyup="showHint(this.value)">
</form>
<script>
function showHint(str) {
if (str.length == 0) {
document.getElementById("txtHint").innerHTML = "";
return;
} else {
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
document.getElementById("txtHint").innerHTML = this.responseText;
}
xmlhttp.open("GET", "gethint.php?q=" + str);
xmlhttp.send();
}
}
</script>
Try it Yourself 
Code explanation:
First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.
However, if the input field is not empty, do the following:
Create an XMLHttpRequest object
Create the function to be executed when the server response is ready
Send the request off to a PHP file (gethint.php) on the server
Notice that q parameter is added gethint.php?q="+str
The str variable holds the content of the input field
The PHP File - "gethint.php"
The PHP file checks an array of names, and returns the corresponding name(s) to the 
browser:
<?php
// Array with names
$a[] = "Anna";
$a[] = "Brittany";
$a[] = "Cinderella";
$a[] = "Diana";
$a[] = "Eva";
$a[] = "Fiona";
$a[] = "Gunda";
$a[] = "Hege";
$a[] = "Inga";
$a[] = "Johanna";
$a[] = "Kitty";
$a[] = "Linda";
$a[] = "Nina";
$a[] = "Ophelia";
$a[] = "Petunia";
$a[] = "Amanda";
$a[] = "Raquel";
$a[] = "Cindy";
$a[] = "Doris";
$a[] = "Eve";
$a[] = "Evita";
$a[] = "Sunniva";
$a[] = "Tove";
$a[] = "Unni";
$a[] = "Violet";
$a[] = "Liza";
$a[] = "Elizabeth";
$a[] = "Ellen";
$a[] = "Wenche";
$a[] = "Vicky";
// get the q parameter from URL
$q = $_REQUEST["q"];
$hint = "";
// lookup all hints from array if $q is different from ""
if ($q !== "") {
$q = strtolower($q);
$len=strlen($q);
foreach($a as $name) {
if (stristr($q, substr($name, 0, $len))) {
if ($hint === "") {
$hint = $name;
} else {
$hint .= ", $name";
}
}
}
}
// Output "no suggestion" if no hint was found or output correct values
echo $hint === "" ? "no suggestion" : $hint;
?>
JSON
vs XML
Both JSON and XML can be used to receive data from a web server.
The following JSON and XML examples both define an employees object, with an array of 3 employees:
JSON Example
{"employees":[
{ "firstName":"John", "lastName":"Doe" },
{ "firstName":"Anna", "lastName":"Smith" },
{ "firstName":"Peter", "lastName":"Jones" }
]}
XML Example
<employees>
<employee>
<firstName>John</firstName> <lastName>Doe</lastName>
</employee>
<employee>
<firstName>Anna</firstName> <lastName>Smith</lastName>
</employee>
<employee>
<firstName>Peter</firstName> <lastName>Jones</lastName>
</employee>
</employees>
JSON is Like XML Because
Both JSON and XML are "self describing" (human readable)
Both JSON and XML are hierarchical (values within values)
Both JSON and XML can be parsed and used by lots of programming languages
Both JSON and XML can be fetched with an XMLHttpRequest
JSON is Unlike XML Because
JSON doesn't use end tag
JSON is shorter
JSON is quicker to read and write
JSON can use arrays
The biggest difference is:
XML has to be parsed with an XML parser. JSON can be parsed by a 
standard JavaScript function.
Why JSON is Better Than XML
For AJAX applications, JSON is faster and easier than XML:
Using XML
Fetch an XML document
Use the XML DOM to loop through the document
Extract values and store in variables
Using JSON
Fetch a JSON string
JSON.Parse the JSON string
AJAX
XML Example
AJAX can be used for interactive communication with an XML file.
AJAX XML Example
The following example will demonstrate how a web page can fetch information 
from an XML file with AJAX:
Example
Get CD info
Try it Yourself 
Example Explained
When a user clicks on the "Get CD info" button above, the
loadDoc()
function is executed.
The
loadDoc()
function creates an
XMLHttpRequest
object, adds the function 
to be executed when the server response is ready, and sends the request off to the server.
When the server response is ready, an HTML 
table is built, nodes (elements) are extracted from the XML file, and it finally updates the 
element "demo" with the HTML table filled with XML data:
function loadDoc() {
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {myFunction(this);}
xhttp.open("GET", "cd_catalog.xml");
xhttp.send();
}
function myFunction(xml) {
const xmlDoc = xml.responseXML;
const x = xmlDoc.getElementsByTagName("CD");
let table="<tr><th>Artist</th><th>Title</th></tr>";
for (let i = 0; i <x.length; 
 i++) {
table += "<tr><td>" +
x[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue 
 +
"</td><td>" +
x[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue 
 +
"</td></tr>";
}
document.getElementById("demo").innerHTML = table;
}
The XML File
The XML file used in the example above looks like this: "
cd_catalog.xml
".
JSON
.parse()
A common use of JSON is to exchange data to/from a web server.
When receiving data from a web server, the data is always a string.
Parse the data with
JSON.parse()
, and the data becomes a JavaScript object.
Example - Parsing JSON
Imagine we received this text from a web server:
'{"name":"John", "age":30, "city":"New York"}'
Use the JavaScript function
JSON.parse()
to convert text into a JavaScript object:
const obj = JSON.parse('{"name":"John", "age":30, "city":"New 
  York"}');
Use the JavaScript object in your page:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = obj.name;
</script>
Try it Yourself 
Array as JSON
When using the
JSON.parse()
on a JSON derived from an array, the method will 
return a JavaScript array, instead of a JavaScript object.
Example
const text = '["Ford", "BMW", "Audi", "Fiat"]';
const myArr = JSON.parse(text);
Try it Yourself 
Exceptions
Parsing Dates
Date objects are not allowed in JSON.
If you need to include a date, write it as a string.
You can convert it back into a date object later:
Example
Convert a string into a date:
const text =
  '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
const obj = JSON.parse(text);
obj.birth = new Date(obj.birth);
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;
Try it Yourself 
Or, you can use the second parameter, of the
JSON.parse()
function, called
reviver
.
The
reviver
parameter is a function that checks each property, 
before returning the value.
Example
Convert a string into a date, using the
reviver
function:
const text =
  '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
const obj = JSON.parse(text, function (key, value) {
if 
  (key == "birth") {
return new 
  Date(value);
} else {
return value;
}
});
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;
Try it Yourself 
Parsing Functions
Functions are not allowed in JSON.
If you need to include a function, write it as a string.
You can convert it back into a function later:
Example
Convert a string into a function:
const text =
  '{"name":"John", "age":"function () {return 
  30;}", "city":"New York"}';
const obj = JSON.parse(text);
obj.age = eval("(" + obj.age + ")");
document.getElementById("demo").innerHTML = obj.name + ", " + 
  obj.age();
Try it Yourself 
AJAX
ASP Example
AJAX is used to create more interactive applications.
AJAX ASP Example
The following example will demonstrate how a web page can communicate with a 
web server while a user type characters in an input field:
Example
Start typing a name in the input field below:
Suggestions:
First name:
Example Explained
In the example above, when a user types a character in the input field, a function 
called
showHint()
is executed.
The function is triggered by the
onkeyup
event.
Here is the code:
Example
<p>Start typing a name in the input field below:</p>
<p>Suggestions: <span id="txtHint"></span></p>
<form>
First name: <input type="text" onkeyup="showHint(this.value)">
</form>
<script>
function showHint(str) {
if (str.length == 0) {
document.getElementById("txtHint").innerHTML = "";
return;
} else {
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
document.getElementById("txtHint").innerHTML = this.responseText;
}
xmlhttp.open("GET", "gethint.asp?q=" + str);
xmlhttp.send();
}
}
</script>
Try it Yourself 
Code explanation:
First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.
However, if the input field is not empty, do the following:
Create an XMLHttpRequest object
Create the function to be executed when the server response is ready
Send the request off to an ASP file (gethint.asp) on the server
Notice that q parameter is added gethint.asp?q="+str
The str variable holds the content of the input field
The ASP File - "gethint.asp"
The ASP file checks an array of names, and returns the corresponding name(s) to the 
browser:
<%
response.expires=-1
dim a(30)
'Fill up array with names
a(1)="Anna"
a(2)="Brittany"
a(3)="Cinderella"
a(4)="Diana"
a(5)="Eva"
a(6)="Fiona"
a(7)="Gunda"
a(8)="Hege"
a(9)="Inga"
a(10)="Johanna"
a(11)="Kitty"
a(12)="Linda"
a(13)="Nina"
a(14)="Ophelia"
a(15)="Petunia"
a(16)="Amanda"
a(17)="Raquel"
a(18)="Cindy"
a(19)="Doris"
a(20)="Eve"
a(21)="Evita"
a(22)="Sunniva"
a(23)="Tove"
a(24)="Unni"
a(25)="Violet"
a(26)="Liza"
a(27)="Elizabeth"
a(28)="Ellen"
a(29)="Wenche"
a(30)="Vicky"
'get the q parameter from URL
q=ucase(request.querystring("q"))
'lookup all hints from array if length of q>0
if len(q)>0 then
hint=""
for i=1 to 30
if q=ucase(mid(a(i),1,len(q))) then
if hint="" then
hint=a(i)
else
hint=hint & " , " & a(i)
end if
end if
next
end if
'Output "no suggestion" if no hint were found
'or output the correct values
if hint="" then
response.write("no suggestion")
else
response.write(hint)
end if
%>
JSON
- Introduction
JSON
JSON stands for
J
ava
S
cript
O
bject
N
otation
JSON is a
text format
for storing and transporting data
JSON is "self-describing" and easy to understand
JSON Example
This example is a JSON string:
'{"name":"John", "age":30, "car":null}'
It defines an object with 3 properties:
name
age
car
Each property has a value.
If you parse the JSON string with a JavaScript program, you can access the data
as an object:
let personName = obj.name;
let personAge = obj.age;
What is JSON?
JSON stands for
J
ava
S
cript
O
bject
N
otation
JSON is a lightweight data-interchange format
JSON is plain text written in JavaScript object notation
JSON is used to send data between computers
JSON is language independent
*
The JSON format was originally specified by
Douglas Crockford
.
Why Use JSON?
The JSON format is syntactically similar to the code for creating 
JavaScript objects.
Because of this, a JavaScript program 
can easily convert JSON data into JavaScript objects.
Since the format is text only, JSON data can easily be sent between computers,
and used by any programming language.
JavaScript has a built in function for converting JSON strings into JavaScript objects:
JSON.parse()
JavaScript also has a built in function for converting an object into a JSON string:
JSON.stringify()
Storing Data
When storing data, the data has to be a certain format, and regardless of where you choose to store it,
text
is always one of the legal formats.
JSON makes it possible to store JavaScript objects as text.
JSON Object Literals
This is a JSON string:
'{"name":"John", "age":30, "car":null}'
Inside the JSON string there is a JSON object literal:
{"name":"John", "age":30, "car":null}
JSON object literals are surrounded by curly braces {}.
JSON object literals contains key/value pairs.
Keys and values are separated by a colon.
Keys must be strings, 
and values must be a valid JSON data type:
string
number
object
array
boolean
null
Each key/value pair is separated by a comma.
JavaScript Objects
You can create a JavaScript object from a JSON object literal:
Example
myObj = {"name":"John", "age":30, "car":null};
Try it Yourself 
Normally, you create a JavaScript object by parsing a JSON string:
Example
myJSON = '{"name":"John", "age":30, "car":null}';
myObj = JSON.parse(myJSON);
Try it Yourself 
Accessing Object Values
You can access object values by using dot (.) notation:
Example
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
x = myObj.name;
Try it Yourself 
You can also access object values by using bracket ([]) notation:
Example
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
x = myObj["name"];
Try it Yourself 
Looping an Object
You can loop through object properties with a for-in loop:
Example
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
let text = "";
for (const x in myObj) {
text += x + ", ";
}
Try it Yourself 
In a for-in loop, use the bracket notation to access the property
values
:
Example
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
let text = "";
for (const x in myObj) {
text += myObj[x] + ", ";
}
Try it Yourself 
JavaScript / jQuery DOM Selectors
jQuery vs JavaScript
jQuery
was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.
For more than 10 years, jQuery has been the most popular JavaScript library in the world.
However, after JavaScript
Version 5
(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:
Finding HTML Element by Id
Return the element with id="id01":
jQuery
myElement = $("#id01");
Try it Yourself 
JavaScript
myElement = document.getElementById("id01");
Try it Yourself 
Finding HTML Elements by Tag Name
Return all <p> elements:
jQuery
myElements = $("p");
Try it Yourself 
JavaScript
myElements = document.getElementsByTagName("p");
Try it Yourself 
Finding HTML Elements by Class Name
Return all elements with class="intro".
jQuery
myElements = $(".intro");
Try it Yourself 
JavaScript
myElements = document.getElementsByClassName("intro");
Try it Yourself 
Finding HTML Elements by CSS Selectors
Return a list of all <p> elements with class="intro".
jQuery
myElements = $("p.intro");
Try it Yourself 
JavaScript
myElements = document.querySelectorAll("p.intro");
Try it Yourself 
JavaScript / jQuery HTML Elements
jQuery vs JavaScript
jQuery
was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.
For more than 10 years, jQuery has been the most popular JavaScript library in the world.
However, after JavaScript
Version 5
(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:
Set Text Content
Set the inner text of an HTML element:
jQuery
myElement.text("Hello Sweden!");
Try it Yourself 
JavaScript
myElement.textContent = "Hello Sweden!";
Try it Yourself 
Get Text Content
Get the inner text of an HTML element:
jQuery
myText = $("#02").text();
Try it Yourself 
JavaScript
myText = document.getElementById("02").textContent;
Try it Yourself 
Set HTML Content
Set the HTML content of an element:
jQuery
myElement.html("<p>Hello World</p>");
Try it Yourself 
JavaScript
myElement.innerHTML = "<p>Hello World</p>";
Try it Yourself 
Get HTML Content
Get the HTML content of an element:
jQuery
content = myElement.html();
Try it Yourself 
JavaScript
content = myElement.innerHTML;
Try it Yourself 
D3.js
How to Use D3.js?
To use D3.js in your web page,
add a link
to the library:
<script src="//d3js.org/d3.v3.min.js"></script>
This script selects the body element and appends a paragraph with the text "Hello World!":
d3.select("body").append("p").text("Hello World!");
Try it Yourself 
Scatter Plot
Example
// Set Dimensions
const xSize = 500;
const ySize = 500;
const margin = 40;
const xMax = xSize - margin*2;
const yMax = ySize - margin*2;
// Create Random Points
const numPoints = 100;
const data = [];
for (let i = 0; i < numPoints; i++) {
data.push([Math.random() * xMax, Math.random() * yMax]);
}
// Append SVG Object to the Page
const svg = d3.select("#myPlot")
.append("svg")
.append("g")
.attr("transform","translate(" + margin + "," + margin + ")");
// X Axis
const x = d3.scaleLinear()
.domain([0, 500])
.range([0, xMax]);
svg.append("g")
.attr("transform", "translate(0," + yMax + ")")
.call(d3.axisBottom(x));
// Y Axis
const y = d3.scaleLinear()
.domain([0, 500])
.range([ yMax, 0]);
svg.append("g")
.call(d3.axisLeft(y));
// Dots
svg.append('g')
.selectAll("dot")
.data(data).enter()
.append("circle")
.attr("cx", function (d) { return d[0] } )
.attr("cy", function (d) { return d[1] } )
.attr("r", 3)
.style("fill", "Red");
Try it Yourself 
JavaScript / jQuery HTML DOM
jQuery vs JavaScript
jQuery
was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.
For more than 10 years, jQuery has been the most popular JavaScript library in the world.
However, after JavaScript
Version 5
(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:
Removing HTML Elements
Remove an HTML element:
jQuery
$("#id02").remove();
Try it Yourself 
JavaScript
document.getElementById("id02").remove();
Try it Yourself 
Get Parent Element
Return the parent of an HTML element:
jQuery
myParent = $("#02").parent().prop("nodeName"); ;
Try it Yourself 
JavaScript
myParent = document.getElementById("02").parentNode.nodeName;
Try it Yourself 
JavaScript
Examples
What can JavaScript do?
JavaScript can change HTML content
JavaScript can change HTML attributes
JavaScript can change CSS style
JavaScript can hide HTML elements
JavaScript can show hidden HTML elements
Examples Explained
Where to Insert JavaScript
JavaScript in <head>
JavaScript in <body>
JavaScript in an external file
JavaScript in an external url
JavaScript in an external folder
Where to Explained
JavaScript Output
Writing into the HTML output
Writing into an HTML element
Writing into an window alert box
Writing into the browser console
Output Explained
JavaScript Syntax
JavaScript statements
JavaScript numbers
JavaScript strings
JavaScript variables
JavaScript operators
JavaScript assignment
JavaScript expressions (using constants)
JavaScript expressions (using strings)
JavaScript expressions (using variables)
JavaScript keywords
JavaScript comments
JavaScript is case sensitive
Syntax Explained
JavaScript Statements
JavaScript statements are commands to the browser
JavaScript code is a sequence of statements
JavaScript statements are separated with semicolon
Multiple statement on one line is allowed
JavaScript statements can be grouped together in code blocks
You can break a code line after an operator or a comma.
Statements Explained
JavaScript Comments
Single line comments
Single line comments at the end of a line
Multiple lines comments
Single line comment to prevent execution
Multiple lines comment to prevent execution
Comments Explained
JavaScript Variables
JavaScript variables
JavaScript variables as algebra
JavaScript numbers and strings
JavaScript var keyword.
Declaring many variables in one statement
Declaring many variables multiline
A variable without a value returns the value undefined
Re-declaring a variable will not destroy the value
Adding JavaScript numbers
Adding JavaScript strings
Adding strings and numbers
Variables Explained
JavaScript Arithmetic
The addition (+) operator
The subtraction (-) operator
The multiplication (*) operator
The division (/) operator
The modulus (%) operator
The increment (++) operator
The decrement (--) operator
Arithmetic Explained
JavaScript Assignment
The = assignment operator
The += assignment operator
The -= assignment operator
The *= assignment operator
The /= assignment operator
The %= assignment operator
Assignment Explained
JavaScript String Concatenation
Adding two strings together using the concatenating (+) operator
Adding two strings together with a space in the first string
Adding two strings together with a space in between
Adding two strings together using using the += operator
Adding strings and numbers
Concatenation Explained
JavaScript Data Types
Declare (create) strings
Declare (create) numbers
Declare (create) an array
Declare (create) an object
Find the type of a variable
Adding two numbers and a string
Adding a string and two numbers
An undefined variable
An empty variable
Data types Explained
JavaScript Objects
Create a JavaScript variable
Create a JavaScript object
Create a person object (single line)
Create a person object (multiple lines)
Access object properties using .property
Access object properties using [property]
Access a function property as a method
Access a function property as a property
Objects Explained
JavaScript Functions
A simple function
A function with an argument
A function with an argument 2
A function that returns a value
A function that converts Fahrenheit to Celsius
A function call without ()
Functions Explained
JavaScript Events
An onclick event changes an HTML element
An onclick event changes its own element
An onclick event calls a function
Events Explained
JavaScript Strings
Strings can be written with single or double quotes.
Show some string examples
Backslash before quotes accepts quotes as quotes.
Find the length of a string
You can break text string with a backslash.
You cannot break code with a backslash.
Find the position of the first occurrence of a text
in a string - indexOf()
Search for a text in a string and return the text if found
- match()
Replace characters in a string - replace()
Convert string to upper case - toUpperCase()
Convert string to lower case - toLowerCase()
Split a string into an array - split()
Strings Explained
JavaScript Numbers
Numbers can be written with or without decimals
Extra large or extra small numbers can be written with exponent notation
Number are considered accurate only up to 15 digits
Floating point arithmetic is not always 100% accurate
But it helps to multiply and divide by 10
Adding two numbers results in a new number
Adding two numeric strings results in a concatenated string
Adding a number and a numeric string also results in a concatenated string
Adding a numeric string and a number also results in a concatenated string
Common mistake when adding strings and numbers 1
Common mistake when adding strings and numbers 2
JavaScript will try to convert strings to numbers when dividing
JavaScript will try to convert strings to numbers when multiplying
JavaScript will try to convert strings to numbers when subtracting
JavaScript will NOT convert strings to numbers when adding
A number divided by a string is NaN (Not a Number)
A number divided by a numeric string is a number
The global JavaScript function isNaN() returns if a value is a number
Using NaN in a mathematical operation will always return NaN
Using NaN in a mathematical string operation will concatenate NaN
NaN (Not a Number) is a number (Yes! typeof NaN returns number)
Infinity is returned if you calculate a number outside the largest possible number
Division by zero also generates Infinity
Infinity is a number (typeof Infinity returns number)
Constants, preceded by 0x, are interpreted as hexadecimal
The toString() method can output numbers as hex, octal, and binary
Numbers can be objects
Numbers and objects cannot be safely compared
Objects and objects cannot be safely compared
Numbers Explained
JavaScript Number Methods
The toString() method converts a number to a string
The valueOf() method returns a number as a number
The toExponential() returns a number with exponential notation
The toFixed() method rounds a number to a number of digits
The toPrecision() method a number written with a specified length
The global method Number() converts variables to numbers
The global method Number() can even convert dates to numbers
The global method parseInt() converts strings to numbers
The global method parseFloat() converts strings to numbers
MAX_VALUE returns the largest possible number in JavaScript
MIN_VALUE returns the smallest possible number in JavaScript
POSITIVE_INFINITY represents infinity
POSITIVE_INFINITY is returned on overflow
NEGATIVE_INFINITY represents negative infinity
NEGATIVE_INFINITY is returned on overflow
NaN Represents "Not-a-Number"
Arithmetic performed on a string will result in NaN
Using a Number property on a variable will return undefined
Numbers Methods Explained
JavaScript Maths
Math.PI returns the value of PI
Math.round(x) returns the rounded value of x
Math.pow(x, y) returns the value of x to the power of y
Math.sqrt(x) returns the square root of x
Math.abs(x) returns the absolute (positive) value of x
Math.ceil(x) returns the value of x rounded up
Math.floor(x) returns the value of x rounded down
Math.sin(x) returns the sin of the angle x (given in radians)
Math.cos(x) returns the cosin of the angle x (given in radians)
Math.max() return the number with the highest value from a list of arguments
Math.min() to return the number with the lowest value from a list of arguments
Converting Celsius to Fahrenheit
Maths Explained
JavaScript Random
Math.random() returns a random number between 0 (included) and 1 (excluded)
How to return a random integer between 0 and 9 (both included)
How to return a random integer between 0 and 10 (both included)
How to return a random integer between 0 and 99 (both included)
How to return a random integer between 0 and 100 (both included)
How to return a random integer between 1 and 10 (both included)
How to return a random integer between 1 and 100 (both included)
How to return a random integer between x (included) and y (excluded)
How to return a random integer between x and y (both included)
Random Explained
JavaScript Dates
Use Date() to display today's date and time
Use getFullYear() display the year
Use getTime() to calculate the number of milliseconds since 1970
Use setFullYear() to set a specific date
Use toUTCString() to convert today's date (according to UTC) to a string
Use getDay() to display the weekday as a number
Use getDay() and an array to display the weekday as a name
Display a clock
Dates Explained
JavaScript Arrays
Create an array I
Create an array II
Access an array element
Change an array element
Access a full array
Find the length of an array
Loop through an array
Add an element to an array
Add undefined "holes" to an array
How to 
recognize an array I
How to 
recognize an array II
Arrays Explained
JavaScript Array Methods
Add an element to an array
Remove the last element of an array - pop()
Join all elements of an array into a string - join()
Join two arrays - concat()
Join three arrays - concat()
Add an element to position 2 in an array - splice()
Convert an array to a string - toString()
Add new elements to the beginning of an array - unshift()
Remove the first element of an array - shift()
Select elements from an array - slice()
Array Methods Explained
JavaScript Array Sort
Sort an array in ascending order
Sort an array in descending order
Sort an array of numbers ascending
Sort an array of numbers descending
Sort numbers (alphabetically or numerically)
Sort array numbers in random order
Find the lowest number in an array
Find the highest number in an array
Find the lowest number in an array using Math.min()
Find the highest number in an array using Math.max()
Using a "homemade" myArrayMin method
Using a "homemade" myArrayMax method
Sort objects by numeric properties
Sort objects by string properties
Array Sort Explained
JavaScript Array Iteration
Array.forEach()
Array.map()
Array.filter()
Array.reduce()
Array.reduceRight()
Array.every()
Array.some()
Array.indexOf()
Array.lastIndexOf()
Array.find()
Array.findIndex()
Array Iteration Explained
JavaScript Type Conversion
Display the typeof all variable types
Display the constructor of all variable types
Convert a number to a string using String()
Convert a number to a string using toString()
Find out if a variable is an array
Find out if a variable is a date
Type Conversion Explained
JavaScript Booleans
Display the value of Boolean(10 > 9)
Display the value of 10 > 9
Everything with a real value is true
The Boolean value of zero is false
The Boolean value of minus zero is false
The Boolean value of an empty string is false
The Boolean value of undefined is false
The Boolean value of null is false
The Boolean value of false is false
The Boolean value of NaN is false
Booleans Explained
JavaScript Comparisons
Assign 5 to x, and display the value of (x == 8)
Assign 5 to x, and display the value of (x == 5)
Assign 5 to x, and display the value of (x === 5)
Assign 5 to x, and display the value of (x === "5")
Assign 5 to x, and display the value of (x != 8)
Assign 5 to x, and display the value of (x !== 5)
Assign 5 to x, and display the value of (x !== "5")
Assign 5 to x, and display the value of (x > 8)
Assign 5 to x, and display the value of (x < 8)
Assign 5 to x, and display the value of (x >= 8)
Assign 5 to x, and display the value of (x <= 8)
Comparisons Explained
JavaScript Conditionals
The if statement
The else statement
The else if statement
Random link
Switch statement
Conditionals Explained
JavaScript Loops
For loop
Looping an Array
Looping through HTML headers
While loop
Do While loop
Break a loop
Break and continue a loop
Use a for...in statement to loop through the elements of an 
object
Loops Explained
JavaScript Error Handling
The try...catch statement
The try...catch statement with a confirm box
The onerror event
Errors Explained
JavaScript Regular Expressions
Search for an expression in a string
Search for an expression and replace it
Regular Expressions Explained
JavaScript Objects
Creating a JavaScript variable
Creating a JavaScript object
Creating a JavaScript object (single line)
Creating a JavaScript object (multiple lines)
Creating a JavaScript object using new
Creating JavaScript objects using a constructor
Creating built-in JavaScript objects
The best way to create JavaScript variables
JavaScript objects are mutable
Objects Explained
JavaScript Object Properties
Accessing properties using .property
Accessing properties using [property]
Accessing properties using for in
Adding new properties to existing objects
Deleting properties from objects
Object Properties Explained
JSON Objects
Accessing properties using .property
Accessing properties using [property]
Looping through properties
Looping through property values
Access nested JSON objects
Modify values using the dot notation
Modify values using the bracket notation
Delete object properties
JSON Object Properties Explained
JSON Arrays
Accessing array values
Looping through an array using for-in
Looping through an array using for
Access nested JSON arrays
Modify array values
Delete array items
JSON Arrays Explained
JSON Parse
Use JSON parse
Using JSON parse in an AJAX example
Using JSON parse on an array
Parsing dates
Parsing dates using the reviver function
Parsing functions
JSON Parse Explained
JSON Stringify
Use JSON stringify
Using JSON stringify on an array
Stringify dates
Stringify functions
Stringify functions using the toString() method
JSON Stringify Explained
JSON PHP
Get JSON from a php file
Get JSON array from php
Get JSON from a database
Loop through the result from a database
Send JSON using POST method
JSON PHP Explained
JSON HTML
Make an HTML table based on JSON data
Make a dynamic HTML Table
Make an HTML drop down list based on JSON data
JSON HTML Explained
JSON JSONP
Simple JSONP example
Create a dynamic script tag
JSONP example with dynamic result
JSONP example with a callback function
JSON JSONP Explained
Chart.js
How to Use Chart.js?
1.
Add a link to the providing CDN (Content Delivery Network):
<script
src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js">
</script>
2.
Add a <canvas> to where in the HTML you want to draw the chart:
<canvas id="myChart" style="width:100%;max-width:700px"></canvas>
The canvas element must have a unique id.
Typical Bar Chart Syntax:
const myChart = new Chart("myChart", {
type: "bar",
data: {},
options: {}
});
Typical Line Chart Syntax:
const myChart = new Chart("myChart", {
type: "line",
data: {},
options: {}
});
Bar Charts
Source Code
const xValues = ["Italy", "France", "Spain", "USA", "Argentina"];
const yValues = [55, 49, 44, 24, 15];
const barColors = ["red", "green","blue","orange","brown"];
new Chart("myChart", {
type: "bar",
data: {
labels: xValues,
datasets: [{
backgroundColor: barColors,
data: yValues
}]
},
options: {...}
});
Try it Yourself 
Color only one bar:
const barColors = ["blue"];
Try it Yourself 
Same color all bars:
const barColors ="red";
Try it Yourself 
Color Shades:
const barColors = [
"rgba(0,0,255,1.0)",
"rgba(0,0,255,0.8)",
"rgba(0,0,255,0.6)",
"rgba(0,0,255,0.4)",
"rgba(0,0,255,0.2)",
];
Try it Yourself 
Horizontal Bars
Just change type from "bar" to "horizontalBar":
type: "horizontalBar",
Try it Yourself 
Pie Charts
Example
new Chart("myChart", {
type: "pie",
data: {
labels: xValues,
datasets: [{
backgroundColor: barColors,
data: yValues
}]
},
options: {
title: {
display: true,
text: "World Wide Wine Production"
}
}
});
Try it Yourself 
Doughnut Charts
Just change type from "pie" to "doughnut":
type: "doughnut";
Try it Yourself 
Scatter Plots
House Prices vs. Size
Source Code
const xyValues = [
{x:50, y:7},
{x:60, y:8},
{x:70, y:8},
{x:80, y:9},
{x:90, y:9},
{x:100, y:9},
{x:110, y:10},
{x:120, y:11},
{x:130, y:14},
{x:140, y:14},
{x:150, y:15}
];
new Chart("myChart", {
type: "scatter",
data: {
datasets: [{
pointRadius: 4,
pointBackgroundColor: "rgba(0,0,255,1)",
data: xyValues
}]
},
options:{...}
});
Try it Yourself 
Line Graphs
House Prices vs. Size
Source Code
const xValues = [50,60,70,80,90,100,110,120,130,140,150];
const yValues = [7,8,8,9,9,9,10,11,14,14,15];
new Chart("myChart", {
type: "line",
data: {
labels: xValues,
datasets: [{
backgroundColor:"rgba(0,0,255,1.0)",
borderColor: "rgba(0,0,255,0.1)",
data: yValues
}]
},
options:{...}
});
Try it Yourself 
If you set the borderColor to zero, you can
scatter plot
the line graph:
borderColor: "rgba(0,0,0,0)",
Try it Yourself 
Multiple Lines
Source Code
const xValues = [100,200,300,400,500,600,700,800,900,1000];
new Chart("myChart", {
type: "line",
data: {
labels: xValues,
datasets: [{
data: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],
borderColor: "red",
fill: false
},{
data: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],
borderColor: "green",
fill: false
},{
data: [300,700,2000,5000,6000,4000,2000,1000,200,100],
borderColor: "blue",
fill: false
}]
},
options: {
legend: {display: false}
}
});
Try it Yourself 
Linear Graphs
Source Code
const xValues = [];
const yValues = [];
generateData("x * 2 + 7", 0, 10, 0.5);
new Chart("myChart", {
type: "line",
data: {
labels: xValues,
datasets: [{
fill: false,
pointRadius: 1,
borderColor: "rgba(255,0,0,0.5)",
data: yValues
}]
},
options: {...}
});
function generateData(value, i1, i2, step = 1) {
for (let x = i1; x <= i2; x += step) {
yValues.push(eval(value));
xValues.push(x);
}
}
Try it Yourself 
Function Graphs
Same as Linear Graph. Just change the generateData parameter(s):
generateData("Math.sin(x)", 0, 10, 0.5);
Try it Yourself 
JavaScript Graphics
Plotly.js
Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.
Learn More ...
Chart.js
Chart.js comes with many built-in chart types:
Scatter
Line
Bar
Radar
Pie and Doughnut
Polar Area
Bubble
Learn More ...
Google Chart
From simple line charts to complex tree maps,
Google Chart provides a number of built-in chart types:
Scatter Chart
Line Chart
Bar / Column Chart
Area Chart
Pie Chart
Donut Chart
Org Chart
Map / Geo Chart
Learn More ...
JavaScript
Quiz Test
You can test your JavaScript skills with W3Schools' Quiz.
The Test
The test contains 25 questions and there is no time limit.
The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.
Count Your Score
You will get 1 point for each correct answer. At the end of the Quiz,
your total score will be displayed. Maximum score is 25 points.
Start the Quiz
Good luck!
Start the JavaScript Quiz 
JavaScript
Online Editor
JavaScript Editor
With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.
Run 
Size:
Example
let x = 5;
let y = 6;
let z = x + y;
11
Try it Yourself 
Click on the "Try it Yourself" button to see how it works.
Publish Your Code
If you want to save your HTML, CSS and JavaScript code, and create your own website, check out
W3Schools Spaces
.
W3Schools Spaces
is a website-building tool that lets you make and share your own website.
You can change the website's look and how it works by editing the code right in your web browser.
It's easy to use and doesn't require any setup:
The code editor is packed with features to help you achieve more:
Templates:
Start from scratch or use a template
Cloud-based:
no installations required. You only need your browser
Terminal & Log:
debug and troubleshoot your code easily
File Navigator:
switch between files inside the code editor
And much more!
Learn More
Learn Faster
Practice is key to mastering coding, and the best way to put your JavaScript knowledge into practice is by getting practical with code.
Use
W3Schools Spaces
to build, test and deploy code.
The code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, and you can use it for other languages too.
New languages are added all the time:
Learn More
Build Powerful Websites
You can also use the code editor in
W3School Spaces
to build frontend or full-stack websites from scratch.
Or you can use the 60+ templates available and save time:
Create your Spaces account today and explore them all!
Learn More
Share It With The World
Host and publish your websites in no time with
W3School Spaces
.
W3Schools subdomain and SSL certificate are included for free with
W3School Spaces
. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.
Want a custom domain for your website?
You can buy a domain or transfer an existing one and connect it to your space.
Learn More
How Does It Work?
Get started in a few clicks with
W3School Spaces
.
W3Schools
JavaScript Certificate
w
3
s
c
h
o
o
l
s
C
E
R
T
I
F
I
E
D
.
2
0
2
4
W3Schools offers an Online Certification Program.
The perfect solution for busy professionals who need to balance work, family, and career building.
More than 50 000 certificates already issued!
Get Your Certificate 
w
3
s
c
h
o
o
l
s
C
E
R
T
I
F
I
E
D
.
2
0
2
4
W3Schools offers an Online Certification Program.
The perfect solution for busy professionals who need to balance work, family, and career building.
More than 50 000 certificates already issued!
Get Your Certificate 
Document your skills
Improve your career
Study at your own pace
Save time and money
Known brand
Trusted by top companies
Who Should Consider Getting Certified?
Any student or professional within the digital industry.
Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.
W3Schools is Trusted by Top Companies
W3Schools has over two decades of experience with teaching coding online.
Our certificates are recognized and valued by companies looking to employ skilled developers.
Save Time and Money
Show the world your coding skills by getting a certification.
The prices is a small fraction compared to the price of traditional education.
Document and validate your competence by getting certified!
Exam overview
Fee:
95 USD
Achievable certification levels:
Intermediate (40%)
Advanced (75%)
Professional (90%)
Number of questions:
Adaptive,
60
on average
Requirement to pass:
Minimum 40% - Intermediate level
Time limit:
60 minutes
Number of attempts to pass:
3
Exam deadline:
None
Certification Expiration:
None
Format:
Online, multiple choice
Register now 
Advance Faster in Your Career
Getting a certificate proves your commitment to upgrading your skills.
The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.
It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.
Knowledge is power, especially in the current job market.
Documentation of your skills enables you to advance your career or helps you to start a new one.
Get Your Certificate and Share It With The World
Example certificate:
Each certificate gets a unique link that can be shared with others.
Validate your certification with the link or QR code.
Check how it looks like in this
Example
.
Share your certificate on Linked
in the Certifications section in just one click!
Looking to add multiple users?
Are you an educator, manager or business owner looking for courses or certifications?
We are working with schools, companies and organizations from all over the world.
Get courses and/or certifications for your team here.
JavaScript
Interview Preparation
Try W3Schools' comprehensive Front-End interview preparation feature.
A tool that will help you get ready for your next interview.
W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.
After the interview training you will get an evaluation of your performance that you can use to improve yourself.
Get Started
What to expect in a Front-End interview
If you are going to a Front-End interview, there are a few things you can expect:
Coding Questions:
You will be asked coding questions, and you possibly also get a task to solve.
Examples of technical questions:
Tell me about your experience as a Front-End developer.
Tell me about a personal project where you worked on implementing the user interface for a website.
Examples of a task:
Create a webpage that shows a greeting message to the user.
Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.
<head>
<title>Simple Greeting Page</title>
<style>
body {
font-family: Arial, sans-serif;
background-color: #f0f0f0;
color: #333;
padding: 20px;
}
</style>
</head>
<body>
<h1>Hello, welcome to our website!</h1>
</body>
</html>
Practice Here 
If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.
Showcase your skills and projects:
They would like to see projects to understand your work better.
You can include current projects in your portfolio even if they are unfinished.
Examples of projects to have in your portfolio:
To-do list app
Blog template
Weather dashboard
E-commerce product page
Interactive game or application
What to do before the interview
Before you go to an interview, you should check out the company.
It will give you a better understanding of their values and what they do.
Check out:
Their webpage
Their social media platforms
Articles and reviews
Make sure you understand the job description:
Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.
You can also ask a friend or a community member to help you.
There is a big community of Front-End developers on social media.
Reflect on why you are the right fit for this role:
Companies hire people they believe will be the right fit.
Think about what value you can add to the role and the team.
Write them down.
It will help you discuss how you are the right candidate for the role.
We have created an interview tool to help you prepare:
Try it out
What is Front-End Development?
Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.
Typical Languages Used in Front-End Development:
HTML
CSS
JavaScript
React.js
Bootstrap
and other CSS frameworks
Career Outlook
The demand for Front-End developers is high.
You can expect:
Competitive salary
Possibility of working remotely
Opportunity to grow as the industry innovates and adopts new technologies.
The Average Salary is $112,328 in the US.
Typical Job Titles for a Front-End Developer:
Front-End developer
Web Developer
UI/UX Designer
Web App Developer
and many more.
Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.
Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!
Try W3Schools interview preparation here:
Interview Preperation
Best of luck!
JavaScript
Browser Objects
Examples
Examples of using JavaScript to access and manipulate the Browser objects.
Window Object
Open a new window when clicking on a button
Open a new window and control its appearance
Blur and Focus a new window
Close the new window
Checks whether the new window has been closed or not
Write some text to the source (parent) window
Move the new window relative to its current position
Move the new window to the specified position
Print the current page
Resize a window by the specified pixels
Resize a window to a specified size
Scroll the content by the specified number of pixels
Scroll the content to a specified position
Window explained
Screen Object
The visitor's screen: Width
The visitor's screen: Height
The visitor's screen: Available Width
The visitor's screen: Available Height
The visitor's screen: Color Depth
The visitor's screen: Pixel Depth
Screen explained
Location Object
Return the hostname and port of the current URL
Return the entire URL of the current page
Return the path name of the current URL
Return the protocol portion of the current URL
Load a new document
Replace the current document
Break out of a frame
Location explained
History Object
Display the number of URLs in the history list
Create a back button on a page
Create a forward button on a page
Load a specific URL from the history list
History explained
Navigator Object
Is cookies enabled in the visitor's browser?
What is the name of the visitor's browser?
What is the engine name of the visitor's browser?
What is the version information of the visitor's browser?
What is user agent information of the visitor's browser?
What is the platform of the visitor's browser?
What is the language of the visitor's browser?
Is Java enabled in the visitor's browser?
Navigator explained
Popup Boxes
Display an alert box
Demonstrate line breaks in an alert box
Display a confirm box
Display a prompt box
Popup explained
Timing
Simple timing
Another simple timing
Timing event in an infinite loop
Timing event in an infinite loop - with a Stop button
A clock created with a timing event
Set and stop a timer with setInterval() and clearInterval()
Timing explained
Cookies
Create a welcome cookie
Cookies explained
JavaScript
Booleans
A JavaScript Boolean represents one of two values:
true
or
false
.
Boolean Values
Very often, in programming, you will need a data type that can only have one 
of two values, like
YES / NO
ON / OFF
TRUE / FALSE
For this, JavaScript has a
Boolean
data type. It can only 
take the values
true
or
false
.
The Boolean() Function
You can use the
Boolean()
function to find out if an expression (or a variable) is 
true:
Example
Boolean(10 > 9)
Try it Yourself 
Or even easier:
Example
(10 > 9)
10 > 9
Try it Yourself 
Comparisons and Conditions
The chapter
JS Comparisons
gives a full overview of comparison operators.
The chapter
JS If Else
gives a full overview of conditional statements.
Here are some examples:
Operator
Description
Example
==
equal to
if (day == "Monday")
>
greater than
if (salary > 9000)
<
less than
if (age < 18)
Everything With a "Value" is True
Examples
100
3.14
-15
"Hello"
"false"
7 + 1 + 3.14
Try it Yourself 
Everything Without a "Value" is False
The Boolean value of
0
(zero) is
false
:
let x = 0;
Boolean(x);
Try it Yourself 
The Boolean value of
-0
(minus zero) is
false
:
let x = -0;
Boolean(x);
Try it Yourself 
The Boolean value of
""
(empty string) is
false
:
let x = "";
Boolean(x);
Try it Yourself 
The Boolean value of
undefined
is
false
:
let x;
Boolean(x);
Try it Yourself 
The Boolean value of
null
is
false
:
let x = null;
Boolean(x);
Try it Yourself 
The Boolean value of
false
is (you guessed it)
false
:
let x = false;
Boolean(x);
Try it Yourself 
The Boolean value of
NaN
is
false
:
let x = 10 / "Hallo";
Boolean(x);
Try it Yourself 
JavaScript Booleans as Objects
Normally JavaScript booleans are primitive values created from literals:
let x = false;
But booleans can also be defined as objects with the keyword
new
:
let y = new Boolean(false);
Example
let x = false;
let y = new Boolean(false);
//
typeof x returns boolean
//
typeof y returns object
Try 
it yourself 
When using the
==
operator, x and y are
equal
:
let x = false;
let y = new Boolean(false);
Try it Yourself 
When using the
===
operator, x and y are
not equal
:
let x = false;
let y = new Boolean(false);
Try it Yourself 
(x == y)
true or false?
let x = new Boolean(false);
let y = new Boolean(false);
Try it Yourself 
(x === y)
true or false?
let x = new Boolean(false);
let y = new Boolean(false);
Try it Yourself 
JavaScript
HTML DOM - Changing HTML
The HTML DOM allows JavaScript to change the content of HTML elements.
Changing HTML Content
The easiest way to modify the content of an HTML element is by using the
innerHTML
property.
To change the content of an HTML element, use this syntax:
document.getElementById(
id
).innerHTML =
new HTML
This example changes the content of a
<p>
element:
Example
<html>
<body>
<p id="p1">Hello World!</p>
<script>
document.getElementById("p1").innerHTML = "New text!";
</script>
</body>
</html>
Try it Yourself 
Example explained:
The HTML document above contains a
<p>
element with
id="p1"
We use the HTML DOM to get the element with
id="p1"
A JavaScript changes the content (
innerHTML
) of that element to "New 
  text!"
This example changes the content of an
<h1>
element:
Example
<!DOCTYPE html>
<html>
<body>
<h1 id="id01">Old Heading</h1>
<script>
const element = document.getElementById("id01");
element.innerHTML = "New Heading";
</script>
</body>
</html>
Try it Yourself 
Example explained:
The HTML document above contains an
<h1>
element with
id="id01"
We use the HTML DOM to get the element with
id="id01"
A JavaScript changes the content (
innerHTML
) of that element to "New 
  Heading"
Changing the Value of an Attribute
To change the value of an HTML attribute, use this syntax:
document.getElementById(
id
).
attribute = new value
This example changes the value of the src attribute of an
<img>
element:
Example
<!DOCTYPE html>
<html>
<body>
<img id="myImage" src="smiley.gif">
<script>
document.getElementById("myImage").src = "landscape.jpg";
</script>
</body>
</html>
Try it Yourself 
Example explained:
The HTML document above contains an
<img>
element with
id="myImage"
We use the HTML DOM to get the element with
id="myImage"
A JavaScript changes the
src
attribute of that element from "smiley.gif" to "landscape.jpg"
Dynamic HTML content
JavaScript can create dynamic HTML content:
Example
<!DOCTYPE html>
<html>
<body>
<script>
document.getElementById("demo").innerHTML = "Date : " + Date();
</script>
</body>
</html>
Try it Yourself 
document.write()
In JavaScript,
document.write()
can be used to write directly to the HTML 
output stream:
Example
<!DOCTYPE html>
<html>
<body>
<p>Bla bla bla</p>
<script>
document.write(Date());
</script>
<p>Bla bla bla</p>
</body>
</html>
Try it Yourself 
Test Yourself With Exercises
Exercise:
Use HTML DOM to change the value of the image's src attribute.
<img id="image" src="smiley.gif">

<script>
document.getElementById("image")
= "pic_mountain.jpg";
</script>
Submit Answer 
Start the Exercise
JavaScript
Forms
JavaScript Form Validation
HTML form validation can be done by JavaScript.
If a form field (fname) is empty, this function alerts a message, and returns 
false, to prevent the form from being submitted:
JavaScript Example
function validateForm() {
let
x = document.forms["myForm"]["fname"].value;
if (x == "") {
alert("Name must be filled out");
return false;
}
}
The function can be called when the form is submitted:
HTML Form Example
<form name="myForm" action="/action_page.php"
onsubmit="return validateForm()"
method="post">
Name: <input type="text" name="fname">
<input type="submit" value="Submit">
</form>
Try it Yourself 
JavaScript Can Validate Numeric Input
JavaScript is often used to validate numeric input:
Please input a number between 1 and 10
Submit
Try it Yourself 
Automatic HTML Form Validation
HTML form validation can be performed automatically by the browser:
If a form field (fname) is empty, the
required
attribute prevents this form from being 
submitted:
HTML Form Example
<form action="/action_page.php" method="post">
<input type="text" name="fname"
required
>
<input type="submit" value="Submit">
</form>
Try it Yourself 
Data Validation
Data validation is the process of ensuring that user input is clean, 
correct, and useful.
Typical validation tasks are:
has the user filled in all required fields?
has the user entered a valid date?
has the user entered text in a numeric field?
Most often, the purpose of data validation is to ensure correct user input.
Validation can be defined by many different methods, and deployed in many 
different ways.
Server side validation
is performed by a web server, after input has been sent to the 
server.
Client side validation
is performed by a web browser, before input is sent to a web server.
HTML Constraint Validation
HTML5 introduced a new HTML validation concept called
constraint 
validation
.
HTML constraint validation is based on:
Constraint validation
HTML
Input Attributes
Constraint validation
CSS Pseudo Selectors
Constraint validation
DOM Properties and Methods
Constraint Validation HTML Input Attributes
Attribute
Description
disabled
Specifies that the input element should be disabled
max
Specifies the maximum value of an input element
min
Specifies the minimum value of an input element
pattern
Specifies the value pattern of an input element
required
Specifies that the input field requires an element
type
Specifies the type of an input element
For a full list, go to
HTML 
Input Attributes
.
Constraint Validation CSS Pseudo Selectors
Selector
Description
:disabled
Selects input elements with the "disabled" attribute specified
:invalid
Selects input elements with invalid values
:optional
Selects input elements with no "required" attribute specified
:required
Selects input elements with the "required" attribute specified
:valid
Selects input elements with valid values
For a full list, go to
CSS 
Pseudo Classes
.
JavaScript
HTML DOM - Changing CSS
The HTML DOM allows JavaScript to change the style of HTML elements.
Changing HTML Style
To change the style of an HTML element, use this syntax:
document.getElementById(
id
).style.
property
=
new style
The following example changes the style of a
<p>
element:
Example
<html>
<body>
<p id="p2">Hello World!</p>
<script>
document.getElementById("p2").style.color = "blue";
</script>
</body>
</html>
Try it Yourself 
Using Events
The HTML DOM allows you to execute code when an event occurs.
Events are generated by the browser when "things happen" to HTML elements:
An element is clicked on
The page has loaded
Input fields are changed
You will learn more about events in the next chapter of this tutorial.
This example changes the style of the HTML element with
id="id1"
, when the 
user clicks a button:
Example
<!DOCTYPE html>
<html>
<body>
<h1 id="id1">My Heading 1</h1>
<button type="button"
onclick="document.getElementById('id1').style.color = 'red'">
Click Me!</button>
</body>
</html>
Try it Yourself 
More Examples
Visibility
How to make an element invisible. Do you want to show the element or not?
HTML DOM Style Object Reference
For all HTML DOM style properties, look at our complete
HTML DOM Style Object Reference
.
Test Yourself With Exercises
Exercise:
Change the text color of the
<p>
element to "red".
<p id="demo"></p>

<script>
document.getElementById("demo")
= "red";
</script>
Submit Answer 
Start the Exercise
JavaScript
HTML DOM Events
HTML DOM allows JavaScript to react to HTML events:
Mouse Over Me
Click Me
Reacting to Events
A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.
To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:
onclick=
JavaScript
Examples of HTML events:
When a user clicks the mouse
When a web page has loaded
When an image has been loaded
When the mouse moves over an element
When an input field is changed
When an HTML form is submitted
When a user strokes a key
In this example, the content of the
<h1>
element is changed when a user clicks on it:
Example
<!DOCTYPE html>
<html>
<body>
<h1 onclick="this.innerHTML = 'Ooops!'">Click on this text!</h1>
</body>
</html>
Try it Yourself 
In this example, a function is called from the event handler:
Example
<!DOCTYPE html>
<html>
<body>
<h1 onclick="changeText(this)">Click on this text!</h1>
<script>
function changeText(id) {
id.innerHTML = "Ooops!";
}
</script>
</body>
</html>
Try it Yourself 
HTML Event Attributes
To assign events to HTML elements you can use event attributes.
Example
Assign an onclick event to a button element:
<button onclick="displayDate()">Try it</button>
Try it Yourself 
In the example above, a function named
displayDate
will be executed 
when the button is clicked.
Assign Events Using the HTML DOM
The HTML DOM allows you to assign events to HTML elements using JavaScript:
Example
Assign an onclick event to a button element:
<script>
document.getElementById("myBtn").onclick = displayDate;
</script>
Try it Yourself 
In the example above, a function named
displayDate
is assigned to 
an HTML element with the
id="myBtn"
.
The function will be executed 
when the button is clicked.
The onload and onunload Events
The
onload
and
onunload
events are triggered when the user enters or leaves the page.
The
onload
event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.
The
onload
and
onunload
events can be used to deal with cookies.
Example
<body onload="checkCookies()">
Try it Yourself 
The oninput Event
The
oninput
event is often to some action while the user input data.
Below is an example of how to use the oninput to change the content of an input field.
Example
<input type="text" id="fname"
oninput="upperCase()">
Try it Yourself 
The onchange Event
The
onchange
event is often used in combination with validation of input fields.
Below is an example of how to use the onchange. The
upperCase()
function will be called when a user changes the content of an input field.
Example
<input type="text" id="fname"
onchange="upperCase()">
Try it Yourself 
The onmouseover and onmouseout Events
The
onmouseover
and
onmouseout
events can be used to trigger a function when the user mouses 
over, or out of, an HTML element:
Mouse Over Me
Try it Yourself 
The onmousedown, onmouseup and onclick Events
The
onmousedown
,
onmouseup
, and
onclick
events are all parts of a 
mouse-click. First when a mouse-button is clicked, the onmousedown event is 
triggered, then, when the mouse-button 
is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.
Click Me
Try it Yourself 
More Examples
onmousedown and onmouseup
Change an image when a user holds down the mouse button.
onload
Display an alert box when the page has finished loading.
onfocus
Change the background-color of an input field when it gets focus.
Mouse Events
Change the color of an element when the cursor moves over it.
HTML DOM Event Object Reference
For a list of all HTML DOM events, look at our complete
HTML DOM Event Object Reference
.
JavaScript
HTML DOM EventListener
The addEventListener() method
Example
Add an event listener that fires when a user clicks a button:
document.getElementById("myBtn").addEventListener("click", displayDate);
Try it Yourself 
The
addEventListener()
method attaches an event handler to the specified element.
The
addEventListener()
method attaches an event handler to an element without overwriting existing event handlers.
You can add many event handlers to one element.
You can add many event handlers of the same type to one element, i.e two "click" events.
You can add event listeners to any DOM object not only HTML elements. i.e the window object.
The
addEventListener()
method makes it easier to control how the event reacts to bubbling.
When using the
addEventListener()
method, the JavaScript is separated from the HTML markup, for better readability 
and allows you to add event listeners even when you do not control the HTML markup.
You can easily remove an event listener by using the
removeEventListener()
method.
Syntax
element
.addEventListener(
event, function, useCapture
);
The first parameter is the type of the event (like "
click
" or "
mousedown
" 
or any other
HTML DOM Event
.)
The second parameter is the function we want to call when the event occurs.
The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.
Add an Event Handler to an Element
Example
Alert "Hello World!" when the user clicks on an element:
element
.addEventListener("click", function(){ alert("Hello World!"); });
Try it Yourself 
You can also refer to an external "named" function:
Example
Alert "Hello World!" when the user clicks on an element:
element
.addEventListener("click",  myFunction);
function myFunction() {
alert ("Hello World!");
}
Try it Yourself 
Add Many Event Handlers to the Same Element
The
addEventListener()
method allows you to add many events to the same 
element, without overwriting existing events:
Example
element
.addEventListener("click", myFunction);
element
.addEventListener("click", mySecondFunction);
Try it Yourself 
You can add events of different types to the same element:
Example
element
.addEventListener("mouseover", myFunction);
element
.addEventListener("click", mySecondFunction);
element
.addEventListener("mouseout", myThirdFunction);
Try it Yourself 
Add an Event Handler to the window Object
The
addEventListener()
method allows you to add event listeners on any HTML 
DOM object such as HTML elements, the HTML document, the window object, or other 
objects that support events, like the
xmlHttpRequest
object.
Example
Add an event listener that fires when a user resizes the window:
window.addEventListener("resize", function(){
document.getElementById("demo").innerHTML =
sometext
;
});
Try it Yourself 
Passing Parameters
When passing parameter values, use 
an "anonymous function" that calls the specified function with the parameters:
Example
element
.addEventListener("click", function(){ myFunction(p1, p2); });
Try it Yourself 
Event Bubbling or Event Capturing?
There are two ways of event propagation in the HTML DOM, bubbling and capturing.
Event propagation is a way of defining the element order when an event occurs.
If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's 
"click" event should be handled first?
In
bubbling
the inner most element's event is handled first and then the outer:
the <p> element's click event is handled first, then the <div> element's click event.
In
capturing
the outer most element's event is handled first and then the inner:
the <div> element's click event will be handled first, then the <p> element's click event.
With the addEventListener() method you can specify the propagation type by using the "useCapture" parameter:
addEventListener(
event
,
function
,
useCapture
);
The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.
Example
document.getElementById("myP").addEventListener("click", myFunction, true);
document.getElementById("myDiv").addEventListener("click", myFunction, true);
Try it Yourself 
The removeEventListener() method
The
removeEventListener()
method removes event handlers that have been 
attached with the addEventListener() method:
Example
element
.removeEventListener("mousemove", myFunction);
Try it Yourself 
HTML DOM Event Object Reference
For a list of all HTML DOM events, look at our complete
HTML DOM Event Object Reference
.
Test Yourself With Exercises
Exercise:
Use the
eventListener
to assign an onclick event to the
<button>
element.
<button id="demo"></button>

<script>
document.getElementById("demo").
("
", myFunction);
</script>
Submit Answer 
Start the Exercise
JavaScript
HTML DOM Elements (Nodes)
Adding and Removing Nodes (HTML Elements)
Creating New HTML Elements (Nodes)
To add a new element to the HTML DOM, you must create the element (element node) first, 
and then append it to an existing element.
Example
<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
<script>
const para = document.createElement("p");
const node = document.createTextNode("This is new.");
para.appendChild(node);
const element = document.getElementById("div1");
element.appendChild(para);
</script>
Try it Yourself 
Example Explained
This code creates a new
<p>
element:
const para = document.createElement("p");
To add text to the
<p>
element, you must create a text node first. This code creates a text node:
const node = document.createTextNode("This is a new paragraph.");
Then you must append the text node to the
<p>
element:
para.appendChild(node);
Finally you must append the new element to an existing element.
This code finds an existing element:
const element = document.getElementById("div1");
This code appends the new element to the existing element:
element.appendChild(para);
Creating new HTML Elements - insertBefore()
The
appendChild()
method in the previous example, appended the new element as 
the last child of the parent.
If you don't want that you can use the
insertBefore()
method:
Example
<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
<script>
const para = document.createElement("p");
const node = document.createTextNode("This is new.");
para.appendChild(node);
const element = document.getElementById("div1");
const child = document.getElementById("p1");
element.insertBefore(para, child);
</script>
Try it Yourself 
Removing Existing HTML Elements
To remove an HTML element, use the
remove()
method:
Example
<div>
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
<script>
const elmnt = document.getElementById("p1");
elmnt.remove();
</script>
Try it Yourself 
Example Explained
The HTML document contains a
<div>
element with two child nodes (two
<p>
elements):
<div>
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
Find the element you want to remove:
const elmnt = document.getElementById("p1");
Then execute the remove() method on that element:
elmnt.remove();
Removing a Child Node
For browsers that does not support the
remove()
method, you have to find the 
parent node to remove an element:
Example
<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
<script>
const parent = document.getElementById("div1");
const child = document.getElementById("p1");
parent.removeChild(child);
</script>
Try it Yourself 
Example Explained
This HTML document contains a
<div>
element with two child nodes (two
<p>
elements):
<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
Find the element with
id="div1"
:
const parent = document.getElementById("div1");
Find the
<p>
element with
id="p1"
:
const child = document.getElementById("p1");
Remove the child from the parent:
parent.removeChild(child);
Here is a common workaround: Find the child you want to remove, and use its
parentNode
property to find the parent:
const child = document.getElementById("p1");
child.parentNode.removeChild(child);
Replacing HTML Elements
To replace an element to the HTML DOM, use the
replaceChild()
method:
Example
<div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>
<script>
const para = document.createElement("p");
const node = document.createTextNode("This is new.");
para.appendChild(node);
const parent = document.getElementById("div1");
const child = document.getElementById("p1");
parent.replaceChild(para, child);
</script>
Try it Yourself 
JavaScript
HTML DOM Node Lists
The HTML DOM NodeList Object
A
NodeList
object is a list (collection) of nodes extracted from a 
document.
A
NodeList
object is almost the same as an
HTMLCollection
object.
Some (older) browsers return a NodeList object instead of an HTMLCollection 
for methods like
getElementsByClassName()
.
All browsers return a NodeList object for the property
childNodes
.
Most browsers return a NodeList object for the method
querySelectorAll()
.
The following code selects all
<p>
nodes in a document:
Example
const myNodeList = document.querySelectorAll("p");
The elements in the NodeList can be accessed by an index number.
To access the 
second <p> node you can write:
myNodeList[1]
Try it Yourself 
Note:
The index starts at 0.
HTML DOM Node List Length
The
length
property defines the number of nodes in a node list:
Example
myNodelist.length
Try it Yourself 
The
length
property is useful when you want to loop through the nodes in a node 
list:
Example
Change the color of all <p> elements in a node 
list:
const myNodelist = document.querySelectorAll("p");
for (let i = 0; i < myNodelist.length; i++) {
myNodelist[i].style.color = "red";
}
Try it Yourself 
The Difference Between an HTMLCollection and a NodeList
A
NodeList
and an
HTMLcollection
is very much the same thing.
Both are array-like collections (lists) of nodes (elements) extracted from a 
document. The nodes can be accessed by index numbers. The index starts at 0.
Both have a
length
property that returns the number of elements in the list (collection).
An HTMLCollection is a collection of
document elements
.
A NodeList is a collection of
document nodes
(element nodes, attribute nodes, and text nodes).
HTMLCollection items can be accessed by their name, id, or index number.
NodeList items can only be accessed by their index number.
An HTMLCollection is always a
live
collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.
A NodeList is most often a
static
collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.
The
getElementsByClassName()
and
getElementsByTagName()
methods return a live HTMLCollection.
The
querySelectorAll()
method returns a static NodeList.
The
childNodes
property returns a live NodeList.
JavaScript
Window History
The
window.history
object contains the 
browsers history.
Window History
The
window.history
object can be written without the window prefix.
To protect the privacy of the users, there are limitations to how JavaScript 
can access this object.
Some methods:
history.back()
- same as clicking back in the browser
history.forward()
- same as clicking forward in the browser
Window History Back
The
history.back()
method loads the previous URL in the history list.
This is the same as clicking the Back button in the browser.
Example
Create a back button on a page:
<html>
<head>
<script>
function goBack() {
window.history.back()
}
</script>
</head>
<body>
<input type="button" value="Back" onclick="goBack()">
</body>
</html>
The output of the code above will be:
Window History Forward
The
history.forward()
method loads the next URL in the history list.
This is the same as clicking the Forward button in the browser.
Example
Create a forward button on a page:
<html>
<head>
<script>
function goForward() {
window.history.forward()
}
</script>
</head>
<body>
<input type="button" value="Forward" onclick="goForward()">
</body>
</html>
The output of the code above will be:
JavaScript
Window Navigator
The
window.navigator
object contains information about the 
visitor's browser.
Window Navigator
The
window.navigator
object can be written without the window prefix.
Some examples:
navigator.cookieEnabled
navigator.appCodeName
navigator.platform
Browser Cookies
The
cookieEnabled
property returns true if cookies are enabled, otherwise 
false:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML =
"cookiesEnabled is " + navigator.cookieEnabled;
</script>
Try it Yourself 
Browser Application Name
The
appName
property returns the application name 
of the browser:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML =
"navigator.appName is " + navigator.appName;
</script>
Try it Yourself 
Browser Application Code Name
The
appCodeName
property returns the application code name 
of the browser:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML =
"navigator.appCodeName is " + navigator.appCodeName;
</script>
Try it Yourself 
The Browser Engine
The
product
property returns 
the product name of the browser engine:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML =
"navigator.product is " + navigator.product;
</script>
Try it Yourself 
The Browser Version
The
appVersion
property returns 
version information about the browser:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.appVersion;
</script>
Try it Yourself 
The Browser Agent
The
userAgent
property returns the user-agent header sent by the browser to the server:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.userAgent;
</script>
Try it Yourself 
Warning
The information from the navigator object can often be misleading.
The navigator object should
not be used to detect browser versions
because:
Different browsers can use the same name
The navigator data can 
be changed by the browser owner
Some browsers misidentify themselves to bypass site tests
Browsers cannot report new operating systems, released later than the browser
The Browser Platform
The
platform
property returns the browser platform 
(operating system):
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.platform;
</script>
Try it Yourself 
The Browser Language
The
language
property returns the browser's language:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.language;
</script>
Try it Yourself 
Is The Browser Online?
The
onLine
property returns true if the browser is online:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.onLine;
</script>
Try it Yourself 
Is Java Enabled?
The
javaEnabled()
method returns true if
Java
is enabled:
Example
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = navigator.javaEnabled();
</script>
Try it Yourself 
JavaScript
Cookies
Cookies let you store user information in web pages.
What are Cookies?
Cookies are data, stored in small text files, on your computer.
When a web server has sent a web page to a browser, the connection is 
shut down, and the server forgets everything about the user.
Cookies were invented to solve the problem "how to remember information about 
the user":
When a user visits a web page, his/her name can be stored in a cookie.
Next time the user visits the page, the cookie "remembers" his/her name.
Cookies are saved in name-value pairs like:
username = John Doe
When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server 
gets the necessary data to "remember" information about users.
Create a Cookie with JavaScript
JavaScript can create, read, and delete cookies with the
document.cookie
property.
With JavaScript, a cookie can be created like this:
document.cookie = "username=John Doe";
You can also add an expiry date (in UTC time).
By default, the cookie is deleted when the browser is closed:
document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC";
With a path parameter, you can tell the browser what path the cookie belongs to.
By default, the cookie belongs to the current page.
document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";
Read a Cookie with JavaScript
With JavaScript, cookies can be read like this:
let x = document.cookie;
Change a Cookie with JavaScript
With JavaScript, you can change a cookie the same way as you create it:
document.cookie = "username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";
The old cookie is overwritten.
Delete a Cookie with JavaScript
Deleting a cookie is very simple.
You don't have to specify a cookie value when you delete a cookie.
Just set the expires parameter to a past date:
document.cookie = "username=; expires=Thu, 01 
Jan 1970 00:00:00 UTC; path=/;";
The Cookie String
The
document.cookie
property looks like a normal text string. But it is not.
Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the 
name-value pair of it.
If you set a new cookie, older cookies are not overwritten.
The new cookie is added to document.cookie, so if you read document.cookie 
again you will get something like:
cookie1 = value; cookie2 = value;
Display All Cookies
Create Cookie 1
Create Cookie 2
Delete Cookie 1
Delete Cookie 2
If you want to find the value of one specified cookie, you must write a JavaScript 
function that searches for the cookie value in the cookie string.
JavaScript Cookie Example
In the example to follow, we will create a cookie that stores the name of a visitor.
The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.
The next time the visitor arrives at the same page, he/she will get a welcome message.
For the example we will create 3 JavaScript functions:
A function to set a cookie value
A function to get a cookie value
A function to check a cookie value
A Function to Set a Cookie
First, we create a
function
that stores the name of the visitor in a cookie variable:
Example
function setCookie(cname, cvalue, exdays) {
const d = new Date();
d.setTime(d.getTime() + (exdays*24*60*60*1000));
let expires = "expires="+ d.toUTCString();
document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}
Example explained:
The parameters of the function above are the name of the cookie (cname), the value of the cookie 
(cvalue), and the number of days until the cookie should expire (exdays).
The function sets a cookie by adding together the cookiename, the cookie 
value, and the expires string.
A Function to Get a Cookie
Then, we create a
function
that returns the value of a specified cookie:
Example
function getCookie(cname) {
let name = cname + "=";
let decodedCookie = decodeURIComponent(document.cookie);
let ca = decodedCookie.split(';');
for(let i = 0; i <ca.length; i++) {
let c = ca[i];
while (c.charAt(0) == ' ') {
c = c.substring(1);
}
if (c.indexOf(name) == 0) {
return c.substring(name.length, c.length);
}
}
return "";
}
Function explained:
Take the cookiename as parameter (cname).
Create a variable (name) with the text to search for (cname + "=").
Decode the cookie string, to handle cookies with special characters, e.g. '$'
Split document.cookie on semicolons into an array called ca (ca = 
decodedCookie.split(';')).
Loop through the ca array (i = 0; i < ca.length; i++), and read out each value 
c = ca[i]).
If the cookie is found (c.indexOf(name) == 0), return the value of the cookie 
(c.substring(name.length, c.length).
If the cookie is not found, return "".
A Function to Check a Cookie
Last, we create the function that checks if a cookie is set.
If the cookie is set it will display a greeting.
If the cookie is not set, it will display a prompt box, asking for the name of the user,
and stores the username cookie for 365 days, by calling the
setCookie
function:
Example
function checkCookie() {
let 
username = getCookie("username");
if (username != "") {
alert("Welcome again " + username);
} else {
username = prompt("Please enter your name:", "");
if (username != "" 
&& username != null) {
setCookie("username", username, 365);
}
}
}
All Together Now
Example
function setCookie(cname, cvalue, exdays) {
const d = new Date();
d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
let expires = "expires="+d.toUTCString();
document.cookie = cname + "=" + cvalue + 
";" + expires + ";path=/";
}
function getCookie(cname) {
let name = cname + "=";
let ca 
= document.cookie.split(';');
for(let i = 0; i < ca.length; i++) 
{
let c = ca[i];
while (c.charAt(0) == ' 
') {
c = c.substring(1);
}
if (c.indexOf(name) 
 == 0) {
return c.substring(name.length, c.length);
}
}
return "";
}
function 
checkCookie() {
let user = getCookie("username");
if (user != "") 
{
alert("Welcome again " + user);
} else {
user = prompt("Please enter your name:", "");
if (user != "" && 
user != null) {
setCookie("username", user, 365);
}
}
}
Try it Yourself 
The example above runs the
checkCookie()
function when the page loads.
JavaScript
Validation API
Constraint Validation DOM Methods
Property
Description
checkValidity()
Returns true if an input element contains valid data.
setCustomValidity()
Sets the validationMessage property of an input element.
If an input field contains invalid data, display a message:
The checkValidity() Method
<input id="id1" type="number" min="100" max="300" 
    required>
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
const inpObj = document.getElementById("id1");
if (!inpObj.checkValidity()) {
document.getElementById("demo").innerHTML = inpObj.validationMessage;
}
}
</script>
Try it Yourself 
Constraint Validation DOM Properties
Property
Description
validity
Contains boolean properties related to the validity of an input element.
validationMessage
Contains the message a browser will display when the validity is false.
willValidate
Indicates if an input element will be validated.
Validity Properties
The
validity property
of an input element contains a number 
of properties related to the validity of data:
Property
Description
customError
Set to true, if a custom validity message is set.
patternMismatch
Set to true, if an element's value does not match its pattern attribute.
rangeOverflow
Set to true, if an element's value is greater than its max attribute.
rangeUnderflow
Set to true, if an element's value is less than its min attribute.
stepMismatch
Set to true, if an element's value is invalid per its step attribute.
tooLong
Set to true, if an element's value exceeds its maxLength attribute.
typeMismatch
Set to true, if an element's value is invalid per its type attribute.
valueMissing
Set to true, if an element (with a required attribute) has no value.
valid
Set to true, if an element's value is valid.
Examples
If the number in an input field is greater than 100 (the input's
max
attribute), display a message:
The rangeOverflow Property
<input id="id1" type="number" max="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
let text = "Value OK";
if (document.getElementById("id1").validity.rangeOverflow) {
text = "Value too large";
}
}
</script>
Try it Yourself 
If the number in an input field is less than 100 (the input's
min
attribute), display a message:
The rangeUnderflow Property
<input id="id1" type="number" min="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
let text = "Value OK";
if (document.getElementById("id1").validity.rangeUnderflow) {
text = "Value too small";
}
}
</script>
Try it Yourself 
AJAX
Introduction
AJAX Example
Let AJAX change this text
Change Content
Try it Yourself 
AJAX Example Explained
HTML Page
<!DOCTYPE html>
<html>
<body>
<div id="demo">
<h2>Let AJAX change this text</h2>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>
</body>
</html>
The HTML page contains a <div> section and a <button>.
The <div> 
section is used to display information from a server.
The <button> calls a function (if it is clicked).
The function requests data from a web 
server and displays it:
Function loadDoc()
function loadDoc() {
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
document.getElementById("demo").innerHTML = this.responseText;
}
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();
}
What is AJAX?
AJAX =
A
synchronous
J
avaScript
A
nd
X
ML.
AJAX is not a programming language.
AJAX just uses a combination of:
A browser built-in
XMLHttpRequest
object (to request data from a web server)
JavaScript and HTML DOM (to display or use the data)
AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.
This means that it is possible to update parts of a web page, without reloading the whole page.
How AJAX Works
1. An event occurs in a web page (the page is loaded, a button is clicked)
2. An XMLHttpRequest object is created by JavaScript
3. The XMLHttpRequest object sends a request to a web server
4. The server processes the request
5. The server sends a response back to the web page
6. The response is read by JavaScript
7. Proper action (like page update) is performed by JavaScript
Modern Browsers (Fetch API)
Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.
The Fetch API interface allows web browser to make HTTP requests to web servers.
If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.
AJAX - XMLHttpRequest
The XMLHttpRequest object is used to request data from a server.
Send a Request To a Server
To send a request to a server, we use the open() and send() methods of the
XMLHttpRequest
object:
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();
Method
Description
open(
method, url, async
)
Specifies the type of request
method
: the type of request: GET or POST
url
: the server (file) location
async
: true (asynchronous) or false (synchronous)
send()
Sends the request to the server (used for GET)
send(
string
)
Sends the request to the server (used for POST)
The url - A File On a Server
The url parameter of the
open()
method, is an address to a file on a server:
xhttp.open("GET", "ajax_test.asp", true);
The file can be any kind of file, like .txt and 
.xml, or server scripting files like .asp and .php (which can perform  
actions on the server before sending the response back).
Asynchronous - True or False?
Server requests should be sent asynchronously.
The async parameter of the open() 
method should be set to true:
xhttp.open("GET", "ajax_test.asp", true);
By sending asynchronously, the 
JavaScript does not have to wait for the server response, but can instead:
execute other scripts while waiting for server response
deal with the response after the response is ready
GET or POST?
GET
is simpler and faster than
POST
, and can be used in most cases.
However, always use POST requests when:
A cached file is not an option (update a file or database on the server).
Sending a large amount of data to the server (POST has no size limitations).
Sending user input (which can contain unknown characters), POST is more robust and secure than GET.
GET Requests
A simple
GET
request:
Example
xhttp.open("GET", "demo_get.asp");
xhttp.send();
Try it Yourself 
In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:
Example
xhttp.open("GET", "demo_get.asp?t=" + Math.random());
xhttp.send();
Try it Yourself 
If you want to send information with the
GET
method, add the information to the URL:
Example
xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford");
xhttp.send();
Try it Yourself 
How the server uses the input and how the server responds to a request, is explained in a later chapter.
POST Requests
A simple
POST
request:
Example
xhttp.open("POST", "demo_post.asp");
xhttp.send();
Try it Yourself 
To POST data like an HTML form, add an HTTP header with
setRequestHeader()
. 
Specify the data you want to send in the
send()
method:
Example
xhttp.open("POST", "ajax_test.asp");
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send("fname=Henry&lname=Ford");
Try it Yourself 
Method
Description
setRequestHeader(
header, value
)
Adds HTTP headers to the request
header
: specifies the header name
value
: specifies the header value
Synchronous Request
To execute a synchronous request, change the third parameter in the
open()
method to
false
:
xhttp.open("GET", "ajax_info.txt", false);
Sometimes async = false are used for quick testing. You will also find 
synchronous requests in older JavaScript code.
Since the code will wait for server completion, there is no need for an
onreadystatechange
function:
Example
xhttp.open("GET", "ajax_info.txt", false);
xhttp.send();
document.getElementById("demo").innerHTML = xhttp.responseText;
Try it Yourself 
AJAX - Server
Response
Server Response Properties
Property
Description
responseText
get the response data as a string
responseXML
get the response data as XML data
The responseText Property
The
responseText
property returns the server response as a 
JavaScript string, and you can use it accordingly:
Example
document.getElementById("demo").innerHTML = xhttp.responseText;
Try it Yourself 
The responseXML Property
The XMLHttpRequest object has an in-built XML parser.
The
responseXML
property returns the server response as an XML DOM object.
Using this property you can parse the response as an XML DOM object:
Example
Request the file
cd_catalog.xml
and parse the response:
const xmlDoc = xhttp.responseXML;
const x = xmlDoc.getElementsByTagName("ARTIST");
let txt = "";
for (let i = 0; i < x.length; i++) {
txt += x[i].childNodes[0].nodeValue + "<br>";
}
document.getElementById("demo").innerHTML = txt;
xhttp.open("GET", 
 "cd_catalog.xml");
xhttp.send();
Try it Yourself 
Server Response Methods
Method
Description
getResponseHeader()
Returns specific header information from the server resource
getAllResponseHeaders()
Returns all the header information from the server resource
The getAllResponseHeaders() Method
The
getAllResponseHeaders()
method returns all header information from the server response.
Example
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
document.getElementById("demo").innerHTML =
this.getAllResponseHeaders();
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
Try it Yourself 
The getResponseHeader() Method
The
getResponseHeader()
method returns specific header information from the server response.
Example
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
document.getElementById("demo").innerHTML =
this.getResponseHeader("Last-Modified");
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
Try it Yourself 
JavaScript Array forEach()
Example 1
Calls a function for each element in fruits:
const fruits = ["apple", "orange", "cherry"];
fruits.forEach(myFunction);
Try it Yourself 
Description
The
forEach()
method calls a function for each element in an array.
The
forEach()
method is not executed for empty elements.
Syntax
array
.forEach(
function(currentValue, index, arr), thisValue
)
Parameters
function()
Required.
A function to run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
undefined
More Examples
Compute the sum:
let sum = 0;
const numbers = [65, 44, 12, 4];
numbers.forEach(myFunction);
function myFunction(item) {
sum += item;
}
Try it Yourself 
Multiply each element:
const numbers = [65, 44, 12, 4];
numbers.forEach(myFunction)
function 
  myFunction(item, index, arr) {
arr[index] = item * 10;
}
Try it Yourself 
Browser Support
forEach()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JSON
Data Types
Valid Data Types
In JSON, values must be one of the following data types:
a string
a number
an object (JSON object)
an array
a boolean
null
JSON Strings
Strings in JSON must be written in double quotes.
Example
{"name":"John"}
JSON Numbers
Numbers in JSON must be an integer or a floating point.
Example
{"age":30}
JSON Objects
Values in JSON can be objects.
Example
{
"employee":{"name":"John", "age":30, "city":"New York"}
}
JSON Arrays
Values in JSON can be arrays.
Example
{
"employees":["John", "Anna", "Peter"]
}
JSON Booleans
Values in JSON can be true/false.
Example
{"sale":true}
JSON null
Values in JSON can be null.
Example
{"middlename":null}
JSON
Syntax
The JSON syntax is a subset of the JavaScript syntax.
JSON Syntax Rules
JSON syntax is derived from JavaScript object notation syntax:
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays
JSON Data - A Name and a Value
JSON data is written as name/value pairs (aka key/value pairs).
A name/value pair consists of a field name (in double quotes), 
followed by a colon, followed by a value:
Example
"name":"John"
JSON - Evaluates to JavaScript Objects
The JSON format is almost identical to JavaScript objects.
In JSON,
keys
must be strings, written with double quotes:
JSON
{"name":"John"}
In JavaScript, keys can be strings, numbers, or identifier names:
JavaScript
{name:"John"}
JSON Values
In
JSON
,
values
must be one of the following data types:
a string
a number
an object
an array
a boolean
null
In
JavaScript
values can be all of the above, plus any other valid JavaScript 
expression, including:
a function
a date
undefined
In JSON,
string values
must be written with double quotes:
JSON
{"name":"John"}
In JavaScript, you can write string values with double
or
single quotes:
JavaScript
{name:'John'}
JavaScript Objects
Because JSON syntax is derived from JavaScript object notation, very little extra 
software is needed to work with JSON within JavaScript.
With JavaScript you can create an object and assign data to 
it, like this:
Example
person = {name:"John", age:31, city:"New York"};
You can access a JavaScript object like this:
Example
// returns John
person.name;
Try it Yourself 
It can also be accessed like this:
Example
// returns John
person["name"];
Try it Yourself 
Data can be modified like this:
Example
person.name = "Gilbert";
Try it Yourself 
It can also be modified like this:
Example
person["name"] = "Gilbert";
Try it Yourself 
You will learn how to convert JavaScript objects into JSON later in this 
tutorial.
JavaScript Arrays as JSON
The same way JavaScript objects can be written as JSON, JavaScript arrays can 
also be written as JSON.
You will learn more about objects and arrays later in this tutorial.
JSON Files
The file type for JSON files is ".json"
The MIME type for JSON text is "application/json"
JSON Array Literals
This is a JSON string:
'["Ford", "BMW", "Fiat"]'
Inside the JSON string there is a JSON array literal:
["Ford", "BMW", "Fiat"]
Arrays in JSON are almost the same as arrays in JavaScript.
In JSON, array values must be of type string, number, object, array, boolean 
or
null
.
In JavaScript, array values can be all of the above, plus any other valid 
JavaScript expression, including functions, dates, and
undefined.
JavaScript Arrays
You can create a JavaScript array from a literal:
Example
myArray = ["Ford", "BMW", "Fiat"];
Try it Yourself 
You can create a JavaScript array by parsing a JSON string:
Example
myJSON = '["Ford", "BMW", "Fiat"]';
myArray = JSON.parse(myJSON);
Try it Yourself 
Accessing Array Values
You access array values by index:
Example
myArray[0];
Try it Yourself 
Arrays in Objects
Objects can contain arrays:
Example
{
"name":"John",
"age":30,
"cars":["Ford", "BMW", "Fiat"]
}
You access array values by index:
Example
myObj.cars[0];
Try it Yourself 
Looping Through an Array
You can access array values by using a
for in
loop:
Example
for (let i in myObj.cars) {
x 
  += myObj.cars[i];
}
Try it Yourself 
Or you can use a
for
loop:
Example
for (let i 
  = 0; i < myObj.cars.length; i++) {
x 
  += myObj.cars[i];
}
Try it Yourself 
JSON
PHP
A common use of JSON is to read data from a web server, 
and display the data in a web page.
This chapter will teach you how to exchange JSON data between 
the client and a PHP server.
The PHP File
PHP has some built-in functions to handle JSON.
Objects in PHP can be converted into JSON by using the PHP function
json_encode()
:
PHP file
<?php
$myObj->name = "John";
$myObj->age = 30;
$myObj->city = "New 
  York";
$myJSON = json_encode($myObj);
echo $myJSON;
?>
Show PHP file 
The Client JavaScript
Here is a JavaScript on the client, using an AJAX call to request the PHP 
file from the example above:
Example
Use JSON.parse() to convert the result into a JavaScript object:
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
document.getElementById("demo").innerHTML = myObj.name;
}
xmlhttp.open("GET", "demo_file.php");
xmlhttp.send();
Try it Yourself 
PHP Array
Arrays in PHP will also be converted into JSON when using the PHP function
json_encode()
:
PHP file
<?php
$myArr = array("John", "Mary", "Peter", "Sally");
$myJSON = json_encode($myArr);
echo $myJSON;
?>
Show PHP file 
The Client JavaScript
Here is a JavaScript on the client, using an AJAX call to request the PHP 
file from the array example above:
Example
Use JSON.parse() to convert the result into a JavaScript array:
var xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
document.getElementById("demo").innerHTML = myObj[2];
}
xmlhttp.open("GET", "demo_file_array.php", true);
xmlhttp.send();
Try it Yourself 
PHP Database
PHP is a server side programming language, and can be used to access a database.
Imagine you have a database on your server, and you want to send a request to 
it from the client where you ask for the 10 first rows in a table called 
"customers".
On the client, make a JSON object that describes the numbers of rows you want to return.
Before you send the request to the server, convert the JSON object into a 
string and send it as a parameter to the url of the PHP page:
Example
Use JSON.stringify() to convert the JavaScript object into JSON:
const limit = {"limit":10};
const dbParam = JSON.stringify(limit);
xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
document.getElementById("demo").innerHTML = this.responseText;
}
xmlhttp.open("GET","json_demo_db.php?x=" + dbParam);
xmlhttp.send();
Try it Yourself 
Example explained:
Define an object containing a "limit" property and value.
Convert the object into a JSON string.
Send a request to the PHP file, with the JSON string as a parameter.
Wait until the request returns with the result (as JSON)
Display the result received from the PHP file.
Take a look at the PHP file:
PHP file
<?php
header("Content-Type: application/json; charset=UTF-8");
$obj = 
  json_decode($_GET["x"], false);
$conn = new mysqli("myServer", "myUser", "myPassword", "Northwind");
$stmt = $conn->prepare("SELECT name FROM customers LIMIT ?");
$stmt->bind_param("s", $obj->limit);
$stmt->execute();
$result = $stmt->get_result();
$outp = $result->fetch_all(MYSQLI_ASSOC);
echo json_encode($outp);
?>
PHP File explained:
Convert the request into an object, using the PHP function
json_decode()
.
Access the database, and fill an array with the requested data.
Add the array to an object, and return the object as JSON using 
the
json_encode()
function.
Use the Data
Example
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
let text = "";
for (let x in myObj) {
text += myObj[x].name + "<br>";
}
document.getElementById("demo").innerHTML = text;
}
Try it Yourself 
PHP Method = POST
When sending data to the server, it is often best to use the HTTP
POST
method.
To send AJAX requests using the
POST
method, specify the method, and the correct header.
The data sent to the server must now be an argument to the
send()
method:
Example
const dbParam = JSON.stringify({"limit":10});
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
let text ="";
for (let x in myObj) {
text += myObj[x].name + "<br>";
}
document.getElementById("demo").innerHTML = text;
}
xmlhttp.open("POST", "json_demo_db_post.php");
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);
Try it Yourself 
The only difference in the PHP file is the method for getting the transferred data.
PHP file
Use $_POST instead of $_GET:
<?php
header("Content-Type: application/json; charset=UTF-8");
$obj = 
  json_decode($_POST["x"], false);
$conn = new mysqli("myServer", "myUser", "myPassword", "Northwind");
$stmt = $conn->prepare("SELECT name FROM customers LIMIT ?");
$stmt->bind_param("s", 
  $obj->limit);
$stmt->execute();
$result = $stmt->get_result();
$outp = $result->fetch_all(MYSQLI_ASSOC);
echo json_encode($outp);
?>
JSON Server
A common use of JSON is to exchange data to/from a web server.
When receiving data from a web server, the data is always a string.
Parse the data with
JSON.parse()
, and the data becomes a JavaScript object.
Sending Data
If you have data stored in a JavaScript object, you can convert the object 
into JSON, and send it to a server:
Example
const myObj = {name: "John", 
  age: 31, city: "New York"};
const myJSON = 
  JSON.stringify(myObj);
window.location = "demo_json.php?x=" + myJSON;
Try it Yourself 
Receiving Data
If you receive data in JSON format, you can easily convert it into a JavaScript 
object:
Example
const myJSON =
  '{"name":"John", 
  "age":31, "city":"New York"}';
const myObj = 
  JSON.parse(myJSON);
document.getElementById("demo").innerHTML = myObj.name;
Try it Yourself 
JSON From a Server
You can request JSON from the server by using an AJAX request
As long as the response from the server is written in JSON format, you can 
parse the string into a JavaScript object.
Example
Use the XMLHttpRequest to get data from the server:
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
document.getElementById("demo").innerHTML = myObj.name;
};
xmlhttp.open("GET", "json_demo.txt");
xmlhttp.send();
Try it Yourself 
Take a look at
json_demo.txt
Array as JSON
When using the
JSON.parse()
on JSON derived from an array, the method will 
return a JavaScript array, instead of a JavaScript object.
Example
JSON returned from a server as an array:
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myArr = JSON.parse(this.responseText);
document.getElementById("demo").innerHTML = myArr[0];
}
}
xmlhttp.open("GET", "json_demo_array.txt", true);
xmlhttp.send();
Try it Yourself 
Take a look at
json_demo_array.txt
JSON
.stringify()
A common use of JSON is to exchange data to/from a web server.
When sending data to a web server, the data has to be 
a string.
Convert a JavaScript object into a string with
JSON.stringify()
.
Stringify a JavaScript Object
Imagine we have this object in JavaScript:
const obj = {name: "John", age: 30, city: "New York"};
Use the JavaScript function
JSON.stringify()
to convert it into a string.
const myJSON = JSON.stringify(obj);
myJSON
is now a string, and ready to be sent to a server:
Example
const obj = {name: "John", age: 30, city: "New York"};
const myJSON = 
  JSON.stringify(obj);
Try it Yourself 
You will learn how to send JSON to a server in the next chapters.
Stringify a JavaScript Array
It is also possible to stringify JavaScript arrays:
Imagine we have this array in JavaScript:
const arr = ["John", "Peter", "Sally", "Jane"];
Use the JavaScript function
JSON.stringify()
to convert it into a string.
const myJSON = JSON.stringify(arr);
myJSON
is now a string, and ready to be sent to a server:
Example
const arr = ["John", "Peter", "Sally", "Jane"];
const myJSON = 
  JSON.stringify(arr);
Try it Yourself 
You will learn how to send a JSON string to a server in the next chapters.
Storing Data
When storing data, the data has to be a certain format, and regardless of where you choose to store it,
text
is always one of the legal formats.
JSON makes it possible to store JavaScript objects as text.
Example
Storing data in local storage
// Storing data:
const myObj = {name: "John", 
  age: 31, city: "New York"};
const myJSON = 
  JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);
// Retrieving data:
let text = localStorage.getItem("testJSON");
let obj = 
  JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name;
Try it Yourself 
Exceptions
Stringify Dates
In JSON, date objects are not allowed. The
JSON.stringify()
function will convert 
any dates into strings.
Example
const obj = {name: "John", today: new Date(), city : "New York"};
const myJSON = JSON.stringify(obj);
Try it Yourself 
You can convert the string back into a date object at the receiver.
Stringify Functions
In JSON, functions are not allowed as object values.
The
JSON.stringify()
function will remove any functions from a JavaScript 
object, both the key and the value:
Example
const obj = {name: "John", age: function () {return 30;}, city: "New York"};
const myJSON = JSON.stringify(obj);
Try it Yourself 
This can be omitted if you convert your functions into strings before running 
the
JSON.stringify()
function.
Example
const obj = {name: "John", age: function () {return 30;}, city: "New York"};
obj.age = obj.age.toString();
const myJSON = JSON.stringify(obj);
Try it Yourself 
JavaScript / jQuery CSS Styles
jQuery vs JavaScript
jQuery
was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.
For more than 10 years, jQuery has been the most popular JavaScript library in the world.
However, after JavaScript
Version 5
(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:
Hiding HTML Elements
Hide an HTML Element:
jQuery
myElement.hide();
Try it Yourself 
JavaScript
myElement.style.display = "none";
Try it Yourself 
Showing HTML Elements
Show an HTML Element:
jQuery
myElement.show();
Try it Yourself 
JavaScript
myElement.style.display = "";
Try it Yourself 
Styling HTML Elements
Change the font size of an HTML element:
jQuery
$("#demo").css("font-size","35px");
Try it Yourself 
JavaScript
document.getElementById("demo").style.fontSize = "35px";
Try it Yourself 
JavaScript
HTML DOM
Examples
Examples of using JavaScript to access and manipulate DOM objects.
The Document Object
Display all name/value pairs of cookies in a document
Display the domain name of the server that loaded the document
Display the date and time the document was last modified
Display the title of a document
Display the full URL of a document
Replace the content of a document
Open a new window, and add some content
Display the number of elements with a specific name
Display the number of elements with a specific tag name
Document Object Explained
The Anchors Collection
Find the number of anchors in a document
Find the innerHTML of the first anchor in a document
The Links Collection
Display the number of links in a document
Display the href attribute of the first link in a document
The Forms Collection
Find the number of forms in a document
Find the name of the first form in a document
The Images Collection
Return the number of images in a document
Return the id of the first image in a document
CSS Manipulation
Change the visibility of an HTML element
Change the background color of an HTML element
Google Chart
How to Use Google Chart?
1.
Add a <div> element (with a unique id) in the HTML where you want to display the chart:
<div id="myChart" style="max-width:700px; height:400px"></div>
2.
Add a link to the charts loader:
<script src="https://www.gstatic.com/charts/loader.js"></script>
3.
Load the Graph API, and add the function to run when the API is loaded:
<script>
google.charts.load('current',{packages:['corechart']});
google.charts.setOnLoadCallback(drawChart);
// Your Function
function drawChart() {
...
}
</script>
Bar Charts
Source Code
function drawChart() {
// Set Data
const data = google.visualization.arrayToDataTable([
['Contry', 'Mhl'],
['Italy', 55],
['France', 49],
['Spain', 44],
['USA', 24],
['Argentina', 15]
]);
// Set Options
const options = {
title: 'World Wide Wine Production'
};
// Draw
const chart = new google.visualization.BarChart(document.getElementById('myChart'));
chart.draw(data, options);
}
Try it Yourself 
Pie Charts
To convert a
Bar
Chart to a
Pie
chart, just replace:
google.visualization.
BarChart
with:
google.visualization.
PieChart
const chart = new google.visualization.
PieChart
(document.getElementById('myChart'));
Try it Yourself 
3D Pie
To display the Pie in 3D, just add
is3D: true
to the options:
const options = {
title: 'World Wide Wine Production',
is3D: true
};
Try it Yourself 
Line Graph
Source Code
function drawChart() {
// Set Data
const data = google.visualization.arrayToDataTable([
['Price', 'Size'],
[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],
[110,10],[120,11],[130,14],[140,14],[150,15]
]);
// Set Options
const options = {
title: 'House Prices vs Size',
hAxis: {title: 'Square Meters'},
vAxis: {title: 'Price in Millions'},
legend: 'none'
};
// Draw Chart
const chart = new google.visualization.LineChart(document.getElementById('myChart'));
chart.draw(data, options);
}
Try it Yourself 
Scatter Plots
To
scatter plot
the same data, change google.visualization to ScatterChart:
const chart = new google.visualization.ScatterChart(document.getElementById('myChart'));
Try it Yourself 
HTML Canvas
Scatter Plots
Source Code
const xArray = [50,60,70,80,90,100,110,120,130,140,150];
const yArray = [7,8,8,9,9,9,10,11,14,14,15];
// Plot Scatter
ctx.fillStyle = "red";
for (let i = 0; i < xArray.length-1; i++) {
let x = xArray[i]*400/150;
let y = yArray[i]*400/15;
ctx.beginPath();
ctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);
ctx.fill();
}
Try it Yourself 
Line Graphs
Source Code
let xMax = canvas.height;
let slope = 1.2;
let intercept = 70;
// Plot Scatter
ctx.moveTo(0, intercept);
ctx.lineTo(xMax, f(xMax));
ctx.strokeStyle = "black";
ctx.stroke();
// Line Function
function f(x) {
return x * slope + intercept;
}
Try it Yourself 
Combined
Source Code
let xMax = canvas.height;
let yMax = canvas.width;
let slope = 1.2;
let intercept = 70;
const xArray = [50,60,70,80,90,100,110,120,130,140,150];
const yArray = [7,8,8,9,9,9,10,11,14,14,15];
// Plot Scatter
ctx.fillStyle = "red";
for (let i = 0; i < xArray.length-1; i++) {
let x = xArray[i]*400/150;
let y = yArray[i]*400/15;
ctx.beginPath();
ctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);
ctx.fill();
}
// Plot Line
ctx.moveTo(0, intercept);
ctx.lineTo(xMax, f(xMax));
ctx.strokeStyle = "black";
ctx.stroke();
// Line Function
function f(x) {
return x * slope + intercept;
}
Try it Yourself 
JavaScript
Exercises
You can test your JavaScript skills with W3Schools' Exercises.
Exercises
We have gathered a variety of JavaScript exercises (with answers) for each JavaScript Chapter.
Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.
Count Your Score
You will get 1 point for
each correct answer. Your score and total score will always be displayed.
Start JavaScript Exercises
Good luck!
Start JavaScript Exercises 
JavaScript
HTML DOM Events
Examples
Examples of using JavaScript to react to events
Input Events
onblur - When a user leaves an input field
onchange - When a user changes the content of an input field
onchange - When a user selects a dropdown value
onfocus - When an input field gets focus
onselect - When input text is selected
onsubmit - When a user clicks the submit button
onreset - When a user clicks the reset button
onkeydown - When a user is pressing/holding down a key
onkeypress - When a user is pressing/holding down a key
onkeyup - when the user releases a key (1)
onkeyup - When the user releases a key (2)
onkeydown vs onkeyup - Both
Mouse Events
onmouseover/onmouseout - When the mouse passes over an element
onmousedown/onmouseup - When pressing/releasing a mouse button
onmousedown - When mouse is clicked: Alert which element
onmousedown - When mouse is clicked: Alert which button
onmousemove/onmouseout - When moving the mouse pointer over/out of an image
onmouseover/onmouseout - When moving the mouse over/out of an image
onmouseover an image map
Click Events
Acting to the onclick event
onclick - When button is clicked
ondblclick - 
When a text is double-clicked
Load Events
onload - When the page has been loaded
onload - When an image has been loaded
onerror - When an error occurs when loading an image
onunload - When the browser closes the document
onresize - When the browser window is resized
Others
What is the keycode of the key pressed?
What are the coordinates of the cursor?
What are the coordinates of the cursor, relative to the screen?
Was the shift key pressed?
Which event type occurred?
Examples explained
JavaScript Array.from()
Example
Create an array from a string:
Array.from("ABCDEFG")
Try it Yourself 
Description
The
Array.from()
method returns an array from any object with a length property.
The
Array.from()
method returns an array from any iterable object.
Syntax
Array.from(
object, mapFunction, thisValue
)
Parameters
Parameter
Description
object
Required.
The object to convert to an array.
mapFunction
Optional.
A map function to call on each item.
thisValue
Optional.
A value to use as
this
for the mapFunction
Return Value
Type
Description
An array
The values from the iterable object.
Browser Support
Array.from()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Array.from()
is not supported in Internet Explorer.
JavaScript Array indexOf()
Examples
Find the first index of "Apple":
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let index = fruits.indexOf("Apple");
Try it Yourself 
Start at index 3:
const fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];
let index = fruits.indexOf("Apple", 3);
Try it Yourself 
More examples below.
Description
The
indexOf()
method returns the first index (position) of a specified value.
The
indexOf()
method returns -1 if the value is not found.
The
indexOf()
method starts at a specified index and searches from left to right
(from the given start postion to the end of the array).
By default the search starts at the first element and ends at the last.
Negative start values counts from the last element (but still searches from left to right).
Syntax
array
.indexOf(
item
,
start
)
Parameters
Parameter
Description
item
Required.
The value to search for.
start
Optional.
Where to start the search.
Default value is 0.
Negative values start the search from the end of the array.
Return Value
Type
Description
A number
The index (position) of the first item found.
-1 if the item is not found.
More Examples
Find the first index of "Apple", starting from the last element:
const fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];
let index = fruits.indexOf("Apple", -1);
Try it Yourself 
Browser Support
indexOf()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array lastIndexOf()
Examples
Find the last index of "Apple":
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let index = fruits.lastIndexOf("Apple");
Try it Yourself 
More than one apple:
const fruits = ["Orange", "Apple", "Mango", "Apple", "Banana", "Apple"];
let index = fruits.lastIndexOf("Apple");
Try it Yourself 
More examples below.
Description
The
lastIndexOf()
method returns the last index (position) of a specified value.
The
lastIndexOf()
method returns -1 if the value is not found.
The
lastIndexOf()
starts at a specified index and searches from right to left
(from the given postion to the beginning of the array).
By defalt the search starts at the last element and ends at the first.
Negative start values counts from the last element (but still searches from right to left).
Syntax
array
.lastIndexOf(
item
,
start
)
Parameters
Parameter
Description
item
Required.
The value to search for.
start
Optional.
Where to start the search.
Default is the last element (array.length-1).
Negative start values counts from the last element (but still searches from right to left).
Return Value
Type
Description
A number
The position of the specified item.
-1 if the item is not found.
More Examples
Start the search at position 4:
const fruits = ["Orange", "Apple", "Mango", "Apple", "Banana", "Apple"];
let index = fruits.lastIndexOf("Apple", 4);
Try it Yourself 
Start the search at the second last position:
const fruits = ["Orange", "Apple", "Mango", "Apple", "Banana", "Apple"];
let index = fruits.lastIndexOf("Apple", -2);
Try it Yourself 
Browser Support
lastIndexOf()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array map()
Examples
Return a new array with the square root of all element values:
const numbers = [4, 9, 16, 25];
const newArr = numbers.map(Math.sqrt)
Try it Yourself 
Multiply all the values in an array with 10:
const numbers = [65, 44, 12, 4];
const newArr = numbers.map(myFunction)
function myFunction(num) {
return num * 10;
}
Try it Yourself 
More examples below.
Description
map()
creates a new array from calling a 
function for every array element.
map()
does not execute the function for empty elements.
map()
does not change the original array.
Syntax
array
.map(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional.
Default value
undefined
.
A value passed to the function to be used as its
this
value.
Return Value
Type
Description
An array
The results of a function for each array element.
More Examples
Get the full name for each person:
const persons = [
{firstname : "Malcom", lastname: "Reynolds"},
{firstname : "Kaylee", lastname: "Frye"},
{firstname : "Jayne", lastname: "Cobb"}
];
persons.map(getFullName);
function getFullName(item) {
return [item.firstname,item.lastname].join(" ");
}
Try it Yourself 
Browser Support
map()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array length
Examples
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.length;
Try it Yourself 
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.length = 2;
Try it Yourself 
Description
The
length
property sets or returns the number of elements in an array.
Syntax
Return the length of an array:
array
.length
Set the length of an array:
array
.length =
number
Return Value
Type
Description
A number
The number of elements in the array.
Browser Support
length
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Promises
JavaScript Promise Object
A Promise contains both the producing code and calls to the consuming code:
Promise Syntax
let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)
myResolve(); // when successful
myReject(); // when error
});
// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
function(value) { /* code if successful */ },
function(error) { /* code if some error */ }
);
When the producing code obtains the result, it should call one of the two callbacks:
When
Call
Success
myResolve(result value)
Error
myReject(error object)
Promise Object Properties
A JavaScript Promise object can be:
Pending
Fulfilled
Rejected
The Promise object supports two properties:
state
and
result
.
While a Promise object is "pending" (working), the result is undefined.
When a Promise object is "fulfilled", the result is a value.
When a Promise object is "rejected", the result is an error object.
myPromise.state
myPromise.result
"pending"
undefined
"fulfilled"
a result value
"rejected"
an error object
Promise How To
Here is how to use a Promise:
myPromise.then(
function(value) { /* code if successful */ },
function(error) { /* code if some error */ }
);
Example
function myDisplayer(some) {
document.getElementById("demo").innerHTML = some;
}
let myPromise = new Promise(function(myResolve, myReject) {
let x = 0;
// The producing code (this may take some time)
if (x == 0) {
myResolve("OK");
} else {
myReject("Error");
}
});
myPromise.then(
function(value) {myDisplayer(value);},
function(error) {myDisplayer(error);}
);
Try it Yourself 
JavaScript Promise Examples
To demonstrate the use of promises, we will use the callback examples from the previous chapter:
Waiting for a Timeout
Waiting for a File
Waiting for a Timeout
Example Using Callback
setTimeout(function() { myFunction("I love You !!!"); }, 3000);
function myFunction(value) {
document.getElementById("demo").innerHTML = value;
}
Try it Yourself 
Example Using Promise
let myPromise = new Promise(function(myResolve, myReject) {
setTimeout(function() { myResolve("I love You !!"); }, 3000);
});
myPromise.then(function(value) {
document.getElementById("demo").innerHTML = value;
});
Try it Yourself 
Waiting for a file
Example using Callback
function getFile(myCallback) {
let req = new XMLHttpRequest();
req.open('GET', "mycar.html");
req.onload = function() {
if (req.status == 200) {
myCallback(req.responseText);
} else {
myCallback("Error: " + req.status);
}
}
req.send();
}
getFile(myDisplayer);
Try it Yourself 
Example using Promise
let myPromise = new Promise(function(myResolve, myReject) {
let req = new XMLHttpRequest();
req.open('GET', "mycar.html");
req.onload = function() {
if (req.status == 200) {
myResolve(req.response);
} else {
myReject("File not Found");
}
};
req.send();
});
myPromise.then(
function(value) {myDisplayer(value);},
function(error) {myDisplayer(error);}
);
Try it Yourself 
Browser Support
ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.
The following table defines the first browser version with full support for Promise objects:
Chrome 33
Edge 12
Firefox 29
Safari 7.1
Opera 20
Feb, 2014
Jul, 2015
Apr, 2014
Sep, 2014
Mar, 2014
JavaScript
Window - The Browser Object Model
The Browser Object Model (BOM) allows JavaScript to "talk to" 
the browser.
The Browser Object Model (BOM)
There are no official standards for the
B
rowser
O
bject
M
odel (BOM).
Since modern browsers have implemented (almost) the same methods and 
properties for JavaScript interactivity, it is often referred to, as methods and 
properties of the BOM.
The Window Object
The
window
object is supported by all browsers. It represents 
the browser's window.
All global JavaScript objects, functions, and variables automatically become 
members of the window object.
Global variables are properties of the window object.
Global functions are methods of the window object.
Even the document object (of the HTML DOM) is a property of the window 
object:
window.document.getElementById("header");
is the same as:
document.getElementById("header");
Window Size
Two properties can be used to determine the size of the browser 
window.
Both properties return the sizes in 
pixels:
window.innerHeight
- the inner height of the browser window (in pixels)
window.innerWidth
- the inner width of the browser window (in pixels)
Example
let w = window.innerWidth;
let h = window.innerHeight;
Try it Yourself 
Other Window Methods
Some other methods:
window.open()
- open a new window
window.close()
- close the current window
window.moveTo()
- move the current window
window.resizeTo()
- resize the current window
Web History API
The Web History API is supported in all browsers:
Yes
Yes
Yes
Yes
Yes
The History back() Method
The back() method loads the previous URL in the windows.history list.
It is the same as clicking the "back arrow" in your browser.
Example
<button onclick="myFunction()">Go Back</button>
<script>
function myFunction() {
window.history.back();
}
</script>
Go Back
The History go() Method
The go() method loads a specific URL from the history list:
Example
<button onclick="myFunction()">Go Back 2 Pages</button>
<script>
function myFunction() {
window.history.go(-2);
}
</script>
Go Back 2 Pages
History Object Properties
Property
Description
length
Returns the number of URLs in the history list
History Object Methods
Method
Description
back()
Loads the previous URL in the history list
forward()
Loads the next URL in the history list
go()
Loads a specific URL from the history list
JavaScript Array flat()
Examples
Create a new array with the sub-array elements concatenated:
const myArr = [[1,2],[3,4],[5,6]];
const newArr = myArr.flat();
Try it Yourself 
const myArr = [1, 2, [3, [4, 5, 6], 7], 8];
const newArr = myArr.flat(2);
Try it Yourself 
Description
The
flat()
method concatenates sub-array elements.
Syntax
array
.flat(
depth
)
Parameters
Parameter
Description
depth
Optional.
How deep a nested array should be flattened.
Default is 1.
Return Value
Type
Description
An array
The flattened array.
Browser Support
JavaScript Array
flat()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
JavaScript Array push()
Examples
Add a new item to an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");
Try it Yourself 
Add two new items to the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi", "Lemon");
Try it Yourself 
Description
The
push()
method adds new items
to the end
of an array.
The
push()
method changes the length of the array.
The
push()
method returns the new length.
Syntax
array
.push(
item1
,
item2
, ...,
itemX
)
Parameters
Parameters
Description
item1
item2
..
itemX
The item(s) to add to the array.
Minimum one item is required.
Return Value
Type
Description
A number
The new length of the array.
More Examples
Add 3 items to the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi", "Lemon", "Pineapple");
Try it Yourself 
push()
returns the new length:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");
Try it Yourself 
Browser Support
push
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array reverse()
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.reverse();
Try it Yourself 
Description
The
reverse()
method reverses the order of the elements in an array.
The
reverse()
method overwrites the original array.
Syntax
array
.reverse()
Parameters
NONE
Return Value
Type
Description
Array
The array after it has been reversed.
Browser Support
reverse()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array some()
Example 1
Check if any values are over 18:
const ages = [3, 10, 18, 20];
ages.some(checkAdult);
function checkAdult(age) {
return age > 18;
}
Try it Yourself 
Description
The
some()
method checks if any array elements pass a test (provided as a callback function).
The
some()
method executes the callback function once for each array element.
The
some()
method returns
true
(and stops) if the function returns
true
for one of the array elements.
The
some()
method returns
false
if the function returns
false
for all of the array elements.
The
some()
method does not execute the function for empty array elements.
The
some()
method does not change the original array.
Syntax
array
.some(
function(value, index, arr), this
)
Parameters
Parameter
Description
function
Required.
A function to run for each array element.
Function parameters:
value
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array the current element belongs to.
this
Optional. Default undefined.
A value passed to the function to be used as its "this" value.
Return Value
Type
Description
A boolean
true
if any of the aray elements pass the test, otherwise
false
.
Example 2
<p>Input: <input type="number" id="toCheck" value="15"></p>
<button onclick="myFunction()">Test</button>
<p>Values higher: <span id="demo"></span></p>
<script>
const numbers = [4, 12, 16, 20];
function checkValue(x) {
return x > document.getElementById("toCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = numbers.some(checkValue);
}
</script>
Try it Yourself 
Browser Support
some()
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array splice()
Examples
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, add "Lemon" and "Kiwi":
fruits.splice(2, 0, "Lemon", "Kiwi");
Try it Yourself 
More Examples Below !
Description
The
splice()
method adds and/or removes array elements.
The
splice()
method overwrites the original array.
Syntax
array
.splice(
index
,
count
,
item1
, .....,
itemX
)
Parameters
Parameter
Description
index
Required.
The index (position) to add or remove items.
A negative value counts from the end of the array.
count
Optional.
Number of items to be removed.
item1
, ...,
Optional.
The new elements(s) to be added.
Return Value
Type
Description
Array
An array containing the removed items (if any).
More Examples
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, remove 2 items
fruits.splice(2, 2);
Try it Yourself 
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, remove 1 item, add "Lemon" and "Kiwi"
fruits.splice(2, 1, "Lemon", "Kiwi");
Try it Yourself 
Browser Support
splice()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array toSorted()
Examples
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Sort the Array
const fruit2 = fruits.toSorted();
Try it Yourself 
More Examples Blow !
Description
The
toSorted()
method sorts the elements of an array in alphabetical order.
The
toSorted()
method returns a new array.
The
toSorted()
method
does not
overwrite the original array.
The
toSorted()
method is the
copying version
of the
sort()
method.
Sort Compare Function
Sorting alphabetically works well for strings ("Apple" comes before "Banana").
But, sorting numbers can produce incorrect results.
"25" is bigger than "100", because "2" is bigger 
than "1".
You can fix this by providing a "compare function" (See examples below).
Syntax
array
.sort(
compareFunction
)
Parameters
Parameter
Description
compareFunction
Optional.
A function that defines a sort order. The function should return a negative, zero, or positive value, depending on the 
arguments:
function(a, b){return a-b}
When sort() compares two values, it sends the values to the compare function,
 and sorts the values according to the returned (negative, zero, positive) value.
Example:
The sort function will sort 40 as a value lower than 100.
When comparing 40 and 100, sort() calls the function(40,100).
The function calculates 40-100, and returns -60 (a negative value).
Return Value
Type
Description
Array
A new array with the items sorted.
More Examples
Sort Descending
Sort and then reverse the order:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Sort the Array
const fruits2 = fruits.toSorted();
// Reverse the Array
fruits2.reverse();
Try it Yourself 
Numeric Sorts
Using a Sort Function
Sort numbers in ascending order:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the Array
let points2 = points.toSorted(function(a, b){return a-b});
Try it Yourself 
Sort numbers in descending order:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the Array
let points2 = points.toSorted(function(a, b){return b-a});
Try it Yourself 
Find the lowest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in ascending order
let points2 = points.toSorted(function(a, b){return a-b});
let lowest = points2[0];
Try it Yourself 
Find the highest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in descending order:
let points2 = points.toSorted(function(a, b){return b-a});
let highest = points2[0];
Try it Yourself 
Find the highest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in ascending order:
let points2 = points.toSorted(function(a, b){return a-b});
let highest = points2[points.length-1];
Try it Yourself 
Browser Support
toSorted()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array toSpliced()
Examples
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, add "Lemon" and "Kiwi":
const fruits2 = fruits.toSpliced(2, 0, "Lemon", "Kiwi");
Try it Yourself 
More Examples Below !
Description
The
toSpliced()
method adds and/or removes array elements.
The
toSpliced()
method returns a new array.
The
toSpliced()
method
does not
change the original array.
The
toSpliced()
method is the
copying version
of the
splice()
method.
Syntax
array
.toSpliced(
index
,
count
,
item1
, .....,
itemX
)
Parameters
Parameter
Description
index
Required.
The index (position) to add or remove items.
A negative value counts from the end of the array.
count
Optional.
Number of items to be removed.
item1
,...
Optional.
The new elements(s) to be added.
Return Value
Type
Description
Array
A new array including the changes.
More Examples
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, remove 2 items
const fruits2 = fruits.toSpliced(2, 2);
Try it Yourself 
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// At position 2, remove 1 item, add "Lemon" and "Kiwi"
const fruits2 = fruits.toSpliced(2, 1, "Lemon", "Kiwi");
Try it Yourself 
Browser Support
toSpliced()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array unshift()
Example
Add new elements to an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon","Pineapple");
Try it Yourself 
Description
The
unshift()
method adds new elements to
the beginning
of an array.
The
unshift()
method overwrites the original array.
Syntax
array
.unshift(
item1
,
item2
, ...,
itemX
)
Parameters
Type
Description
item1
item2
..
itemX
The item(s) to add to the array.
Minimum one item is required.
Return Value
Type
Description
A number
The new length of the array.
Browser Support
unshift()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date constructor
Example
Get the Date constructor:
const d = new Date();
let text = d.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the Date prototype.
For JavaScript dates the
constructor
property returns:
function Date() { [native code] }
Syntax
Date
.constructor
Return Value
function Date() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getHours()
Examples
Get the hours:
const d = new Date();
let hour = d.getHours();
Try it Yourself 
Get the hours from a specific date:
const d = new Date("July 21, 1983 01:15:00");
let hour = d.getHours();
Try it Yourself 
More examples below.
Description
getHours()
returns the hour (0 to 23) of a date.
Syntax
Date
.getHours()
Parameters
NONE
Return Value
Type
Description
A number
The local time hour (0 to 23).
Browser Support
getHours()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Add zeros and colons to display the time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getHours());
let m = addZero(d.getMinutes());
let s = addZero(d.getSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
JavaScript new Date
Example
// Create a Date
const time = new Date();
Try it Yourself 
More Examples Below !
Description
The
new Date()
constructor creates a new Date object.
Syntax
new Date(
date
)
Parameters
Parameter
Description
date
Optional.
A timestamp (milliseconds) or a date time string.
Return Value
Type
Description
Date
A new Date object.
More Examples
There are five ways of instantiating (creating) a new Date:
Example
Create a new date object with the current date and time:
// Create a Date
const time = new Date();
Try it Yourself 
Example
Create a new date using an ISO notation:
const time = new Date(
dateString
);
Try it Yourself 
Example
Create a new date from an existing date:
const time2 = new Date(time1);
Try it Yourself 
Example
Create a new date using milliseconds from Jan 1, 1970:
const time = new Date(
milliseconds
);
Try it Yourself 
Example
Using new Date(7 numbers) creates a date object with the specified date and time:
const time = new Date(
year
,
month
,
day
,
hours
,
minutes
,
seconds
,
milliseconds
);
Try it Yourself 
Browser Support
new Date()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Boolean prototype
Example
Make a new method for JavaScript booleans:
Boolean.prototype.myColor = function() {
if (this.valueOf() == true) {
return "green";
} else {
return = "red";
}
};
Create a boolean, then call myColor():
let a = true;
let color = a.myColor();
Try it Yourself 
Description
prototype
allows you to add new properties and methods to booleans.
prototype
is a property available with all JavaScript objects.
Syntax
Boolean.prototype.
name
=
value
Warning
You are not advised to change the prototype of an object that you do not control.
You should not change the prototype of built in JavaScript datatypes like:
Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.
The prototype Property
The JavaScript
prototype
property allows you to add new properties to objects:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
Browser Support
prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Boolean toString()
Example
let bool = true;
let text = bool.toString();
Try it Yourself 
Description
The
toString()
method returns a boolean as a string.
Syntax
boolean
.toString()
Parameters
NONE
Return Value
Type
Description
A string
"true" or "false".
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Boolean constructor
Example
let bool = false;
let text = bool.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the Boolean prototype.
For JavaScript booleans the
constructor
property returns:
function Boolean() { [native code] }
Syntax
boolean
.constructor
Return Value
function Boolean() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array with()
JavaScript Array with() Method
ES2023
added the Array with() method as a safe way to update elements in an array without altering the original array.
Example
const months = ["Januar", "Februar", "Mar", "April"];
const myMonths = months.with(2, "March");
Try it Yourself 
Description
The
with()
method updates a specified array element.
The
with()
method returns a new array.
The
with()
method does not change the original array.
Syntax
array
.with(
index, value
)
Parameters
Parameter
Description
index
Required.
The index (position) of the item to change.
A negative index counts from the end of the array.
value
Required.
The new value.
Return Value
A new array containing the changed element.
Browser Support
with()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023

Previous
JavaScript Array
Reference
Next

JavaScript Class super
Description
The
super
keyword is used to call the constructor of its parent class 
to access the parent's properties and methods.
Tip:
To understand the "inheritance" concept (parent and child classes) better, read our
JavaScript Classes Tutorial
.
Example
Create a class named "Model" which will inherit the methods from the "Car" 
class, by using the
extends
keyword.
By calling the
super()
method in the constructor method, we call the 
  parent's constructor method and gets access to the parent's properties and 
  methods:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
present() {
return 'I have a ' + this.carname;
}
}
class Model
extends
Car {
constructor(brand, mod) {
super(brand);
this.model = mod;
}
show() {
return this.present() + ', it is a ' + this.model;
}
}
mycar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML 
  = mycar.show();
Try it Yourself 
Browser Support
super
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
super
is not supported in Internet Explorer.
Syntax
super(
arguments
); // calls the parent constructor (only inside 
  the constructor)
super.
parentMethod
(
arguments
); // calls a parent method
Technical Details
JavaScript Version:
ECMAScript 2015 (ES6)
Related Pages
JavaScript Tutorial:
JavaScript Classes
JavaScript Tutorial:
JavaScript ES6 (EcmaScript 2015)
JavaScript Reference:
The extends Keyword
JavaScript Reference:
The constructor() method
JavaScript Date getFullYear()
Examples
Get the year:
const d = new Date();
let year = d.getFullYear();
Try it Yourself 
Get the year of a specific date:
const d = new Date("July 21, 1983 01:15:00");
let year = d.getFullYear();
Try it Yourself 
Description
getFullYear()
returns the full year of a date.
Syntax
Date
.getFullYear()
Parameters
NONE
Return Value
Type
Description
A number
The year of the date.
(4 digits for dates between year 1000 and 9999).
Browser Support
getFullYear()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getDate()
Examples
Get the day of the month:
const d = new Date();
let day = d.getDate();
Try it Yourself 
Get the day of a specific date:
const d = new Date("July 21, 1983 01:15:00");
let day = d.getDate();
Try it Yourself 
Description
The
getDate()
method returns the day of the month (1 to 31) of a date.
Syntax
Date
.getDate()
Parameters
NONE
Return Value
Type
Description
A number
The day of the month (1 to 31).
Browser Support
getDate()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript
Class Reference
JavaScript Classes
A
class
is a type of function, but instead of using the keyword
function
to initiate it, we use the keyword
class
, and the properties are assigned inside a
constructor()
method:
Example
Create a Car class, and then create an object called "mycar" based on the Car class:
class Car { // Create a class
constructor(brand) { // Class constructor
this.carname = brand; 
  // Class body/properties
}
}
mycar = new Car("Ford"); // Create an object of Car 
  class
Try it Yourself 
Class Methods
Method
Description
constructor()
A special method for creating and initializing objects created within a class
Class Keywords
Keyword
Description
extends
Extends a class (inherit)
static
Defines a static method for a class
super
Refers to the parent class
JavaScript Date getTimezoneOffset()
Example
Get the difference between UTC time and local time:
const d = new Date();
let diff = d.getTimezoneOffset();
Try it Yourself 
Description
getTimezoneOffset()
returns the difference between UTC time and local time.
getTimezoneOffset()
returns the difference in minutes.
For example, if your time zone is GMT+2, -120 will be returned.
Syntax
Date
.getTimezoneOffset()
Parameters
NONE
Return Value
Type
Description
A number
The time difference between UTC and Local Time in minutes.
Browser Support
getTimezoneOffset()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getSeconds()
Examples
Get the seconds:
const d = new Date();
let seconds = d.getSeconds();
Try it Yourself 
Add zeros and colons to display the time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getHours());
let m = addZero(d.getMinutes());
let s = addZero(d.getSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
Description
getSeconds()
returns the seconds (0 to 59) of a date.
Syntax
Date
.getSeconds()
Parameters
NONE
Return Value
Type
Description
A number
The seconds of the date (0 to 59).
Browser Support
getSeconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getUTCDate()
Examples
Get the UTC day:
const d = new Date();
let day = d.getUTCDate();
Try it Yourself 
Get the UTC day of the month from a specific, local date-time:
const d = new Date("July 21, 1983 01:15:00");
let day = d.getUTCDate();
Try it Yourself 
Description
getUTCDate()
returns the day of the month (1 to 31) of a date object.
getUTCDate()
returns the day according to UTC.
Syntax
Date
.getUTCDate()
Parameters
NONE
Return Value
Type
Description
A number
The day of the month (1 to 31) of a date, according to UTC.
Browser Support
getUTCDate()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getMinutes()
Examples
Get the minutes:
const d = new Date();
let minutes = d.getMinutes();
Try it Yourself 
Get the minutes of a specific date:
const d = new Date("July 21, 1983 01:15:00");
let minutes = d.getMinutes();
Try it Yourself 
More examples below.
Description
getMinutes()
returns the minutes (0 to 59) of a date.
Syntax
Date
.getMinutes()
Parameters
NONE
Return Value
Type
Description
A number
The minutes of the date (0 to 59).
Browser Support
getMinutes()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Add zeros and colons to display the time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getHours());
let m = addZero(d.getMinutes());
let s = addZero(d.getSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
JavaScript Date getMilliseconds()
Examples
Get the milliseconds:
const d = new Date();
let ms = d.getMilliseconds();
Try it Yourself 
Get the milliseconds of a specific date:
const d = new Date("July 21, 1983 01:15:00.250");
let ms = d.getMilliseconds();
Try it Yourself 
More examples below.
Description
getMilliseconds()
returns the milliseconds (0 to 999) of a date.
Syntax
Date
.getMilliseconds()
Parameters
NONE
Return Value
Type
Description
A number
The milliseconds of the date (0 to 999).
Browser Support
getMilliseconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Add zeros and colons to display the time:
function addZero(x, n) {
while (x.toString().length < n) {
x = "0" + x;
}
return x;
}
const d = new Date();
let h = addZero(d.getHours(), 2);
let m = addZero(d.getMinutes(), 2);
let s = addZero(d.getSeconds(), 2);
let ms = addZero(d.getMilliseconds(), 3);
let time = h + ":" + m + ":" + s + ":" + ms;
Try it Yourself 
JavaScript Class static
Example
Create a static method and call it on the class:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
static hello() { // static method
return "Hello!!";
}
}
mycar = new Car("Ford");
//Call 'hello()' on 
  the class Car:
document.getElementById("demo").innerHTML 
  = Car.hello();
//and NOT on the 'mycar' object:
//document.getElementById("demo").innerHTML 
  = mycar.hello();
//this would raise an error.
Try it Yourself 
Description
The
static
keyword defines static methods for classes.
Static methods are called directly on the class (
Car
from the example above) - without creating an instance/object (
mycar
) of the class.
Browser Support
static
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
static
is not supported in Internet Explorer.
Syntax
static
methodName
()
Technical Details
JavaScript Version:
ECMAScript 2015 (ES6)
More Examples
If you want to use the mycar object, inside the static method, you can send it 
as a parameter:
Example
Send "mycar" as a parameter:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
static hello(x) {
return "Hello " + 
  x.carname;
}
}
mycar = new Car("Ford");
document.getElementById("demo").innerHTML 
  = Car.hello(mycar);
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Classes
JavaScript Tutorial:
JavaScript ES6 (EcmaScript 2015)
JavaScript Reference:
The constructor() method
JavaScript Class constructor
Example
Create a Car class, and then create an object called "mycar" based on the Car class:
class Car {
constructor(brand) { // Constructor
this.carname = brand;
}
}
mycar = new Car("Ford");
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
constructor()
method is a special method for creating and initializing objects created within a class.
The
constructor()
method is called automatically when a class is initiated, and it has to have the exact name "constructor", in fact, if you do not have a constructor method, JavaScript will add an invisible and empty constructor method.
Note:
A class cannot have more than one constructor() method. This will throw a
SyntaxError
.
You can use the
super()
method to call the constructor of a parent class (see "More Examples" below).
Browser Support
constructor()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
constructor()
is not supported in Internet Explorer.
Syntax
constructor(
parameters
)
Technical Details
JavaScript Version:
ECMAScript 2015 (ES6)
More Examples
To create a class inheritance, use the
extends
keyword.
A class created with a class inheritance inherits all the methods from 
another class:
Example
Create a class named "Model" which will inherit the methods from the "Car" 
class:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
present() {
return 'I have a ' + this.carname;
}
}
class Model extends Car {
constructor(brand, mod) {
super(brand);
this.model = mod;
}
show() {
return this.present() + ', it is a ' + this.model;
}
}
mycar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML 
  = mycar.show();
Try it Yourself 
The
super()
method refers to the parent 
class.
By calling the
super()
method in the 
constructor method, we call the parent's constructor method and get access to 
the parent's properties and methods.
Related Pages
JavaScript Tutorial:
JavaScript Classes
JavaScript Tutorial:
JavaScript ES6 (EcmaScript 2015)
JavaScript Reference:
The extends Keyword
JavaScript Reference:
The super Keyword
JSON
HTML
JSON can very easily be translated into JavaScript.
JavaScript can be used to make HTML in your web pages.
HTML Table
Make an HTML table with data received as JSON:
Example
const dbParam = JSON.stringify({table:"customers",limit:20});
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
myObj = JSON.parse(this.responseText);
let text = "<table border='1'>"
for (let x in myObj) {
text += "<tr><td>" + myObj[x].name + "</td></tr>";
}
text += "</table>"
document.getElementById("demo").innerHTML   = text;
}
xmlhttp.open("POST", "json_demo_html_table.php");
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);
Try it Yourself 
Dynamic HTML Table
Make the HTML table based on the value of a drop down menu:
Choose an option:
Customers
Products
Suppliers
Example
<select id="myselect" onchange="change_myselect(this.value)">
<option value="">Choose an option:</option>
<option 
value="customers">Customers</option>
<option 
value="products">Products</option>
<option 
value="suppliers">Suppliers</option>
</select>
<script>
function change_myselect(sel) {
const dbParam = JSON.stringify({table:sel,limit:20});
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
let text = "<table border='1'>"
for (let x in myObj) {
text += "<tr><td>" + myObj[x].name + "</td></tr>";
}
text += "</table>"
document.getElementById("demo").innerHTML = text;
}
xmlhttp.open("POST", "json_demo_html_table.php");
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);
}
</script>
Try it Yourself 
HTML Drop Down List
Make an HTML drop down list with data received as JSON:
Example
const dbParam = JSON.stringify({table:"customers",limit:20});
const xmlhttp = new XMLHttpRequest();
xmlhttp.onload = function() {
const myObj = JSON.parse(this.responseText);
let text = "<select>"
for (let x in myObj) {
text += "<option>" + myObj[x].name + "</option>";
}
text += "</select>"
document.getElementById("demo").innerHTML = text;
}
}
xmlhttp.open("POST", "json_demo_html_table.php", true);
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);
Try it Yourself 
W3Schools
JavaScript Bootcamp
JavaScript Bootcamp
Learn Front-end with W3Schools.
Self-paced online courses.
Duration
: Around 80 hours.
Learn More
w
3
s
c
h
o
o
l
s
B
O
O
T
C
A
M
P
.
2
0
2
4
What You Will Learn
HTML
How to use the latest HTML 5 standard to create your own Website.
How to format text, add graphics, create links, input forms, frames and tables, etc.
How to save it all in a text file that any browser can read and display.
CSS
How to control the style and layout of multiple web pages all at once.
How to change the appearance and layout of all the pages in a Web site.
JavaScript
How to program the behavior of web pages.
How to change the content and style of web pages.
Self-paced Courses
Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.
HTML is the standard markup language for Web pages. With HTML you can create your own Website.
CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.
JavaScript is the programming language of the Web.
This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the 
W3schools certification.
The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.
What You Get
4x Certifications:
Certified HTML Developer
Certified CSS Developer
Certified JavaScript Developer
Certified Front End Developer
Certificate of Completion
You get sharable certificates that can be added to your CV, Resume or LinkedIn.
Check out what it looks like in this example!
Three Reasons to Join the Program
1. Bite-sized learning
The training content is built to be easy to understand.
2. Increase your employability
Document your skills and knowledge with acknowledged certifications.
3. Save time and money
No deadlines. Study at your own pace.
Learn More
How it Works
Step 1. Course enrollment
Enroll by paying the enrollment fee and gain access to the course and final exam.
There is no deadline to take the exam. All questions in the exam are based on W3Schools content.
Step 2. Complete the course learning modules
The courses are self-paced with text based modules, practical interactive examples and exercises
to check your understanding as you progress. Complete the learning modules to unlock the final exam.
Step 3. Take the exams
The exams are taken at the end of each course after finishing the course learning modules.
Immediately after completing the exam, you will be informed of your score and of your pass/fail status.
You will get three attempts to pass each exam. You can use the new attempts to improve 
your score.
The best result of the attempts will count.
Step 4: Become certified
Pass the exams and get your certifications and your Certified Developer titles!
Each certificate gets a unique link that can be shared with others. Validate your certificates with 
a link or a QR code.
Learn More
JavaScript Array includes()
Examples
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango");
Try it Yourself 
Start the search at position 3:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Banana", 3);
Try it Yourself 
Description
The
includes()
method returns
true
if an array contains a specified value.
The
includes()
method returns
false
if the value is not found.
The
includes()
method is case sensitive.
Syntax
array
.includes(
element
,
start
)
Parameters
Parameter
Description
element
Required.
The value to search for.
start
Optional.
Start position. Default is 0.
Return Value
Type
Description
A boolean
true
if the value is found, otherwise
false
.
Browser Support
includes()
is an ECMAScript7 (ES7) feature.
ES7 (JavaScript 2016) is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
includes()
is not supported in internet Explorer or Edge 13 (or earlier).
JavaScript Array pop()
Examples
Remove (pop) the last element:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();
Try it Yourself 
pop()
returns the element it removed:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();
Try it Yourself 
Description
The
pop()
method removes (pops)
the last element
of an array.
The
pop()
method changes the original array.
The
pop()
method returns the removed element.
Syntax
array
.pop()
Parameters
NONE
Return Value
Type
Description
A variable
The removed item.
A string, a number, an array, or any other type allowed in an array.
Browser Support
pop()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array.of()
Examples
Create a new array from a number of arguments:
let fruits = Array.of("Banana", "Orange", "Apple", "Mango");
document.getElementById("demo").innerHTML = fruits;
Try it Yourself 
Description
The
Array.of()
method creates a new array from any number of arguments.
The
Array.of()
method can take any type of arguments.
Syntax
Array.of(
element1, element2, ... , elementN
)
Parameters
Parameter
Description
elements
Optional.
Any number of elements regardless of type.
Return Value
Type
Description
An Array
A new array created from the arguments.
The arguments can be strings, numbers, arrays, or any other allowed type.
Browser Support
of()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
of()
is not supported in Internet Explorer.
JavaScript Date parse()
Example 1
let ms = Date.parse("March 21, 2012");
Try it Yourself 
Description
parse()
parses a date string and returns the time difference since January 1, 1970.
parse()
returns the time difference in milliseconds.
Example 2
Calculate the number of years between  January 1, 1970 to March 21, 2012:
// Calculate milliseconds in a year
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;
// Compute years
const d = Date.parse("March 21, 2012");
let years = Math.round(d / year);
Try it Yourself 
Browser Support
parse()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.parse(
datestring
)
Parameters
datestring
Required.
A string representing a date.
Return Value
A number.
Milliseconds since January 1, 1970 00:00:00 UTC.
JavaScript Date setFullYear()
Example 1
const d = new Date();
d.setFullYear(2020);
Try it Yourself 
Description
setFullYear()
sets the year of a date.
setFullYear()
can also set month and day.
Example 2
const d = new Date();
d.setFullYear(2020, 10, 3);
Try it Yourself 
Example 3
Set the date to six months
ago
:
const d = new Date();
d.setFullYear(d.getFullYear(), d.getMonth() - 6);
Try it Yourself 
Browser Support
setFullYear()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setFullYear(
year
,
month
,
day
)
Parameters
year
Required.
The year. Negative values are allowed.
month
Optional.
The month (0 to 11).
Higher and lower values are handeled with date maths:
-1 will result in the last month of the previous year
12 will result in the first month of the next year
13 will result in the second month of the next year
day
Optional.
The day (0 to 31).
Higher and lower values are handeled with date maths:
0 gives the last day of the previous month
-1 gives the day before the last day of the previous month
32 gives the first day of the next month (if 31 days)
41 gives the tenth day of the next month (if 31 days)
Return Value
A number.
Number of milliseconds between the date and January 1, 1970 00:00:00 UTC.
JavaScript H
TML DOM Collections
The HTMLCollection Object
The
getElementsByTagName()
method returns an
HTMLCollection
object.
An
HTMLCollection
object is 
an array-like list (collection) of HTML elements.
The following code selects all
<p>
elements in a document:
Example
const myCollection = document.getElementsByTagName("p");
The elements in the collection can be accessed by an index number.
To access the 
second <p> element you can write:
myCollection[1]
Try it Yourself 
Note:
The index starts at 0.
HTML HTMLCollection Length
The
length
property defines the number of elements in an
HTMLCollection
:
Example
myCollection.length
Try it Yourself 
The
length
property is useful when you want to loop through the elements in a 
collection:
Example
Change the text color of all <p> elements:
const myCollection = document.getElementsByTagName("p");
for (let i = 0; i < myCollection.length; i++) {
myCollection[i].style.color = "red";
}
Try it Yourself 
JavaScript
Window Screen
The window.screen object contains information 
about the user's screen.
Window Screen
The
window.screen
object can be written without the window prefix.
Properties:
screen.width
screen.height
screen.availWidth
screen.availHeight
screen.colorDepth
screen.pixelDepth
Window Screen Width
The
screen.width
property returns the width of the visitor's screen in 
pixels.
Example
Display the width of the screen in pixels:
document.getElementById("demo").innerHTML =
"Screen Width: " + screen.width;
Result will be:
Try it Yourself 
Window Screen Height
The
screen.height
property returns the height of the visitor's screen in pixels.
Example
Display the height of the screen in pixels:
document.getElementById("demo").innerHTML =
"Screen Height: " + screen.height;
Result will be:
Try it Yourself 
Window Screen Available Width
The
screen.availWidth
property returns the width of the visitor's screen, in 
pixels, 
minus interface features like the Windows Taskbar.
Example
Display the available width of the screen in pixels:
document.getElementById("demo").innerHTML =
"Available Screen Width: " + screen.availWidth;
Result will be:
Try it Yourself 
Window Screen Available Height
The
screen.availHeight
property returns the height of the visitor's screen, 
in pixels, minus interface features like the Windows Taskbar.
Example
Display the available height of the screen in pixels:
document.getElementById("demo").innerHTML =
"Available Screen Height: " + screen.availHeight;
Result will be:
Try it Yourself 
Window Screen Color Depth
The
screen.colorDepth
property returns the number of bits used to display one color.
All modern computers use 24 bit or 32 bit hardware for color resolution:
24 bits = 16,777,216 different "True Colors"
32 bits = 4,294,967,296 different "Deep Colors"
Older computers used 16 bits: 65,536 different "High Colors" resolution.
Very old computers, and old cell phones used 8 bits: 256 different "VGA colors".
Example
Display the color depth of the screen in bits:
document.getElementById("demo").innerHTML =
"Screen Color Depth: " + screen.colorDepth;
Result will be:
Try it Yourself 
Window Screen Pixel Depth
The
screen.pixelDepth
property returns the pixel depth of the screen.
Example
Display the pixel depth of the screen in bits:
document.getElementById("demo").innerHTML =
"Screen Pixel Depth: " + screen.pixelDepth;
Result will be:
Try it Yourself 
Web Geolocation API
Locate the User's Position
The HTML Geolocation API is used to get the geographical position of a user.
Since this can compromise privacy, the position is not available unless the user approves it.
Try It
Browser Support
The Geolocation API is supported in all browsers:
Yes
Yes
Yes
Yes
Yes
Using the Geolocation API
The
getCurrentPosition()
method is used to return the user's position.
The example below returns the latitude and longitude of the user's position:
Example
<script>
const x = document.getElementById("demo");
function getLocation() {
if (navigator.geolocation) {
navigator.geolocation.getCurrentPosition(showPosition);
} else {
x.innerHTML = "Geolocation is not supported by this browser.";
}
}
function showPosition(position) {
x.innerHTML = "Latitude: " + position.coords.latitude +
"<br>Longitude: " + position.coords.longitude;
}
</script>
Try it Yourself 
Example explained:
Check if Geolocation is supported
If supported, run the getCurrentPosition() method. If not, display a message to the user
If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition)
The showPosition() function outputs the Latitude and Longitude
The example above is a very basic Geolocation script, with no error handling.
Handling Errors and Rejections
The second parameter of the
getCurrentPosition()
method is used to handle 
errors. It specifies a function to run if it fails to get the user's location:
Example
function showError(error) {
switch(error.code) {
case error.PERMISSION_DENIED:
x.innerHTML = "User denied the request for Geolocation."
break;
case error.POSITION_UNAVAILABLE:
x.innerHTML = "Location information is unavailable."
break;
case error.TIMEOUT:
x.innerHTML = "The request to get user location timed out."
break;
case error.UNKNOWN_ERROR:
x.innerHTML = "An unknown error occurred."
break;
}
}
Try it Yourself 
Displaying the Result in a Map
To display the result in a map, you need access to a map service, like Google 
Maps.
In the example below, the returned latitude and longitude is used to show the location in a Google 
Map (using a static image):
Example
function showPosition(position) {
let latlon = position.coords.latitude + "," + position.coords.longitude;
let img_url = "https://maps.googleapis.com/maps/api/staticmap?center=
"+latlon+"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY";
document.getElementById("mapholder").innerHTML = "<img src='"+img_url+"'>";
}
Location-specific Information
This page has demonstrated how to show a user's position on a map.
Geolocation is also very useful for location-specific information, like:
Up-to-date local information
Showing Points-of-interest near the user
Turn-by-turn navigation (GPS)
The getCurrentPosition() Method - Return Data
The
getCurrentPosition()
method returns an object on success. The latitude, 
longitude and accuracy properties are always returned. The other properties are returned 
if available:
Property
Returns
coords.latitude
The latitude as a decimal number (always returned)
coords.longitude
The longitude as a decimal number (always returned)
coords.accuracy
The accuracy of position (always returned)
coords.altitude
The altitude in meters above the mean sea level (returned if available)
coords.altitudeAccuracy
The altitude accuracy of position (returned if available)
coords.heading
The heading as degrees clockwise from North (returned if available)
coords.speed
The speed in meters per second (returned if available)
timestamp
The date/time of the response (returned if available)
Geolocation Object - Other interesting Methods
The Geolocation object also has other interesting methods:
watchPosition()
- Returns the current position of the user and continues to 
return updated position as the user moves (like the GPS in a car).
clearWatch()
- Stops the
watchPosition()
method.
The example below shows the
watchPosition()
method. You need an accurate GPS device to test this (like 
smartphone):
Example
<script>
const x = document.getElementById("demo");
function getLocation() {
if (navigator.geolocation) {
navigator.geolocation.watchPosition(showPosition);
} else {
x.innerHTML = "Geolocation is not supported by this browser.";
}
}
function showPosition(position) {
x.innerHTML = "Latitude: " + position.coords.latitude +
"<br>Longitude: " + position.coords.longitude;
}
</script>
Try it Yourself 
JavaScript Array reduce()
Examples
Subtract all numbers in an array:
const numbers = [175, 50, 25];
document.getElementById("demo").innerHTML 
  = numbers.reduce(myFunc);
function myFunc(total, num) {
return total - num;
}
Try it Yourself 
Round all the numbers and display the sum:
const numbers = [15.5, 2.3, 1.1, 4.7];
document.getElementById("demo").innerHTML = numbers.reduce(getSum, 0);
function getSum(total, num) {
return total + Math.round(num);
}
Try it Yourself 
Description
The
reduce()
method executes a reducer function for array element.
The
reduce()
method returns a single value: the function's accumulated result.
The
reduce()
method does not execute the function for empty array elements.
The
reduce()
method does not change the original array.
Syntax
array
.
reduce
(
function(total, currentValue, currentIndex, arr), initialValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each element in the array.
Reducer function parameters:
total
Required.
The
initialValue
, or the previously returned value of the function.
currentValue
Required.
The value of the current element.
currentIndex
Optional.
The index of the current element.
arr
Optional.
The array the current element belongs to.
initialValue
Optional.
A value to be passed to the function as the initial value.
Return Value
The accumulated result from the last call of the callback function.
Browser Support
reduce()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array shift()
Examples
Shift (remove) the first element of the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();
Try it Yourself 
The
shift()
method returns the shifted element:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();
Try it Yourself 
Description
The
shift()
method removes
the first item
of an array.
The
shift()
method changes the original array.
The
shift()
method returns the shifted element.
Syntax
array
.shift()
Parameters
NONE
Return Value
Type
Description
A variable
The removed item.
A string, a number, an array, or any other type allowed in an array.
Browser Support
shift()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array slice()
Examples
Select elements:
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);
Try it Yourself 
Select elements using negative values:
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const myBest = fruits.slice(-3, -1);
Try it Yourself 
Description
The
slice()
method returns selected elements in an array, as a new array.
The
slice()
method selects from a given
start
,
up to a (not inclusive) given
end
.
The
slice()
method does not change the original array.
Syntax
array
.slice(
start
,
end
)
Parameters
Parameter
Description
start
Optional.
Start position. Default is 0.
Negative numbers select from the end of the array.
end
Optional.
End position. Default is last element.
Negative numbers select from the end of the array.
Return Value
A new array containing the selected elements.
Browser Support
slice()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array sort()
Examples
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Sort the Array
fruits.sort();
Try it Yourself 
More Examples Below !
Description
The
sort()
method sorts the elements of an array.
The
sort()
method sorts the elements as strings in alphabetical and ascending order.
The
sort()
method overwrites the original array.
Sort Compare Function
Sorting alphabetically works well for strings ("Apple" comes before "Banana").
But, sorting numbers can produce incorrect results.
"25" is bigger than "100", because "2" is bigger 
than "1".
You can fix this by providing a "compare function" (See examples below).
Syntax
array
.sort(
compareFunction
)
Parameters
Parameter
Description
compareFunction
Optional.
A function that defines a sort order. The function should return a negative, zero, or positive value, depending on the 
arguments:
function(a, b){return a-b}
When sort() compares two values, it sends the values to the compare function,
 and sorts the values according to the returned (negative, zero, positive) value.
Example:
The sort function will sort 40 as a value lower than 100.
When comparing 40 and 100, sort() calls the function(40,100).
The function calculates 40-100, and returns -60 (a negative value).
Return Value
Type
Description
Array
The array with the items sorted.
More Examples
Sort Decending
Sort and then reverse the order:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Sort the Array
fruits.sort();
// Reverse the array
fruits.reverse();
Try it Yourself 
Numeric Sorts
Using a Sort Function
Sort numbers in ascending order:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the Array
points.sort(function(a, b){return a-b});
Try it Yourself 
Sort numbers in descending order:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the Array
points.sort(function(a, b){return b-a});
Try it Yourself 
Find the lowest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in ascending order
points.sort(function(a, b){return a-b});
let lowest = points[0];
Try it Yourself 
Find the highest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in descending order:
points.sort(function(a, b){return b-a});
let highest = points[0];
Try it Yourself 
Find the highest value:
// Create an Array
const points = [40, 100, 1, 5, 25, 10];
// Sort the numbers in ascending order:
points.sort(function(a, b){return a-b});
let highest = points[points.length-1];
Try it Yourself 
Browser Support
sort()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array toReversed()
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Reverse the Array
const fruits2 = fruits.toReversed();
Try it Yourself 
Description
The
toReversed()
method reverses the order of the elements in an array.
The
toReversed()
method returns a new array.
The
toReversed()
method
does not
overwrites the original array.
The
toReversed()
method is the
copying version
of the
reverse()
method.
Syntax
array
.toReversed()
Parameters
NONE
Return Value
Type
Description
Array
A new array with the items reversed.
Browser Support
toReversed()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array toString()
Example
Convert an array to a string:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.toString();
Try it Yourself 
Description
The
toString()
method returns a string with array values separated by commas.
The
toString()
method does not change the original array.
Syntax
array
.toString()
Parameters
NONE
Return Value
Type
Description
A string
The array values separated by commas.
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date Reference
Date Object
The Date object works with dates and times.
Date objects are created with
new Date()
.
Examples
const time = new Date();
Try it Yourself 
const time = new Date(
dateString
);
Try it Yourself 
JavaScript Date Methods and Properties
Name
Description
new Date()
Creates a new Date object
constructor
Creates a new Date object
constructor
Returns the function that created the Date prototype
getDate()
Returns the day of the month (from 1-31)
getDay()
Returns the day of the week (from 0-6)
getFullYear()
Returns the year
getHours()
Returns the hour (from 0-23)
getMilliseconds()
Returns the milliseconds (from 0-999)
getMinutes()
Returns the minutes (from 0-59)
getMonth()
Returns the month (from 0-11)
getSeconds()
Returns the seconds (from 0-59)
getTime()
Returns the number of milliseconds since midnight Jan 1 1970, and a specified date
getTimezoneOffset()
Returns the time difference between UTC time and local time, in minutes
getUTCDate()
Returns the day of the month, according to universal time (from 1-31)
getUTCDay()
Returns the day of the week, according to universal time (from 0-6)
getUTCFullYear()
Returns the year, according to universal time
getUTCHours()
Returns the hour, according to universal time (from 0-23)
getUTCMilliseconds()
Returns the milliseconds, according to universal time (from 0-999)
getUTCMinutes()
Returns the minutes, according to universal time (from 0-59)
getUTCMonth()
Returns the month, according to universal time (from 0-11)
getUTCSeconds()
Returns the seconds, according to universal time (from 0-59)
getYear()
Deprecated.
Use the
getFullYear()
method instead
now()
Returns the number of milliseconds since midnight Jan 1, 1970
parse()
Parses a date string and returns the number of milliseconds since January 1, 1970
prototype
Allows you to add properties and methods to an object
setDate()
Sets the day of the month of a date object
setFullYear()
Sets the year of a date object
setHours()
Sets the hour of a date object
setMilliseconds()
Sets the milliseconds of a date object
setMinutes()
Set the minutes of a date object
setMonth()
Sets the month of a date object
setSeconds()
Sets the seconds of a date object
setTime()
Sets a date to a specified number of milliseconds after/before January 1, 1970
setUTCDate()
Sets the day of the month of a date object, according to universal time
setUTCFullYear()
Sets the year of a date object, according to universal time
setUTCHours()
Sets the hour of a date object, according to universal time
setUTCMilliseconds()
Sets the milliseconds of a date object, according to universal time
setUTCMinutes()
Set the minutes of a date object, according to universal time
setUTCMonth()
Sets the month of a date object, according to universal time
setUTCSeconds()
Set the seconds of a date object, according to universal time
setYear()
Deprecated.
Use the
setFullYear()
method instead
toDateString()
Converts the date portion of a Date object into a readable string
toGMTString()
Deprecated.
Use the
toUTCString()
method instead
toISOString()
Returns the date as a string, using the ISO standard
toJSON()
Returns the date as a string, formatted as a JSON date
toLocaleDateString()
Returns the date portion of a Date object as a string, using locale conventions
toLocaleTimeString()
Returns the time portion of a Date object as a string, using locale conventions
toLocaleString()
Converts a Date object to a string, using locale conventions
toString()
Converts a Date object to a string
toTimeString()
Converts the time portion of a Date object to a string
toUTCString()
Converts a Date object to a string, according to universal time
UTC()
Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time
valueOf()
Returns the primitive value of a Date object
JavaScript Date getUTCDay()
Example
Get the weekday:
const d = new Date();
let day = d.getUTCDay();
Try it Yourself 
Get the name of the weekday (not just a number):
const weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
const d = new Date();
let day = weekday[d.getUTCDay()];
Try it Yourself 
Description
getUTCDay()
returns the day of the week (0 to 6) of a date.
getUTCDay()
returns the day of the week according to universal time.
Sunday = 0, Monday = 1, ... (See below):
Syntax
Date
.getUTCDay()
Parameters
NONE
Return Value
Type
Description
A number
The weekday of a date (0 to 6), according to UTC.
Browser Support
getUTCDay()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getTime()
Examples
Get the time:
const d = new Date();
let time = d.getTime();
Try it Yourself 
Calculate the number of years since January 1, 1970:
// Calculate milliseconds in a year
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;
// Divide Time with a year
const d = new Date();
let years = Math.round(d.getTime() / year);
Try it Yourself 
Description
getTime()
returns the number of milliseconds since January 1, 1970 00:00:00.
Syntax
Date
.getTime()
Parameters
NONE
Return Value
Type
Description
A number
Number of milliseconds since January 1, 1970 00:00:00.
Browser Support
getTime()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getDay()
Examples
Get the day of the week:
const d = new Date();
let day = d.getDay();
Try it Yourself 
Get the day of the week of a specific date:
const d = new Date("July 21, 1983 01:15:00");
let day = d.getDay();
Try it Yourself 
More examples below.
Description
The
getDay()
method returns the day of the week (0 to 6) of a date.
Sunday = 0, Monday = 1, ... (See below):
Syntax
Date
.getDay()
Parameters
NONE
Return Value
Type
Description
A number
The day of the week (0 to 6).
More Examples
Get the name of the weekday (not just a number):
const weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
const d = new Date();
let day = weekday[d.getDay()];
Try it Yourself 
Browser Support
getDay()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date setUTCMilliseconds()
Example
Set the milliseconds to 192, according to UTC time:
const d = new Date();
d.setUTCMilliseconds(192);
Try it Yourself 
Description
The setUTCMilliseconds() method sets the milliseconds (from 0 to 999) of a date object, according to UTC.
Browser Support
setUTCMilliseconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCMilliseconds(
millisec
)
Parameter Values
Parameter
Description
millisec
Required. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
1001 will result in the second millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
JSONP
JSONP is a method for sending JSON data without worrying about cross-domain issues.
JSONP does not use the
XMLHttpRequest
object.
JSONP uses the
<script>
tag instead.
JSONP Intro
Requesting a file from another domain can cause problems, due to cross-domain policy.
Requesting an external
script
from another domain does not have this problem.
JSONP uses this advantage, and request files using the script tag 
instead of the
XMLHttpRequest
object.
<script src="demo_jsonp.php">
The Server File
The file on the server wraps the result inside a 
function call:
Example
<?php
$myJSON = '{ "name":"John", "age":30, "city":"New York" }';
echo "myFunc(".$myJSON.");";
?>
Show PHP file 
The result returns a call to a function named "myFunc" with the JSON data as 
a parameter.
Make sure that the function exists on the client.
The JavaScript function
The function named "myFunc" is located on the client, and ready to handle 
JSON data:
Example
function myFunc(myObj) 
  {
document.getElementById("demo").innerHTML = 
  myObj.name;
}
Try it Yourself 
Creating a Dynamic Script Tag
The example above will execute the "myFunc" function when the page is 
loading, based on where you put the script tag, which is not very satisfying.
The script tag should only be created when needed:
Example
Create and insert the <script> tag when a button is clicked:
function clickButton() {
let s = document.createElement("script");
s.src = "demo_jsonp.php";
document.body.appendChild(s);
}
Try it Yourself 
Dynamic JSONP Result
The examples above are still very static.
Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on 
the information it gets.
PHP file
<?php
header("Content-Type: application/json; charset=UTF-8");
$obj = 
  json_decode($_GET["x"], false);
$conn = new mysqli("myServer", "myUser", "myPassword", "Northwind");
$result = $conn->query("SELECT name FROM 
  ".$obj->$table." LIMIT ".$obj->$limit);
$outp = array();
$outp = $result->fetch_all(MYSQLI_ASSOC);
echo "myFunc(".json_encode($outp).")";
?>
PHP File explained:
Convert the request into an object, using the PHP function
json_decode()
.
Access the database, and fill an array with the requested data.
Add the array to an object.
Convert the array into JSON using 
the
json_encode()
function.
Wrap "myFunc()" around the return object.
JavaScript Example
The "myFunc" function will be called from the php file:
const obj = { table: "products", limit: 10 };
let s = document.createElement("script");
s.src = "jsonp_demo_db.php?x=" + JSON.stringify(obj);
document.body.appendChild(s);
function myFunc(myObj) {
let txt = "";
for (let x in myObj) 
  {
txt += myObj[x].name + "<br>";
}
document.getElementById("demo").innerHTML = txt;
}
Try it Yourself 
Callback Function
When you have no control over the server file, how do you get the server file 
to call the correct function?
Sometimes the server file offers a callback function as 
a parameter:
Example
The php file will call the function you pass as a callback parameter:
let s = document.createElement("script");
s.src = "jsonp_demo_db.php?callback=
myDisplayFunction
";
document.body.appendChild(s);
Try it Yourself 
Plotly.js
Bar Charts
Source Code
const xArray = ["Italy","France","Spain","USA","Argentina"];
const yArray = [55, 49, 44, 24, 15];
const data = [{
x: xArray,
y: yArray,
type: "bar",
orientation:"v",
marker: {color:"rgba(0,0,255)"}
}];
const layout = {title:"World Wide Wine Production"};
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Horizontal Bar Charts
Source Code
const xArray = [55, 49, 44, 24, 15];
const yArray = ["Italy","France","Spain","USA","Argentina"];
const data = [{
x: xArray,
y: yArray,
type: "bar",
orientation: "h",
marker: {color:"rgba(255,0,0,0.6)"}
}];
const layout = {title:"World Wide Wine Production"};
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Pie Charts
To display a pie instead of bars, change x and y to labels and values, and change the type to "pie":
const data = [{
labels: xArray,
values: yArray,
type: "pie"
}];
Try it Yourself 
Donut Charts
To display a donut instead of a pie, add a hole:
const data = [{
labels: xArray,
values: yArray,
hole: .4,
type: "pie"
}];
Try it Yourself 
Plotting Equations
Source Code
let exp = "Math.sin(x)";
// Generate values
const xValues = [];
const yValues = [];
for (let x = 0; x <= 10; x += 0.1) {
xValues.push(x);
yValues.push(eval(exp));
}
// Display using Plotly
const data = [{x:xValues, y:yValues, mode:"lines"}];
const layout = {title: "y = " + exp};
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
To display scatters instead, change mode to markers:
// Display using Plotly
const data = [{x:xValues, y:yValues,
mode:"markers"
}];
const layout = {title: "y = " + exp};
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Scatter Plots
Source Code
const xArray = [50,60,70,80,90,100,110,120,130,140,150];
const yArray = [7,8,8,9,9,9,10,11,14,14,15];
// Define Data
const data = [{
x: xArray,
y: yArray,
mode:"markers",
type:"scatter"
}];
// Define Layout
const layout = {
xaxis: {range: [40, 160], title: "Square Meters"},
yaxis: {range: [5, 16], title: "Price in Millions"},
title: "House Prices vs. Size"
};
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Line Graphs
Source Code
const xArray = [50,60,70,80,90,100,110,120,130,140,150];
const yArray = [7,8,8,9,9,9,10,11,14,14,15];
// Define Data
const data = [{
x: xArray,
y: yArray,
mode: "lines",
type: "scatter"
}];
// Define Layout
const layout = {
xaxis: {range: [40, 160], title: "Square Meters"},
yaxis: {range: [5, 16], title: "Price in Millions"},
title: "House Prices vs Size"
};
// Display using Plotly
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Bubble Plots
Bubble Plots are Scatter Plots whose markers have variable color, size, and symbols.
It is a type of 3-dimensional chart with only two axes (x and y) where the size of the bubble
communicates the third dimention.
Source Code
const xArray = [1,2,3,4];
const yArray = [10,20,30,40];
const trace1 = {
x: xArray,
y: yArray,
mode: 'markers',
marker: {
color: ['red', 'green',  'blue', 'orange'],
size: [20, 30, 40, 50]
}
};
const data = [trace1];
const layout = {
title: "Plotting Bubbles"
};
Plotly.newPlot('myPlot', data, layout);
Try it Yourself 
Linear Graphs
Source Code
let exp = "x + 17";
// Generate values
const xValues = [];
const yValues = [];
for (let x = 0; x <= 10; x += 1) {
yValues.push(eval(exp));
xValues.push(x);
}
// Define Data
const data = [{
x: xValues,
y: yValues,
mode: "lines"
}];
// Define Layout
const layout = {title: "y = " + exp};
// Display using Plotly
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
Multiple Lines
Source Code
let exp1 = "x";
let exp2 = "1.5*x";
let exp3 = "1.5*x + 7";
// Generate values
const x1Values = [];
const x2Values = [];
const x3Values = [];
const y1Values = [];
const y2Values = [];
const y3Values = [];
for (let x = 0; x <= 10; x += 1) {
x1Values.push(x);
x2Values.push(x);
x3Values.push(x);
y1Values.push(eval(exp1));
y2Values.push(eval(exp2));
y3Values.push(eval(exp3));
}
// Define Data
const data = [
{x: x1Values, y: y1Values, mode:"lines"},
{x: x2Values, y: y2Values, mode:"lines"},
{x: x3Values, y: y3Values, mode:"lines"}
];
// Define Layout
const layout = {title: "[y=" + exp1 + "]  [y=" + exp2 + "]  [y=" + exp3 + "]"};
// Display using Plotly
Plotly.newPlot("myPlot", data, layout);
Try it Yourself 
JavaScript
HTML Input
Examples
Examples of using JavaScript to access and manipulate HTML 
input objects.
Button Object
Disable a button
Find the name of a button
Find the type of a button
Find the value of a button
Find the text displayed on a button
Find the id of the form a button belongs to
Form Object
Submit a form
Reset a form
Find the value of each element in a form
Find the accepted character set of a form
Find the action attribute of a form
Find the value of the enctype attribute in a form
Find the number of elements in a form
Find the method for sending form data
Find the name of a form
Find the target of a form
Option and Select Objects
Disable and enable a dropdown list
Get the id of the form that contains the dropdown list
Get the number of options in the dropdown list
Turn the dropdown list into a multiline list
Select multiple options in a dropdown list
Display the selected option in a dropdown list
Display all options from a dropdown list
Display the index of the selected option in a dropdown list
Change the text of the selected option
Remove options from a dropdown list
JavaScript
HTML Objects
Examples
Examples of using JavaScript to access and manipulate HTML objects.
Anchor Object
Find the value of the href attribute of a link
Find the value of the hreflang attribute of a link
Find the value of the id attribute a link
Find the value of the rel attribute of a link
Find the value of the target attribute of a link
Find the value of the type attribute of a link
Area Object
Find the alternate text of an image-map area
Find the coordinates of an area
Find the shape of an area
Find the href of an area
Find the protocol part of the href attribute of an area
Find the hostname part of the href attribute of an area
Find the port number part of the href attribute of an area
Find the pathname part of the href attribute of an area
Find the querystring part of the href attribute of an area
Find the hash part of the href attribute of an area
Find the value of the target attribute of an area
Base Object
Find the base URL for all relative URLs on a page
Find the base target for all links on a page
IFrame Object
Change the background color of an iframe
Find the height of an iframe
Find the value of the name attribute of an iframe
Find the source (src) attribute of an iframe
Change the source (src) attribute of an iframe
Image Object
Find the alternate text of an image
Find the height of an image
Click to display a high-resolution version of an image
Find the source (src) of an image
Change the source of an image
Change the source of the lightbulb
Find the value of the usemap attribute of an image
Table Objects
Change the width of a table border
Change the padding of a table
Find the innerHTML of a cell
Create a caption for a table
Delete rows in a table
Add rows to a table
Change the content of a table cell
JavaScript and HTML Website
Hosting
Create Website with HTML and JavaScript
Host Websites with
W3Schools Spaces
Get Started for Free
Practice
Coding Skills
kAI
AI Tutor
Build
Projects
Host
Securely
Choose your Plan
By subscribing to a plan you support the W3Schools mission to make
learning available to everyone - no matter their background.
Monthly
Annually
Free
$0
/Forever
This is for you that are beginning to explore coding and web development
Build and host 1 static website
100 credits/month
Access various AI features like W3Schools kAI coding tutor and interview preparation.
No support
Get Free
W3Schools Plus
$14.99
/Month
This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.
Ad-free experience
Build and host 15 static websites
Build and host 1 full stack server
Choose from 18 frameworks / languages
Choose from 75+ templates
50000 credits/month
Access various AI features like W3Schools kAI coding tutor and interview preparation.
Priority Support
Cancel anytime
Get Plus
W3Schools Classroom
Contact us for information
W3Schools right to use and Plus for educational institutions or enterprise customers
Everything in W3Schools Plus
Certification Exams
And much more!
Get More Info
NEW SUBSCRIBER DEAL
25% OFF
FOR A YEAR
USE PROMO CODE:
SPACES25
Want custom domains?
You can also buy a domain or connect an existing one.
Looking to add multiple users?
Read here for how to get in touch
Powerful Code Editor
Front-end, Back-end or Full-stack - the choice is yours
Practice Makes Perfect
Sharpen and Master your development skills with these technologies using
Spaces
.
Get Started for Free
Save Time with Templates
Build powerful websites in just a few clicks
Portfolio
Blog
Webshop
Tutor
Explore All Templates
Get Started for Free
k
AI
Just landed in
Spaces
Learn to code more effectively
and intelligently with kAI - AI tutor
Get Started for Free
Hi! I'm kAI, W3Schools AI Tutor...
Feel free to ask me any coding-related questions, and I'll do my best to assist you.
I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...
I can even create complete websites for you based on your input, so what are you waiting for?
Super Simple to Share
Host and Publish Websites in no time
Included for free in all plans
W3Schools subdomain, hosting, and SSL certificate.
Want custom domains?
Buy a domain or transfer an existing one and connect it to your space.
How it works
1. Join W3Schools
- and create a space
2. Choose a template
- or start from scratch
3. Edit code directly
in your browser
4. Share your website
with the world
Coding Made Easy
All at your fingertips with our easy-to-use
code editor
Cloud-based
Terminal & Log
How To Libraries
Database
File Navigator
Package Manager
Analytics
Environment Manager
Get Started for Free
Cloud-Based
Save Time & Money.
No installation required. Access everything in your browser. Get started in seconds.
Get Started for Free
File Navigator
All Your Files in One Place.
Find and switch easily between your code files without leaving the code editor.
Get Started for Free
Terminal and Log
Fix Your Code Faster.
Monitor your code, debug and troubleshoot your work during the development process.
Get Started for Free
Database
Get Full Data Visibility.
Find and preview all the data stored in your website. Anytime, from anywhere.
Get Started for Free
Environment Manager
Increased Control and Security.
Control your website access points to establish secure connections.
Get Started for Free
Package Manager
Find What You Need Quicker.
Search and install frameworks and libraries in just one click.
Get Started for Free
User Analytics
Get Traffic Insights.
Learn from your website visitors to deliver a better user experience.
Get Started for Free
Get Inspired
Connect
and
share
your website with the community to get instant feedback
Get Started for Free
Frequently Asked Questions
What's the difference between 'Basic' and 'Full Stack' Spaces?
With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.
Which programming languages are included in 'Basic' and 'Full Stack' Spaces?
Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.
How are subscriptions renewed?
Your subscription will be automatically renewed every month.
What happens if I cancel my subscription?
Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.
Can I subscribe to multiple accounts at once?
To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com
Have some other questions?
Visit our support page
Subscribe for $14.99/Month
Cancel anytime.
JavaScript and HTML DOM
Complete JavaScript and HTML DOM References
All Properties and Methods with Full Examples
Revised April 2024
JavaScript Objects with Examples
Array
String
Number
Math
Date
Global
Object
Set
Map
Classes
RegExp
Error
Boolean
Operators
Statements
Typed Array
Promise
JSON
Precedence
Window Objects with Examples
Window
History
Location
Navigator
Screen
HTML DOM Objects with Examples
Document
Element
Attributes
Events
Event Objects
HTMLCollection
Style
Web APIs with Examples
Canvas
Console
Fetch
Fullscreen
Geolocation
History
MediaQueryList
Storage
Validation
HTML Elements with Examples
a
abbr
address
area
article
aside
audio
b
base
bdo
blockquote
body
br
button
canvas
caption
cite
code
col
colgroup
datalist
dd
del
details
dfn
dialog
div
dl
dt
em
embed
fieldset
figcaption
figure
footer
form
head
header
h1 - h6
hr
html
i
iframe
img
ins
input button
input checkbox
input color
input date
input datetime
input datetime-local
input email
input file
input hidden
input image
input month
input number
input password
input radio
input range
input reset
input search
input submit
input text
input time
input url
input week
kbd
label
legend
li
link
map
mark
menu
menuitem
meta
meter
nav
object
ol
optgroup
option
output
p
param
pre
progress
q
s
samp
script
section
select
small
source
span
strong
style
sub
summary
sup
table
tbody
td
tfoot
th
thead
tr
textarea
time
title
track
u
ul
var
video
Other
CSSStyleDeclaration
JS Conversion
JavaScript Tutorial
Visit Our JavaScript Tutorial 
JavaScript
Array Reference
The JavaScript Array Object
The Array object is used to store multiple values in a single variable.
Example
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
JavaScript Array Methods and Properties
Name
Description
[ ]
Creates a new Array
new Array()
Creates a new Array
at()
Returns an indexed element of an array
concat()
Joins arrays and returns an array with the joined arrays
constructor
Returns the function that created the Array prototype
copyWithin()
Copies array elements within the array, to and from specified positions
entries()
Returns a key/value pair Array Iteration Object
every()
Checks if every element in an array pass a test
fill()
Fill the elements in an array with a static value
filter()
Creates a new array with every element in an array that pass a test
find()
Returns the value of the first element in an array that pass a test
findIndex()
Returns the index of the first element in an array that pass a test
findLast()
Returns the value of the last element in an array that pass a test
findLastIndex()
Returns the index of the last element in an array that pass a test
flat()
Concatenates sub-array elements
flatMap()
Maps all array elements and creates a new flat array
forEach()
Calls a function for each array element
from()
Creates an array from an object
includes()
Check if an array contains the specified element
indexOf()
Search the array for an element and returns its position
isArray()
Checks whether an object is an array
join()
Joins all elements of an array into a string
keys()
Returns a Array Iteration Object, containing the keys of the original array
lastIndexOf()
Search the array for an element, starting at the end, and returns its position
length
Sets or returns the number of elements in an array
map()
Creates a new array with the result of calling a function for each array element
of()
Creates an array from a number of arguments
pop()
Removes the last element of an array, and returns that element
prototype
Allows you to add properties and methods to an Array object
push()
Adds new elements to the end of an array, and returns the new length
reduce()
Reduce the values of an array to a single value (going left-to-right)
reduceRight()
Reduce the values of an array to a single value (going right-to-left)
reverse()
Reverses the order of the elements in an array
shift()
Removes the first element of an array, and returns that element
slice()
Selects a part of an array, and returns the new array
some()
Checks if any of the elements in an array pass a test
sort()
Sorts the elements of an array
splice()
Adds or Removes array elements
toReversed()
Reverses the order of array elements (to a new array)
toSorted()
Sorts the elements of an array (to a new array)
toSpliced()
Adds or Removes array elements (to a new array)
toString()
Converts an array to a string, and returns the result
unshift()
Adds new elements to the beginning of an array, and returns the new length
valueOf()
Returns the primitive value of an array
with()
Returns a new array with updated elements
JavaScript Date getUTCMilliseconds()
Examples
Get the UTC milliseconds:
const d = new Date();
let ms = d.getUTCMilliseconds();
Try it Yourself 
Get the UTC milliseconds from a specific date:
const d = new Date("July 21, 1983 01:15:00.250");
let ms = d.getUTCMilliseconds();
Try it Yourself 
More examples below.
Description
getUTCMilliseconds()
returns the milliseconds (0 to 999) of a date.
getUTCMilliseconds()
returns the milliseconds according to UTC.
Syntax
Date
.getUTCMilliseconds()
Parameters
NONE
Return Value
Type
Description
A number
The milliseconds of the date (0 to 999).
Browser Support
getUTCMilliseconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Use all getUTC methods to display the universal time:
function addZero(x, n) {
while (x.toString().length < n) {
x = "0" + x;
}
return x;
}
const d = new Date();
let h = addZero(d.getUTCHours());
let m = addZero(d.getUTCMinutes());
let s = addZero(d.getUTCSeconds());
let ms = addZero(d.getUTCMilliseconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
JavaScript Date.now()
Examples
let ms = Date.now();
Try it Yourself 
Calculate the number of years since 1970/01/01:
const minute = 1000 * 60;
const hour = minute * 60;
const day = hour * 24;
const year = day * 365;
let years = Math.round(Date.now() / year);
Try it Yourself 
Description
Date.now()
returns the number of milliseconds since January 1, 1970.
Syntax
Date.now()
Parameters
NONE
Return Value
A number.
The number of milliseconds since midnight January 1, 1970 00:00:00 UTC.
Browser Support
Date.now()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Date setHours()
Example 1
const d = new Date();
d.setHours(15);
Try it Yourself 
Description
setHours()
sets the hour of a date.
setHours()
can also set minutes, seconds and milliseconds.
Example 2
Set the time to 15:35:01
const d = new Date();
d.setHours(15, 35, 1);
Try it Yourself 
Example 3
Set the time to 48 hours
ago
:
const d = new Date();
d.setHours(d.getHours() - 48);
Try it Yourself 
Browser Support
setHours()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setHours(
hour, min, sec, millisec
)
Parameters
hour
Required. The Hours.
0 to 23, but other values are allowed:
-1 gives the last hour of the previous day
24 gives the first hour of the next day
min
Optional. The Minutes.
0 to 59, but other values are allowed:
-1 gives the last minute of the previous hour
60 gives the first minute of the next hour
sec
Optional. The seconds.
0 to 59, but other values are allowed:
-1 gives the last second of the previous minute
60 gives the first second of the next minute
millisec
Optional. The milliseconds.
0 to 999, but other values are allowed:
-1 gives the last millisecond of the previous second
1000 gives the first millisecond of the next second
Return Value
A number.
Number of milliseconds between the date and January 1, 1970 00:00:00 UTC.
JavaScript Date toISOString()
Example
Get a date as a string, using the ISO standard:
const d = new Date();
let text = d.toISOString();
Try it Yourself 
Description
The toISOString() method returns a date object as a string, using the ISO standard.
The standard is called ISO-8601 and the format is: YYYY-MM-DDTHH:mm:ss.sssZ
Browser Support
toISOString()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
Syntax
Date
.toISOString()
Parameters
None
Technical Details
Return Value:
A String, representing the date and time using the ISO standard format
JavaScript Version:
ECMAScript 5
JavaScript Date toLocaleTimeString()
Example
Get the time portion of a date as a string, using locale conventions:
const d = new Date();
let text = d.toLocaleTimeString();
Try it Yourself 
Description
The toLocaleTimeString() method returns the time portion of a date object as a string, using locale conventions.
Browser Support
toLocaleTimeString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toLocaleTimeString()
Technical Details
Return Value:
A String, representing the time as a string
JavaScript Version:
ECMAScript 1
JavaScript Date toUTCString()
Example
Get a date object as a string, according to UTC:
const d = new Date();
let text = d.toUTCString();
Try it Yourself 
Description
The toUTCString() method returns a date object as a string, according to UTC.
Tip:
The Universal Coordinated Time (UTC) is the time set by the World Time Standard.
Note:
UTC time is the same as GMT time.
Browser Support
toUTCString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toUTCString()
Parameters
None
Technical Details
Return Value:
A String, representing the UTC date and time as a string
JavaScript Version:
ECMAScript 1
JavaScript
Global Reference
The JavaScript global properties and methods can be used with all JavaScript objects.
JavaScript Global Methods and Properties
Name
Description
decodeURI()
Decodes a URI
decodeURI
Component()
Decodes a URI component
encodeURI()
Encodes a URI
encodeURI
Component()
Encodes a URI component
escape()
Deprecated
. Use instead:
encodeURI()
encodeURIComponent()
eval()
Evaluates a string and executes it as if it was script code
Infinity
A numeric value that represents positive/negative infinity
isFinite()
Determines whether a value is a finite, legal number
isNaN()
Determines whether a value is an illegal number
NaN
"Not-a-Number" value
Number()
Converts an object's value to a number
parseFloat()
Parses a string and returns a floating point number
parseInt()
Parses a string and returns an integer
String()
Converts an object's value to a string
undefined
Indicates that a variable has not been assigned a value
unescape()
Deprecated
. Use instead:
decodeURI()
decodeURIComponent()
JavaScript Infinity
Example
Display a number that exceeds the positive infinity:
let x = 1.797693134862315E+308;
let y = x * 1.001;
Try it Yourself 
Display a number that exceeds the negative infinity:
let x = -1.797693134862316E+308;
let y = x * 1.001;
Try it Yourself 
Description
Infinity
is a number that represents positive infinity.
-Infinity
represents negative infinity.
A number reaches
Infinity
when it exceeds the upper limit for a number:
1.797693134862315E+308.
A number reaches
-Infinity
when it exceeds the lower limit for a number:
-1.797693134862316E+308.
Syntax
Infinity
Return Value
Infinity
Browser Support
infinity()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date valueOf()
Example
Get the primitive value of a date object:
const d = new Date();
let ms = d.valueOf();
Try it Yourself 
Description
The valueOf() method returns the primitive value of a date object.
Note:
The primitive value is returned as the number of millisecond since midnight January 1, 1970 UTC.
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.valueOf()
Parameters
None
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1, 1970 UTC
JavaScript Version:
ECMAScript 1
JavaScript
Error Reference
Error Object
The Error object provides error information when an error occurs.
Example
In this example we have written "alert" as "
adddlert
" to 
deliberately produce an error.
Return the error name and a description of the 
error:
try {
adddlert("Welcome");
}
catch(err) {
document.getElementById("demo").innerHTML =
err.name + "<br>" + err.message;
}
Try it Yourself 
For a tutorial about JavaScript Errors, read our
JavaScript Error Tutorial
.
Error Object Properties
Property
Description
name
Sets or returns an error name
message
Sets or returns an error message (a string)
Error Names
Error Name
Description
Try it
EvalError
Deprecated - use SyntaxError instead
RangeError
A number "out of range" has occurred
Try it 
ReferenceError
An illegal reference has occurred
Try it 
SyntaxError
A syntax error has occurred
Try it 
TypeError
A type error has occurred
Try it 
URIError
An error in encodeURI() has occurred
Try it 
JavaScript encodeURIComponent()
Example
Encode a URI:
let uri = "https://w3schools.com/my test.asp?name=stle&car=saab";
let encoded = encodeURIComponent(uri);
Try it Yourself 
Description
The
encodeURIComponent()
method
encodes
a URI component.
The
encodeURIComponent()
method encodes special characters including: , / ? : @ & = + $ #
Syntax
encodeURIComponent(
uri
)
Parameters
Parameter
Description
uri
Required.
The URI to be encoded.
Return Value
Type
Description
A string
The encoded URI.
Browser Support
encodeURIComponent()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript parseFloat()
Examples
Parse different values:
parseFloat(10);
parseFloat("10");
parseFloat("10.33");
parseFloat("34 45 66");
parseFloat("He was 40");
Try it Yourself 
More examples below.
Description
The
parseFloat()
method parses a value as a string and returns the first number.
Syntax
parseFloat(
value
)
Parameters
Parameter
Description
value
Required.
The value to parse.
Return Value
Type
Description
A number
NaN if no number is found.
Browser Support
parseFloat()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Parse different values:
parseFloat("40.00");
parseFloat(" 40 ");
parseFloat("40 years");
parseFloat("40H")
parseFloat("H40");
Try it Yourself 
JavaScript isFinite()
Examples
Check if a number is finite:
let result = isFinite(123);
Try it Yourself 
let result = isFinite("123");
Try it Yourself 
Description
The
isFinite()
method returns
true
if a value is a finite number.
Infinite (not finite) values are
Infinity
,
-Infinity
, or
NaN
Difference Between isFinite() and Number.isFinite()
isFinite()
returns
true
if a
value
is a finite number.
Number.isFinite()
returns
true
if a
number
is a finite number.
In other words:
isFinite()
converts the value to a number before testing it.
Examples
// This returns true
isFinite(123)
Try it Yourself 
// This returns false
Number.isFinite("123")
Try it Yourself 
Syntax
isFinite(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean.
false
if the value is Infinity,
   -Infinity, or NaN.
Otherwise
true
.
More Examples
Check if a number is finite:
isFinite(-1.23);
isFinite(5-2);
isFinite(0);
Try it Yourself 
isFinite("Hello");
isFinite("2005/12/12");
Try it Yourself 
Browser Support
isFinite()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number()
Examples
Convert booleans and dates to a number:
Number(true);
Number(false);
Number(new Date());
Try it Yourself 
More examples below.
Description
The
Number()
method converts a value to a number.
If the value cannot be converted,
NaN
is returned.
Syntax
Number(value)
Parameters
Parameter
Description
value
Optional.
A JavaScript value (variable).
Return Value
Type
Description
A number
Returns the value as a number.
If the value cannot be converted to a number, NaN is returned.
If no value is provided, 0 is returned.
Browser Support
Number()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Convert different numbers to a number:
Number(999);
Number("999");
Number("999 888");
Try it Yourself 
Convert different arrays to a number:
Number([9]);
Number([9.9]);
Number([9,9]);
Try it Yourself 
JavaScript eval()
Examples
Execute JavaScript code with eval():
let x = 10;
let y = 20;
let text = "x * y";
let result = eval(text);
Try it Yourself 
Never use eval(). Use code or a function instead:
let x = 10;
let y = 20;
let result = x * y;
Try it Yourself 
Description
The
eval()
method evaluates or executes an argument.
If the argument is an expression,
eval()
evaluates the expression. If the 
argument is one or more JavaScript statements,
eval()
executes the statements.
Do NOT use eval()
Executing JavaScript from a string is an BIG security risk.
With eval(), malicious code can run inside your application without permission.
With eval(), third-party code can see the scope of your application, which can lead to possible attacks.
Syntax
eval(
string
)
Parameters
Parameter
Description
string
A JavaScript expression, variable, statement, or sequence of statements
Browser Support
eval()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Error message
Example
Return an error message:
try {
adddlert("Welcome guest!");
}
catch(err) {
document.getElementById("demo").innerHTML = err.message;
}
Try it Yourself 
Description
The
message
property sets or returns an error message.
Syntax
errorObj
.message
Return Value
A string describing the error (varies between browsers).
Browser Support
error.name
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Related Pages
JavaScript Tutorial:
JavaScript Errors
JavaScript Reference:
The name property
JavaScript encodeURI()
Example
Encode a URI:
let uri = "my test.asp?name=stle&car=saab";
let encoded = encodeURI(uri);
Try it Yourself 
Description
The
encodeURI()
method
encodes
a URI.
Syntax
encodeURI(
uri
)
Parameters
Parameter
Description
uri
Required.
The URI to encode.
Return Value
Type
Description
A string.
The encoded URI.
Browser Support
encodeURI()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array findLastIndex()
Example 1
Find the last element with a value over 18:
const ages = [3, 10, 18, 20];
ages.findLastIndex(checkAge);
function checkAge(age) {
return age > 18;
}
Try it Yourself 
Description
The
findLastIndex()
method executes a function for each array element.
The
findLastIndex()
method returns the index (position) of the last element that passes a test.
The
findLastIndex()
method returns -1 if no match is found.
The
findLastIndex()
method does not execute the function for empty array elements.
The
findLastIndex()
method does not change the original array.
Syntax
array
.findLastIndex(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
Type
Description
Number
The index of the last element that passes the test.
Otherwise -1.
More Examples
Find the last element with a value above an input value:
<p><input type="number" id="toCheck" value="18"></p>
<button onclick="myFunction()">Test</button>
<p>Any values above: <span id="demo"></span></p>
<script>
const numbers = [4, 12, 16, 20];
function checkValue(x) {
return x > document.getElementById("toCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = numbers.findLastIndex(checkValue);
}
</script>
Try it Yourself 
Browser Support
findLastIndex()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array flatMap()
Example
const myArr = [1, 2, 3, 4, 5, 6];
const newArr = myArr.flatMap(x => [x, x * 10]);
Try it Yourself 
Description
The
flatMap()
method maps all array elements
and creates a new flat array.
flatMap()
creates a new array from calling a 
function for every array element.
flatMap()
does not execute the function for empty elements.
flatMap()
does not change the original array.
Syntax
array
.flatMap(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional.
Default value
undefined
.
A value passed to the function to be used as its
this
value.
Return Value
Type
Description
An array
An array with the elements as a result of a callback function and then flattened.
Browser Support
JavaScript Array
flatMap()
is supported in all modern browsers since January 2020:
Chrome 69
Edge 79
Firefox 62
Safari 12
Opera 56
Sep 2018
Jan 2020
Sep 2018
Sep 2018
Sep 2018
JavaScript Date setMonth()
Example
Set the month to 4 (May):
const d = new Date();
d.setMonth(4);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setMonth() method sets the month of a date object.
Note:
January is 0, February is 1, and so on.
This method can also be used to set the day of the month.
Browser Support
setMonth()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setMonth(
month
,
day
)
Parameter Values
Parameter
Description
month
Required. An integer representing the month
Expected values are 0-11, but other values are allowed:
-1 will result in the last month of the previous year
12 will result in the first month of the next year
13 will result in the second month of the next year
day
Optional. An integer representing the day of month
Expected values are 1-31, but other values are allowed:
0 will result in the last day of the previous month
-1 will result in the day before the last day of the previous month
If the month has 31 days:
32 will result in the first day of the next month
If the month has 30 days:
32 will result in the second day of the next month
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set the month to 4 (May) and the day to 20:
const d = new Date();
d.setMonth(4, 20);
Try it Yourself 
Example
Set the date to the last day of last month:
const d = new Date();
d.setMonth(d.getMonth(), 0);
Try it Yourself 
JavaScript Date setUTCFullYear()
Example
Set the year to 2015:
const d = new Date();
d.setUTCFullYear(2015);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCFullYear() method sets the year of a date object, according to UTC.
Browser Support
setUTCFullYear()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCFullYear(
year
,
month
,
day
)
Parameter Values
Parameter
Description
year
Required. A value representing the year, negative values are allowed
month
Optional. An integer representing the month
Expected values are 0-11, but other values are allowed:
-1 will result in the last month of the previous year
12 will result in the first month of the next year
13 will result in the second month of the next year
day
Optional. An integer representing the day of month
Expected values are 1-31, but other values are allowed:
0 will result in the last hour of the previous month
-1 will result in the hour before the last hour of the previous month
If the month has 31 days:
32 will result in the first day of the next month
If the month has 30 days:
32 will result in the second day of the next month
Return Value
Type
Description
Number
Milliseconds between the date object and midnight January 1 1970
Technical Details
JavaScript Version:
ECMAScript 1
More Examples
Example 2
Set the date to November 3, 2020, UTC time:
const d = new Date();
d.setUTCFullYear(2020, 10, 3);
Try it Yourself 
Example
Set the date to six months
ago
, UTC time:
const d = new Date();
d.setUTCFullYear(d.getUTCFullYear, d.getUTCMonth() - 6);
Try it Yourself 
JavaScript Date setTime()
Example
Add 1332403882588 milliseconds to January 1, 1970:
const d = new Date();
d.setTime(1332403882588);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setTime() method sets a date and time by adding or subtracting a specified number of milliseconds to/from midnight January 1, 1970.
Browser Support
setTime()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setTime(
millisec
)
Parameter Values
Parameter
Description
millisec
Required. The number of milliseconds to be added to, or subtracted from, midnight January 1, 1970
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Subtract 1332403882588 milliseconds from January 1, 1970:
const d = new Date();
d.setTime(-1332403882588);
Try it Yourself 
JavaScript Date setUTCDate()
Example
Set the day of the month, according to UTC:
const d = new Date();
d.setUTCDate(15);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCDate() method sets the day of a Date object, according to UTC.
Browser Support
setUTCDate()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCDate(
day
)
Parameter Values
Parameter
Description
day
Required. An integer representing the day of a month.
Expected values are 1-31, but other values are allowed:
0 will result in the last day of the previous month
-1 will result in the day before the last day of the previous month
If the month has 31 days:
32 will result in the first day of the next month
If the month has 30 days:
32 will result in the second day of the next month
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set the day of the month to the last day of the previous month:
const d = new Date();
d.setUTCDate(0);
Try it Yourself 
Example
Set the day of the month to a specified date:
const d = new Date("July 21, 1983 01:15:00");
d.setUTCDate(15);
Try it Yourself 
JavaScript String()
Examples
Convert different values to strings:
String(new Date());
String("12345");
String(12345);
Try it Yourself 
Description
The
String()
method converts a value to a string.
Syntax
String(
value
)
Parameters
Parameter
Description
value
Required.
A JavaScript value.
Return Value
Type
Description
A string.
The value converted to a string.
Browser Support
String()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Examples
Convert different values to strings:
String(Boolean(0));
String(Boolean(1));
String([1,2,3,4]);
Try it Yourself 
JavaScript unescape()
Description
The unescape() function is deprecated.
Use
decodeURI()
or
decodeURIComponent()
instead.
JavaScript Map Reference
A Map holds key-value pairs where the keys can be any datatype.
A Map remembers the original insertion order of the keys.
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
Try it Yourself 
Map Methods and Properties
Method
Description
new Map()
Creates a new Map object
clear()
Removes all the elements from a Map
delete()
Removes a Map element specified by a key
entries()
Returns an iterator object with the [key, value] pairs in a Map
forEach()
Invokes a callback for each key/value pair in a Map
get()
Gets the value for a key in a Map
groupBy()
Groups object elements according to returned callback values
has()
Returns true if a key exists in a Map
keys()
Returns an iterator object with the keys in a Map
set()
Sets the value for a key in a Map
size
Returns the number of Map elements
values()
Returns an iterator object of the values in a Map
You can add elements to a map with the
set()
method:
Example
// Create a Map
const fruits = new Map();
// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
Try it Yourself 
You can get elements from a map with the
get()
method:
Example
// Get the Value of "apples"
let value = fruits.get("apples");
Try it Yourself 
JavaScript Objects vs Maps
Differences between JavaScript Objects and Maps:
Object
Map
Not directly iterable
Directly iterable
Do not have a size property
Have a size property
Keys must be Strings (or Symbols)
Keys can be any datatype
Keys are not well ordered
Keys are ordered by insertion
Have default keys
Do not have default keys
JavaScript
Reference
Alphabetical JavaScript Reference
Property/Method
Description
Belongs To
abs()
Returns the absolute value of x
Math
accessKey
Sets or returns the accesskey attribute of an element
Element
acos()
Returns the arccosine of x, in radians
Math
acosh()
Returns the hyperbolic arccosine of x
Math
activeElement
Returns the currently focused element in the document
Document
addEventListener()
Attaches an event handler to the document
Document
,
Element
adoptNode()
Adopts a node from another document
Document
alert()
Displays an alert box with a message and an OK button
Window
altKey
Returns whether the "ALT" key was pressed when the mouse event was triggered
MouseEvent
,
KeyboardEvent
,
TouchEvent
anchors
Returns a collection of all <a> elements in the document that have a name attribute
Document
animationName
Returns the name of the animation
AnimationEvent
appCodeName
Returns the code name of the browser
Navigator
appendChild()
Adds a new child node, to an element, as the last child node
Element
applets
Returns a collection of all <applet> elements in the document
Document
appName
Returns the name of the browser
Navigator
appVersion
Returns the version information of the browser
Navigator
asin()
Returns the arcsine of x, in radians
Math
asinh()
Returns the hyperbolic arcsine of x
Math
assert()
Writes an error message to the console if the assertion is false
Console
assign()
Loads a new document
Location
atan()
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
Math
atan2()
Returns the arctangent of the quotient of its arguments
Math
atanh()
Returns the hyperbolic arctangent of x
Math
atob()
Decodes a base-64 encoded string
Window
attributes
Returns a NamedNodeMap of an element's attributes
Element
availHeight
Returns the height of the screen (excluding the Windows Taskbar)
Screen
availWidth
Returns the width of the screen (excluding the Windows Taskbar)
Screen
back()
Loads the previous URL in the history list
History
baseURI
Returns the absolute base URI of a document
Document
blur()
Removes focus from an element
Element
,
Window
body
Sets or returns the document's body (the <body> element)
Document
break
Exits a switch or a loop
Statements
btoa()
Encodes a string in base-64
Window
bubbles
Returns whether or not a specific event is a bubbling event
Event
button
Returns which mouse button was pressed when the mouse event was triggered
MouseEvent
buttons
Returns which mouse buttons were pressed when the mouse event was triggered
MouseEvent
cancelable
Returns whether or not an event can have its default action prevented
Event
cbrt()
Returns the cubic root of x
Math
ceil()
Returns x, rounded upwards to the nearest integer
Math
changeTouches
Returns a list of all the touch objects whose state changed between the 
    previous touch and this touch
TouchEvent
characterSet
Returns the character encoding for the document
Document
charAt()
Returns the character at the specified index (position)
String
charCode
Returns the Unicode character code of the key that triggered the  onkeypress event
KeyboardEvent
charCodeAt()
Returns the Unicode of the character at the specified index
String
charset
Deprecated.
Use
characterSet
instead. Returns the character encoding for the document
Document
childElementCount
Returns the number of child elements an element has
Element
childNodes
Returns a collection of an element's child nodes (including text and comment nodes)
Element
children
Returns a collection of an element's child element (excluding text and comment nodes)
Element
classList
Returns the class name(s) of an element
Element
class
Declares a class
Statements
className
Sets or returns the value of the class attribute of an element
Element
clear()
Clears the console
Console
,
Storage
clearInterval()
Clears a timer set with setInterval()
Window
clearTimeout()
Clears a timer set with setTimeout()
Window
clearWatch()
Unregister location/error monitoring handlers previously installed using 
    Geolocation.watchPosition()
Geolocation
click()
Simulates a mouse-click on an element
Element
clientHeight
Returns the height of an element, including padding
Element
clientLeft
Returns the width of the left border of an element
Element
clientTop
Returns the width of the top border of an element
Element
clientWidth
Returns the width of an element, including padding
Element
clientX
Returns the horizontal coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered
MouseEvent
,
TouchEvent
clientY
Returns the vertical coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered
MouseEvent
,
TouchEvent
clipboardData
Returns an object containing the data affected by the clipboard 
    operation
ClipboardData
closed
Returns a Boolean value indicating whether a window has been closed or not
Window
close()
Closes the output stream previously opened with document.open()
Document
,
Window
closest()
Searches up the DOM tree for the closest element which matches a specified CSS selector
Element
clz32(x)
Returns the number of leading zeros in a 32-bit binary representation of x
Math
code
Returns the code of the key that triggered the event
KeyboardEvent
colorDepth
Returns the bit depth of the color palette for displaying images
Screen
compareDocumentPosition()
Compares the document position of two elements
Element
compile()
Deprecated in version 1.5.
Compiles a regular expression
RegExp
composed
Returns whether the event is composed or not
Event
concat()
Joins two or more arrays, and returns a copy of the joined arrays
Array
,
String
confirm()
Displays a dialog box with a message and an OK and a Cancel button
Window
const
Declares a variable with a constant value
Statements
constructor()
Creates and initialize objects created within a class
Classes
constructor
Returns the function that created the Array object's prototype
Array
,
Boolean
,
Date
,
Number
,
RegExp
contains()
Returns true if a node is a descendant of a node, otherwise false
Element
contentEditable
Sets or returns whether the content of an element is editable or not
Element
continue
Breaks one iteration (in the loop) if a specified condition occurs, and 
continues with the next iteration in the loop
Statements
console
Returns a reference to the Console object, which provides methods for logging information to the browser's console (
See Console object
)
Window
cookie
Returns all name/value pairs of cookies in the document
Document
cookieEnabled
Determines whether cookies are enabled in the browser
Navigator
coordinates
Returns the position and altitude of the device on Earth
Geolocation
copyWithin()
Copies array elements within the array, to and from specified positions
Array
cos(x)
Returns the cosine of x (x is in radians)
Math
cosh(x)
Returns the hyperbolic cosine of x
Math
count()
Logs the number of times that this particular call to count() has been 
    called
Console
createAttribute()
Creates an attribute node
Document
createComment()
Creates a Comment node with the specified text
Document
createDocumentFragment()
Creates an empty DocumentFragment node
Document
createElement()
Creates an Element node
Document
createEvent()
Creates a new event
Document
,
Event
createTextNode()
Creates a Text node
Document
ctrlKey
Returns whether the "CTRL" key was pressed when the mouse event was triggered
MouseEvent
,
KeyboardEvent
,
TouchEvent
currentTarget
Returns the element whose event listeners triggered the event
Event
data
Returns the inserted characters
InputEvent
dataTransfer
Returns an object containing the data being dragged/dropped, or 
    inserted/deleted
DragEvent
,
InputEvent
debugger
Stops the execution of JavaScript, and calls (if available) the debugging function
Statements
decodeURI()
Decodes a URI
Global
decodeURIComponent()
Decodes a URI component
Global
defaultPrevented
Returns whether or not the preventDefault() method was called for  the event
Event
defaultStatus
Sets or returns the default text in the statusbar of a window
Window
defaultView
Returns the window object associated with a document, or null if none is available.
Document
delete
Deletes a property from an object
Operators
deltaX
Returns the horizontal scroll amount of a mouse wheel (x-axis)
WheelEvent
deltaY
Returns the vertical scroll amount of a mouse wheel (y-axis)
WheelEvent
deltaZ
Returns the scroll amount of a mouse wheel for the z-axis
WheelEvent
deltaMode
Returns a number that represents the unit of measurements for delta values (pixels, lines or pages)
WheelEvent
designMode
Controls whether the entire document should be editable or not.
Document
detail
Returns a number that indicates how many times the mouse was clicked
UiEvent
do ... while
Executes a block of statements and repeats the block while a condition is 
true
Statements
doctype
Returns the Document Type Declaration associated with the document
Document
document
Returns the Document object for the window (
See Document object
)
Window
documentElement
Returns the Document Element of the document (the <html> element)
Document
documentMode
Returns the mode used by the browser to render the document
Document
documentURI
Sets or returns the location of the document
Document
domain
Returns the domain name of the server that loaded the document
Document
domConfig
Obsolete.
Returns the DOM configuration of the document
Document
elapsedTime
Returns the number of seconds an animation has been running
AnimationEvent
elapsedTime
Returns the number of seconds a transition has been running
embeds
Returns a collection of all <embed> elements the document
Document
encodeURI()
Encodes a URI
Global
encodeURIComponent()
Encodes a URI component
Global
E
Returns Euler's number (approx. 2.718)
Math
endsWith()
Checks whether a string ends with specified string/characters
String
entries()
Returns a key/value pair Array Iteration Object
Array
error()
Outputs an error message to the console
Console
escape()
Deprecated in version 1.5.
Use
encodeURI()
or
encodeURIComponent()
instead
Global
eval()
Evaluates a string and executes it as if it was script code
Global
eventPhase
Returns which phase of the event flow is currently being evaluated
Event
every()
Checks if every element in an array pass a test
Array
exec()
Tests for a match in a string. Returns the first match
RegExp
execCommand()
Invokes the specified clipboard operation on the element currently having focus.
Document
exitFullscreen()
Cancels an element in fullscreen mode
Element
exp(x)
Returns the value of E
x
Math
expm1(x)
Returns the value of E
x
minus 1
Math
export
Export functions so they can be used for imports in external modules, and other scripts
extends
Extends a class (inherit)
Classes
dir
Sets or returns the value of the dir attribute of an element
Element
fill()
Fill the elements in an array with a static value
Array
filter()
Creates a new array with every element in an array that pass a test
Array
find()
Returns the value of the first element in an array that pass a test
Array
findIndex()
Returns the index of the first element in an array that pass a test
Array
floor()
Returns x, rounded downwards to the nearest integer
Math
focus()
Gives focus to an element
Element
,
Window
for
Marks a block of statements to be executed as long as a condition is true
Statements
for ... in
Marks a block of statements to be executed for each element of an object (or 
array)
Statements
forEach()
Calls a function for each array element
Array
forms
Returns a collection of all <form> elements in the document
Document
forward()
Loads the next URL in the history list
History
frameElement
Returns the <iframe> element in which the current window is inserted
Window
frames
Returns all <iframe> elements in the current window
Window
from()
Creates an array from an object
Array
fromCharCode()
Converts Unicode values to characters
String
fround()
Returns the nearest (32-bit single precision) float representation of a number
Math
fullscreenElement
Returns the current element that is displayed in fullscreen mode
Document
fullscreenEnabled()
Returns a Boolean value indicating whether the document can be viewed in fullscreen mode
Document
function
Declares a function
Statements
geolocation
Returns a Geolocation object that can be used to locate the user's position
Navigator
getDate()
Returns the day of the month (from 1-31)
Date
getDay()
Returns the day of the week (from 0-6)
Date
getAttribute()
Returns the specified attribute value of an element node
Element
getAttributeNode()
Returns the specified attribute node
Element
getBoundingClientRect()
Returns the size of an element and its position relative to the viewport
Element
getComputedStyle()
Gets the current computed CSS styles applied to an element
Window
getCurrentPosition()
Returns the current position of the device
Geolocation
getElementById()
Returns the element that has the ID attribute with the specified value
Document
getElementsByClassName()
Returns a NodeList containing all elements with the specified class name
Document
,
Element
getElementsByName()
Returns a NodeList containing all elements with a specified name
Document
getElementsByTagName()
Returns a NodeList containing all elements with the specified tag name
Document
,
Element
getFullYear()
Returns the year
Date
getHours()
Returns the hour (from 0-23)
Date
getItem()
Returns the value of the specified key name
Storage
getMilliseconds()
Returns the milliseconds (from 0-999)
Date
getMinutes()
Returns the minutes (from 0-59)
Date
getModifierState()
Returns an array containing target ranges that will be affected by the 
    insertion/deletion
MouseEvent
getMonth()
Returns the month (from 0-11)
Date
getNamedItem()
Returns a specified attribute node from a NamedNodeMap
Attribute
getSeconds()
Returns the seconds (from 0-59)
Date
getSelection()
Returns a Selection object representing the range of text selected by the user
Window
getTargetRanges()
Returns an array containing target ranges that will be affected by the 
    insertion/deletion
InputEvent
getTime()
Returns the number of milliseconds since midnight Jan 1 1970, and a specified date
Date
getTimezoneOffset()
Returns the time difference between UTC time and local time, in minutes
Date
getUTCDate()
Returns the day of the month, according to universal time (from 1-31)
Date
getUTCDay()
Returns the day of the week, according to universal time (from 0-6)
Date
getUTCFullYear()
Returns the year, according to universal time
Date
getUTCHours()
Returns the hour, according to universal time (from 0-23)
Date
getUTCMilliseconds()
Returns the milliseconds, according to universal time (from 0-999)
Date
getUTCMinutes()
Returns the minutes, according to universal time (from 0-59)
Date
getUTCMonth()
Returns the month, according to universal time (from 0-11)
Date
getUTCSeconds()
Returns the seconds, according to universal time (from 0-59)
Date
getYear()
Deprecated.
Use the
getFullYear()
method instead
Date
global
Checks whether the "g" modifier is set
RegExp
go()
Loads a specific URL from the history list
History
group()
Creates a new inline group in the console. This indents following 
    console messages by an additional level, until console.groupEnd() is called
Console
groupCollapsed()
Creates a new inline group in the console. However, the new group is 
    created collapsed. The user will need to use the disclosure button to expand 
    it
Console
groupEnd()
Exits the current inline group in the console
Console
hasAttribute()
Returns true if an element has the specified attribute, otherwise false
Element
hasAttributes()
Returns true if an element has any attributes, otherwise false
Element
hasChildNodes()
Returns true if an element has any child nodes, otherwise false
Element
hasFocus()
Returns a Boolean value indicating whether the document has focus
Document
hash
Sets or returns the anchor part (#) of a URL
Location
head
Returns the <head> element of the document
Document
height
Returns the total height of the screen
Screen
history
Returns the History object for the window (
See History object
)
Window
host
Sets or returns the hostname and port number of a URL
Location
hostname
Sets or returns the hostname of a URL
Location
href
Sets or returns the entire URL
Location
id
Sets or returns the value of the id attribute of an element
Element
if ... else ... else if
Marks a block of statements to be executed depending on a condition
Statements
ignoreCase
Checks whether the "i" modifier is set
RegExp
images
Returns a collection of all <img> elements in the document
Document
implementation
Returns the DOMImplementation object that handles this document
Document
import
Import functions exported from an external module, and another script
importNode()
Imports a node from another document
Document
in
Returns true if the specified property is in the specified object, otherwise false
Operators
includes()
Check if an array contains the specified element
Array
,
String
indexOf()
Search the array for an element and returns its position
Array
,
String
Infinity
A numeric value that represents positive/negative infinity
Global
info()
Outputs an informational message to the console
Console
innerHeight
Returns the height of the window's content area (viewport) including 
    scrollbars
Window
innerHTML
Sets or returns the content of an element
Element
innerText
Sets or returns the text content of a node and its descendants
Element
innerWidth
Returns the width of a window's content area (viewport) including 
    scrollbars
Window
inputEncoding
Returns the encoding, character set, used for the document
Document
inputType
Returns the type of the change (i.e "inserting" or "deleting")
InputEvent
insertAdjacentElement()
Inserts a HTML element at the specified position relative to the current element
Element
insertAdjacentHTML()
Inserts a HTML formatted text at the specified position relative to the current element
Element
insertAdjacentText()
Inserts text into the specified position relative to the current element
Element
insertBefore()
Inserts a new child node before a specified, existing, child node
Element
instanceof
Returns true if the specified object is an instance of the specified object
Operators
isArray()
Checks whether an object is an array
Array
isComposing
Returns whether the state of the event is composing or not
InputEvent
,
KeyboardEvent
isContentEditable
Returns true if the content of an element is editable, otherwise false
Element
isDefaultNamespace()
Returns true if a specified namespaceURI is the default, otherwise false
Element
isEqualNode()
Checks if two elements are equal
Element
isFinite()
Determines whether a value is a finite, legal number
Global
,
Number
isId
Returns true if the attribute is of type Id, otherwise it returns false
Attribute
isInteger()
Checks whether a value is an integer
Number
isNaN()
Determines whether a value is an illegal number
Global
,
Number
isSafeInteger()
Checks whether a value is a safe integer
Number
isSameNode()
Checks if two elements are the same node
Element
isSupported()
Returns true if a specified feature is supported on the element
Element
isTrusted
Returns whether or not an event is trusted
Event
item()
Returns the attribute node at a specified index in a NamedNodeMap
Attribute
,
HTMLCollection
join()
Joins all elements of an array into a string
Array
key
Returns the key value of the key represented by the event
KeyboardEvent
,
StorageEvent
key()
Returns the name of the
n
th key in the storage
Storage
keyCode
Returns the Unicode character code of the key that triggered the onkeypress event, or the 
Unicode key code of the key that triggered the onkeydown or 
onkeyup event
KeyboardEvent
keys()
Returns a Array Iteration Object, containing the keys of the original array
Array
lang
Sets or returns the value of the lang attribute of an element
Element
language
Returns the language of the browser
Navigator
lastChild
Returns the last child node of an element
Element
lastElementChild
Returns the last child element of an element
Element
lastIndex
Specifies the index at which to start the next match
RegExp
lastIndexOf()
Search the array for an element, starting at the end, and returns its position
Array
,
String
lastModified
Returns the date and time the document was last modified
Document
length
Sets or returns the number of elements in an array
Array
,
Attribute
,
History
,
HTMLCollection
,
Window
,
Storage
lengthComputable
Returns whether the length of the progress can be computable or not
ProgressEvent
let
Declares a variable inside brackets {} scope
Statements
links
Returns a collection of all <a> and <area> elements in the document that have a href attribute
Document
LN2
Returns the natural logarithm of 2 (approx. 0.693)
Math
LN10
Returns the natural logarithm of 10 (approx. 2.302)
Math
loaded
Returns how much work has been loaded
ProgressEvent
localeCompare()
Compares two strings in the current locale
String
localStorage
Allows to save key/value pairs in a web browser. Stores the data with no expiration date
Window
location
Returns the location of a key on the keyboard or device
KeyboardEvent
location
Returns the Location object for the window (
See Location object
)
Window
log()
Returns the natural logarithm of a number
Math
,
Console
log10()
Returns the base-10 logarithm of a number
Math
log1p()
Returns the natural logarithm of 1 + a number
Math
log2()
Returns the base-2 logarithm of a number
Math
LOG2E
Returns the base-2 logarithm of E (approx. 1.442)
Math
LOG10E
Returns the base-10 logarithm of E (approx. 0.434)
Math
map()
Creates a new array with the result of calling a function for each array element
Array
match()
Searches a string for a match against a regular expression, and returns the matches
String
matches()
Returns a Boolean value indicating whether an element is matched by a specific CSS selector or not
Element
matchMedia()
Returns a MediaQueryList object representing the specified CSS media query string
Window
max()
Returns the number with the highest value
Math
MAX_VALUE
Returns the largest number possible in JavaScript
Number
message
Sets or returns an error message (a string)
Error
metaKey
Returns whether the "META" key was pressed when an event was triggered
MouseEvent
,
KeyboardEvent
,
TouchEvent
min()
Returns the number with the lowest value
Math
multiline
Checks whether the "m" modifier is set
RegExp
MIN_VALUE
Returns the smallest number possible in JavaScript
Number
moveBy()
Moves a window relative to its current position
Window
moveTo()
Moves a window to the specified position
Window
MovementX
Returns the horizontal coordinate of the mouse pointer relative to the 
position of the last mousemove event
MouseEvent
MovementY
Returns the vertical coordinate of the mouse pointer relative to the 
position of the last mousemove event
MouseEvent
name
Sets or returns an error name
Error
,
Attribute
,
Window
namedItem()
Returns the element with the specified ID, or name, in an HTMLCollection
HTMLCollection
namespaceURI
Returns the namespace URI of an element
Element
NaN
"Not-a-Number" value
Global
,
Number
navigator
Returns the Navigator object for the window (
See Navigator object
)
Window
NEGATIVE_INFINITY
Represents negative infinity (returned on overflow)
Number
new
Creates an instance of a constructor
newURL
Returns the URL of the document, after the hash has been changed
HasChangeEvent
newValue
Returns the new value of the changed storage item
StorageEvent
nextSibling
Returns the next node at the same node tree level
Element
nextElementSibling
Returns the next element at the same node tree level
Element
nodeName
Returns the name of a node
Element
nodeType
Returns the node type of a node
Element
nodeValue
Sets or returns the value of a node
Element
normalize()
Removes empty Text nodes, and joins adjacent nodes
Document
,
Element
normalizeDocument()
Removes empty Text nodes, and joins adjacent nodes
Document
now()
Returns the number of milliseconds since midnight Jan 1, 1970
Date
Number()
Converts an object's value to a number
Global
offsetHeight
Returns the height of an element, including padding, border and scrollbar
Element
offsetWidth
Returns the width of an element, including padding, border and scrollbar
Element
offsetLeft
Returns the horizontal offset position of an element
Element
offsetParent
Returns the offset container of an element
Element
offsetTop
Returns the vertical offset position of an element
Element
offsetX
Returns the horizontal coordinate of the mouse pointer relative to the 
position of the edge of the target element
MouseEvent
offsetY
Returns the vertical coordinate of the mouse pointer relative to the 
position of the edge of the target element
MouseEvent
oldURL
Returns the URL of the document, before the hash was changed
HasChangeEvent
oldValue
Returns the old value of the changed storage item
StorageEvent
onabort
The event occurs when the loading of a media is aborted
UiEvent
,
Event
onafterprint
The event occurs when a page has started printing, or if the print dialogue box has been closed
Event
onanimationend
The event occurs when a CSS animation has completed
AnimationEvent
onanimationiteration
The event occurs when a CSS animation is repeated
AnimationEvent
onanimationstart
The event occurs when a CSS animation has started
AnimationEvent
onbeforeprint
The event occurs when a page is about to be printed
Event
onbeforeunload
The event occurs before the document is about to be unloaded
UiEvent
,
Event
onblur
The event occurs when an element loses focus
FocusEvent
oncanplay
The event occurs when the browser can start playing the media (when it has buffered 
enough to begin)
Event
oncanplaythrough
The event occurs when the browser can play through the media without 
stopping for buffering
Event
onchange
The event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>)
Event
onclick
The event occurs when the user clicks on an element
MouseEvent
oncontextmenu
The event occurs when the user right-clicks on an element to open a context menu
MouseEvent
oncopy
The event occurs when the user copies the content of an element
ClipboardEvent
oncut
The event occurs when the user cuts the content of an element
ClipboardEvent
ondblclick
The event occurs when the user double-clicks on an element
MouseEvent
ondrag
The event occurs when an element is being dragged
DragEvent
ondragend
The event occurs when the user has finished dragging an element
DragEvent
ondragenter
The event occurs when the dragged element enters the drop target
DragEvent
ondragleave
The event occurs when the dragged element leaves the drop target
DragEvent
ondragover
The event occurs when the dragged element is over the drop target
DragEvent
ondragstart
The event occurs when the user starts to drag an element
DragEvent
ondrop
The event occurs when the dragged element is dropped on the drop target
DragEvent
ondurationchange
The event occurs when the duration of the media is changed
Event
onemptied
The event occurs when something bad happens and the media file is suddenly 
unavailable (like unexpectedly disconnects)
onended
The event occurs when the media has reach the end (useful for messages like "thanks for listening")
Event
onerror
The event occurs when an error occurs while loading an external file
ProgressEvent
,
UiEvent
,
Event
onfocus
The event occurs when an element gets focus
FocusEvent
onfocusin
The event occurs when an element is about to get focus
FocusEvent
onfocusout
The event occurs when an element is about to lose focus
FocusEvent
onfullscreenchange
The event occurs when an element is displayed in fullscreen mode
Event
onfullscreenerror
The event occurs when an element can not be displayed in fullscreen mode
Event
onhashchange
The event occurs when there has been changes to the anchor part of a URL
HashChangeEvent
oninput
The event occurs when an element gets user input
InputEvent
,
Event
oninvalid
The event occurs when an element is invalid
Event
onkeydown
The event occurs when the user is pressing a key
KeyboardEvent
onkeypress
The event occurs when the user presses a key
KeyboardEvent
onkeyup
The event occurs when the user releases a key
KeyboardEvent
onLine
Determines whether the browser is online
Navigator
onload
The event occurs when an object has loaded
UiEvent
,
Event
onloadeddata
The event occurs when media data is loaded
Event
onloadedmetadata
The event occurs when meta data (like dimensions and duration) are loaded
Event
onloadstart
The event occurs when the browser starts looking for the specified media
ProgressEvent
onmessage
The event occurs when a message is received through the event source
Event
onmousedown
The event occurs when the user presses a mouse button over an element
MouseEvent
onmouseenter
The event occurs when the pointer is moved onto an element
MouseEvent
onmouseleave
The event occurs when the pointer is moved out of an element
MouseEvent
onmousemove
The event occurs when the pointer is moving while it is over an element
MouseEvent
onmouseover
The event occurs when the pointer is moved onto an element, or onto one of its children
MouseEvent
onmouseout
The event occurs when a user moves the mouse pointer out of an element, or out of one of its children
MouseEvent
onmouseup
The event occurs when a user releases a mouse button over an element
MouseEvent
onmousewheel
Deprecated.
Use the
wheel
event instead
WheelEvent
onoffline
The event occurs when the browser starts to work offline
Event
ononline
The event occurs when the browser starts to work online
Event
onopen
The event occurs when a connection with the event source is opened
Event
onpagehide
The event occurs when the user navigates away from a webpage
PageTransitionEvent
onpageshow
The event occurs when the user navigates to a webpage
PageTransitionEvent
onpaste
The event occurs when the user pastes some content in an element
ClipboardEvent
onpause
The event occurs when the media is paused either by the user or 
programmatically
Event
onplay
The event occurs when the media has been started or is no longer paused
Event
onplaying
The event occurs when the media is playing after having been paused or stopped for buffering
Event
onpopstate
The event occurs when the window's history changes
PopStateEvent
onprogress
The event occurs when the browser is in the process of getting the media 
data (downloading the media)
Event
onratechange
The event occurs when the playing speed of the media is changed
Event
onresize
The event occurs when the document view is resized
UiEvent
,
Event
onreset
The event occurs when a form is reset
Event
onscroll
The event occurs when an element's scrollbar is being scrolled
UiEvent
,
Event
onsearch
The event occurs when the user writes something in a search field (for <input="search">)
Event
onseeked
The event occurs when the user is finished moving/skipping to a new position 
in the media
Event
onseeking
The event occurs when the user starts moving/skipping to a new position in 
the media
Event
onselect
The event occurs after the user selects sometext (for <input> and <textarea>)
UiEvent
,
Event
onshow
The event occurs when a <menu> element is shown as a context menu
Event
onstalled
The event occurs when the browser is trying to get media data, but data is not available
Event
onstorage
The event occurs when a Web Storage area is updated
StorageEvent
onsubmit
The event occurs when a form is submitted
Event
onsuspend
The event occurs when the browser is intentionally not getting media data
Event
ontimeupdate
The event occurs when the playing position has changed (like when the user 
fast forwards to a different point in the media)
Event
ontoggle
The event occurs when the user opens or closes the <details> element
Event
ontouchcancel
The event occurs when the touch is interrupted
TouchEvent
ontouchend
The event occurs when a finger is removed from a touch screen
TouchEvent
ontouchmove
The event occurs when a finger is dragged across the screen
TouchEvent
ontouchstart
The event occurs when a finger is placed on a touch screen
TouchEvent
ontransitionend
The event occurs when a CSS transition has completed
TransitionEvent
onunload
The event occurs once a page has unloaded (for <body>)
UiEvent
,
Event
onvolumechange
The event occurs when the volume of the media has changed (includes setting the 
volume to "mute")
Event
onwaiting
The event occurs when the media has paused but is expected to resume (like 
when the media pauses to buffer more data)
Event
onwheel
The event occurs when the mouse wheel rolls up or down over an element
WheelEvent
open()
Opens an HTML output stream to collect output from document.write()
Document
,
Window
opener
Returns a reference to the window that created the window
Window
origin
Returns the protocol, hostname and port number of a URL
Location
outerHeight
Returns the height of the browser window, including toolbars/scrollbars
Window
outerHTML
Sets or returns the outer content of an element
Element
outerText
Sets or returns the text outer content of a node and its descendants
Element
outerWidth
Returns the width of the browser window, including toolbars/scrollbars
Window
ownerDocument
Returns the root element (document object) for an element
Element
pageX
Returns the horizontal coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered
MouseEvent
pageXOffset
Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window
Window
pageY
Returns the vertical coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered
MouseEvent
pageYOffset
Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window
Window
parent
Returns the parent window of the current window
Window
parentNode
Returns the parent node of an element
Element
parentElement
Returns the parent element node of an element
Element
parse()
Parses a date string and returns the number of milliseconds since January 1, 1970
Date
,
JSON
parseFloat()
Parses a string and returns a floating point number
Global
parseInt()
Parses a string and returns an integer
Global
pathname
Sets or returns the path name of a URL
Location
persisted
Returns whether the webpage was cached by the browser
PageTransitionEvent
PI
Returns PI (approx. 3.14)
Math
pixelDepth
Returns the color resolution (in bits per pixel) of the screen
Screen
platform
Returns for which platform the browser is compiled
Navigator
pop()
Removes the last element of an array, and returns that element
Array
port
Sets or returns the port number of a URL
Location
position
Returns the position of the concerned device at a given time
Geolocation
positionError
Returns the reason of an error occurring when using the geolocating 
    device
Geolocation
positionOptions
Describes an object containing option properties to pass as a parameter 
    of Geolocation.getCurrentPosition() and Geolocation.watchPosition()
Geolocation
POSITIVE_INFINITY
Represents infinity (returned on overflow)
Number
preventDefault()
Cancels the event if it is cancelable, meaning that the default  action that belongs to the event will not occur
Event
print()
Prints the content of the current window
Window
product
Returns the engine name of the browser
Navigator
propertyName
Returns the name of the CSS property associated with the animation or transition
AnimationEvent
,
TransitionEvent
protocol
Sets or returns the protocol of a URL
Location
prototype
Allows you to add properties and methods to an Array object
Array
,
Boolean
,
Date
pseudoElement
Returns the name of the pseudo-element of the animation or transition
AnimationEvent
,
TransitionEvent
push()
Adds new elements to the end of an array, and returns the new length
Array
querySelector()
Returns the first element that matches a specified CSS selector(s) in the document
Document
,
Element
querySelectorAll()
Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document
Document
,
Element
random()
Returns a random number between 0 and 1
Math
readyState
Returns the (loading) status of the document
Document
reduce()
Reduce the values of an array to a single value (going left-to-right)
Array
reduceRight()
Reduce the values of an array to a single value (going right-to-left)
Array
referrer
Returns the URL of the document that loaded the current document
Document
region
MouseEvent
reload()
Reloads the current document
Location
remove()
Removes the element from the DOM
Element
removeAttribute()
Removes a specified attribute from an element
Element
removeAttributeNode()
Removes a specified attribute node, and returns the removed node
Element
removeChild()
Removes a child node from an element
Element
removeEventListener()
Removes an event handler that has been attached with the addEventListener() method
Element
removeItem()
Removes that key from the storage
Storage
repeat
Returns whether a key is being hold down repeatedly, or not
KeyboardEvent
repeat()
Returns a new string with a specified number of copies of an existing string
String
replace()
Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
String
,
Location
replaceChild()
Replaces a child node in an element
Element
requestAnimationFrame()
Requests the browser to call a function to update an animation before 
    the next repaint
Window
requestFullscreen()
Shows an element in fullscreen mode
Element
resizeBy()
Resizes the window by the specified pixels
Window
resizeTo()
Resizes the window to the specified width and height
Window
return
Stops the execution of a function and returns a value from that function
Statements
reverse()
Reverses the order of the elements in an array
Array
round()
Rounds x to the nearest integer
Math
pow()
Returns the value of x to the power of y
Math
previousSibling
Returns the previous node at the same node tree level
Element
previousElementSibling
Returns the previous element at the same node tree level
Element
prompt()
Displays a dialog box that prompts the visitor for input
Window
prototype
Allows you to add properties and methods to an object
Number
relatedTarget
Returns the element related to the element that triggered the mouse event
MouseEvent
,
FocusEvent
removeEventListener()
Removes an event handler from the document (that has been attached with the
addEventListener()
method)
Document
removeNamedItem()
Removes a specified attribute node
Attribute
renameNode()
Renames the specified node
Document
screen
Returns the Screen object for the window
(See Screen object)
Window
screenLeft
Returns the horizontal coordinate of the window relative to the screen
Window
screenTop
Returns the vertical coordinate of the window relative to the screen
Window
screenX
Returns the horizontal coordinate of the window/mouse pointer relative to the screen
Window
,
MouseEvent
screenY
Returns the vertical coordinate of the window/mouse pointer relative to the screen
Window
,
MouseEvent
scripts
Returns a collection of <script> elements in the document
Document
scroll()
Deprecated.
This method has been replaced by the
scrollTo()
method.
Window
scrollBy()
Scrolls the document by the specified number of pixels
Window
scrollHeight
Returns the entire height of an element, including padding
Element
scrollIntoView()
Scrolls the specified element into the visible area of the browser window
Element
scrollLeft
Sets or returns the number of pixels an element's content is scrolled horizontally
Element
scrollTo()
Scrolls the document to the specified coordinates
Window
scrollTop
Sets or returns the number of pixels an element's content is scrolled vertically
Element
scrollWidth
Returns the entire width of an element, including padding
Element
scrollX
An alias of
pageXOffset
Window
scrollY
An alias of
pageYOffset
Window
search
Sets or returns the querystring part of a URL
Location
search()
Searches a string for a specified value, or regular expression, and returns the position of the match
String
self
Returns the current window
Window
sessionStorage
Allows to save key/value pairs in a web browser. Stores the data for one 
    session
Window
setAttribute()
Sets or changes the specified attribute, to the specified value
Element
setAttributeNode()
Sets or changes the specified attribute node
Element
setDate()
Sets the day of the month of a date object
Date
setFullYear()
Sets the year of a date object
Date
setHours()
Sets the hour of a date object
Date
setInterval()
Calls a function or evaluates an expression at specified intervals (in milliseconds)
Window
setItem()
Adds that key to the storage, or update that key's value if it already 
    exists
Storage
setMilliseconds()
Sets the milliseconds of a date object
Date
setMinutes()
Set the minutes of a date object
Date
setMonth()
Sets the month of a date object
Date
setNamedItem()
Sets the specified attribute node (by name)
Attribute
setSeconds()
Sets the seconds of a date object
Date
setTime()
Sets a date to a specified number of milliseconds after/before January 1, 1970
Date
setTimeout()
Calls a function or evaluates an expression after a specified number of milliseconds
Window
setUTCDate()
Sets the day of the month of a date object, according to universal time
Date
setUTCFullYear()
Sets the year of a date object, according to universal time
Date
setUTCHours()
Sets the hour of a date object, according to universal time
Date
setUTCMilliseconds()
Sets the milliseconds of a date object, according to universal time
Date
setUTCMinutes()
Set the minutes of a date object, according to universal time
Date
setUTCMonth()
Sets the month of a date object, according to universal time
Date
setUTCSeconds()
Set the seconds of a date object, according to universal time
Date
setYear()
Deprecated.
Use the
setFullYear()
method instead
Date
shift()
Removes the first element of an array, and returns that element
Array
shiftKey
Returns whether the "SHIFT" key was pressed when an event was triggered
MouseEvent
,
KeyboardEvent
,
TouchEvent
sign(x)
Returns the sign of a number (checks whether it is positive, negative or zero)
Math
sin()
Returns the sine of x (x is in radians)
Math
sinh()
Returns the hyperbolic sine of x
Math
slice()
Selects a part of an array, and returns the new array
Array
,
String
some()
Checks if any of the elements in an array pass a test
Array
sort()
Sorts the elements of an array
Array
source
Returns the text of the RegExp pattern
RegExp
specified
Returns true if the attribute has been specified, otherwise it returns false
Attribute
splice()
Adds/Removes elements from an array
Array
split()
Splits a string into an array of substrings
String
static
Defines a static method for a class
Classes
startsWith()
Checks whether a string begins with specified characters
String
state
Returns an object containing a copy of the history entries
PopStateEvent
String()
Converts an object's value to a string
Global
stop()
Stops the window from loading
Window
stopImmediatePropagation()
Prevents other listeners of the same event from being called
Event
stopPropagation()
Prevents further propagation of an event during event flow
Event
stringify()
Convert a JavaScript object to a JSON string
JSON
sqrt()
Returns the square root of x
Math
SQRT1_2
Returns the square root of 1/2 (approx. 0.707)
Math
SQRT2
Returns the square root of 2 (approx. 1.414)
Math
status
Sets or returns the text in the statusbar of a window
Window
strictErrorChecking
Sets or returns whether error-checking is enforced or not
Document
storageArea
Returns an object representing the affected storage object
StorageEvent
style
Sets or returns the value of the style attribute of an element
Element
substr()
Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
String
substring()
Extracts the characters from a string, between two specified indices
String
super
Refers to the parent class
Classes
switch
Marks a block of statements to be executed depending on different cases
Statements
table()
Displays tabular data as a table
Console
tabIndex
Sets or returns the value of the tabindex attribute of an element
Element
tagName
Returns the tag name of an element
Element
tan()
Returns the tangent of an angle
Math
tanh()
Returns the hyperbolic tangent of a number
Math
target
Returns the element that triggered the event
Event
targetTouches
Returns a list of all the touch objects that are in contact with the 
  surface and where the touchstart event occured on the same target element as 
  the current target element
TouchEvent
test()
Tests for a match in a string. Returns true or false
RegExp
textContent
Sets or returns the textual content of a node and its descendants
Element
this
Refers to the object it belongs to
throw
Throws (generates) an error
Statements
time()
Starts a timer (can track how long an operation takes)
Console
timeEnd()
Stops a timer that was previously started by console.time()
Console
timeStamp
Returns the time (in milliseconds relative to the epoch) at which  the event was created
Event
title
Sets or returns the title of the document
Document
,
Element
toDateString()
Converts the date portion of a Date object into a readable string
Date
toGMTString()
Deprecated.
Use the
toUTCString()
method instead
Date
toExponential()
Converts a number into an exponential notation
Number
toFixed(x)
Formats a number with x numbers of digits after the decimal point
Number
toJSON()
Returns the date as a string, formatted as a JSON date
Date
toISOString()
Returns the date as a string, using the ISO standard
Date
toLocaleDateString()
Returns the date portion of a Date object as a string, using locale conventions
Date
toLocaleLowerCase()
Converts a string to lowercase letters, according to the host's locale
String
toLocaleString()
Converts a Date object to a string, using locale conventions
Date
toLocaleTimeString()
Returns the time portion of a Date object as a string, using locale conventions
Date
toLocaleUpperCase()
Converts a string to uppercase letters, according to the host's locale
String
toLowerCase()
Converts a string to lowercase letters
String
top
Returns the topmost browser window
Window
toPrecision(x)
Formats a number to x length
Number
toString()
Converts an array to a string, and returns the result
Array
,
Boolean
,
Date
,
Number
,
RegExp
,
String
,
Element
total
Returns the total amount of work that will be loaded
ProgressEvent
toTimeString()
Converts the time portion of a Date object to a string
Date
touches
Returns a list of all the touch objects that are currently in contact with 
  the surface
TouchEvent
toUpperCase()
Converts a string to uppercase letters
String
toUTCString()
Converts a Date object to a string, according to universal time
Date
trace()
Outputs a stack trace to the console
Console
transitionend
The event occurs when a CSS transition has completed
TransitionEvent
trim()
Removes whitespace from both ends of a string
String
trunc()
Returns the integer part of a number (x)
Math
try ... catch ... finally
Marks the block of statements to be executed when an error occurs in a try 
block, and implements error handling
Statements
type
Returns the name of the event
Event
typeof
Returns the type of a variable, object, function or expression
Operators
undefined
Indicates that a variable has not been assigned a value
Global
unescape()
Deprecated in version 1.5.
Use
decodeURI()
or
decodeURIComponent()
instead
Global
unshift()
Adds new elements to the beginning of an array, and returns the new length
Array
url
Returns the URL of the changed item's document
StorageEvent
URL
Returns the full URL of the HTML document
Document
userAgent
Returns the user-agent header sent by the browser to 
    the server
Navigator
UTC()
Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time
Date
value
Sets or returns the value of the attribute
Attribute
valueOf()
Returns the primitive value of an array
Array
,
Boolean
,
Date
,
Number
,
String
var
Declares a variable
Statements
warn()
Outputs a warning message to the console
Console
watchPosition()
Returns a watch ID value that then can be used to unregister the handler 
    by passing it to the Geolocation.clearWatch() method
Geolocation
which
Returns which mouse button was pressed when the mouse event was triggered
MouseEvent
,
KeyboardEvent
width
Returns the total width of the screen
Screen
view
Returns a reference to the Window object where the event occurred
UiEvent
void
Evaluates an expression and returns undefined
Operators
while
Marks a block of statements to be executed while a condition is true
Statements
write()
Writes HTML expressions or JavaScript code to a document
Document
writeln()
Same as write(), but adds a newline character after each statement
Document
yield
Pauses and resumes a generator function
Operators
JavaScript Tutorial
Visit Our JavaScript Tutorial 
JavaScript Array.isArray()
Examples
Check if an object is an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let result = Array.isArray(fruits);
Try it Yourself 
Check if another datatype is an array:
let text = "W3Schools";
let result = Array.isArray(text);
Try it Yourself 
Description
The
isArray()
method returns
true
if an object is an array, otherwise
false
.
Syntax
Array.isArray
(obj
)
Parameters
Parameter
Description
obj
Required.
An object (or any data type) to be tested.
Return Value
Type
Description
A boolean
true
if the object is an array, otherwise
false
.
Browser Support
isArray()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array join()
Examples
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.join();
Try it Yourself 
Another separator:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.join(" and ");
Try it Yourself 
Description
The
join()
method returns an array as a string.
The
join()
method does not change the original array.
Any separator can be specified. The default is comma (,).
Syntax
array
.join(
separator
)
Parameters
Parameter
Description
separator
Optional.
The separator to be used.
Default is a comma.
Return Value
Type
Description
A string.
The array values, separated by the specified separator.
Browser Support
join()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array keys()
Example
Create an Array Iterator object, containing the keys of the array:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Create an Iterable
const list = fruits.keys();
// List the Keys
let text = "";
for (let x of list) {
text += x + "<br>";
}
Try it Yourself 
More Examples Below !
Description
The
keys()
method returns an Iterator object with the keys of an array.
The
keys()
method does not change the original array.
Syntax
array
.keys()
Parameters
NONE
Return Value
Type
Description
An array
An Array Iterator object containing the keys of an array.
More Examples
Example
Iterate directly over the iterator:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Keys
let text = "";
for (let x of fruits.keys()) {
text += x + "<br>";
}
Try it Yourself 
Example
Use the built in Object.keys() method:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Keys
let text = "";
for (let x of Object.keys(fruits)) {
text += x + "<br>";
}
Try it Yourself 
Browser Support
keys()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
keys()
is not supported in Internet Explorer.
JavaScript Array prototype
Example
Create a method that transforms array values into upper case:
Array.prototype.myUcase = function() {
for (let i = 0; i < this.length; i++) {
this[i] = this[i].toUpperCase();
}
};
Use the method on any array:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.myUcase();
Try it Yourself 
Description
prototype
allows you to add new properties and methods to arrays.
prototype
is a property available with all JavaScript objects.
Syntax
Array.prototype.
name
=
value
Warning
You are not advised to change the prototype of an object that you do not control.
You should not change the prototype of built in JavaScript datatypes like:
Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.
The prototype Property
The JavaScript
prototype
property allows you to add new properties to objects:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
Browser Support
prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript
toDateString()
Method
Example
Get today's date as a readable string:
const d = new Date();
let text = d.toDateString();
Try it Yourself 
Description
The toDateString() method returns the date (not the time) of a date object as a string.
Browser Support
toDateString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toDateString()
Parameters
None
Technical Details
Return Value:
A String, representing the date as a string
Related Pages
JavaScript Tutorial:
JavaScript Dates
JavaScript Tutorial:
JavaScript Date Formats
JavaScript Tutorial:
JavaScript Strings
JavaScript Date toLocaleString()
Example
Get a date as string, using locale conventions:
const d = new Date();
let text = d.toLocaleString();
Try it Yourself 
Description
The toLocaleString() method returns a Date object as a string, using locale settings.
The default language depends on the locale setup on your computer.
Browser Support
toLocaleString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toLocaleString(
locales
,
options
)
Parameter Values
Parameter
Description
locales
Try it
Optional. Which language specific format to use.
Click on the "Try 
    it" button to see all values in action.
Legal Values:
ar-SA
Arabic (Saudi Arabia)
bn-BD
Bangla (Bangladesh)
bn-IN
Bangla (India)
cs-CZ
Czech (Czech Republic)
da-DK
Danish (Denmark)
de-AT
Austrian German
de-CH
"Swiss" German
de-DE
Standard German (as spoken in Germany)
el-GR
Modern Greek
en-AU
Australian English
en-CA
Canadian English
en-GB
British English
en-IE
Irish English
en-IN
Indian English
en-NZ
New Zealand English
en-US
US English
en-ZA
English (South Africa)
es-AR
Argentine Spanish
es-CL
Chilean Spanish
es-CO
Colombian Spanish
es-ES
Castilian Spanish (as spoken in Central-Northern Spain)
es-MX
Mexican Spanish
es-US
American Spanish
fa-IR
Iranian (Iran)
fi-FI
Finnish (Finland)
fr-BE
Belgian French
fr-CA
Canadian French
fr-CH
"Swiss" French
fr-FR
Standard French (especially in France)
he-IL
Hebrew (Israel)
hi-IN
Hindi (India)
hu-HU
Hungarian (Hungary)
id-ID
Indonesian (Indonesia)
it-CH
"Swiss" Italian
it-IT
Standard Italian (as spoken in Italy)
ja-JP
Japanese (Japan)
ko-KR
Korean (Republic of Korea)
nl-BE
Belgian Dutch
nl-NL
Standard Dutch (as spoken in The Netherlands)
no-NO
Norwegian (Norway)
pl-PL
Polish (Poland)
pt-BR
Brazilian Portuguese
pt-PT
European Portuguese (as written and spoken in Portugal)
ro-RO
Romanian (Romania)
ru-RU
Russian (Russian Federation)
sk-SK
Slovak (Slovakia)
sv-SE
Swedish (Sweden)
ta-IN
Indian Tamil
ta-LK
Sri Lankan Tamil
th-TH
Thai (Thailand)
tr-TR
Turkish (Turkey)
zh-CN
Mainland China, simplified characters
zh-HK
Hong Kong, traditional characters
zh-TW
Taiwan, traditional characters
options
Optional. An object where you can set some properties.
Legal properties:
dateStyle
Legal values:
"full"
"long"
"medium"
"short"
timeStyle
"full"
"long"
"medium"
"short"
localeMatcher
"best-fit"
(default)
"lookup"
timeZone
hour12
false
true
hourCycle
"h11"
"h12"
"h23"
"h24"
formatMatcher
"basic"
"best-fit"
(default)
weekday
"long"
"short"
"narrow
"
year
"2-digit"
"numeric"
month
"2-digit"
"long"
"narrow"
"numeric"
"short"
day
"2-digit"
"numeric"
hour
"2-digit"
"numeric"
minute
"2-digit"
"numeric"
second
"2-digit"
"numeric"
timeZoneName
"long"
"short"
Browser Support for Locales and Options
Chrome
IE / Edge
Firefox
Safari
Opera
24
11
29
10
15
Technical Details
Return Value:
A String, representing the date and time as a string
JavaScript Version:
ECMAScript 1
JavaScript Date toLocaleDateString()
Example
Get a date as a string, using locale conventions:
const d = new Date();
let text = d.toLocaleDateString();
Try it Yourself 
Description
The toLocaleDateString() method returns the date (not the time) of a date object as a string, using locale conventions.
Browser Support
toLocaleDateString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toLocaleDateString()
Technical Details
Return Value:
A String, representing the date as a string
JavaScript Version:
ECMAScript 1
JavaScript decodeURI()
Example
Decode a URI after encoding it:
let uri = "my test.asp?name=stle&car=saab";
let encoded = encodeURI(uri);
let decoded = decodeURI(encoded);
Try it Yourself 
Description
The
decodeURI()
method
decodes
a URI.
Syntax
decodeURI(
uri
)
Parameters
Parameter
Description
uri
Required.
The URI to decode.
Return Value
Type
Description
A string
The decoded URI.
Browser Support
decodeURI()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.abs()
Examples
let x = Math.abs(-7.25);
Try it Yourself 
let a = Math.abs(7.25);
let b = Math.abs(-7.25);
let c = Math.abs(null);
let d = Math.abs("Hello");
let e = Math.abs(2-3);
Try it Yourself 
Description
The
Math.abs()
method returns the absolute value of a number.
Syntax
Math.abs(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The absolute value of the number.
NaN
if the value is not a number.
0 if the value is
null
.
Browser Support
Math.abs()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array reduceRight()
Examples
Subtract the numbers in the array, starting from the end:
const numbers = [175, 50, 25];
document.getElementById("demo").innerHTML 
  = numbers.reduceRight(myFunc);
function myFunc(total, num) {
return total - num;
}
Try it Yourself 
Subtract the numbers, right-to-left, and display the sum:
const numbers = [2, 45, 30, 100];
document.getElementById("demo").innerHTML = numbers.reduceRight(getSum);
function getSum(total, num) {
return total - num;
}
Try it Yourself 
Description
The
reduceRight()
method executes a reducer function for each array element.
The
reduceRight()
method works from right to left.
The
reduceRight()
method returns a single value: the function's accumulated result.
The
reduceRight()
method does not execute the function for empty elements.
Syntax
array
.
reduceRight
(
function(total, currentValue, currentIndex, arr), initialValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each element in the array.
Reducer function parameters:
total
Required.
The
initialValue
, or the previously returned value of the function.
currentValue
Required.
The value of the current element.
currentIndex
Optional.
The index of the current element.
arr
Optional.
The array the element belongs to.
initialValue
Optional.
A value to be passed to the function as the initial value
Return Value
The accumulated result from the last call of the callback function.
Browser Support
reduceRight()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array values()
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Create an Iterator
const list = fruits.values();
// List the Values
let text = "";
for (let x of list) {
text += x + "<br>";
}
Try it Yourself 
More Examples Below !
Description
The
values()
method returns an Iterator object with the values of an array.
The
values()
method does not change the original array.
Syntax
array
.values()
Parameters
NONE
Return Value
Type
Description
Iterator
An Iterator object containing the values of an array.
More Examples
Example
Iterate directly over the Iterator:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Values
let text = "";
for (let x of values(fruits)) {
text += x + "<br>";
}
Try it Yourself 
Example
Use the built in Object.values() method:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Values
let text = "";
for (let x of Object.values(fruits)) {
text += x + "<br>";
}
Try it Yourself 
Browser Support
values()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
values()
is not supported in Internet Explorer.
JavaScript Array valueOf()
Examples
Get the value of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const myArray = fruits.valueOf();
Try it Yourself 
fruits.valueOf()
returns the same as fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const myArray = fruits;
Try it Yourself 
Description
The
valueOf()
method returns the array itself.
The
valueOf()
method does not change the original array.
fruits.valueOf()
returns the same as
fruits
.
Syntax
array
.valueOf()
Parameters
NONE
Return Value
Type
Description
An array
The
valueOf()
method returns itself!
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript
Boolean Reference
JavaScript Booleans
JavaScript booleans can have one of two values:
true
or
false
.
The Boolean() Function
You can use the
Boolean()
function to find out if an expression is 
true:
Example
Boolean(10 > 9)
Try it Yourself 
Or even easier:
(10 > 9)
Try it Yourself 
JavaScript Boolean Methods and Properties
Name
Description
constructor
Returns the function that created JavaScript's Boolean prototype
prototype
Allows you to add properties and methods to the Boolean prototype
toString()
Converts a boolean value to a string, and returns the result
valueOf()
Returns the primitive value of a boolean
JavaScript Date getMonth()
Examples
Get the month:
const d = new Date();
let month = d.getMonth();
Try it Yourself 
Get the name of the month (not just a number):
const month = ["January","February","March","April","May","June","July","August","September","October","November","December"];
const d = new Date();
let name = month[d.getMonth()];
Try it Yourself 
Description
getMonth()
returns the month (0 to 11) of a date.
January =0, February = 1, ... (see below):
Syntax
Date
.getMonth()
Parameters
NONE
Return Value
Type
Description
A number
The month of the date (0 to 11).
Browser Support
getMonth()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Boolean valueOf()
Example
let bool = false;
let value = bool.valueOf();
Try it Yourself 
Description
valueOf()
returns the primitive value of a boolean.
valueOf()
is usually called by 
JavaScript behind the scenes, and not explicitly in code.
Syntax
boolean
.valueOf()
Return Value
Type
Description
A boolean
true
or
false
.
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Class extends
Example
Create a class named "Model" which will inherit the methods from the "Car" 
class:
class Car {
constructor(brand) {
this.carname = 
  brand;
}
present() {
return 'I have a ' + this.carname;
}
}
class Model
extends
Car {
constructor(brand, mod) {
super(brand);
this.model = mod;
}
show() {
return this.present() + ', it is a ' + this.model;
}
}
mycar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML 
  = mycar.show();
Try it Yourself 
Description
The
extends
keyword is used to create a child class of another class (parent).
The child class inherits all the methods from 
another class.
Inheritance is useful for code reusability: reuse properties and methods of 
an existing class when you create a new class.
Note:
From the example above; The
super()
method refers to the parent 
class. By calling the
super()
method in the 
constructor method, we call the parent's constructor method and gets access to 
the parent's properties and methods.
Browser Support
extends
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
extends
is not supported in Internet Explorer.
Syntax
class
childClass
extends
parentClass
Technical Details
JavaScript Version:
ECMAScript 2015 (ES6)
Related Pages
JavaScript Tutorial:
JavaScript Classes
JavaScript Tutorial:
JavaScript ES6 (EcmaScript 2015)
JavaScript Reference:
The super Keyword
JavaScript Reference:
The constructor() method
JavaScript parseInt()
Example
Parse different values:
parseInt("10");
parseInt("10.00");
parseInt("10.33");
parseInt("34 45 66");
parseInt("   60   ");
parseInt("40 years");
parseInt("He was 40");
Try it Yourself 
Description
The
parseInt
method parses a value as a string and returns the first integer.
A radix parameter specifies the number system to use:
2 = binary, 8 = octal, 10 = decimal, 16 = hexadecimal.
If radix is omitted, JavaScript assumes radix 10. 
If the value begins with "0x", JavaScript assumes radix 16.
Syntax
parseInt(
string, radix
)
Parameters
Parameter
Description
value
Required.
The value to be parsed.
radix
Optional. Default is 10.
A number (2 to 36) specifying the number system.
Return Value
Type
Description
A number.
NaN if no integer is found.
Browser Support
parseInt()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Parse different values:
parseInt("10", 10);
parseInt("010");
parseInt("10", 8);
parseInt("0x10");
parseInt("10", 16);
Try it Yourself 
JavaScript
JSON Reference
JSON
(
J
ava
S
cript
O
bject
N
otation)
JSON is a format for storing and transporting data.
JavaScript Objects can be converted into JSON, and JSON can be converted back into JavaScript Objects.
This way we can work with the data as JavaScript objects, with no complicated 
parsing or translations.
Example
Sending JSON:
// a JavaScript object...:
var myObj =
{ "name":"John", 
  "age":31, "city":"New York" };
// ...converted into JSON:
var myJSON = 
  JSON.stringify(myObj);
// send JSON:
window.location = "demo_json.php?x=" + myJSON;
Try it Yourself 
For a tutorial about JSON, read our
JSON Tutorial
.
JSON Methods
Method
Description
parse()
Parses a JSON string and returns a JavaScript object
stringify()
Convert a JavaScript object to a JSON string
Valid Data Types
In JSON, values must be one of the following data types:
a string
a number
an object (containing valid JSON values)
an array
a boolean
null
More Examples
Example
Receiving JSON:
// myJSON is text received in JSON format.
// Convert JSON into a JavaScript 
  object:
var myObj = 
  JSON.parse(myJSON);
document.getElementById("demo").innerHTML = myObj.name;
Try it Yourself 
Example
Storing data as JSON, using localStorage
// Storing data:
myObj =
{ "name":"John", 
  "age":31, "city":"New York" };
myJSON = 
  JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);
// Retrieving data:
text = localStorage.getItem("testJSON");
obj = 
  JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name;
Try it Yourself 
Learn more about JSON in our
JSON tutorial
.
JavaScript JSON
parse()
Method
Example
Parse a string (written in JSON format) and return a JavaScript object:
var obj = JSON.parse('{"firstName":"John", "lastName":"Doe"}');
Try it Yourself 
More "Try it Yourself" examples below.
Description
The JSON.parse() method parses a string and returns a JavaScript object.
The string has to be written in JSON format.
The JSON.parse() method can optionally transform the result with a function.
Browser Support
The numbers in the table specify the first browser version that fully supports the method.
Method
parse()
4.0
8.0
3.5
4.0
11.5
Syntax
JSON.parse(
string, function
)
Parameter Values
Parameter
Description
string
Required. A string written in JSON format
reviver function
Optional. A function used to transform the result. The function is called for each item. Any nested objects are transformed before the parent.
If the function  returns a valid value, the item value is replaced with the transformed  value
If the function returns undefined, the item is deleted
Technical Details
Return Value:
A JSON Object, or Array
JavaScript Version:
ECMAScript 5
More Examples
Example
How to use the
reviver
function:
/*replace the value of "city" to upper case:*/
var text =
  '{ "name":"John", "age":"39", "city":"New York"}';
var obj = JSON.parse(text, function (key, value) {
if 
  (key == "city") {
return value.toUpperCase();
} else {
return value;
}
});
document.getElementById("demo").innerHTML = obj.name + ", " + obj.city;
Try it Yourself 
Example
Parsing JSON received from the server:
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function() 
  {
if (this.readyState == 4 && this.status == 200) {
var myObj = 
  JSON.parse(this.responseText);
document.getElementById("demo").innerHTML 
  = myObj.name;
}
};
xmlhttp.open("GET", "json_demo.txt", true);
xmlhttp.send();
Try it Yourself 
Take a look at
json_demo.txt
Related Pages
JSON Tutorial:
JSON Introduction
JavaScript JSON
stringify()
Method
Example
Stringify a JavaScript object:
var obj = { "name":"John", "age":30, "city":"New York"};
var myJSON = 
  JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The JSON.stringify() method converts JavaScript objects into strings.
When sending data to a web server the data has to be a string.
Browser Support
The numbers in the table specify the first browser version that fully supports the method.
Method
stringify()
4.0
8.0
3.5
4.0
11.5
Syntax
JSON.stringify(
obj, replacer, space
)
Parameter Values
Parameter
Description
obj
Required. The value to convert to a string
replacer
Optional. Either a function or an array used to transform the result. The 
    replacer is called for each item.
space
Optional. Either a String or a Number.
A string to be used as white 
    space (max 10 characters),
or a Number, from 0 to 10, to indicate how 
    many space characters to use as white space.
Technical Details
Return Value:
A String
JavaScript Version:
ECMAScript 5
More Examples
Example
Using the
replacer
function:
/*replace the value of "city" to upper case:*/
var obj = { "name":"John", 
  "age":"39", "city":"New York"};
var text = JSON.stringify(obj, function 
  (key, value) {
if (key == "city") {
return value.toUpperCase();
} else {
return value;
}
});
Try it Yourself 
Example
Using the
space
parameter:
/*Insert 
  10 space characters for each white space:*/
var obj = { "name":"John", 
  "age":"39", "city":"New York"};
var text = JSON.stringify(obj, 
  null, 10);
Try it Yourself 
Example
Using the
space
parameter:
/*Insert 
  the word SPACE for each white space:*/
var obj = { "name":"John", 
  "age":"39", "city":"New York"};
var text = JSON.stringify(obj, 
  null, "SPACE");
Try it Yourself 
Related Pages
JSON Tutorial:
JSON Introduction
JavaScript new Map()
Examples
Creating a Map object by passing an array to the
new Map()
constructor:
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
Try it Yourself 
Creating a new Map object and add elements with the
set()
method:
// Create a Map
const fruits = new Map();
// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
Try it Yourself 
Description
The
new Map()
constructor creates a Map object.
Syntax
new Map(
iterable
)
Parameters
Parameter
Description
iterable
Optional.
An iterable object with key-value pairs.
Return Value
Type
Description
Object
A new Map object.
Browser Support
Map
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Map
is not supported in Internet Explorer.
JavaScript Map entries()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// List all Entries
let text = "";
for (const x of fruits.entries()) {
text += x;
}
Try it Yourself 
Description
The
entries()
method returns an iterator object with the [key,values] in a map.
The
entries()
method does not change the original map.
Syntax
map
.entries()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the [key, values] of the map.
Browser Support
map.entries()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.entries()
is not supported in Internet Explorer.
JavaScript Map get()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Get the Value of "apples"
let value = fruits.get("apples");
Try it Yourself 
Description
The
get()
method gets the value of a key in a map.
Syntax
map
.get(
key
)
Parameters
Parameter
Description
key
Required.
The key to test for.
Return Value
Type
Description
Variable
The element found or
undefined
if the key is not in the map.
Browser Support
map.get()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.get()
is not supported in Internet Explorer.
JavaScript Map.groupBy()
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Map.groupBy(fruits, myCallback);
Try it Yourself 
Description
The
Map.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Map.groupBy()
method does not change the original object.
Object.groupBy() vs Map.groupBy()
The difference between Object.groupBy() and Map.groupBy() is:
Object.groupBy() groups elements into a JavaScript object.
Map.groupBy() groups elements into a Map object.
Syntax
Map.groupBy(
iterable
,
callback
)
Parameters
Parameter
Description
iterable
Required.
An iterable array or map.
callback
Required.
A function to execute for each element.
The function should return a group name for the element.
Return Value
Type
Description
Object
A Map object with the grouped elements.
Browser Support
Map.groupby()
is an ES2024 feature.
It is fully supported in all modern browsers since March 2024:
Chrome 117
Edge 117
Firefox 119
Safari 17.4
Opera 103
Sep 2023
Sep 2023
Oct 2023
Okt 2024
May 2023
JavaScript Math.atan2()
Example - atan2(y,x)
Assume you had a point with the (x,y) coordinates of (4,8), you could 
calculate the angle in radians between that point and the positive X axis as 
follows:
Math.atan2(8, 4);
Try it Yourself 
Description
The
Math.atan2()
method returns the arctangent of the quotient of its arguments, as a numeric value between PI and -PI radians.
The number returned represents the counterclockwise angle in radians (not degrees) between the positive X axis and 
the point (x, y).
Note:
With atan2(), the y coordinate is passed as the first argument 
and the x coordinate is passed as the second argument.
Syntax
Math.atan2(
y
,
x
)
Parameters
Parameter
Description
y
Required.
The y coordinate.
x
Required.
The x coordinate.
Return Value
Type
Description
Number
PI to -PI.
NaN
if the values are empty or not numeric.
Browser Support
Math.atan2()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.expm1()
Examples
let x = Math.expm1(3);
Try it Yourself 
let a = Math.exp(1);
let b = Math.exp(-1);
let c = Math.exp(5);
let d = Math.exp(10);
Try it Yourself 
Description
The
expm1()
method returns the value of E
x
minus 1, where
E is Euler's number
(approximately 2.7183) and x is the number passed to it.
This method is more accurate than using
Math.exp()
and subtracting 1.
Syntax
Math.expm1(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
E
x
minus 1
Browser Support
Math.expm1()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.expm1()
is not supported in Internet Explorer.
JavaScript Math.exp()
Examples
let x = Math.exp(3);
Try it Yourself 
let a = Math.exp(1);
let b = Math.exp(-1);
let c = Math.exp(5);
let d = Math.exp(10);
Try it Yourself 
Description
The
Math.exp()
method returns the value of E
x
, where
E is Euler's number
(approximately 2.7183) and x is the number passed to it.
Syntax
Math.exp(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
E
x
Browser Support
Math.exp()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.cosh()
Example
Math.cosh(3)
Try it Yourself 
Description
The
Math.cosh()
method returns the hyperbolic cosine of a number.
Syntax
Math.cosh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic cosine of the number.
Browser Support
Math.cosh()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.cosh()
is not supported in Internet Explorer.
JavaScript Math.log10()
Examples
let x = Math.log10(2);
Try it Yourself 
let a = Math.log10(2.7183);
let b = Math.log10(2);
let c = Math.log10(1);
let d = Math.log10(0);
let e = Math.log10(-1);
Try it Yourself 
Description
The
Math.log10()
method returns the base-10 logarithm of a number.
Syntax
Math.log10(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The base-10 logarithm of the number.
NaN
if the number is negative.
-Infinity
if the number is 0.
Browser Support
Math.log10()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.log10()
is not supported in Internet Explorer.
JavaScript Math.LN2
Example
let x = Math.LN2;
Try it Yourself 
Description
The
Math.LN2
propery returns the natural logarithm of 2.
The
Math.LN2
propery returns approximately 0.693.
Syntax
Math.LN2
Return Value
Type
Description
Number
The natural logarithm of 2.
Browser Support
Math.LN2
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math LOG2E
Example
let x = Math.LOG2E;
Try it Yourself 
Description
The
Math.LOG2E
property returns the base-2 logarithm of E.
The
Math.LOG2E
property returns approximately 1.442.
Syntax
Math.LOG2E
Return Value
Type
Description
Number
The base-2 logarithm of E.
Browser Support
Math.LOG2E
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.fround()
Example
let a = Math.fround(2.60);
let b = Math.fround(2.50);
let c = Math.fround(2.49);
let d = Math.fround(-2.60);
let e = Math.fround(-2.50);
let f = Math.fround(-2.49);
Try it Yourself 
Description
The
Math.fround()
method returns the 
nearest 32-bit single precision float representation of a number.
Syntax
Math.fround(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The nearest 32-bit single precision float representation of the number.
Browser Support
Math.fround()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.fround()
is not supported in Internet Explorer.
JavaScript Math.clz32()
Example
let a = Math.clz32(0);
let b = Math.clz32(1);
let c = Math.clz32(2);
let d = Math.clz32(4);
Try it Yourself 
Description
The
Math.clz32()
method returns the number of leading zeros in a 32-bit binary number.
clz32
is short for
CountLeadingZeroes32
.
Syntax
Math.clz32(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
Number of leading zeros in the 32-bit binary representation of a number.
If the number is 0, it returns 32 (all bits are 0).
Browser Support
Math.clz32()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.clz32()
is not supported in Internet Explorer.
JavaScript Date getUTCFullYear()
Examples
const d = new Date();
let year = d.getUTCFullYear();
Try it Yourself 
Get the full UTC year from a specific date:
const d = new Date("July 21, 1983 01:15:00");
let year = d.getUTCFullYear();
Try it Yourself 
Description
getUTCFullYear()
returns the year of a date.
getUTCFullYear()
returns the year according to UTC.
getUTCFullYear()
returns four digits for years between 1000 and 9999.
Syntax
Date
.getUTCFullYear()
Parameters
NONE
Return Value
Type
Description
A number
The year of the date.
Browser Support
getUTCFullYear()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getUTCHours()
Examples
Get the UTC hours:
const d = new Date();
let hour = d.getUTCHours();
Try it Yourself 
Get the UTC hours from a specific date:
const d = new Date("July 21, 1983 01:15:00");
let hour = d.getUTCHours();
Try it Yourself 
More examples below.
Description
getUTCHours()
returns the hour (0 to 23) of a date.
getUTCHours()
returns the hour according to UTC.
Syntax
Date
.getUTCHours()
Parameters
NONE
Return Value
A number.
The hour of a date (0 to 23).
Browser Support
getUTCHours()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Use all getUTC methods to display the universal time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getUTCHours());
let m = addZero(d.getUTCMinutes());
let s = addZero(d.getUTCSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
JavaScript Date getUTCMinutes()
Examples
Get the UTC minutes:
const d = new Date();
let minutes = d.getUTCMinutes();
Try it Yourself 
Get the UTC minutes from a specific date:
const d = new Date("July 21, 1983 01:15:00");
let minutes = d.getUTCMinutes();
Try it Yourself 
More examples below.
Description
getUTCMinutes()
returns the minutes (0 to 59) of a date.
getUTCMinutes()
returns the minutes according to UTC.
Syntax
Date
.getUTCMinutes()
Parameters
NONE
Return Value
Type
Description
A number
The minutes of a date (0 to 59).
Browser Support
getUTCMinutes()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Use all getUTC methods to display the universal time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getUTCHours());
let m = addZero(d.getUTCMinutes());
let s = addZero(d.getUTCSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
JavaScript Date getUTCMonth()
Examples
Get the month, according to universal time:
const d = new Date();
let month = d.getUTCMonth();
Try it Yourself 
Get the name of the month (not just a number):
const month = ["January","February","March","April","May","June","July","August","September","October","November","December"];
const d = new Date()
let month = month[d.getUTCMonth()];
Try it Yourself 
Description
getUTCMonth()
returns the month (0 to 11) of a date.
getUTCMonth()
returns the month according to UTC.
January = 0, February = 1, ... (See below):
Syntax
Date
.getUTCMonth()
Parameters
NONE
Return Value
Type
Description
A number
The month of the date (0 to 11).
Browser Support
getUTCMonth()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date getUTCSeconds()
Examples
Get UTC seconds:
const d = new Date();
let seconds = d.getUTCSeconds();
Try it Yourself 
Using getUTC methods to display the universal time:
function addZero(i) {
if (i < 10) {i = "0" + i}
return i;
}
const d = new Date();
let h = addZero(d.getUTCHours());
let m = addZero(d.getUTCMinutes());
let s = addZero(d.getUTCSeconds());
let time = h + ":" + m + ":" + s;
Try it Yourself 
Description
getUTCSeconds()
returns the seconds (0 to 59) of a date.
getUTCSeconds()
returns the seconds according to UTC.
Syntax
Date
.getUTCSeconds()
Parameters
NONE
Return Value
Type
Description
A number
The seconds of the date (0 to 59).
Browser Support
getUTCSeconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Date prototype
Example
Make a new date method that gives the date object a month-name property called myMonth:
Date.prototype.myMonth = function()
{
if (this.getMonth()==0) {return "January"};
if (this.getMonth()==1) {return "February"};
if (this.getMonth()==2) {return "March"};
if (this.getMonth()==3) {return "April"};
if (this.getMonth()==4) {return "May"};
if (this.getMonth()==5) {return "June"};
if (this.getMonth()==6) {return "July"};
if (this.getMonth()==7) {return "August"};
if (this.getMonth()==8) {return "September"};
if (this.getMonth()==9) {return "October"};
if (this.getMonth()==10) {return "November"};
if (this.getMonth()==11) {return "December"};
}
Make a Date object, then call the myMonth method:
const d = new Date();
let month = d.myMonth();
Try it Yourself 
Description
prototype
allows you to add new properties and methods to dates.
prototype
is a property available with all JavaScript objects.
Browser Support
prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date.prototype.
name
=
value
Warning
You are not advised to change the prototype of an object that you do not control.
You should not change the prototype of built in JavaScript datatypes like:
Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.
The prototype Property
The JavaScript
prototype
property allows you to add new properties to objects:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
JavaScript Date setDate()
Example 1
const d = new Date();
d.setDate(15);
Try it Yourself 
Description
setDate()
sets the day of the month of a date.
Example 2
Set the day of the month to the last day of the previous month:
const d = new Date();
d.setDate(0);
Try it Yourself 
Example 3
Set the day of the month in a specified date:
const d = new Date("July 21, 1983 01:15:00");
d.setDate(15);
Try it Yourself 
Browser Support
setDate()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setDate(
day
)
Parameters
day
An integer representing the day (1 to 31).
Higher and lower values are handeled with date maths:
0 gives the last day of the previous month
-1 gives the day before the last day of the previous month
32 gives the first day of the next month (if 31 days)
41 gives the tenth day of the next month (if 31 days)
Return Value
A number.
Number of milliseconds between the date and January 1, 1970 00:00:00 UTC.
JavaScript Date setMinutes()
Example 1
Set the minutes to 17:
const d = new Date();
d.setMinutes(17);
Try it Yourself 
Description
setMinutes()
sets the minutes of a date.
This method can also be used to set the seconds and milliseconds.
Example 2
Set the date time to be 90 minutes
ago
:
const d = new Date();
d.setMinutes(d.getMinutes() - 90);
Try it Yourself 
Browser Support
setMinutes()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setMinutes(
min
,
sec
,
millisec
)
Parameter Values
Parameter
Description
min
Required. An integer representing the minutes.
Expected values are 0-59, but other values are allowed:
-1 will result in the last minute of the previous hour
60 will result in the first minute of the next hour
sec
Optional. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
JavaScript Date setMilliseconds()
Example
const d = new Date();
d.setMilliseconds(192);
Try it Yourself 
Description
setMilliseconds()
sets the milliseconds of a date.
Browser Support
setMilliseconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setMilliseconds(
millisec
)
Parameters
millisec
Required. The milliseconds.
(0 to 999), but other values are allowed:
-1 gives the last millisecond of the previous second
1000 gives first millisecond of the next second
1001 gives the second millisecond of the next second
Return Value
A number.
Number of milliseconds between the date and January 1, 1970 00:00:00 UTC.
JavaScript Map size
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Get the Size
let x = letters.size
Try it Yourself 
Description
The
size
property returns the number of elements in a map.
Syntax
map
.size
Parameters
NONE
Return Value
Type
Description
Number
The number of elements in the map.
Browser Support
map.size()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.size()
is not supported in Internet Explorer.
JavaScript Math Reference
Math Object
The Math object allows you to perform mathematical tasks.
Math is not a constructor. All properties/methods of Math can be called by using Math as an object, without creating it:
Example
let x = Math.PI;
let y = Math.sqrt(16);
Try it Yourself 
Math Object Methods and Properties
Name
Description
abs(x)
Returns the absolute value of x
acos(x)
Returns the arccosine of x, in radians
acosh(x)
Returns the hyperbolic arccosine of x
asin(x)
Returns the arcsine of x, in radians
asinh(x)
Returns the hyperbolic arcsine of x
atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)
Returns the arctangent of the quotient of its arguments
atanh(x)
Returns the hyperbolic arctangent of x
cbrt(x)
Returns the cubic root of x
ceil(x)
Returns x, rounded upwards to the nearest integer
clz32(x)
Returns the number of leading zeros in a 32-bit binary representation of x
cos(x)
Returns the cosine of x (x is in radians)
cosh(x)
Returns the hyperbolic cosine of x
E
Returns Euler's number (approx. 2.718)
exp(x)
Returns the value of E
x
expm1(x)
Returns the value of E
x
minus 1
floor(x)
Returns x, rounded downwards to the nearest integer
fround(x)
Returns the nearest (32-bit single precision) float representation of a number
LN2
Returns the natural logarithm of 2 (approx. 0.693)
LN10
Returns the natural logarithm of 10 (approx. 2.302)
log(x)
Returns the natural logarithmof x
log10(x)
Returns the base-10 logarithm of x
LOG10E
Returns the base-10 logarithm of E (approx. 0.434)
log1p(x)
Returns the natural logarithm of 1 + x
log2(x)
Returns the base-2 logarithm of x
LOG2E
Returns the base-2 logarithm of E (approx. 1.442)
max(x1,x2,..)
Returns the number with the highest value
min(x1,x2,..)
Returns the number with the lowest value
PI
Returns PI (approx. 3.14)
pow(x, y)
Returns the value of x to the power of y
random()
Returns a random number between 0 and 1
round(x)
Rounds x to the nearest integer
sign(x)
Returns the sign of a number (checks whether it is positive, negative or zero)
sin(x)
Returns the sine of x (x is in radians)
sinh(x)
Returns the hyperbolic sine of x
sqrt(x)
Returns the square root of x
SQRT1_2
Returns the square root of 1/2 (approx. 0.707)
SQRT2
Returns the square root of 2 (approx. 1.414)
tan(x)
Returns the tangent of an angle
tanh(x)
Returns the hyperbolic tangent of a number
trunc(x)
Returns the integer part of a number (x)
JavaScript Math.acosh()
Examples
let x = Math.acosh(1);
Try it Yourself 
let x = Math.acosh(2);
Try it Yourself 
Description
The
Math.acosh()
method returns the hyperbolic arc-cosine of a number.
If the parameter is less than 1, the method returns NaN.
Syntax
Math.acosh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic arc-cosine of the parameter.
NaN
if the parameter is less than 1 or not numeric.
Browser Support
Math.acosh()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.asinh()
Examples
let x = Math.asinh(0);
Try it Yourself 
let x = Math.asinh(1);
Try it Yourself 
Description
The
Math.asinh()
method returns the hyperbolic arc-sine of a number.
Syntax
Math.asinh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic arc-sine of the parameter.
NaN
if the parameter is not numeric.
Browser Support
Math.asinh()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.asinh()
is not supported in Internet Explorer.
JavaScript Math.min()
Example
let x = Math.min(5, 10);
Try it Yourself 
More Examples
let a = Math.min(5, 10);
let b = Math.min(0, 150, 30, 20, 38);
let c = Math.min(-5, 10);
let d = Math.min(-5, -10);
let e = Math.min(1.5, 2.5);
Try it Yourself 
Description
The
Math.min()
method returns the number with the lowest value.
Syntax
Math.min(
n1
,
n2
,...)
Parameters
Parameter
Description
n1, n2,...
Optional.
One or more numbers to compare.
Return Value
Type
Description
Number
The lowest number of the arguments.
Infinity
if no arguments are given.
NaN
if one of the arguments is not a number.
Browser Support
Math.min()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.sign()
Example 1
let x = Math.sign(3);
Try it Yourself 
Description
The
Math.sign()
method retuns whether a number is negative, positive or zero.
If the number is positive, this method returns 1.
If the number is negative, it returns -1.
If the number is zero, it returns 0.
Example 2
let x = Math.sign(-3);
Try it Yourself 
Example 3
let x = Math.sign(0);
Try it Yourself 
Browser Support
Math.sign()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.sign()
is not supported in Internet Explorer.
Syntax
Math.sign(
x
)
Parameters
Parameter
Description
x
Required. A number.
Return Value
A Number, representing the sign of the specified number:
If the number is positive, it returns 1
If the number is negative, it returns -1
If the number is positive zero, it returns 0
If the number is negative zero, it returns -0
If the number is not a number, it returns NaN
JavaScript Date setSeconds()
Example
Set the seconds to 35:
const d = new Date();
d.setSeconds(35);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setSeconds() method sets the seconds of a date object.
This method can also be used to set the milliseconds.
Browser Support
setSeconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setSeconds(
sec
,
millisec
)
Parameter Values
Parameter
Description
sec
Required. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set both the seconds and milliseconds:
const d = new Date();
d.setSeconds(35, 825);
Try it Yourself 
JavaScript Date setUTCHours()
Example
Set the hour to 15, according to UTC time:
const d = new Date();
d.setUTCHours(15);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCHours() method sets the hour of a date object, according to UTC.
It can also be used to set the minutes, seconds and milliseconds.
Browser Support
setUTCHours()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCHours(
hour
,
min
,
sec
,
millisec
)
Parameter Values
Parameter
Description
hour
Required. An integer representing the hour.
Expected values are 0-23, but other values are allowed:
-1 will result in the last hour of the previous day
24 will result in the first hour of the next day
min
Optional. An integer representing the minutes.
Expected values are 0-59, but other values are allowed:
-1 will result in the last minute of the previous hour
60 will result in the first minute of the next hour
sec
Optional. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set the time to 15:35:01 UTC time
const d = new Date();
d.setUTCHours(15, 35, 1);
Try it Yourself 
Example
Set the time to 48 hours
ago
, using UTC methods:
const d = new Date();
d.setUTCHours(d.getUTCHours() - 48);
Try it Yourself 
JavaScript Math.ceil()
Example
Math.ceil(1.4);
Try it Yourself 
let a = Math.ceil(0.60);
let b = Math.ceil(0.40);
let c = Math.ceil(5);
let d = Math.ceil(5.1);
let e = Math.ceil(-5.1);
let f = Math.ceil(-5.9);
Try it Yourself 
Description
The
Math.ceil()
method rounds a number rounded UP to the nearest integer.
Syntax
Math.ceil(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The nearest integer to the number rounding UP.
Browser Support
Math.ceil()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number EPSILON
Example
let x = Number.EPSILON;
Try it Yourself 
Description
Number.EPSILON
returns the difference between the smallest floating point number greater than 1 and 1.
Number.EPSILON
has the value of 2.220446049250313e-16.
Number.
EPSILON
EPSILON is a property of the JavaScript Number object.
You can only use it as
Number.EPSILON
.
Using x.EPSILON, where x is a variable, will return undefined:
Example
let x = 100;
x.EPSILON;
Try it Yourself 
Syntax
Number.EPSILON
Return Value
Type
Description
Number
2.220446049250313e-16
Browser Support
Number.EPSILON
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.EPSILON
is not supported in Internet Explorer.
JavaScript Number isNaN()
Examples
Check if a value is Number.NaN:
Number.isNaN(123);
Number.isNaN(-1.23);
Number.isNaN('123');
Number.isNaN(0/0);
Try it Yourself 
Number.isNaN(5-2);
Number.isNaN(0);
Number.isNaN('Hello');
Number.isNaN('2005/12/12');
Number.isNaN(' ');
Try it Yourself 
More examples below.
Description
In JavaScript,
NaN
is short for "Not-a-Number".
In JavaScript,
NaN
is a number that is not a legal number.
The
Number.isNaN()
method returns
true
if the value is
NaN
, and the type is a Number.
Difference Between isnan() and Number.isnan()
isNaN()
method returns
true
if a
value
is Not-a-Number.
Number.isNaN()
returns
true
if a
number
is Not-a-Number.
In other words:
isNaN()
converts the value to a number before testing it.
Examples
// This returns true;
isNaN('Hello');
Try it Yourself 
// This returns false;
Number.isNaN('Hello');
Try it Yourself 
Syntax
Number.isNaN(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean.
true
if the value is Number.NaN,
otherwise
false
.
More Examples
Check if a value is Number.NaN:
Number.isNaN(false);
Number.isNaN(true);
Number.isNaN(undefined);
Number.isNaN('NaN');
Number.isNaN(NaN);
Try it Yourself 
Browser Support
Number.isNaN()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.isNaN()
is not supported in Internet Explorer.
JavaScript Date setUTCMonth()
Example
Set the month to 4 (May):
const d = new Date();
d.setUTCMonth(4);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCMonth() method sets the month (from 0 to 11) of a date object, according to UTC.
Note:
January is 0, February is 1, and so on.
Browser Support
setUTCMonth()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCMonth(
month
,
day
)
Parameter Values
Parameter
Description
month
Required. An integer representing the month
Expected values are 0-11, but other values are allowed:
-1 will result in the last month of the previous year
12 will result in the first month of the next year
13 will result in the second month of the next year
day
Optional. An integer representing the day of month
Expected values are 1-31, but other values are allowed:
0 will result in the last hour of the previous month
-1 will result in the hour before the last hour of the previous month
If the month has 31 days:
32 will result in the first day of the next month
If the month has 30 days:
32 will result in the second day of the next month
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set the month to 4 (May) and the day to the 20th:
const d = new Date();
d.setUTCMonth(4, 20);
Try it Yourself 
Example
Set the date to be the last day of last month:
const d = new Date();
d.setUTCMonth(d.getUTCMonth(), 0);
Try it Yourself 
JavaScript Date setUTCMinutes()
Example
Set the minutes to 17, according to UTC time:
const d = new Date();
d.setUTCMinutes(17);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCMinutes() method sets the minutes of a date object, according to UTC.
Browser Support
setUTCMinutes()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCMinutes(
min
,
sec
,
millisec
)
Parameter Values
Parameter
Description
min
Required. An integer representing the minutes.
Expected values are 0-59, but other values are allowed:
-1 will result in the last minute of the previous hour
60 will result in the first minute of the next hour
sec
Optional. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A number.
Number of milliseconds between the date and January 1, 1970 00:00:00 UTC.
More Examples
Example
Set the date time to be 90 minutes
ago
, using UTC methods:
const d = new Date();
d.setUTCMinutes(d.getUTCMinutes() - 90);
Try it Yourself 
JavaScript Date setUTCSeconds()
Example
Set the seconds to 35, according to UTC time:
const d = new Date();
d.setUTCSeconds(35);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The setUTCSeconds() method sets the seconds of a date object, according to UTC.
It can also be used to set the milliseconds.
Browser Support
setUTCSeconds()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.setUTCSeconds(
sec
,
millisec
)
Parameter Values
Parameter
Description
sec
Required. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the date object and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Set both the seconds and milliseconds, according to UTC:
const d = new Date();
d.setUTCSeconds(35, 825);
Try it Yourself 
JavaScript Date toJSON()
Example
Get a date as a string, formatted as a JSON date:
const d = new Date();
let text = d.toJSON();
Try it Yourself 
Description
The toJSON() method returns a date object as a string, formatted as a JSON date.
JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ
Browser Support
toJSON()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
Syntax
Date
.toJSON()
Parameters
None
Technical Details
Return Value:
A String, representing the date and time formated as a JSON date
JavaScript Version:
ECMAScript 5
JavaScript Date toString()
Example
Convert a date object to a string:
const d = new Date();
let text = d.toString();
Try it Yourself 
Description
The
toString()
method returns a date object as a string.
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toString()
Parameters
NONE
Return Value
Date and time represented as a string
JavaScript Date toTimeString()
Example
Get the time portion of a date object as a string:
const d = new Date();
let text = d.toTimeString();
Try it Yourself 
Description
The toTimeString() method returns the time portion of a date object as a string.
Browser Support
toTimeString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date
.toTimeString()
Parameters
None
Technical Details
Return Value:
A String, representing the time as a string
JavaScript Date.UTC()
Example
Get the number of milliseconds between a date and January 1, 1970:
let ms = Date.UTC(2020, 02, 30);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The Date.UTC() method returns the number of milliseconds between a specified date and midnight of January 1, 1970, according to UTC.
Browser Support
Date.UTC()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Date.UTC(
year
,
month
,
day
,
hours
,
minutes
,
seconds
,
millisec
)
Parameter Values
Parameter
Description
year
Required. A four-digit value representing the year, negative values are allowed
month
Required. An integer representing the month
Expected values are 0-11, but other values are allowed:
-1 will result in the last month of the previous year
12 will result in the first month of the next year
13 will result in the second month of the next year
day
Optional. An integer representing the day of month
Expected values are 1-31, but other values are allowed:
0 will result in the last hour of the previous month
-1 will result in the hour before the last hour of the previous month
If the month has 31 days:
32 will result in the first day of the next month
If the month has 30 days:
32 will result in the second day of the next month
hour
Optional. Default 0. An integer representing the hour.
Expected values are 0-23, but other values are allowed:
-1 will result in the last hour of the previous day
24 will result in the first hour of the next day
min
Optional. Default 0. An integer representing the minutes.
Expected values are 0-59, but other values are allowed:
-1 will result in the last minute of the previous hour
60 will result in the first minute of the next hour
sec
Optional. Default 0. An integer representing the seconds
Expected values are 0-59, but other values are allowed:
-1 will result in the last second of the previous minute
60 will result in the first second of the next minute
millisec
Optional. Default 0. An integer representing the milliseconds
Expected values are 0-999, but other values are allowed:
-1 will result in the last millisecond of the previous second
1000 will result in the first millisecond of the next second
Technical Details
Return Value:
A Number, representing the number of milliseconds between the specified date-time and midnight January 1 1970
JavaScript Version:
ECMAScript 1
More Examples
Example
Create a date object using UTC time instead of local time:
let d = new Date(Date.UTC(2020, 02, 30));
Try it Yourself 
JavaScript Error name
Example
Return the error name:
try {
adddlert("Welcome guest!");
}
catch(err) {
document.getElementById("demo").innerHTML = err.name;
}
Try it Yourself 
Description
The
name
property sets or returns the name of an error.
Six different values can be returned by the error name property:
Error Name
Description
Try it
EvalError
Deprecated - use SyntaxError instead
RangeError
A number "out of range" has occurred
Try it 
ReferenceError
An illegal reference has occurred
Try it 
SyntaxError
A syntax error has occurred
Try it 
TypeError
A type error has occurred
Try it 
URIError
An error in encodeURI() has occurred
Try it 
Syntax
errorObj
.name
Return Value
Type
Description
A string
The name of the error.
Browser Support
error.name
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Related Pages
JavaScript Tutorial:
JavaScript Errors
JavaScript Reference:
The message property
JavaScript NaN
Description
In JavaScript,
NaN
is short for "Not-a-Number".
In JavaScript,
NaN
is a number that is not a legal number.
The Global
NaN
property is the same as the
Number.NaN
property.
Syntax
NaN
Return Value
NaN
Browser Support
NaN
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript escape()
Description
The escape() function is deprecated.
Use
encodeURI()
or
encodeURIComponent()
instead.
JavaScript decodeURIComponent()
Example
Decode a URI after encoding it:
let uri = "https://w3schools.com/my test.asp?name=stle&car=saab";
let encoded = encodeURIComponent(uri);
let decoded = decodeURIComponent(encoded);
Try it Yourself 
Description
The
decodeURIComponent()
method
decodes
a URI component.
Syntax
decodeURIComponent(
uri
)
Parameters
Parameter
Description
uri
Required.
The URI to be decoded.
Return Value
Type
Description
A string
The decoded URI.
Browser Support
decodeURIComponent()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript isNaN()
Example
Check if a value is NaN:
isNaN(123);
isNaN(-1.23);
isNaN(5-2);
isNaN(0);
Try it Yourself 
isNaN('123');
isNaN('Hello');
isNaN('2005/12/12');
Try it Yourself 
More examples below.
Description
In JavaScript
NaN
is short for "Not-a-Number".
The
isNaN()
method returns true if a value is NaN.
The
isNaN()
method converts the value to a number before testing it.
Difference Between isnan() and Number.isnan()
isNaN()
method returns
true
if a
value
is Not-a-Number.
Number.isNaN()
returns
true
if a
number
is Not-a-Number.
In other words:
isNaN()
converts the value to a number before testing it.
Examples
// This returns true;
isNaN('Hello');
Try it Yourself 
// This returns false;
Number.isNaN('Hello');
Try it Yourself 
Syntax
isNaN(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean
true
if the value is NaN, otherwise
false
.
More Examples
Check if a value is NaN:
isNaN(0/0);
isNaN('');
isNaN('A');
isNaN(true);
isNaN(false);
Try it Yourself 
isNaN('NaN');
isNaN(NaN);
isNaN(undefined);
isNaN(null);
Try it Yourself 
Browser Support
isNaN()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.max()
Example
let x = Math.max(5, 10);
Try it Yourself 
More Examples
let a = Math.max(5, 10);
let b = Math.max(0, 150, 30, 20, 38);
let c = Math.max(-5, 10);
let d = Math.max(-5, -10);
let e = Math.max(1.5, 2.5);
Try it Yourself 
Description
The
Math.max()
method returns the number with the highest value.
Syntax
Math.max(
n1
,
n2
,...)
Parameters
Parameter
Description
n1, n2,...
Optional.
One or more numbers to compare.
Return Value
Type
Description
Number
The highest number of the arguments.
-Infinity
if no arguments are given.
NaN
if one of the arguments is not a number.
Browser Support
Math.max()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.PI
Example
let x = Math.PI;
Try it Yourself 
Description
Math.PI returns PI (the ratio of a circle's area to the square of its radius, approximately 3.14)
Browser Support
Math.PI
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Math.PI
Return Value
A number representing PI.
JavaScript Math.pow()
Example
let x = Math.pow(4, 3);
Try it Yourself 
Description
The Math.pow() method returns the value of x to the power of y (x
y
).
More Examples
let a = Math.pow(0, 1);
let b = Math.pow(1, 1);
let c = Math.pow(1, 10);
let d = Math.pow(3, 3);
let e = Math.pow(-3, 3);
let f = Math.pow(2, 4);
Try it Yourself 
Browser Support
Math.pow()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
Math.pow(
x
,
y
)
Parameters
Parameter
Description
x
Required. The base
y
Required. The exponent
Return Value
A number representing the value of x to the power of y (x
y
).
JavaScript Math.round()
Examples
let x = Math.round(2.5);
Try it Yourself 
let a = Math.round(2.60);
let b = Math.round(2.50);
let c = Math.round(2.49);
let d = Math.round(-2.60);
let e = Math.round(-2.50);
let f = Math.round(-2.49);
Try it Yourself 
Description
The
Math.round()
method rounds a number to the nearest integer.
2.49 will be rounded down (2), and 2.5 will be rounded up 
(3).
Syntax
Math.round(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The number rounded to the nearest integer.
Browser Support
Math.round()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number NaN
Examples
let x = Number.NaN;
Try it Yourself 
let x = NaN;
Try it Yourself 
Description
In JavaScript,
NaN
is short for "Not-a-Number".
In JavaScript,
NaN
is a number that is not a legal number.
The Global
NaN
property is the same as the
Number.Nan
property.
Syntax
Number.NaN
Browser Support
Number.NaN
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript MIN_SAFE_INTEGER
Example
let x = Number.MIN_SAFE_INTEGER;
Try it Yourself 
Description
Number.MIN_SAFE_INTEGER
represents the minimum safe integer in JavaScript.
Number.MIN_SAFE_INTEGER
is -(2
53
- 1).
Number.
MIN_SAFE_INTEGER
MIN_SAFE_INTEGER is a property of the JavaScript Number object.
You can only use it as
Number.MIN_SAFE_INTEGER
.
Using x.MIN_VALUE, where x is a variable, will return undefined:
Example
let x = 100;
x.MIN_SAFE_INTEGER;
Try it Yourself 
Syntax
Number.MIN_SAFE_INTEGER
Return Value
Type
Description
Number
-9007199254740991
Browser Support
Number.MIN_SAFE_INTEGER
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.MIN_SAFE_INTEGER
is not supported in Internet Explorer.
JavaScript Number MIN_VALUE
Example
let x = Number.MIN_VALUE;
Try it Yourself 
Description
Number.MIN_VALUE
returns the smallest number possible in JavaScript.
Number.MIN_VALUE
has a value of 5e-324.
Number.
MIN_VALUE
MIN_VALUE is a property of the JavaScript Number object.
You can only use it as Number.MIN_VALUE.
Using x.MIN_VALUE, where x is a variable, will return undefined:
Example
let x = 100;
x.MIN_VALUE;
Try it Yourself 
Syntax
Number.MIN_VALUE
Return Value
Type
Description
Number
5e-324
Browser Support
Number.MIN_VALUE
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number prototype
Example
Create a new number method that returns a number's half value:
Number.prototype.myMethod = function()
{
return this.valueOf() / 2;
};
Use the new method on a number:
let n = 55;
let x = n.myMethod();
Try it Yourself 
Description
prototype
allows you to add new properties and methods to numbers.
prototype
is a property available with all JavaScript objects.
Syntax
Number.prototype.
name
=
value
Warning
You are not advised to change the prototype of an object that you do not control.
You should not change the prototype of built in JavaScript datatypes like:
Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.
The prototype Property
The JavaScript
prototype
property allows you to add new properties to objects:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
Browser Support
Number.prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number toExponential()
Example 1
Convert a number into an exponential notation:
let num = 5.56789;
let n = num.toExponential();
Try it Yourself 
Description
The toExponential() method converts a number into an exponential notation.
Example 2
let num = 5.56789;
let n = num.toExponential(3);
Try it Yourself 
Syntax
number
.toExponential(
x
)
Parameters
Parameter
Description
x
Optional. An integer between 0 and 20 representing the number of digits in the notation after the decimal point. If omitted, it is set to as many digits as necessary to represent the value
Return Value
A String, representing the number as an exponential notation.
Browser Support
toExponential()
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object.create()
Example
// Create an Object:
const person = {
firstName: "John",
lastName: "Doe"
};
// Create new Object
const man = Object.create(person);
man.firstName = "Peter";
Try it Yourself 
Description
The
Object.create()
creates an object from an existing object.
Syntax
Object.create(
object, properties
)
Parameters
Parameter
Description
object
Required.
An existing object.
properties
Optional.
A descriptor of properties to be added or changed:
value:
value
writable : true|false
enumerable : true|false
configurable : true|false
get :
function
set :
function
Return Value
Type
Description
Object
The created object.
Browser Support
Object.create()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Number toString()
Examples
Convert a number to a string:
let num = 15;
let text = num.toString();
Try it Yourself 
Convert a number to a string, using base 2 (binary):
let num = 15;
let text = num.toString(2);
Try it Yourself 
Description
The
toString()
returns a number as a string.
Syntax
number
.toString(
radix
)
Parameters
Parameter
Description
radix
Optional.
The base to use.
Must be an integer between 2 and 36.
Base 2 is binary
Base 8 is octal
Base 16 is hexadecimal.
Return Value
Type
Description
A string
The number as a string.
More Examples
Convert a number to a string, using base 8 (Octal):
let num = 15;
let text = num.toString(8);
Try it Yourself 
Convert a number to a string, using base 16 (Hexadecimal):
let num = 15;
let text = num.toString(16);
Try it Yourself 
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object constructor
Example
Get the object constructor:
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
let text = person.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the Object prototype.
For JavaScript objects the
constructor
property returns:
function Object() { [native code] }
Syntax
object
.constructor
Return Value
function Object() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number toLocaleString()
Examples
Format a number into a string, using locale settings:
let num = 1000000;
let text = num.toLocaleString();
Try it Yourself 
Format a number into a string, using the locale specific of FINLAND:
let num = 1000000;
let text = num.toLocaleString("fi-FI");
Try it Yourself 
Format a number into a currency string, using the locale specific of USA:
let num = 1000000;
let text = num.toLocaleString("en-US", {style:"currency", currency:"USD"});
Try it Yourself 
More examples below
Description
The
toLocaleString()
returns a number as a string, using local language format.
The language format depends on the locale setup on your computer.
Syntax
number
.toLocaleString(
locales
,
options
)
Parameters
Parameter
Description
locales
Try it
Optional.
The language specific format to use.
Click on the "Try 
    it" button to see all values in action.
ar-SA
Arabic (Saudi Arabia)
bn-BD
Bangla (Bangladesh)
bn-IN
Bangla (India)
cs-CZ
Czech (Czech Republic)
da-DK
Danish (Denmark)
de-AT
Austrian German
de-CH
"Swiss" German
de-DE
Standard German (as spoken in Germany)
el-GR
Modern Greek
en-AU
Australian English
en-CA
Canadian English
en-GB
British English
en-IE
Irish English
en-IN
Indian English
en-NZ
New Zealand English
en-US
US English
en-ZA
English (South Africa)
es-AR
Argentine Spanish
es-CL
Chilean Spanish
es-CO
Colombian Spanish
es-ES
Castilian Spanish (as spoken in Central-Northern Spain)
es-MX
Mexican Spanish
es-US
American Spanish
fi-FI
Finnish (Finland)
fr-BE
Belgian French
fr-CA
Canadian French
fr-CH
"Swiss" French
fr-FR
Standard French (especially in France)
he-IL
Hebrew (Israel)
hi-IN
Hindi (India)
hu-HU
Hungarian (Hungary)
id-ID
Indonesian (Indonesia)
it-CH
"Swiss" Italian
it-IT
Standard Italian (as spoken in Italy)
ja-JP
Japanese (Japan)
ko-KR
Korean (Republic of Korea)
nl-BE
Belgian Dutch
nl-NL
Standard Dutch (as spoken in The Netherlands)
no-NO
Norwegian (Norway)
pl-PL
Polish (Poland)
pt-BR
Brazilian Portuguese
pt-PT
European Portuguese (as written and spoken in Portugal)
ro-RO
Romanian (Romania)
ru-RU
Russian (Russian Federation)
sk-SK
Slovak (Slovakia)
sv-SE
Swedish (Sweden)
ta-IN
Indian Tamil
ta-LK
Sri Lankan Tamil
th-TH
Thai (Thailand)
tr-TR
Turkish (Turkey)
zh-CN
Mainland China, simplified characters
zh-HK
Hong Kong, traditional characters
zh-TW
Taiwan, traditional characters
options
Optional.
An object with formatting options:
currency
Legal values: any currency code (like "EUR", "USD", "INR", etc.)
currencyDisplay
Legal values:
"symbol"
(default)
"code"
"name"
localeMatcher
Legal values:
"best-fit"
(default)
"lookup"
maximumFractionDigits
A number from 0 to 20 (default is 3)
maximumSignificantDigits
A number from 1 to 21 (default is 21)
minimumFractionDigits
A number from 0 to 20 (default is 3)
minimumIntegerDigits
A number from 1 to 21 (default is 1)
minimumSignificantDigits
A number from 1 to 21 (default is 21)
style
Legal values:
"currency"
"decimal"
(default)
"percent"
useGrouping
Legal values:
"true"
(default)
"false"
Return Value
Type
Description
A string
A string representing a number the local format.
More Examples
Use the options parameter (object) for currency formatting:
let num = new Number(1000000);
const myObj = {
style: "currency",
currency: "EUR"
}
let text = num.toLocaleString("en-GB", myObj);
Try it Yourself 
let num = new Number(1000000);
let text = num.toLocaleString("en-GB", {style:"currency", currency:"EUR"});
Try it Yourself 
Using the locale specific of JAPAN:
let num = 1000000;
let text = num.toLocaleString("ja-JP", {style:"currency", currency:"JPY"});
Try it Yourself 
Browser Support
toLocaleString()
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Browser Support
(locales, options)
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
JavaScript Number toPrecision()
Example
Format a number to a specified length:
let num = 13.3714;
let n = num.toPrecision(2);
Try it Yourself 
Format a small number:
let num = 0.001658853;
num.toPrecision(2);
num.toPrecision(3);
num.toPrecision(10);
Try it Yourself 
More examples below.
Description
The
toPrecision()
method formats a number to a specified length.
A decimal point and nulls are added (if needed), to create the specified length.
Syntax
number
.toPrecision(x)
Parameters
Parameter
Description
x
Optional.
The number of digits.
If omitted, the number is returned without any formatting.
Return Value
Type
Description
A string
The number formatted to the specified precision.
More Examples
Format a number to a specified length:
let num = 13.3714;
num.toPrecision(2);
num.toPrecision(3);
num.toPrecision(10);
Try it Yourself 
No formatting:
let num = 13.3714;
num.toPrecision();
Try it Yourself 
Browser Support
toPrecision()
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object.assign()
Example
// Create Target Object
const person1 = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Create Source Object
const person2 = {firstName: "Anne",lastName: "Smith"};
// Assign Source to Target
Object.assign(person1, person2);
Try it Yourself 
Description
The
Object.assign()
method copies properties from
one or more source objects to a target object.
Syntax
Object.assign(
target, source(s)
)
Parameters
Parameter
Description
target
Required.
An existing object.
source
Required.
One or more sources.
Return Value
Type
Description
Object
The target object.
Browser Support
Object.assign()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Object.assign()
is not supported in Internet Explorer.
JavaScript undefined
Examples
Variable with no value:
let x;
if (x === undefined) {
text = "x is undefined";
} else {
text = "x is defined";
}
Try it Yourself 
let x;
if (typeof x === "undefined") {
text = "x is undefined";
} else {
text = "x is defined";
}
Try it Yourself 
More examples below.
Description
The undefined property indicates that a variable has not been assigned a value, 
or not declared at all.
Browser Support
undefined()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Variable not declared:
if (typeof y === "undefined") {
txt = "y is undefined";
} else {
txt = "y is defined";
}
Try it Yourself 
JavaScript Map clear()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Clear fruits
fruits.clear();
Try it Yourself 
Description
The
clear()
method removes all the elements from a map.
Syntax
map
.clear()
Parameters
NONE
Return Value
NONE
Browser Support
map.clear()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.clear()
is not supported in Internet Explorer.
JavaScript Map delete()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Delete an Element
fruits.delete("apples");
Try it Yourself 
Description
The
delete()
method deletes an element from a map.
Syntax
map
.delete(
key
)
Parameters
Parameter
Description
key
Required.
The key of the element to delete.
Return Value
Type
Description
Boolean
true
if the element existed, otherwise
false
.
Browser Support
map.delete()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.delete()
is not supported in Internet Explorer.
JavaScript Map forEach()
Map.forEach()
The
forEach()
method invokes a callback for each key/value pair in a Map:
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// List all Entries
let text = "";
fruits.forEach (function(value, key) {
text += key + ' = ' + value;
})
Try it Yourself 
Description
The
forEach()
method invokes a function for each map element:
The
forEach()
method does not change the original map.
Syntax
map
.forEach(
callback
)
Parameters
Parameter
Description
callback
Required.
A function to execute for each element.
Return Value
NONE
Browser Support
set.forEach()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.forEach()
is not supported in Internet Explorer.
JavaScript Map keys()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// List all Keys
let text = "";
for (const x of fruits.keys()) {
text += x;
}
Try it Yourself 
More Examples Below !
Description
The
keys()
method returns an iterator object with the keys in a map:
The
keys()
method does not change the original met.
Syntax
map
.keys()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the keys of the map.
Objects as Keys
Example
// Create Objects
const apples = {name: 'Apples'};
const bananas = {name: 'Bananas'};
const oranges = {name: 'Oranges'};
// Create a Map
const fruits = new Map();
// Add new Elements to the Map
fruits.set(apples, 500);
fruits.set(bananas, 300);
fruits.set(oranges, 200);
Try it Yourself 
Remember: The key is an object (apples), not a string ("apples"):
Example
fruits.get("apples");// Returns undefined
Try it Yourself 
Browser Support
map.keys()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.keys()
is not supported in Internet Explorer.
JavaScript Map has()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Does the map has apples?
fruits.has("apples");
Try it Yourself 
Try This:
fruits.delete("apples");
fruits.has("apples");
Try it Yourself 
Description
The
has()
method returns true if a key exists in a map.
Syntax
map
.has(
value
)
Parameters
Parameter
Description
value
Required.
The key to test for.
Return Value
Type
Description
Boolean
true
if the key exists, otherwise
false
.
Browser Support
map.has()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.has()
is not supported in Internet Explorer.
JavaScript Math.sqrt()
Examples
let x = Math.sqrt(9);
Try it Yourself 
let a = Math.sqrt(0);
let b = Math.sqrt(1);
let c = Math.sqrt(9);
let d = Math.sqrt(64);
let e = Math.sqrt(-9);
Try it Yourself 
Description
The
Math.sqrt()
method returns the square root of a number.
Syntax
Math.sqrt(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The square root of the number.
NaN
if the number negative.
Browser Support
Math.
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript
Number Reference
JavaScript Numbers
JavaScript has only one type of number.
Numbers can be written with, or without, decimals:
Example
let x = 3.14; // A number with decimals
let y = 34; // A number without decimals
Try it Yourself 
Extra large or extra small numbers can be written with scientific (exponent) notation:
Example
let x = 123e5; // 12300000
let y = 123e-5; // 0.00123
Try it Yourself 
For a tutorial about JavaScript numbers, read our
JavaScript Number Tutorial
.
JavaScript Number Methods and Properties
Name
Description
constructor
Returns the function that created JavaScript's Number prototype
EPSILON
Returns the difference between 1 and the smallest number greater than 1
isFinite()
Checks whether a value is a finite number
isInteger()
Checks whether a value is an integer
isNaN()
Checks whether a value is Number.NaN
isSafeInteger()
Checks whether a value is a safe integer
MAX_SAFE_INTEGER
Returns the maximum safe integer in JavaScript.
MIN_SAFE_INTEGER
Returns the minimum safe integer in JavaScript
MAX_VALUE
Returns the largest number possible in JavaScript
MIN_VALUE
Returns the smallest number possible in JavaScript
NaN
Represents a "Not-a-Number" value
NEGATIVE_INFINITY
Represents negative infinity (returned on overflow)
POSITIVE_INFINITY
Represents infinity (returned on overflow)
parseFloat()
Parses a string an returns a number
parseInt()
Parses a string an returns a whole number
prototype
Allows you to add properties and methods to an object
toExponential(x)
Converts a number into an exponential notation
toFixed(x)
Formats a number with x numbers of digits after the decimal point
toLocaleString()
Converts a number into a string, based on the locale settings
toPrecision(x)
Formats a number to x length
toString()
Converts a number to a string
valueOf()
Returns the primitive value of a number
JavaScript Number constructor
Example
let num = 134.5;
let text = num.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the Number prototype.
For JavaScript numbers the
constructor
property returns:
function Number() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
number
.constructor
Return Value
function Number() { [native code] }
JavaScript Number isInteger()
Examples
Are these integers?
Number.isInteger(123);
Number.isInteger(-123);
Number.isInteger('123');
Try it Yourself 
Number.isInteger(4-2);
Number.isInteger(4/2);
Number.isInteger(5-2);
Number.isInteger(5/2);
Try it Yourself 
More examples below
Description
The
Number.isInteger()
method returns
true
if a value is an integer of the datatype Number.
Otherwise it returns
false
.
Syntax
Number.isInteger(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean
true
if the value is an integer of the datatype Number.
Otherwise
false
.
More Examples
Are these integers?
Number.isInteger(0);
Number.isInteger(0/0);
Number.isInteger(0.5);
Number.isInteger(false);
Number.isInteger(NaN);
Number.isInteger(Infinity);
Number.isInteger(-Infinity);
Try it Yourself 
Browser Support
Number.isInteger()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.isInteger()
is not supported in Internet Explorer.
JavaScript Object.entries()
Examples
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.entries(person);
Try it Yourself 
Object.entries() makes it simpler to use objects in loops:
const fruits = {Bananas:300, Oranges:200, Apples:500};
let text = "";
for (let [fruit, value] of Object.entries(fruits)) {
text += fruit + ": " + value + "<br>";
}
Try it Yourself 
More examples below.
Description
The
Object.entries()
method returns an array of the key/value pairs of an object.
The
Object.entries()
method does not change the original object.
Syntax
Object.values(
object
)
Parameters
Parameter
Description
object
Optional.
An object.
Return Value
Type
Description
Array
An iterable array of the object's key/value pairs.
More Examples
Object.entries()
makes it simpler to convert objects to maps:
Example
const fruits = {Bananas:300, Oranges:200, Apples:500};
const myMap = new Map(Object.entries(fruits));
Try it Yourself 
Browser Support
ECMAScript 2017 added the
Object.entries()
method to objects.
Object.entries()
is supported in all modern browsers since March 2017:
Chrome 47
Edge 14
Firefox 47
Safari 10.1
Opera 41
Jun 2016
Aug 2016
Jun 2016
Mar 2017
Oct 2016
JavaScript Object.freeze()
Example
"use strict"
// Create Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Freeze Object
Object.freeze(person)
// This will throw an error
person.age = 51;
Try it Yourself 
More Examples Below !
Description
The
Object.freeze()
method prevents any changes to an object.
The
Object.freeze()
method will fail silently in non-strict mode.
The
Object.freeze()
method will throw a TypeError in strict mode.
Frozen objects are read-only. No modification, addition or deletion of properties are allowed.
The
Object.isFrozen()
method can be used to check if an object is frozen.
Syntax
Object.freeze(
object
)
Parameters
Parameter
Description
object
Required.
The object to freeze.
Return Value
Type
Description
Object
The frozen object.
More Examples
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.freeze(fruits);
// This will trow an error:
fruits.push("Kiwi");
Try it Yourself 
Browser Support
Object.freeze()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object.fromEntries()
Example
const fruits = [
["apples", 300],
["pears", 900],
["bananas", 500]
];
const myObj = Object.fromEntries(fruits);
Try it Yourself 
Description
The
fromEntries()
method creates an object from
a list of key/value pairs.
Syntax
Object.fromEntries(
iterable
)
Parameters
Parameter
Description
iterable
Optional.
An iterable array or map.
Return Value
Type
Description
Object
The object created from the key/value pairs.
Browser Support
ES2019 added the Object method
fromEntries()
to JavaScript.
JavaScript Object
fromEntries()
is supported in all modern browsers since January 2020:
Chrome 73
Edge 79
Firefox 63
Safari 12.1
Opera 60
Mar 2019
Jan 2020
Oct 2018
Mar 2019
Apr 2019
JavaScript Map set()
Map.set()
You can add elements to a Map with the
set()
method:
Example
// Create a Map
const fruits = new Map();
// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);
Try it Yourself 
The
set()
method can also be used to change existing Map values:
Example
fruits.set("apples", 500);
Try it Yourself 
Description
The
set()
method adds an element to a map.
The
set()
method updates an element in a map.
Syntax
map
.set(
key, value
)
Parameters
Parameter
Description
key
Required.
The element key.
value
Required.
The element value.
Return Value
Type
Description
Map
The map object.
Browser Support
map.set()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.set()
is not supported in Internet Explorer.
JavaScript Map values()
Map.values()
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// List all values
let text = "";
for (const x of fruits.values()) {
text += x;
}
Try it Yourself 
More Examples Below !
Description
The
values()
method returns an iterator object with the values in a map.
The
values()
method does not change the original map.
Syntax
map
.values()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the values of the map.
More Examples
Use the
values()
method to sum the values in a Map:
Example
// Create a Map
const fruits = new Map([
["apples", 500],
["bananas", 300],
["oranges", 200]
]);
// Sum all Values
let total = 0;
for (const x of fruits.values()) {
total += x;
}
Try it Yourself 
Browser Support
map.values()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
map.values()
is not supported in Internet Explorer.
JavaScript Math.acos()
Examples
let x = Math.acos(-1);
Try it Yourself 
let x = Math.acos(0);
Try it Yourself 
let x = Math.acos(1);
Try it Yourself 
Description
The
Math.acos()
method returns the arccosine (in radians) of a number.
The
Math.acos()
method returns a value value between 0 and PI.
The
Math.acos()
method expects a parameter in the range -1 to 1.
Math.acos(-1)
returns PI.
Math.acos(0)
returns PI/2.
Math.acos(1)
returns 0.
Syntax
Math.acos(
x
)
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
0 to PI.
NaN
if the parameter is outside the range of -1 to 1 or not numeric.
Browser Support
Math.acos()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript MAX_SAFE_INTEGER
Example
let x = Number.MAX_SAFE_INTEGER;
Try it Yourself 
Description
Number.MAX_SAFE_INTEGER
represents the maximum safe integer in JavaScript.
Number.MAX_SAFE_INTEGER
is (2
53
- 1).
Number.
MAX_SAFE_INTEGER
MAX_SAFE_INTEGER is a property of the JavaScript Number object.
You can only use it as
Number.MAX_SAFE_INTEGER
.
Using x.MAX_VALUE, where x is a variable, will return undefined:
Example
let x = 100;
x.MAX_SAFE_INTEGER;
Try it Yourself 
Syntax
Number.MAX_SAFE_INTEGER
Return Value
Type
Description
Number
9007199254740991
Browser Support
Number.MAX_SAFE_INTEGER
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.MAX_SAFE_INTEGER
is not supported in Internet Explorer.
JavaScript Number MAX_VALUE
Example
let x = Number.MAX_VALUE;
Try it Yourself 
Description
Number.MAX_VALUE
returns the largest number possible in JavaScript.
Number.MAX_VALUE
has the value of 1.7976931348623157e+308.
Number.
MAX_VALUE
MAX_VALUE is a property of the JavaScript Number object.
You can only use it as
Number.MAX_VALUE
.
Using x.MAX_VALUE, where x is a variable, will return undefined:
Example
let x = 100;
x.MAX_VALUE;
Try it Yourself 
Syntax
Number.MAX_VALUE
Return Value
Type
Description
Number
1.7976931348623157e+308
Browser Support
Number.MAX_VALUE
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number toFixed()
Examples
let num = 5.56789;
let n = num.toFixed();
Try it Yourself 
let num = 5.56789;
let n = num.toFixed(2);
Try it Yourself 
More examples below
Description
The
toFixed()
method converts a number to a string.
The
toFixed()
method rounds the string to a specified number of decimals.
Syntax
number
.toFixed(
x
)
Parameters
Parameter
Description
x
Optional.
Number of decimals.
Default is 0 (no decimals)
Return Value
Type
Description
A string
The representation of a number with (or without) decimals.
More Examples
Round to 10 decimals
let num = 5.56789;
let n = num.toFixed(10);
Try it Yourself 
Browser Support
toFixed()
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object Reference
JavaScript Objects
Objects are one of JavaScript's data types.
Objects are used to store key/value (name/value) collections.
The following example creates a JavaScript object with four key/value properties:
Example
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
Try it Yourself 
For a tutorial about objects, read our
JavaScript Object Tutorial
.
JavaScript Object Methods and Properties
Name
Description
assign()
Copies properties from a source object to a target object
constructor
Returns the function that created an object's prototype
create()
Returns an object created from an existing object
defineProperties()
Adds or changes properties
defineProperty()
Adds or changes a property
entries()
Returns an array of the key/value pairs of an object
freeze()
Prevents any changes to an object
fromEntries()
Returns an object created from an iterable list of key/value pairs
getOwnPropertyDescriptor()
Returns an array of the keys of an object
getOwnPropertyDescriptors()
Returns an array of the keys of an object
getOwnPropertyNames()
Returns an array of the keys of an object
groupBy()
Groups object elements according to returned callback values
isExtensible()
Returns true if an object is extensible
isFrozen()
Returns true if an object is frozen
isSealed()
Returns true if an object is sealed
keys()
Returns an array of the keys of an object
preventExtensions()
Prevents adding new properties to an object
prototype
Let you to add properties and methods to JavaScript objects
seal()
Prevents adding new or deleting existing object properties
toString()
Converts an object to a string and returns the result
valueOf()
Returns the primitive value of an object
values()
Returns an array of the property values of an object
JavaScript Array at()
Examples
Get the third element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.at(2);
Try it Yourself 
Get the third element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[2];
Try it Yourself 
More examples below.
Description
The
at()
method returns an indexed element from an array.
The
at()
method returns the same as
[]
.
The
at()
method is supported in all modern browsers since March 2022:
Syntax
array
.at(
index
)
Parameters
Parameter
Description
index
Optional.
The index (position) of the array element to be returned.
Default is 0.
-1 returns the last element.
Return Value
Type
Description
Element
The element of the given position (index) in the array.
Browser Support
JavaScript Array
at()
is supported in all browsers since March 2022:
Chrome 92
Edge 92
Firefox 90
Safari 15.4
Opera 78
Apr 2021
Jul 2021
Jul 2021
Mar 2022
Aug 2021
More Examples
Get the first element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.at();
Try it Yourself 
Get the last element of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.at(-1);
Try it Yourself 
JavaScript new Array()
Example
// Create an Array
const cars = new Array(["Saab", "Volvo", "BMW"]);
Try it Yourself 
More Examples Below !
Description
The
new Array()
constructor creates an Array object.
Syntax
new Array(
iterable
)
Parameters
Parameter
Description
iterable
Required.
An iterable object with values.
Return Value
Type
Description
Array
A new Array object.
More Examples
Example
Create an empty array and add values:
// Create an Array
const cars = new Array();
// Add Values to the Set
cars.push("Saab");
cars.push("Volvo");
cars.push("BMW");
Try it Yourself 
Example
Create an array without the new Array() method:
// Create an Array
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
Browser Support
new Array()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array fill()
Examples
Fill all the elements with a value:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Kiwi");
Try it Yourself 
Fill the last two elements:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Kiwi", 2, 4);
Try it Yourself 
Description
The
fill()
method fills specified elements in an array with a value.
The
fill()
method overwrites the original array.
Start and end position can be specified. If not, all elements will be filled.
Syntax
array
.fill(
value, start, end
)
Parameters
Parameter
Description
value
Required.
The value to fill in.
start
Optional.
The start index (position).
Default is 0.
end
Optional.
The stop index (position).
Default is array length.
Return Value
Type
Description
Array
The filled array.
Browser Support
fill()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
fill()
is not supported in Internet Explorer.
JavaScript Array findIndex()
Example 1
Find the first element with a value over 18:
const ages = [3, 10, 18, 20];
ages.findIndex(checkAge);
function checkAge(age) {
return age > 18;
}
Try it Yourself 
Description
The
findIndex()
method executes a function for each array element.
The
findIndex()
method returns the index (position) of the first element that passes a test.
The
findIndex()
method returns -1 if no match is found.
The
findIndex()
method does not execute the function for empty array elements.
The
findIndex()
method does not change the original array.
Syntax
array
.findIndex(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
Type
Description
Number
The index of the first element that passes the test.
Otherwise -1.
More Examples
Find the first element with a value above an input value:
<p><input type="number" id="toCheck" value="18"></p>
<button onclick="myFunction()">Test</button>
<p>Any values above: <span id="demo"></span></p>
<script>
const numbers = [4, 12, 16, 20];
function checkValue(x) {
return x > document.getElementById("toCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = numbers.findIndex(checkValue);
}
</script>
Try it Yourself 
Browser Support
findIndex()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
findIndex()
is not supported in Internet Explorer.
JavaScript Array entries()
Example
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Create an Iterator
const list = fruits.entries();
// List the Entries
let text = "";
for (let x of list) {
text += x;
}
Try it Yourself 
More Examples Below!
Description
The
entries()
method returns an Iterator object with the key/value pairs from an array:
[0, "Banana"]
[1, "Orange"]
[2, "Apple"]
[3, "Mango"]
The
entries()
method does not change the original array.
Syntax
array
.entries()
Parameters
NONE
Return Value
Type
Description
Iterable
An Iterable object with the key/value pairs from the array.
More Examples
Example
Iterate directly over the Iterator:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Entries
let text = "";
for (let x of fruits.entries()) {
text += x;
}
Try it Yourself 
Example
Use the built in Object.entries() method:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// List the Entries
let text = "";
for (let x of Object.entries(fruits)) {
text += x;
}
Try it Yourself 
Example
Use the next() method of the iterator:
// Create an Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Create an Interator
const list = fruits.entries();
let text = list.next().value + " " + list.next().value;
Try it Yourself 
Browser Support
entries()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
entries()
is not supported in Internet Explorer.
JavaScript Array filter()
Example 1
Return an array of all values in ages[] that are 18 or over:
const ages = [32, 33, 16, 40];
const result = ages.filter(checkAdult);
function checkAdult(age) {
return age >= 18;
}
Try it Yourself 
Description
The
filter()
method creates a new array filled with elements that pass a test provided by a function.
The
filter()
method does not execute the function for empty elements.
The
filter()
method does not change the original array.
Syntax
array
.filter(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
A value passed to the function as its
this
value.
Return Value
Type
Description
Array
An array of elements that pass the test.
An empty array if no elements pass the test.
Example 2
Return the values in ages[] that are over a specific number:
<p><input type="number" id="ageToCheck" value="30"></p>
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
const ages = [32, 33, 12, 40];
function checkAge(age) {
return age > document.getElementById("ageToCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.filter(checkAge);
}
</script>
Try it Yourself 
Browser Support
filter()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Array find()
Example 1
Find the value of the first element with a value over 18:
const ages = [3, 10, 18, 20];
function checkAge(age) {
return age > 18;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.find(checkAge);
}
Try it Yourself 
Description
The
find()
method returns the value of the first element that passes a test.
The
find()
method executes a function for each array element.
The
find()
method returns
undefined
if no elements are found.
The
find()
method does not execute the function for empty elements.
The
find()
method does not change the original array.
Syntax
array
.find(
function(currentValue, index, arr),thisValue
)
Parameters
function()
Required.
A function to run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
Type
Description
A value
The value of the first element that pass the test.
Otherwise it returns
undefined
.
Example 2
Find the value of the first element with a value above a specific number:
<p><input type="number" id="ageToCheck" value="18"></p>
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
const ages = [4, 12, 16, 20];
function checkAge(age) {
return age > document.getElementById("ageToCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.find(checkAge);
}
</script>
Try it Yourself 
Browser Support
find()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
find()
is not supported in Internet Explorer.
JavaScript Array concat()
Examples
Join two arrays:
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const children = arr1.concat(arr2);
Try it Yourself 
Join three arrays:
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin"];
const children = arr1.concat(arr2, arr3);
Try it Yourself 
More examples below.
Description
The
concat()
method concatenates (joins) two or more arrays.
The
concat()
method returns a new array, containing the joined arrays.
The
concat()
method does not change the existing arrays.
Syntax
array1
.concat(
array2
,
array3
, ...,
arrayX
)
Parameters
Parameter
Description
array1,...
Required.
The array(s) to be concatenated.
Return Value
Type
Description
Array
The content from the joined arrays.
More Examples
Concatenate strings and numbers:
const arr1 = ["Cecilie", "Lone"];
const arr2 = [1, 2, 3];
const arr3 = arr1.concat(arr2);
Try it Yourself 
Concatenate nested arrays:
const arr1 = [1, 2, [3, 4]];
const arr2 = [[5, 6], 7, 8];
const arr3 = arr1.concat(arr2);
Try it Yourself 
Browser Support
concat()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Array copyWithin()
Examples
Copy to index 2, all elements from index 0:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.copyWithin(2, 0);
Try it Yourself 
Copy to index 2, the elements from index 0 to 2:
const fruits = ["Banana", "Orange", "Apple", "Mango", "Kiwi"];
fruits.copyWithin(2, 0, 2);
Try it Yourself 
Description
The
copyWithin()
method copies array elements to another position in an array.
The
copyWithin()
method overwrites the existing values.
The
copyWithin()
method does not add items to the array.
Syntax
array
.copyWithin(
target, start, end
)
Parameters
Parameter
Description
target
Required.
The index (position) to copy the elements to.
start
Optional.
The start index (position). Default is 0.
end
Optional.
The end index (position). Default is the array length.
Return Value
Type
Description
Array
The changed array.
Browser Support
copyWithin()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
copyWithin()
is not supported in Internet Explorer.
JavaScript Array findLast()
Example 1
Find the value of the last element with a value over 18:
const ages = [3, 10, 18, 20];
function checkAge(age) {
return age > 18;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.findLast(checkAge);
}
Try it Yourself 
Description
The
findLast()
method returns the value of the last element that passes a test.
The
findLast()
method executes a function for each array element.
The
findLast()
method returns
undefined
if no elements are found.
The
findLast()
method does not execute the function for empty elements.
The
findLast()
method does not change the original array.
Syntax
array
.findLast(
function(currentValue, index, arr),thisValue
)
Parameters
function()
Required.
A function to run for each array element.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
Type
Description
A value
The value of the last element that pass the test.
Otherwise it returns
undefined
.
Example 2
Find the value of the last element with a value above a specific number:
<p><input type="number" id="ageToCheck" value="18"></p>
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
const ages = [4, 12, 16, 20];
function checkAge(age) {
return age > document.getElementById("ageToCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.findLast(checkAge);
}
</script>
Try it Yourself 
Browser Support
findLast()
is an ES2023 feature.
It is supported in all modern browsers since July 2023:
Chrome 110
Edge 110
Firefox 115
Safari 16.4
Opera 96
Feb 2023
Feb 2023
Jul 2023
Mar 2023
May 2023
JavaScript Array every()
Example 1
// Create an Array
const ages = [32, 33, 16, 40];
// Create a Test Function
function checkAge(age) {
return age > 18;
}
// Are all ages over 18?
ages.every(checkAge);
Try it Yourself 
More examples below.
Description
The
every()
method executes a function for each array element.
The
every()
method returns
true
if the function returns true for all elements.
The
every()
method returns
false
if the function returns false for one element.
The
every()
method does not execute the function for empty elements.
The
every()
method does not change the original array
Syntax
array
.every(
function(currentValue, index, arr), thisValue
)
Parameters
Parameter
Description
function()
Required.
A function to be run for each element in the array.
currentValue
Required.
The value of the current element.
index
Optional.
The index of the current element.
arr
Optional.
The array of the current element.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
Type
Description
Boolean
true
if all elements pass the test, otherwise
false
.
More Examples
Check if all answers are the same:
const survey = [
{ name: "Steve", answer: "Yes"},
{ name: "Jessica", answer: "Yes"},
{ name: "Peter", answer: "Yes"},
{ name: "Elaine", answer: "No"}
];
let result = survey.every(isSameAnswer);
function isSameAnswer(el, index, arr) {
if (index === 0) {
return true;
} else {
return (el.answer === arr[index - 1].answer);
}
}
Try it Yourself 
Check if all values are over a specific number:
<p><input type="number" id="ageToCheck" value="18"></p>
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
const ages = [32, 33, 12, 40];
function checkAge(age) {
return age > document.getElementById("ageToCheck").value;
}
function myFunction() {
document.getElementById("demo").innerHTML = ages.every(checkAge);
}
</script>
Try it Yourself 
Browser Support
every()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object.seal()
Example
"use strict"
// Create Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Seal Object
Object.seal(person)
// This will throw an error
delete person.age;
Try it Yourself 
More Examples Below !
Description
The
Object.seal()
method prevents additions or deletions of new properties.
The
Object.seal()
method makes existing properties non-configurable.
The
Object.seal()
method will fail silently in non-strict mode.
The
Object.seal()
method will throw a TypeError in strict mode.
The
Object.isSealed()
method can be used to check if an object is sealed.
Syntax
Object.seal(
object
)
Parameters
Parameter
Description
object
Required.
The object to seal.
Return Value
Type
Description
Object
The sealed object.
More Examples
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.seal(fruits);
// This will throw an error:
fruits.push("Kiwi");
Try it Yourself 
Browser Support
Object.seal()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Math.atan()
Example
let x = Math.atan(2);
Try it Yourself 
Description
The
Math.atan()
method returns the arctangent of a number as a value between -PI/2 and PI/2 radians.
Syntax
Math.atan(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
-PI to PI/2.
NaN
if the number is empty or not numeric.
Browser Support
Math.atan()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.atanh()
Example
let x = Math.atanh(0.5)
Try it Yourself 
Description
The
Math.atanh()
method returns the hyperbolic arctangent of a number.
The
Math.atanh()
method expects a number between -1 and 1.
The
Math.atanh()
method returns
Infinity
if the number is 1.
The
Math.atanh()
method returns
-Infinity
if the number is -1.
Syntax
Math.atanh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic arctangent of the number.
Or NaN, or Infinity, or -Infinity.
NaN
if the number is greater than 1, or less than -1.
Browser Support
Math.atanh()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.atanh()
is not supported in Internet Explorer.
JavaScript Math.cbrt()
Example
let x = Math.cbrt(125);
Try it Yourself 
Description
The
Math.cbrt()
method returns the cubic root of a number.
Syntax
Math.cbrt(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The cube root of the number.
Browser Support
Math.cbrt()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.cbrt()
is not supported in Internet Explorer.
JavaScript Math.log2()
Examples
let a = Math.log2(2.7183);
let b = Math.log2(2);
let c = Math.log2(1);
let d = Math.log2(0);
let e = Math.log2(-1);
Try it Yourself 
Description
The
Mat.log2()
method returns the base-2 logarithm of a number.
Syntax
Math.log2(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The base-2 logarithm of the number.
NaN
if the number is less than -1.
-Infinity
if the number is -1.
Browser Support
Math.log2()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.log2()
is not supported in Internet Explorer.
JavaScript Math.floor()
Examples
let x = Math.floor(1.6);
Try it Yourself 
let a = Math.floor(0.60);
let b = Math.floor(0.40);
let c = Math.floor(5);
let d = Math.floor(5.1);
let e = Math.floor(-5.1);
let f = Math.floor(-5.9);
Try it Yourself 
Description
The
Math.floor()
method rounds a number DOWN to the nearest integer.
Syntax
Math.floor(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The nearest integer to the number, rounding DOWN.
Browser Support
Math.floor()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.log()
Examples
let x = Math.log(2);
Try it Yourself 
let a = Math.log(2.7183);
let b = Math.log(2);
let c = Math.log(1);
let d = Math.log(0);
let e = Math.log(-1);
Try it Yourself 
Description
The
Math.log()
method returns the natural logarithm (base E) of a number.
Syntax
Math.log(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The natural logarithm of the number.
NaN
if the number is negative.
-Infinity
if the number is 0.
Browser Support
Math.log()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.cos()
Examples
let x = Math.cos(3.14);
Try it Yourself 
Math.cos(0);
Math.cos(Math.PI);
Math.cos(2 * Math.PI);
Try it Yourself 
Math.cos(x) expects x radians.
To use degrees, convert the degrees to radians.
Math.cos(degree * Math.PI / 180);
Try it Yourself 
Description
The
Math.cos()
method returns the cosine of a number.
The
Math.cos()
method returns a number between -1 and 1.
The
Math.cos()
method expects the number in radians.
What is Radians?
Radians
is an angle's

amount of rotation
b
on a circle:
Degrees
PI
Radians
0
0
0
1
PI/180
0.0175
30
PI/6
0.52
45
PI/4
0.79
90
PI/2
1.57
180
PI
3.14
360
PI*2
6.28
Syntax
Math.cos(
x
)
Parameter
Parameter
Description
x
Required.
A number representing radians.
Return Value
Type
Description
Number
-1 to 1 The cosine of the number.
NaN
if the parameter is not numeric.
The Pythagoran Therorem
Math.sin()
,
Math.cos()
,
and
Math.tan()
are related to the Pythagorean theorem:
Theorem: c
2
= a
2
+ b
2
The sine
Math.sin()
to the angle is
a / c
.
The cosine
Math.cos()
to the angle is
b / c
.
The tangent
Math.tan()
to the angle is
a / b
.
Browser Support
Math.cos()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.LN10
Example
let x = Math.LN10;
Try it Yourself 
Description
The
Math.LN10
property returns the natural logarithm of 10.
The
Math.LN10
property approximately 2.302.
Syntax
Math.LN10
Return Value
Type
Description
Number
The natural logarithm of 10.
Browser Support
Math.LN10
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.log1p()
Examples
let a = Math.log1p(2.7183);
let b = Math.log1p(2);
let c = Math.log1p(1);
let d = Math.log1p(0);
let e = Math.log1p(-1);
Try it Yourself 
Description
The
Math.log1p()
method returns the natural logarithm (base E) of 1 + a number.
Syntax
Math.log1p(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The natural logarithm (base E) of 1 + the number.
NaN
if the number is less than -1.
-Infinity
if the number is -1.
Browser Support
Math.log1p()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.log1p()
is not supported in Internet Explorer.
JavaScript Math.E
Example
let x = Math.E;
Try it Yourself 
Description
The
Math.E
property returns Euler's number.
The
Math.E
property returns approximately 2.718.
What is Euler's Number?
Euler's number is the base of natural logarithms.
Syntax
Math.E
Return Value
Type
Description
Number
Euler's number.
Browser Support
Math.E
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object.keys()
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get the Keys
const keys = Object.keys(person);
Try it Yourself 
More Examples Below !
Description
The
Object.keys()
method returns an array with the keys of an object.
The
Object.keys()
method does not change the original object.
Syntax
Object.keys(
object
)
Parameters
Parameter
Description
object
Required.
An iterable object.
Return Value
Type
Description
Array
An array containing the keys of the object.
More Examples
Examples
This example list only the enumerable properties of an object:
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Change Property
Object.defineProperty(person, "age", {enumerable:false});
// Get the Keys
const keys = Object.keys(person);
Try it Yourself 
Use Object.keys() on an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = Object.keys(fruits);
Try it Yourself 
Use Object.keys() on a string:
const fruits = "Banana";
const keys = Object.keys(fruits);
Try it Yourself 
Browser Support
Object.keys()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Promise then()
Example
myPromise.then(x => myDisplay(x), x => myDisplay(x));
Try it Yourself 
Description
The
then()
method provides two callbacks:
One funtion to run when a promise is fulfilled
and one funtion to run when a promise is rejected.
Syntax
promise
.then(
fulfilled(), rejected()
)
Parameters
fulfilled()
Function to run when the promise is fulfilled
rejected()
Function to run when the promise is rejected
Return Value
Type
Description
Object
A new Promise Object
Browser Support
then()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
then()
is not supported in Internet Explorer.
JavaScript
RegExp Reference
The RegExp Object
A regular expression is a
pattern
of characters.
The pattern is used for
searching and replacing
characters in strings.
The
RegExp Object
is a regular expression with added
Properties
and
Methods
.
Syntax
/
pattern
/
modifier(s)
;
Example
let pattern = /w3schools/i;
Try it Yourself 
Example explained:
w3schools
The pattern to search for
/w3schools/
A regular expression
/w3schools/i
A case-insensitive regular expression
For a tutorial about Regular Expressions, read our
JavaScript RegExp Tutorial
.
Browser Support
/
regexp
/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Modifiers
Modifiers define how to perform the seach:
Modifier
Description
/g
Perform a global match (find all)
/i
Perform case-insensitive matching
/m
Perform multiline matching
Brackets
Brackets are used to find a range of characters:
Bracket
Description
[abc]
Find any character between the brackets
[^abc]
Find any character NOT between the brackets
[0-9]
Find any character between the brackets (any digit)
[^0-9]
Find any character NOT between the brackets (any non-digit)
(x|y)
Find any of the alternatives specified
Metacharacters
Metacharacters are characters with a special meaning:
Character
Description
.
Find a single character, except newline or line terminator
\w
Find a word character
\W
Find a non-word character
\d
Find a digit
\D
Find a non-digit character
\s
Find a whitespace character
\S
Find a non-whitespace character
\b
Find a match at the beginning/end of a word, beginning like this: \bHI, 
    end like this: HI\b
\B
Find a match, but not at the beginning/end of a word
\0
Find a NULL character
\n
Find a new line character
\f
Find a form feed character
\r
Find a carriage return character
\t
Find a tab character
\v
Find a vertical tab character
\xxx
Find the character specified by an octal number xxx
\xdd
Find the character specified by a hexadecimal number dd
\udddd
Find the Unicode character specified by a hexadecimal number dddd
Quantifiers
Quantifier
Description
n+
Matches any string that contains at least one
n
n*
Matches any string that contains zero or more occurrences of
n
n?
Matches any string that contains zero or one occurrences of
n
n{X}
Matches any string that contains a sequence of
X
n
's
n{X,Y}
Matches any string that contains a sequence of X to Y
n
's
n{X,}
Matches any string that contains a sequence of at least X
n
's
n$
Matches any string with
n
at the end of it
^n
Matches any string with
n
at the beginning of it
?=n
Matches any string that is followed by a specific string
n
?!n
Matches any string that is not followed by a specific string
n
RegExp Object Properties
Property
Description
constructor
Returns the function that created the RegExp object's prototype
global
Checks whether the "g" modifier is set
ignoreCase
Checks whether the "i" modifier is set
lastIndex
Specifies the index at which to start the next match
multiline
Checks whether the "m" modifier is set
source
Returns the text of the RegExp pattern
RegExp Object Methods
Method
Description
compile()
Deprecated in version 1.5.
Compiles a regular expression
exec()
Tests for a match in a string. Returns the first match
test()
Tests for a match in a string. Returns true or false
toString()
Returns the string value of the regular expression
JavaScript Promise.all()
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// Both resolve, who is faster?
Promise.all([myPromise1, myPromise2]).then((x) => {
myDisplay(x);
});
Try it Yourself 
Description
The
Promise.all()
method returns a single Promise from a list of promises,
when all promises fulfill.
Syntax
Promise.all(
iterable
)
Parameters
iterable
An Array of promises
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.all()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Promise.all()
is not supported in Internet Explorer.
JavaScript Promise finally()
Example
myPromise.finally(myDisplay("Settled"));
Try it Yourself 
Description
The
finally()
method provides a callback.
The callback is a function to run when a promise is settled (fulfilled or rejected).
Syntax
promise
.finally(
settled()
)
Parameters
settled()
Function to run when the promise is settled (fulfilled or rejected)
Return Value
Type
Description
Object
A new Promise Object
Browser Support
finally()
is an
ECMAScript 2018
feature.
ES2017 is supported in all modern browsers since June 2020:
Chrome 63
Edge 79
Firefox 78
Safari 12
Opera 50
Des 2017
Jan 2020
Jun 2020
Sep 2018
Jan 2018
finally()
is not supported in Internet Explorer.
JavaScript Promise.resolve()
Example
Promise.resolve("All Well");
Try it Yourself 
Description
The
Promise.resolve()
method returns a Promise object resolved with a value.
Syntax
Promise.resolve(message)
Parameters
message
Argument to be used as resolve value
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.Resolve()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Promise.Resolve()
is not supported in Internet Explorer.
JavaScript Operator Precedence
Precedence
describes the order in which operations are performed in 
an arithmetic expression.
As in traditional mathematics, multiplication is done first:
let x = 100 + 50 * 3;
Try it Yourself 
When using parentheses, operations inside the parentheses are computed first:
let x = (100 + 50) * 3;
Try it Yourself 
When operators have the same precedence (like + and -), they are computed from left to right:
let x = 100 / 50 * 3;
Try it Yourself 
Operator Precedence Values
Expressions in parentheses are computed
before
the rest of the expression
Function are executed
before
the result is used in the rest of the expression
Val
Operator
Description
Example
18
( )
Expression Grouping
(100 + 50) * 3
17
.
Member Of
car.name
17
[]
Member Of
car["name"]
17
?.
Optional Chaining
ES2020
x ?. y
17
()
Function Call
myFunction()
17
new
New with Arguments
new Date("June 5,2022")
16
new
New without Arguments
new Date()
Increment Operators
Postfix increments are executed
before
prefix increments
15
++
Postfix Increment
i++
15
--
Postfix Decrement
i--
14
++
Prefix Increment
++i
14
--
Prefix Decrement
--i
NOT Operators
14
!
Logical NOT
!(x==y)
14
~
Bitwise NOT
~x
Unary Operators
14
+
Unary Plus
+x
14
-
Unary Minus
-x
14
typeof
Data Type
typeof x
14
void
Evaluate Void
void(0)
14
delete
Property Delete
delete myCar.color
Arithmetic Operators
Exponentiations are executed
before
multiplications
Multiplications and divisions are executed
before
additions and subtractions
13
**
Exponentiation
ES2016
10 ** 2
12
*
Multiplication
10 * 5
12
/
Division
10 / 5
12
%
Division Remainder
10 % 5
11
+
Addition
10 + 5
11
-
Subtraction
10 - 5
11
+
Concatenation
"John" + "Doe"
Shift Operators
10
<<
Shift Left
x << 2
10
>>
Shift Right (signed)
x >> 2
10
>>>
Shift Right (unsigned)
x >>> 2
Relational Operators
9
in
Property in Object
"PI" in Math
9
instanceof
Instance of Object
x instanceof Array
Comparison Operators
9
<
Less than
x < y
9
<=
Less than or equal
x <= y
9
>
Greater than
x > y
9
>=
Greater than or equal
x >= Array
8
==
Equal
x == y
8
===
Strict equal
x === y
8
!=
Unequal
x != y
8
!==
Strict unequal
x !== y
Bitwise Operators
7
&
Bitwise AND
x & y
6
^
Bitwise XOR
x ^ y
5
|
Bitwise OR
x | y
Logical Operators
4
&&
Logical AND
x && y
3
||
Logical OR
x || y
3
??
Nullish Coalescing
ES2020
x ?? y
Conditional (ternary) Operator
2
? :
Condition
? "yes" : "no"
Assignment Operators
Assignments are executed
after
other operations
2
=
Simple Assignment
x = y
2
+=
Addition Assignment
x += y
2
-=
Subtraction Assignment
x -= y
2
*=
Multiplication Assignment
x *= y
2
**=
Exponentiation Assignment
x **= y
2
/=
Division Assignment
x /= y
2
%=
Remainder Assignment
x %= y
2
<<=
Left Shift Assignment
x <<= y
2
>>=
Right Shift Assignment
x >>= y
2
>>>=
Unsigned Right Shift
x >>>= y
2
&=
Bitwise AND Assignment
x &= y
2
|=
Bitwise OR Assignment
x |= y
2
^=
Bitwise XOR Assignment
x ^= y
2
&&=
Logical AND Assignment
x &= y
2
||=
Logical OR Assignment
x ||= y
2
:
Colon Assignment
x : 5
2
=>
Arrow
x => y
2
yield
Pause / Resume
yield x
2
yield*
Delegate
yield* x
2
...
Spread
...x
1
,
Comma
x , y
JavaScript RegExp Group [^0-9]
Example
A global search for numbers that are NOT from 1 to 4:
let text = "123456789";
let pattern = /[^1-4]/g;
Try it Yourself 
Description
The [^0-9] expression is used to find any character that is NOT a digit.
The digits inside the brackets can be any numbers or span of numbers from 0 
to 9.
Tip:
Use the
[0-9]
expression to find any 
character between the brackets that is a digit.
Browser Support
/[^0-9]/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("[^
0-9
]")
or simply:
/[^
0-9
]/
Syntax with modifiers
new RegExp("[^
0-9
]", "g")
or simply:
/[^
0-9
]/g
More Examples
Example
A global search for numbers that are NOT 1:
let test = "12121212";
let pattern = /[^1]/g;
Try it Yourself 
Example
A global search for numbers that are NOT from 5 to 8:
let text = "123456789";
let pattern = /[^5-8]/g;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\S
Metacharacter
Example
A global search for non-whitespace characters:
let text = "Is this all there is?";
let pattern = /\S/g;
Try it Yourself 
Description
The \S metacharacter matches non-whitespace characters.
Whitespace characters can be:
A space character
A tab character
A carriage return character
A new line character
A vertical tab character
A form feed character
Browser Support
/\S/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\S")
or simply:
/\S/
Syntax with modifiers
new RegExp("\\S", "g")
or simply:
/\S/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript Math.LOG10E
Example
let x = Math.LOG10E;
Try it Yourself 
Description
The
Math.LOG10E
property returns the base-10 logarithm of E.
The
Math.LOG10E
property returns approximately 0.434.
Syntax
Math.LOG10E
Return Value
Type
Description
Number
The base-10 logarithm of E.
Browser Support
Math.LOG10E
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.random()
Examples
let x = Math.random();
Try it Yourself 
Return a random number between 0 (inclusive) and 10 (exclusive):
let x = Math.random() * 10;
Try it Yourself 
Return a random number between 0 (inclusive) and 100 (exclusive):
let x = Math.random() * 100;
Try it Yourself 
A random whole number between 1 and 10 (inclusive):
let x = Math.floor((Math.random() * 10) + 1);
Try it Yourself 
A random whole number between 1 and 100 (inclusive):
let x = Math.floor((Math.random() * 100) + 1);
Try it Yourself 
Description
The
Math.random()
method returns a random floating point number between 0 (inclusive)
and 1 (exclusive).
Syntax
Math.random()
Parameters
NONE
Return Value
Type
Description
Number
A random number from 0 (inclusive) up to but not 
including 1 (exclusive).
Browser Support
Math.random()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.sin()
Examples
let x = Math.sin(3.14);
Try it Yourself 
Math.sin(0);
Math.sin(Math.PI/6);
Math.sin(Math.PI/2);
Math.sin(Math.PI);
Try it Yourself 
Math.sin(x) expect x in radians.
To use degrees, convert degrees to radians first.
let radians = degrees * Math.PI/180;
Math.sin(radians);
Try it Yourself 
Description
The
Math.sin()
method returns the sine of a number.
The
Math.sin()
method returns a number between -1 and 1.
The
Math.sin()
method expects the number in radians.
What is Radians?
Radians
is an angle's

amount of rotation
b
on a circle:
Degrees
PI
Radians
0
0
0
1
PI/180
0.0175
30
PI/6
0.52
45
PI/4
0.79
90
PI/2
1.57
180
PI
3.14
360
PI*2
6.28
Syntax
Math.sin(
x
)
Parameters
Parameter
Description
x
Required.
A number representing radians.
Return Value
Type
Description
Number
-1 to 1. The sine of the number.
NaN
if the parameter is not numeric.
The Pythagoran Therorem
Math.sin()
,
Math.cos()
,
and
Math.tan()
are related to the Pythagorean theorem:
Theorem: c
2
= a
2
+ b
2
The sine
Math.sin()
to the angle is
a / c
.
The cosine
Math.cos()
to the angle is
b / c
.
The tangent
Math.tan()
to the angle is
a / b
.
Browser Support
Math.sin()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object prototype
Example
Use the prototype property to add a new property to all objects of a given 
type:
function employee(name, jobtitle, born)
{
this.name = name;
this.jobtitle = jobtitle;
this.born = born;
}
employee.prototype.salary = 2000;
const fred = new employee("Fred Flintstone", "Caveman", 1970);
Try it Yourself 
Description
The
prototype
is a global property available with all JavaScript objects.
The
prototype
property allows you to add new properties and methods to objects.
Syntax
object
.prototype.
name
=
value
Browser Support
prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object toString()
Examples
Using toString() on an array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.toString();
Try it Yourself 
Using toString() on an object:
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
const keys = person.toString();
Try it Yourself 
Using Object.toString() on an object:
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
const keys = Object.toString(person);
Try it Yourself 
Description
The
toString()
method returns an object as a string.
The
toString()
method returns "[object Object]" if it cannot return a string.
Object.toString()
always returns the object constructor.
The
toString()
method does not change the original object.
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
object
.toString()
Parameters
NONE
Return Value
A string representing the object.
Or "[object type]" if it cannot return a string.
JavaScript
Operators Reference
JavaScript Operators
Operators
are used to assign values, compare values, 
perform arithmetic operations, and more.
There are different types of JavaScript operators:
Arithmetic Operators
Assignment Operators
Comparison Operators
Logical Operators
Conditional Operators
Type Operators
JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic between variables and/or values.
Given that
y = 5
, the table below explains the arithmetic operators:
Oper
Name
Example
Results
Try it
+
Addition
x = y + 2
y=5, x=7
Try it 
-
Subtraction
x=y-2
y=5, x=3
Try it 
*
Multiplication
x=y*2
y=5, x=10
Try it 
**
Exponentiation
ES2016
x=y**2
y=5, x=25
Try it 
/
Division
x = y / 2
y=5, x=2.5
Try it 
%
Remainder
x = y % 2
y=5, x=1
Try it 
++
Pre increment
x = ++y
y=6, x=6
Try it 
++
Post increment
x = y++
y=6, x=5
Try it 
--
Pre decrement
x = --y
y=4, x=4
Try it 
--
Post decrement
x = y--
y=4, x=5
Try it 
For a tutorial about arithmetic operators, read our
JavaScript Arithmetic Tutorial
.
JavaScript Assignment Operators
Assignment operators are used to assign values to JavaScript variables.
Given that
x = 10
and
y = 5
, the table below explains the assignment operators:
Oper
Example
Same As
Result
Try it
=
x = y
x = y
x = 5
Try it 
+=
x += y
x = x + y
x = 15
Try it 
-=
x -= y
x = x - y
x = 5
Try it 
*=
x *= y
x = x * y
x = 50
Try it 
/=
x /= y
x = x / y
x = 2
Try it 
%=
x %= y
x = x % y
x = 0
Try it 
:
x: 45
size.x = 45
x = 45
Try it 
For a tutorial about assignment operators, read our
JavaScript Assignment Tutorial
.
JavaScript String Operators
The + operator, and the += operator can also be used to concatenate (add) 
strings.
Given that
t1 = "Good "
,
t2 = "Morning"
,
and t3 = ""
, the table below explains the operators:
Oper
Example
t1
t2
t3
Try it
+
t3 = t1 + t2
"Good "
"Morning"
"Good Morning"
Try it 
+=
t1 += t2
"Good Morning"
"Morning"
Try it 
Comparison Operators
Comparison operators are used in logical statements to determine equality or difference between variables or values.
Given that
x = 5
, the table below explains the comparison operators:
Oper
Name
Comparing
Returns
Try it
==
equal to
x == 8
false
Try it 
==
equal to
x == 5
true
Try it 
===
equal value and type
x === "5"
false
Try it 
===
equal value and type
x === 5
true
Try it 
!=
not equal
x != 8
true
Try it 
!==
not equal value or type
x !== "5"
true
Try it 
!==
not equal value or type
x !== 5
false
Try it 
>
greater than
x > 8
false
Try it 
<
less than
x < 8
true
Try it 
>=
greater or equal to
x >= 8
false
Try it 
<=
less or equal to
x <= 8
true
Try it 
For a tutorial about comparison operators, read our
JavaScript 
Comparisons Tutorial
.
Conditional (Ternary) Operator
The conditional operator assigns a value to a variable based on a condition.
Syntax
Example
Try it
(condition) ? x : y
(z < 18) ? x : y
Try it 
Logical Operators
Logical operators are used to determine the logic between variables or values.
Given that
x = 6 and y = 3
, the table below explains the logical operators:
Oper
Name
Example
Try it
&&
AND
(x < 10 && y > 1) is true
Try it 
||
OR
(x === 5 || y === 5) is false
Try it 
!
NOT
!(x === y) is true
Try it 
The Nullish Coalescing Operator (??)
The
??
operator returns the first argument if it is not
nullish
(
null
or
undefined
).
Otherwise it returns the second argument.
Example
let name = null;
let text = "missing";
let result = name ?? text;
Try it Yourself 
The nullish operator is supported in all browsers since March 2020:
Chrome 80
Edge 80
Firefox 72
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Jan 2020
Mar 2020
Mar 2020
The Optional Chaining Operator (?.)
The
?.
operator returns
undefined
if an object is
undefined
or
null
(instead of throwing an error).
Example
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};
// Ask for car name:
document.getElementById("demo").innerHTML = car?.name;
Try it Yourself 
The optional chaining operator is supported in all browsers since March 2020:
Chrome 80
Edge 80
Firefox 72
Safari 13.1
Opera 67
Feb 2020
Feb 2020
Jan 2020
Mar 2020
Mar 2020
JavaScript Bitwise Operators
Bit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.
Oper
Name
Example
Same as
Result
Decimal
Try it
&
AND
x = 5 & 1
0101 & 0001
0001
1
Try it 
|
OR
x = 5 | 1
0101 | 0001
0101
5
Try it 
~
NOT
x = ~ 5
~0101
1010
10
Try it 
^
XOR
x = 5 ^ 1
0101 ^ 0001
0100
4
Try it 
<<
Left shift
x = 5 << 1
0101 << 1
1010
10
Try it 
>>
Right shift
x = 5 >> 1
0101 >> 1
0010
2
Try it 
>>>
Unsigned right
x = 5 >>> 1
0101 >>> 1
0010
2
Try it 
The typeof Operator
The
typeof
operator returns the type of a variable, object, function or 
expression:
Example
typeof "John"// Returns string
typeof 3.14 // Returns number
Try it Yourself 
Please observe:
The data type of NaN is number
The data type of an array is object
The data type of a date is object
The data type of null is object
The data type of an undefined variable is undefined
Example
typeof "John"
typeof 3.14
typeof NaN
typeof false
typeof [1, 2, 3, 4]
typeof {name:'John', age:34}
typeof new Date()
typeof function () {}
typeof myCar
typeof null
Try it Yourself 
The delete Operator
The
delete
operator deletes a property from an object:
Example
const person = {
firstName:"John",
lastName:"Doe",
age:50,
eyeColor:"blue"
};
delete person.age;
Try it Yourself 
The delete operator deletes both the value of the property and the property 
itself.
After deletion, the property cannot be used before it is added back again.
The delete operator is designed to be used on object properties. It has no 
effect on variables or functions.
The Spread (...) Operator
The ... operator expands an iterable into more elements:
Example
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Jul", "Aug", "Sep"];
const q4 = ["Oct", "Nov", "May"];
const year = [...q1, ...q2, ...q3, ...q4];
Try it Yourself 
The ... operator can be used to expand an iterable into more arguments for function calls:
Example
const numbers = [23,55,21,87,56];
let maxValue = Math.max(...numbers);
Try it Yourself 
The in Operator
The
in
operator returns true if a property is in an object, otherwise false:
Object Example
const person = {firstName:"John", lastName:"Doe", age:50};
("firstName" in person);
("age" in person);
Try it Yourself 
Examples
const cars = ["Saab", "Volvo", "BMW"];
("Saab" in cars);
Try it Yourself 
const cars = ["Saab", "Volvo", "BMW"];
(0 in cars);
(1 in cars);
(4 in cars);
("length" in cars);
Try it Yourself 
Predefined Objects
("PI" in Math);
("NaN" in Number);
("length" in String);
Try it Yourself 
The instanceof Operator
The
instanceof
operator returns true if an object is an instance of a specified object:
Example
const cars = ["Saab", "Volvo", "BMW"];
(cars instanceof Array)// Returns true
(cars instanceof Object)// Returns true
(cars instanceof String)// Returns false
(cars instanceof Number)// Returns false
Try it Yourself 
The void Operator
The
void
operator evaluates an expression and returns
undefined
. This operator is often used to obtain the undefined 
primitive value, using "void(0)" (useful when evaluating an expression without 
using the return value).
Example
<a href="javascript:void(0);">
Useless link
</a>
<a href="javascript:void(document.body.style.backgroundColor='red');">
Click me to change the background color of body to red
</a>
Try it Yourself 
JavaScript Object.values()
Example
const person = {
firstName : "John",
lastName : "Doe",
age : 50,
eyeColor : "blue"
};
let text = Object.values(person);
Try it Yourself 
Description
The
Object.values()
method returns an array of the property values of an object.
The
Object.values()
method does not change the original object.
Syntax
Object.values(
object
)
Parameters
Parameter
Description
object
Optional.
An object.
Return Value
Type
Description
Array
An iterable array of the object's property values.
Browser Support
ECMAScript 2017 added the
Object.values()
method to objects.
Object.values()
is supported in all modern browsers since March 2017:
Chrome 54
Edge 14
Firefox 47
Safari 10.1
Opera 41
Oct 2016
Aug 2016
Jun 2016
Mar 2017
Oct 2016
JavaScript RegExp
\0
Metacharacter
Example
Search for a NUL character:
let text = "Visit W3Schools.\0Learn Javascript.";
let pattern = /\0/;
Try it Yourself 
Description
The \0 metacharacter maches NUL characters.
Browser Support
/\0/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\0")
or simply:
/\0/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\B
Metacharacter
Example
Find the first occurrence of "LO", NOT at the beginning of a word:
let text = "HELLO, LOOK AT YOU!";
let pattern = /\BLO/;
Try it Yourself 
Description
The \B metacharacter matches NOT at the beginning/end of a word.
Search for the pattern LO, not at the beginning of a word like this:
\BLO
Search for the pattern LO, not at the end of a word like this:
LO\B
Browser Support
/\B/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\B
regexp
")
or simply:
/\B
regexp
/
Syntax with modifiers
new RegExp("\\B
regexp
", "g")
or simply:
/\B
regexp
/g
More Examples
Example
Find the first occurrence of "LO", NOT at the END of a word:
let text = "HELLO, LOOK AT YOU";
let pattern = /LO\B/;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\r
Metacharacter
Example
Search for a carriage return character in a string:
let text = "Visit W3Schools.\rLearn Javascript.";
let pattern = /\r/;
Try it Yourself 
Description
The \r metacharacter matches carriage return characters.
Browser Support
/\r/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\r")
or simply:
/\r/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript Math.tan()
Examples
let x = Math.tan(1);
Try it Yourself 
Math.tan(0);
Math.tan(Math.PI);
Try it Yourself 
Math.tan(x) expect x in radians.
To use degrees, convert degrees to radians first.
let radians = degrees * Math.PI/180;
Math.tan(radians);
Try it Yourself 
Description
The
Math.tan()
method returns the tangent of a number.
The
Math.tan()
method expects the number in radians.
Based on sine and cosine:
Math.tan(x) = Math.sin(x) / Math.cos(x)
.
What is Radians?
Radians
is an angle's

amount of rotation
b
on a circle:
Degrees
PI
Radians
0
0
0
1
PI/180
0.0175
30
PI/6
0.52
45
PI/4
0.79
90
PI/2
1.57
180
PI
3.14
360
PI*2
6.28
Syntax
Math.tan(
x
)
Parameters
Parameter
Description
x
Required.
A number representing radians.
Return Value
Type
Description
Number
The tangent of the number.
NaN
if the number is empty or not numeric.
The Pythagoran Therorem
Math.sin()
,
Math.cos()
,
and
Math.tan()
are related to the Pythagorean theorem:
Theorem: c
2
= a
2
+ b
2
The sine
Math.sin()
to the angle is
a / c
.
The cosine
Math.cos()
to the angle is
b / c
.
The tangent
Math.tan()
to the angle is
a / b
.
Browser Support
Math.tan()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.SQRT2
Example
let x = Math.SQRT2;
Try it Yourself 
Description
The
Math.SQRT2
property returns the square root of 2.
The
Math.SQRT2
property returns approximately 1.414.
Syntax
Math.SQRT2
Return Value
Type
Description
Number
The square root of 2.
Browser Support
Math.SQRT2
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.sinh()
Example
Return the hyperbolic sine of a number:
Math.sinh(3);
Try it Yourself 
Description
The
Math.sinh()
method returns the hyperbolic sine of a number.
Syntax
Math.sinh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic sine of the number.
NaN
if the parameter is not numeric.
Browser Support
Math.sinh
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.sinh
is not supported in Internet Explorer.
JavaScript Math.SQRT1_2
Example
let x = Math.SQRT1_2;
Try it Yourself 
Description
The
Math.SQRT1_2
property returns the square root of 1/2.
The
Math.SQRT1_2
property returns approximately 0.707.
Syntax
Math.SQRT1_2
Return Value
Type
Description
Number
The square root of 1/2.
Browser Support
Math.SQRT1_2
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Math.tanh()
Example
let x = Math.tanh(1);
Try it Yourself 
Description
The
Math.tanh()
method returns the hyperbolic tangent of a number.
Based on hyperbolic sine and cosine:
Math.tanh(x) = Math.sinh(x) / Math.cosh(x)
.
Syntax
Math.tanh(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The hyperbolic tangent of the number.
Browser Support
Math.
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.
is not supported in Internet Explorer.
JavaScript Math.trunc()
Example
let x = Math.trunc(8.76);
Try it Yourself 
Description
The
Math.trunc()
method returns the integer part of a number.
The
Math.trunc()
method removes the decimals (does NOT round the number).
Syntax
Math.trunc(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
The integer part of the number.
Browser Support
Math.trunc()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Math.trunc()
is not supported in Internet Explorer.
JavaScript Number isFinite()
Examples
Is 123 finite?
Number.isFinite(123)
Try it Yourself 
Number.isFinite("123")
Try it Yourself 
Description
The
Number.isFinite()
method returns
true
if a number is a finite number.
Infinite (not finite) numbers are
Infinity
,
-Infinity
, or
NaN
Otherwise it returns
false
.
Difference Between isFinite() and Number.isFinite()
isFinite()
returns
true
if a
value
is a finite number.
Number.isFinite()
returns
true
if a
number
is a finite number.
In other words:
isFinite()
converts the value to a number before testing it.
Examples
// This returns true
isFinite(123)
Try it Yourself 
// This returns false
Number.isFinite("123")
Try it Yourself 
Syntax
Number.isFinite(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean
true
if the value is a finite Number, otherwise
false
.
More Examples
Number.isFinite(+1.23)
Number.isFinite(-1.23)
Number.isFinite('2005/12/12')
Try it Yourself 
Number.isFinite(5-2)
Number.isFinite(5/2)
Number.isFinite(0)
Number.isFinite(0/0)
Number.isFinite(Infinity)
Number.isFinite(-Infinity)
Number.isFinite(NaN)
Try it Yourself 
Browser Support
Number.isFinite()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.isFinite()
is not supported in Internet Explorer.
JavaScript Number isSafeInteger()
Examples
Are these safe integers?
Number.isSafeInteger(123);
Number.isSafeInteger(-123);
Number.isSafeInteger('123');
Try it Yourself 
Number.isSafeInteger(5-2);
Number.isSafeInteger(0);
Number.isSafeInteger(0.5);
Number.isSafeInteger(0/0);
Try it Yourself 
Description
The
Number.isSafeInteger()
method returns
true
if a number is a safe integer.
Otherwise it returns
false
.
What is a JavaScript Safe Integer?
A safe integer is an integer that can be exactly represented as an IEEE-754 
double precision number: all integers from (2
53
- 1) to -(2
53
- 1).
Syntax
Number.isSafeInteger(
value
)
Parameters
Parameter
Description
value
Required.
The value to be tested.
Return Value
Type
Description
A boolean
true
if the value is a safe integer, otherwise
false
.
More Examples
Are these safe integers?
Number.isSafeInteger(Math.pow(2, 53));
Number.isSafeInteger(Math.pow(2, 53) - 1);
Try it Yourself 
Number.isSafeInteger(true);
Number.isSafeInteger(false);
Number.isSafeInteger(Infinity);
Number.isSafeInteger(-Infinity);
Try it Yourself 
Browser Support
Number.isSafeInteger()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.isSafeInteger()
is not supported in Internet Explorer.
JavaScript RegExp g Modifier
Example
A global search for "is":
let pattern = /is/g;
let result = text.match(pattern);
Try it Yourself 
Description
The "g" modifier specifies a global match.
A global match finds all matches (not only the first).
Browser Support
/
regexp
/g
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
", "g")
or simply:
/
regexp
/g
More Examples
Using the RegExp function exec():
let text = "Is this all there is?";
let pattern = /is/g;
let result = pattern.exec(text);
Try it Yourself 
Using the RegExp function test():
let pattern = /is/g;
let result = pattern.test(text);
Try it Yourself 
Using the String function match():
let pattern = /is/g;
let result = text.match(pattern);
Try it Yourself 
A global, case-insensitive search for "is":
Using the RegExp function exec():
let text = "Is this all there is?";
let result = /is/gi.exec(text);
Try it Yourself 
Using the RegExp function test():
let text = "Is this all there is?";
let result = /is/gi.test(text);
Try it Yourself 
Using the String function match():
let text = "Is this all there is?";
let result = text.match(/is/gi);
Try it Yourself 
Example
let pattern = /W3S/g;
let result = pattern.global;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp i Modifier
Do a case-insensitive serch for "is":
let text = "Visit W3Schools";
let pattern = /w3schools/i;
let result = text.match(pattern);
Try it Yourself 
Description
The "i" modifier specifies a case-insenitive match.
Browser Support
/
regexp
/i
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
", "i")
or simply:
/
regexp
/i
More Examples
Do a case-insensitive search for "w3schools" in a string:
Using the RegExp function exec()::
let text = "Visit W3Schools";
let pattern = /w3schools/i;
let result = pattern.exec(text);
Try it Yourself 
Using the RegExp function test()::
let text = "Visit W3Schools";
let pattern = /w3schools/i;
let result = pattern.test(text);
Try it Yourself 
Using the String function match():
let text = "Visit W3Schools";
let pattern = /w3schools/i;
let result = text.match(pattern);
Try it Yourself 
Example
let pattern = /W3S/i;
let result = pattern.ignoreCase;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp d Modifier
Example
Match every text that starts or ends with aa or bb:
let text = "aaaabb";
let result = text.match(/(aa)(bb)/d);
Try it Yourself 
More examples below.
Description
The "d" modifier specifies the start and end of match.
The "d" modifier is case-sensitive.
Browser Support
/
regexp
/d
is an ES2022 feature.
JavaScript 2022 (ES2022) is supported in all modern browsers since March 2023:
Chrome 94
Edge 94
Firefox 93
Safari 16.4
Opera 79
Sep 2021
Sep 2021
Oct 2021
Mar 2023
Oct 2021
Syntax
new RegExp("
regexp
", "d")
or simply:
/
regexp
/d
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp Group [abc]
Example
A global search for the character "h" in a string:
let text = "Is this all there is?";
let pattern = /[h]/g;
Try it Yourself 
Description
Brackets [abc] specifies matches for the characters inside the brackets.
Brackets can define single characters, groups, or character spans:
[abc]
Any of the characters a, b, or c
[A-Z]
Any character from uppercase A to uppercase Z
[a-z]
Any character from lowercase a to lowercase z
[A-z]
Any character from uppercase A to lowercase z
Browser Support
/[
abc
]/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("[
abc
]")
or simply:
/[
abc
]/
Syntax with modifiers
new RegExp("[
abc
]", "g")
or simply:
/[
abc
]/g
Example
Do a global search for the characters "i" and "s" in a 
string:
let text = "Do you know if this is all there is?";
let pattern = /[is]/gi;
Try it Yourself 
Example
A global search for the character span from lowercase "a" to lowercase "h" in a string:
let text = "Is this all there is?";
let pattern = /[a-h]/g;
Try it Yourself 
Example
Do a global search for the character-span from uppercase "A" to uppercase "E":
let text = "I SCREAM FOR ICE CREAM!";
let pattern = /[A-E]/g;
Try it Yourself 
Example
A global search for the character span from uppercase "A" to lowercase "e" 
(will search for all uppercase letters, but only lowercase letters from a to e.)
let text = "I Scream For Ice Cream, is that OK?!";
let pattern = /[A-e]/g;
Try it Yourself 
Example
A global, case-insensitive search for the character span [a-s]:
let text = "I Scream For Ice Cream, is that OK?!";
let pattern = /[a-s]/gi;
Try it Yourself 
Example
A "g" and "gi" search for characters:
let text = "THIS This this";
let result1 = text.match(/[THIS]/g);
let result2 = text.match(/[THIS]/gi);
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp Group (x|y)
Example
A global search for any of the alternatives red or green:
let text = "re, green, red, green, gren, gr, blue, yellow";
let pattern= /(red|green)/g;
Try it Yourself 
Description
The (x|y) expression is used to find any of the alternatives specified.
The alternatives can be of any characters.
Browser Support
/(x|y)/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("(
x
|
y
)")
or simply:
/(
x
|
y
)/
Syntax with modifiers
new RegExp("(
x
|
y
)", "g")
or simply:
/(
x
|
y
)/g
More Examples
Example
Do a global search to find any of the specified alternatives (0|5|7):
let text = "01234567890123456789";
let pattern = /(0|5|7)/g;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\W
Metacharacter
Example
A global search for non-word characters:
let text = "Give 100%!";
let pattern = /\W/g;
Try it Yourself 
Description
The \W metacharacter matches non-word characters:
A word character is a character a-z, A-Z, 0-9, including _ (underscore).
Browser Support
/\W/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\W")
or simply:
/\W/
Syntax with modifiers
new RegExp("\\W", "g")
or simply:
/\W/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp \w Metacharacter
Example
A global search for word characters:
let text = "Give 100%!";
let pattern = /\w/g;
Try it Yourself 
Description
The \w metacharacter matches word characters.
A word character is a character a-z, A-Z, 0-9, including _ (underscore).
Browser Support
/\w/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\w")
or simply:
/\w/
Syntax with modifiers
new RegExp("\\w", "g")
or simply:
/\w/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp Group [^abc]
Example
A global search for characters that are NOT h:
let text = "Is this all there is?";
let pattern = /[^h]/g;
Try it Yourself 
Description
Brackets [^abc] specifies matches for any character NOT between the brackets.
Brackets can define single characters, groups, or character spans:
[^abc]
Not any of the characters a, b, or c
[^A-Z]
Not any character from uppercase A to uppercase Z
[^a-z]
Not any character from lowercase a to lowercase z
[^A-z]
Not any character from uppercase A to lowercase z
Browser Support
/[
^abc
]/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("[^
xyz
]")
or simply:
/[^
xyz
]/
Syntax with modifiers
new RegExp("[^
xyz
]", "g")
or simply:
/[^
xyz
]/g
More Examples
Example
Do a global search for characters that are NOT "i" and "s" in a 
string:
let text = "Do you know if this is all there is?";
let pattern = /[^is]/gi;
Try it Yourself 
Example
Do a global search for the character-span NOT from lowercase "a" to lowercase 
"h" in a string:
let text = "Is this all there is?";
let pattern = /[^a-h]/g;
Try it Yourself 
Example
Do a global search for the character-span NOT from uppercase "A" to uppercase 
"E":
let text = "I SCREAM FOR ICE CREAM!";
let pattern = /[^A-E]/g;
Try it Yourself 
Example
Do a global search for the character-span NOT from uppercase "A" to lowercase 
"e":
let text = "I Scream For Ice Cream, is that OK?!";
let pattern = /[^A-e]/g;
Try it Yourself 
Tip:
Use the
[abc]
expression to find any character 
between the brackets.
Example
Do a global, case-insensitive search for the character-span that's NOT [a-s]:
let text = "I Scream For Ice Cream, is that OK?!";
let pattern = /[^a-s]/gi;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\d
Metacharacter
Example
A global search for digits:
let text = "Give 100%!";
let pattern= /\d/g;
Try it Yourself 
Description
The \d metacharacter matches digits from 0 to 9.
Browser Support
/\d/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\d")
or simply:
/\d/
Syntax with modifiers
new RegExp("\\d", "g")
or simply:
/\d/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\s
Metacharacter
Example
A global search for whitespace characters:
let text = "Is this all there is?";
let pattern = /\s/g;
Try it Yourself 
Description
The \s metacharacter matches whitespace character.
Whitespace characters can be:
A space character
A tab character
A carriage return character
A new line character
A vertical tab character
A form feed character
Browser Support
/\s/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\s")
or simply:
/\s/
Syntax with modifiers
new RegExp("\\s", "g")
or simply:
/\s/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\D
Metacharacter
Example
A global search for non-digit characters:
let text = "Give 100%!";
let pattern = /\D/g;
Try it Yourself 
Description
The \D metacharacter matches non-digit characters.
Browser Support
/\D/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\D")
or simply:
/\D/
Syntax with modifiers
new RegExp("\\D", "g")
or simply:
/\D/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
{X}
Quantifier
Example
A global search for a substring that contains a sequence of four digits:
let text = "100, 1000 or 10000?";
let pattern = /\d{4}/g;
Try it Yourself 
Description
The
n
{
X
} quantifier matches any string that contains a sequence of
X
n
's.
X
must be a number.
Browser Support
/n{X}/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
{
X
}")
or simply:
/
n
{
X
}/
Syntax with modifiers
new RegExp("
n
{
X
}", "g")
or simply:
/
n
{
X
}/g
JavaScript RegExp
{X,Y}
Quantifier
Example
A global search for a substring that contains a sequence of three to four digits:
let text = "100, 1000 or 10000?";
let pattern = /\d{3,4}/g;
Try it Yourself 
Description
The
n
{
X
,
Y
} quantifier matches any string that contains a sequence of X 
to Y
n
's.
X
and
Y
must be a number.
Browser Support
/n{X,Y}/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
{
X,Y
}")
or simply:
/
n
{
X,Y
}/
Syntax with modifiers
new RegExp("
n
{
X,Y
}", "g")
or simply:
/
n
{
X,Y
}/g
JavaScript
lastIndex
Property
Example
let text = "The rain in Spain stays mainly in the plain";
let pattern = /ain/g;
let result = "";
while (pattern.test(text)==true) {
result += "Found at pos " + pattern.lastIndex + "<br>";
}
Try it Yourself 
Description
The lastIndex property specifies the index at which to start the next match.
Note:
This property only works if the "g" modifier is set.
This property returns an integer that specifies the character position 
immediately after the last match found by exec( ) or test( ) methods.
Note:
exec( ) and test( ) reset lastIndex to 0 if they do not get a 
match.
Browser Support
lastIndex
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.lastIndex
Return Value
Type
Description
Number
An integer that specifies the character position immediately after the last 
match found by exec( ) or test( ) methods
JavaScript
source
Property
Example
let text = "Visit W3Schools";
let pattern = /W3S/g;
let result = pattern.source;
Try it Yourself 
Description
The source property returns the text of the RegExp pattern.
Browser Support
source
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.source
Return Value
Type
Description
String
The text of the RegExp pattern
JavaScript Array []
Example
// Create an Array
const cars = ["Saab", "Volvo", "BMW"];
Try it Yourself 
More Examples Below !
Description
The
[ ]
constructor creates a new array object.
Syntax
[
iterable
]
Parameters
Parameter
Description
iterable
Required.
An iterable object with values.
Return Value
Type
Description
Array
A new Array object.
More Examples
Example
Create an empty array and add values:
// Create an Array
const cars = [];
// Add Values to the Set
cars.push("Saab");
cars.push("Volvo");
cars.push("BMW");
Try it Yourself 
Example
Create an array with the new Array() method:
// Create an Array
const cars = new Array(["Saab", "Volvo", "BMW"]);
Try it Yourself 
Browser Support
the [] array constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number POSITIVE_INFINITY
Examples
let x = Number.POSITIVE_INFINITY;
Try it Yourself 
Create a positive infinity:
let n = (Number.MAX_VALUE) * 2;
Try it Yourself 
Description
POSITIVE_INFINITY
returns positive infinity.
POSITIVE_INFINITY
is "something higher than any other number".
Number.
POSITIVE_INFINITY
POSITIVE_INFINITY a property of the JavaScript Number object.
You can 
only use it 
as Number.POSITIVE_INFINITY.
Using x.POSITIVE_INFINITY, where x is a variable, will return undefined:
Example
let x = 100;
x.NEGATIVE_INFINITY;
Try it Yourself 
Syntax
Number.POSITIVE_INFINITY
Return Value
Type
Description
A number
Infinity
Browser Support
Number.POSITIVE_INFINITY
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number NEGATIVE_INFINITY
Examples
let x = Number.NEGATIVE_INFINITY;
Try it Yourself 
Create a negative infinity:
let n = (-Number.MAX_VALUE) * 2;
Try it Yourself 
Description
Number.NEGATIVE_INFINITY
returns negative infinity.
Number.NEGATIVE_INFINITY
is "a number lower than any other number".
Number.
NEGATIVE_INFINITY
NEGATIVE_INFINITY is a property of the JavaScript Number object.
You can only use it as Number.NEGATIVE_INFINITY.
Using x.NEGATIVE_INFINITY, where x is a variable, will return undefined:
Example
let x = 100;
x.NEGATIVE_INFINITY;
Try it Yourself 
Syntax
Number.NEGATIVE_INFINITY
Return Value
Type
Description
A number
-Infinity
Browser Support
Number.NEGATIVE_INFINITY
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Number.parseFloat()
Examples
Number.parseFloat(10);
Number.parseFloat("10");
Number.parseFloat("10.33");
Number.parseFloat("34 45 66");
Number.parseFloat("He was 40");
Try it Yourself 
Number.parseFloat("40.00");
Number.parseFloat(" 40 ");
Number.parseFloat("40 years");
Number.parseFloat("40H")
Number.parseFloat("H40");
Try it Yourself 
Description
The
Number.parseFloat()
method parses a value as a string and returns the first number.
Syntax
Number.parseFloat(
value
)
Parameters
Parameter
Description
value
Required.
The value to parse.
Return Value
Type
Description
Number
NaN if no number is found.
Browser Support
Number.parseFloat()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.parseFloat()
is not supported in Internet Explorer.
JavaScript Number.parseInt()
Examples
Number.parseInt("10");
Number.parseInt("10.00");
Number.parseInt("10.33");
Number.parseInt("34 45 66");
Number.parseInt("   60   ");
Number.parseInt("40 years");
Number.parseInt("He was 40");
Try it Yourself 
Number.parseInt("10", 10);
Number.parseInt("010");
Number.parseInt("10", 8);
Number.parseInt("0x10");
Number.parseInt("10", 16);
Try it Yourself 
Description
The
Number.parseInt
method parses a value as a string and returns the first integer.
A radix parameter specifies the number system to use:
2 = binary, 8 = octal, 10 = decimal, 16 = hexadecimal.
If radix is omitted, JavaScript assumes radix 10. 
If the value begins with "0x", JavaScript assumes radix 16.
Syntax
Number.parseInt(
string, radix
)
Parameters
Parameter
Description
value
Required.
The value to be parsed.
radix
Optional. Default is 10.
A number (2 to 36) specifying the number system.
Return Value
Type
Description
Number
NaN if no integer is found.
Browser Support
Number.parseInt()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Number.parseInt()
is not supported in Internet Explorer.
JavaScript Object.defineProperty()
Example
Add a property:
// Create an Object:
const person = {
firstName: "John",
lastName: "Doe",
language: "EN"
};
// Add a new Property
Object.defineProperty(person, "year", {value:"2008"})
Try it Yourself 
Change a property:
// Create an object:
const person = {
firstName: "John",
lastName: "Doe",
language: "EN"
};
// Change a property
Object.defineProperty(person, "language", {value:"NO"})
Try it Yourself 
More Examples Below !
Description
The
Object.defineProperty()
method adds or changes an object property.
The
Object.defineProperty()
method lets you change property metadata.
The
Object.defineProperty()
method lets you add getters and setters.
See more example below.
Syntax
Object.defineProperty(
object, property, descriptor
)
Parameters
Parameter
Description
object
Required.
The object.
object
Required.
The property name.
descriptor
Required.
A descriptor of the property to be added or changed:
value:
value
writable : true|false
enumerable : true|false
configurable : true|false
get :
function
set :
function
Return Value
Type
Description
Object
The passed object with the changes made.
More Examples
Example
// Create an Object:
const person = {
firstName: 
  "John",
lastName : "Doe",
language : "NO",
};
// Change a Property:
Object.defineProperty
(person, "language", {
value: "EN",
writable : true,
enumerable : true,
configurable : true
});
// 
  Enumerate Properties
let txt = "";
for (let x in person) {
txt += person[x] + "<br>";
}
// Display Properties
document.getElementById("demo").innerHTML = 
  txt;
Try it Yourself 
Next example is the same code, except it hides the language property from enumeration:
Example
// Create an Object:
const person = {
firstName: 
  "John",
lastName : "Doe",
language : "NO",
};
// Change a Property:
Object.defineProperty
(person, "language", {
value: "EN",
writable : true,
enumerable : false,
configurable : true
});
// 
  Enumerate Properties
let txt = "";
for (let x in person) {
txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = 
  txt;
Try it Yourself 
Setters and Getters
This example creates a setter and a getter to secure upper case updates of language:
Example
// Create an Object:
const person = {
firstName: "John",
lastName :  "Doe",
language : "NO"
};
// Change a Property:
Object.defineProperty
(person, "language", {
get : function() { return 
  language },
set : function(value) { language = value.toUpperCase()}
});
// Change Language
person.language = "en";
// Display Language
document.getElementById("demo").innerHTML = person.language;
Try it Yourself 
This example uses a getter to join first name and last name:
Example
// Create an Object:
const person = {
firstName: "John",
lastName :  "Doe"
};
// Define a Getter
Object.defineProperty(person, "fullName", {
get: function () {return this.firstName + " " + this.lastName;}
});
Try it Yourself 
JavaScript Getters and Setters are perfect for creating counters:
Example
// Define Setters and Getters
Object.defineProperty(obj, "reset", {
get : function () {this.counter = 0;}
});
Object.defineProperty(obj, "increment", {
get : function () {this.counter++;}
});
Object.defineProperty(obj, "decrement", {
get : function () {this.counter--;}
});
Object.defineProperty(obj, "add", {
set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, "subtract", {
set : function (value) {this.counter -= value;}
});
Try it Yourself 
Browser Support
Object.defineProperty()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object.defineProperties()
Example
Add properties:
// Create an Object:
const person = {
firstName: "John",
lastName: "Doe"
};
// Add Properties
Object.defineProperties(person, {
language: {value: "en"},
year: {value: "Hello"}
});
Try it Yourself 
Description
The
Object.defineProperties()
method adds or changes object properties.
The
Object.defineProperties()
method lets you change property metadata.
The
Object.defineProperties()
method lets you add getters and setters.
See more example below.
Syntax
Object.defineProperty(
object , property, descriptor
)
Parameters
Parameter
Description
object
Required.
The object.
object
Required.
The property name.
descriptor
Required.
A descriptor of the properties to be added or changed:
value:
value
writable : true|false
enumerable : true|false
configurable : true|false
get :
function
set :
function
Return Value
Type
Description
Object
The object beeing passed, with the changes made.
Browser Support
Object.defineProperties()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Number valueOf()
Example
Get the primitive value of a number:
let num = 15;
let n = num.valueOf();
Try it Yourself 
Description
The
valueOf()
method returns the primitive value of a number.
Syntax
number
.valueOf()
Parameters
NONE
Return Value
Type
Description
A number
The primitive value of the number.
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript RegExp
\f
Metacharacter
Example
Search for a form feed character in a string:
let text = "Visit W3Schools.\fLearn Javascript.";
let pattern = /\f/;
Try it Yourself 
Description
The \f metacharacter matches form feed characters.
Browser Support
/\f/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\f")
or simply:
/\f/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\t
Metacharacter
Example
Search for a tab character in a string:
let text = "Visit W3Schools.\tLearn Javascript.";
let pattern = /\t/;
Try it Yourself 
Description
The \t metacharacter matches horizontal tabs (tabulators).
Browser Support
/\t/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\t")
or simply:
/\t/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\xxx
Metacharacter
Example
Do a global search for octal number 127 (W) in a string:
let text = "Visit W3Schools. Hello World!";
let pattern = /\127/g;
Try it Yourself 
Description
The \xxx metacharacters matches the Latin character by an octal number (xxx).
Browser Support
/\xxx/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\
xxx
")
or simply:
/\
xxx
/
Syntax with modifiers
new RegExp("\\xxx", "g")
or simply:
/\xxx/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\xdd
Metacharacter
Example
Do a global search for the hexadecimal number 57 (W) in a string:
let text = "Visit W3Schools. Hello World!";
let pattern = /\x57/g;
Try it Yourself 
Description
The \xdd metacharacters matches Latin characters specified by a hexadecimal number (dd).
Browser Support
/\xdd/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\x
dd
")
or simply:
/\x
dd
/
Syntax with modifiers
new RegExp("\\x
dd
", "g")
or simply:
/\x
dd
/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp toString()
Example 1
Return the string value of the regular expression:
let pattern = new RegExp("Hello World", "g");
let text = pattern.toString();
Try it Yourself 
Description
The toString() method returns the string value of the regular expression.
Example 2
Return the string value of the regular expression:
let pattern = /Hello World/g;
let text = pattern.toString();
Try it Yourself 
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.toString()
Parameters
None.
Return Value
Type
Description
String
The string value of the regular expression
JavaScript new Set
Example
// Create a Set
const letters = new Set(["a","b","c"]);
Try it Yourself 
More Examples Below !
Description
The
new Set()
constructor creates a Set object.
Syntax
new Set(
iterable
)
Parameters
Parameter
Description
iterable
Required.
An iterable object with values.
Return Value
Type
Description
Set
A new Set object.
More Examples
Example
Create an empty set and add values:
// Create a Set
const letters = new Set();
// Add Values to the Set
letters.add("a");
letters.add("b");
letters.add("c");
Try it Yourself 
Browser Support
Set
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Set
is not supported in Internet Explorer.
JavaScript continue
Examples
Loop through a block of code, but skip the value of 3:
let text = "";
for (let i = 0; i < 5; i++) {
if (i === 3) continue;
text += i + "<br>";
}
Try it Yourself 
let text = "";
let i = 0;
while (i < 5) {
i++;
if (i === 3) continue;
text += i + "<br>";
}
Try it Yourself 
More examples below.
Description
The
continue
statement breaks one iteration (in the loop) if a specified 
condition occurs, and continues with the next iteration in the loop.
The difference between continue and the
break
statement, is instead of"jumping out" of a loop, the continue statement 
"jumps over" one iteration in the loop.
However, when the continue statement is executed, it behaves differently for 
different types of loops:
In a
while
loop, the condition is tested, and if it is true, the loop is executed again
In a
for loop
, the increment expression (e.g. i++) is first evaluated, and then the condition is tested to find out if another iteration should be done
The continue statement can also be used with an optional label reference.
Note:
The continue 
statement (with or without a label reference) can only be used inside a loop.
Syntax
continue;
Using the optional label reference:
continue
labelname;
More Examples
Skip the numbers 2 and 3 (using the OR operator):
let text = "";
for (let i = 1; i < 8; i++) {
if (i === 2 || i === 3) continue;
text += i + ""<br>";
}
Try it Yourself 
Loop over an array, but skip "Saab":
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
for (let = 0; i < cars.length; i++) {
if (cars[i] === "Saab") {
continue;
}
text += cars[i] + "<br>";
}
Try it Yourself 
Example
With a label reference, skip a value in a nested loop:
let text = "";
// The first for loop is labeled Loop1:
Loop1:
for (let i = 0; i < 3; i++) {
text += i + "<br>";
// The second for loop is labeled Loop2:
Loop2:
for (let i = 10; i < 15; i++) {
if (i === 12) continue Loop2;
text += i + "<br>";
}
}
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Break and Continue
JavaScript Tutorial:
JavaScript For Loop
JavaScript Tutorial:
JavaScript While Loop
JavaScript Tutorial:
JavaScript break Statement
JavaScript Reference:
JavaScript for Statement
JavaScript Reference:
JavaScript while Statement
Browser Support
continue
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript do...while Loop
Example
Execute a code block once, an then continue if condition (i < 5) is true:
let text = "";
let i = 0;
do {
text += i + "<br>";
i++;
}
while (i < 5);
Try it Yourself 
Description
The
do...while
statements combo defines a code block to be executed once,
and repeated as long as a condition is
true
.
The
do...while
is used when you want to run a code block
at least one time
.
Syntax
do {
code block to be executed
}
while (
condition
);
Parameters
Parameter
Description
condition
Required.
The condition for running the code block.
If
true
, the loop will start over again, otherwise it ends.
JavaScript Loop Statements
Statement
Description
break
Breaks out of a loop
continue
Skips a value in a loop
while
Loops a code block while a condition is true
do...while
Loops a code block once, and then while a condition is true
for
Loops a code block while a condition is true
for...of
Loops the values of any iterable
for...in
Loops the properties of an object
Browser Support
do..while
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Object.getOwnPropertyDescriptor()
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get Properties
let descriptor = Object.getOwnPropertyDescriptor(person);
Try it Yourself 
Description
The
Object.getOwnPropertyDescriptor()
method returns the property descriptors of an object.
The
Object.getOwnPropertyDescriptor()
method does not change the original object.
Syntax
Object.getOwnPropertyDescriptor(
object
)
Parameters
Parameter
Description
object
Required.
An iterable object.
Return Value
Type
Description
Array
An interable array containing the keys of the object.
Browser Support
Object.getOwnPropertyDescriptor()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
Object.getOwnPropertyDescriptors()
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get Properties
let descriptors = Object.getOwnPropertyDescriptors(person);
Try it Yourself 
Description
The
Object.getOwnPropertyDescriptors()
method returns the property descriptors of an object.
The
Object.getOwnPropertyDescriptors()
method does not change the original object.
Syntax
Object.getOwnPropertyDescriptors(
object
)
Parameters
Parameter
Description
object
Required.
The object to get the property descriptors from.
Return Value
Type
Description
Object
An object containing the property descriptors.
Browser Support
Object.getOwnPropertyDescriptors()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object.isExtensible()
Example
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Prevent Extensions
Object.preventExtensions(person);
// This will return false
let answer = Object.isExtensible(person);
Try it Yourself 
More Examples Below !
Description
The
Object.isExtensible()
returns true if an object is extensible.
Syntax
Object.isExtensible(
object
)
Parameters
Parameter
Description
object
Required.
The object to check.
Return Value
Type
Description
Boolean
true
if the object is extensible.
false
if not.
More Examples
Example
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Prevent Extensions
Object.preventExtensions(fruits);
// This will return false
let answer = Object.isExtensible(fruits);
Try it Yourself 
Browser Support
Object.isExtensible()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object.isSealed()
Example
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Seal Object
Object.seal(person);
// This will return true
let answer = Object.isSealed(person);
Try it Yourself 
More Examples Below !
Description
The
Object.isSealed()
returns true if an object is sealed.
Syntax
Object.isSealed(
object
)
Parameters
Parameter
Description
object
Required.
The object to check.
Return Value
Type
Description
Boolean
true
if the object is sealed.
false
if not.
More Examples
Example
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Seal Array
Object.seal(fruits);
// This will return true
let answer = Object.isSealed(fruits);
Try it Yourself 
Browser Support
Object.isSealed()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript RegExp
*
Quantifier
Example 1
A global search for an "l", followed by zero or more "o" 
characters:
let text = "Hellooo World! Hello W3Schools!";
let pattern = /lo*/g;
Try it Yourself 
Description
The
n
* quantifier matches any string that contains zero or more occurrences of
n
.
Example 2
A global search for a "1", 
followed by zero or more "0" characters:
let text = "1, 100 or 1000?";
let pattern = /10*/g;
Try it Yourself 
Browser Support
/n*/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
*")
or simply:
/
n
*/
Syntax with modifiers
new RegExp("
n
*", "g")
or simply:
/
n
*/g
JavaScript RegExp
?
Quantifier
Example
Do a global search for a "1", 
followed by zero or one "0" characters:
let text = "1, 100 or 1000?";
let pattern = /10?/g;
Try it Yourself 
Description
The
n
? quantifier matches any string that contains zero or one occurrences of
n
.
Browser Support
/n?/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
?")
or simply:
/
n
?/
Syntax with modifiers
new RegExp("
n
?", "g")
or simply:
/
n
?/g
JavaScript RegExp
^
Quantifier
Example
A global search for "Is" at the beginning of a string:
let text = "Is this his";
let pattern = /^Is/g;
Try it Yourself 
Description
The
^n
quantifier matches any string with
n
at the beginning of it.
Tip:
Use the
n
$
quantifier 
to match any string with
n
at the END of it.
Browser Support
/^n/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("^
n
")
or
/^
n
/
Syntax with modifiers
new RegExp("^
n
", "g")
or simply:
/\^
n
/g
More Examples
Example
A global, case-insensitive, multiline search for "is" at the beginning of each line:
let text = `Is this
all there
is`
let pattern = /^is/gmi;
Try it Yourself 
JavaScript RegExp
?=
Quantifier
Example
A search for "is" followed by " all":
let text = "Is this all there is";
let pattern = /is(?= all)/g;
Try it Yourself 
Description
The ?=
n
quantifier matches any string that is followed by a specific string
n
.
Tip:
Use the
?!
n
quantifier to match any string that is NOT followed by a specific string
n
.
Browser Support
/(?=n)/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
(?=
n)
")
or
/
regexp
(?=
n)
/
Syntax with modifiers
new RegExp("
regexp
(?=
n)
", "g")
or simply:
/
regexp
(?=
n)
/g
JavaScript RegExp
$
Quantifier
Example
A search for "is" at the end of a string:
let text = "Is this his";
let pattern = /is$/;
Try it Yourself 
Description
The
n
$ quantifier matches any string with
n
at the end of it.
Tip:
Use the
^n
quantifier 
to match any string with
n
at the BEGINNING of it.
Browser Support
/n$/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
$")
or
/
n
$/
Syntax with modifiers
new RegExp("
n
$", "g")
or simply:
/
n
$/g
More Examples
Example
A global, multiline search for "is" at the end of each line:
let text = `Is this
all there
is`
let pattern = /is$/gm;
Try it Yourself 
JavaScript RegExp
constructor
Property
Example
The constructor property returns a regular expression's constructor function.
let pattern = /Hello World/g;
let text = pattern.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the RegExp prototype.
For a regular expression the
constructor
property returns:
function RegExp() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.constructor
Return Value
function RegExp() { [native code] }
JavaScript RegExp global
Example
let pattern = /W3S/g;
let result = pattern.global;
Try it Yourself 
Description
The global property specifies whether or not the
"g" modifier
is set.
This property returns true if the "g" modifier is set, otherwise it returns false.
Browser Support
global
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.global
Return Value
Type
Description
Boolean
Returns true if the "g" modifier is set, false otherwise
JavaScript RegExp ignoreCase
Example
let pattern = /W3S/i;
let result = pattern.ignoreCase;
Try it Yourself 
Description
The ignoreCase property specifies whether or not the
"i" modifier
is set.
This property returns true if the "i" modifier is set, otherwise it returns false.
Browser Support
ignoreCase
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.ignoreCase
Return Value
Type
Description
Boolean
Returns true if the "i" modifier is set, false otherwise
JavaScript RegExp
?!
Quantifier
Example
Do a global, case insensitive search for "is"  
not followed by " all":
let text = "Is this all there is";
let pattern = /is(?! all)/gi;
Try it Yourself 
Description
The ?!
n
quantifier matches any string that is not followed by a specific string
n
.
Tip:
Use the
?=
n
quantifier to match any string that IS followed by a specific string
n
.
Browser Support
/(?!n)/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
(?!
n)
")
or
/
regexp
(?!
n)
/
Syntax with modifiers
new RegExp("
regexp
(?!
n)
", "g")
or simply:
/
regexp
(?!
n)
/g
JavaScript function
Example
Declare a function that outputs "Hello World" when it is called:
// Declare a function
function myFunction() {
document.getElementById("demo").innerHTML = "Hello World!";
}
// Call the function
myFunction();
Try it Yourself 
More examples below.
Description
The
function
statement declares a function.
A declared function is "saved for later use", and will be executed later, 
when it is invoked (called).
In JavaScript, functions are objects, and they have both properties and 
methods.
A function can also be defined using an expression (See
Function Definitions
).
Read our JavaScript Tutorial to learn all you need to know about functions. 
Start with the introduction chapter about
JavaScript Functions
and
JavaScript Scope
. For more detailed 
information, see our Function Section on
Function Definitions
,
Parameters
,
Invocation
and
Closures
.
Syntax
function
functionName
(
parameter
s
)
{
code to be executed
}
Parameters
Parameter
Description
functionName
Required.
The name of the function.
Naming rules: same as JavaScript variables.
parameters
Optional.
A set of arguments (parameter names), separated by commas.
The arguments are real values received by the function from the outside.
Inside the function, the arguments are used as local variables.
If a function is called with a missing argument, the value of the missing argument is set to
undefined
.
More Examples
Return the value of PI:
function myFunction() {
return Math.PI;
}
Try it Yourself 
Return the product of a and b:
function myFunction(a, b) {
return a * b;
}
Try it Yourself 
A function with different arguments can produce different results.
Convert Fahrenheit to Celsius:
function toCelsius(fahrenheit) {
return (5/9) * (fahrenheit-32);
}
Try it Yourself 
Functions can be used as variables.
Instead of:
temp = toCelsius(32);
text = "The temperature is " + temp + " Centigrade";
You can use:
text = "The temperature is " + toCelsius(32) + " Centigrade";
Try it Yourself 
JavaScript functions have a built-in object called arguments.
The arguments.length property returns the number of arguments received by the function:
function myFunction(a, b) {
return arguments.length;
}
Try it Yourself 
Click to call a function that outputs "Hello World":
<button onclick="myFunction()">Click me</button>
<p id="demo"></p>
<script>
function myFunction() {
document.getElementById("demo").innerHTML = "Hello World";
}
</script>
Try it Yourself 
When a function expression is stored in a variable, the variable contains a function:
const x = function (a, b) {return a * b};
Try it Yourself 
When a function is stored in a variable, the variable can be used as a function:
const x = function (a, b) {return a * b};
let z = x(4, 3);
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Functions
JavaScript Tutorial:
JavaScript Scope
JavaScript Tutorial:
JavaScript Function Definitions
JavaScript Tutorial:
JavaScript Function Parameters
JavaScript Tutorial:
JavaScript Function Invocation
JavaScript Tutorial:
JavaScript Function Closures
JavaScript Reference:
JavaScript return Statement
Browser Support
function
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript
String Reference
JavaScript Strings
A JavaScript string stores a series of characters like "John Doe".
A string can be any text inside double or single quotes:
let carName1 = "Volvo XC60";
let carName2 = 'Volvo XC60';
Try it Yourself 
String indexes are zero-based:
The first character is in position 0, the 
second in 1, and so on.
For a tutorial about Strings, read our
JavaScript String Tutorial
.
String Properties and Methods
Normally, strings like "John Doe", cannot have methods or properties 
because they are not objects.
But with JavaScript, methods and properties are also available to 
strings, because JavaScript treats strings as objects when executing methods and properties.
JavaScript String Methods
Name
Description
at()
Returns an indexed character from a string
charAt()
Returns the character at a specified index (position)
charCodeAt()
Returns the Unicode of the character at a specified index
codePointAt()
Returns the Unicode value at an index (position) in a string
concat()
Returns two or more joined strings
constructor
Returns the string's constructor function
endsWith()
Returns if a string ends with a specified value
fromCharCode()
Returns Unicode values as characters
includes()
Returns if a string contains a specified value
indexOf()
Returns the index (position) of the first occurrence of a value in a string
lastIndexOf()
Returns the index (position) of the last occurrence of a value in a string
length
Returns the length of a string
localeCompare()
Compares two strings in the current locale
match()
Searches a string for a value, or a regular expression, and returns the matches
padEnd()
Pads a string at the end
padStart()
Pads a string from the start
prototype
Allows you to add properties and methods to an object
repeat()
Returns a new string with a number of copies of a string
replace()
Searches a string for a pattern, and returns a string where the first match is replaced
replaceAll()
Searches a string for a pattern and returns a new string where all matches are replaced
search()
Searches a string for a value, or regular expression, and returns the index (position) of the match
slice()
Extracts a part of a string and returns a new string
split()
Splits a string into an array of substrings
startsWith()
Checks whether a string begins with specified characters
substr()
Extracts a number of characters from a string, from a start index (position)
substring()
Extracts characters from a string, between two specified indices (positions)
toLocaleLowerCase()
Returns a string converted to lowercase letters, using the host's locale
toLocaleUpperCase()
Returns a string converted to uppercase letters, using the host's locale
toLowerCase()
Returns a string converted to lowercase letters
toString()
Returns a string or a string object as a string
toUpperCase()
Returns a string converted to uppercase letters
trim()
Returns a string with removed whitespaces
trimEnd()
Returns a string with removed whitespaces from the end
trimStart()
Returns a string with removed whitespaces from the start
valueOf()
Returns the primitive value of a string or a string object
String HTML Wrapper Methods
HTML wrapper methods return a string wrapped inside an HTML tag.
These are not standard methods, and may not work as expected.
Method
Description
anchor()
Displays a string as an anchor
big()
Displays a string using a big font
blink()
Displays a blinking string
bold()
Displays a string in bold
fixed()
Displays a string using a fixed-pitch font
fontcolor()
Displays a string using a specified color
fontsize()
Displays a string using a specified size
italics()
Displays a string in italic
link()
Displays a string as a hyperlink
small()
Displays a string using a small font
strike()
Displays a string with a strikethrough
sub()
Displays a string as subscript text
sup()
Displays a string as superscript text
JavaScript String concat()
Examples
Join two strings:
let text1 = "sea";
let text2 = "food";
let result = text1.concat(text2);
Try it Yourself 
Join two strings:
let text1 = "Hello";
let text2 = "world!";
let result = text1.concat(" ", text2);
Try it Yourself 
More examples below.
Description
The
concat()
method joins two or more strings.
The
concat()
method does not change the existing strings.
The
concat()
method returns a new string.
Syntax
string
.concat(
string1
,
string2
, ...,
stringX
)
Parameters
Parameter
Description
string1,
string2,
...
stringX
Required.
The strings to be joined.
Return Value
Type
Description
A string
A new string containing the combined strings.
More Examples
Join three strings:
let text1 = "Hello";
let text2 = "world!";
let text3 = "Have a nice day!";
let result = text1.concat(" ", text2, " ", text3);
Try it Yourself 
Browser Support
concat()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String endsWith()
Examples
Check if a string ends with "world":
let text = "Hello world";
let result = text.endsWith("world");
Try it Yourself 
let text = "Hello World";
let result = text.endsWith("world");
Try it Yourself 
More examples below.
Description
The
endsWith()
method returns
true
if a string ends with a specified string.
Otherwise it returns
false
.
The
endsWith()
method is case sensitive.
Syntax
string
.endsWith(
searchvalue
,
length
)
Parameters
Parameter
Description
searchvalue
Required.
The string to search for.
length
Optional.
The length of the string to search.
Default value is the length of the string.
Return Value
Type
Description
A boolean
true
if the string ends with the value,
otherwise
false
.
More Examples
Check if the 11 first characters of a string ends with "world":
let text = "Hello world, welcome to the universe.";
text.endsWith("world", 11);
Try it Yourself 
Browser Support
endsWith()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
endsWith()
is not supported in Internet Explorer.
JavaScript Array constructor
Example
Get the array constructor:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the Array prototype.
For JavaScript arrays the
constructor
property returns:
function Array() { [native code] }
Syntax
array
.constructor
Return Value
function Array() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Object.preventExtensions()
Example
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Prevent Extensions
Object.preventExtensions(person);
// This will throw an error
person.nationality = "English";
Try it Yourself 
More Examples Below !
Description
The
Object.preventExtensions()
method prevents adding properties to an object.
You can use
Object.isExtensible()
to check if an object is extensible.
Syntax
Object.preventExtensions(
object
)
Parameters
Parameter
Description
object
Required.
The object to prevent extensions to.
Return Value
Type
Description
Object
The object that was modified.
More Examples
Example
// Create Array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.preventExtensions(fruits);
// This will throw an error:
fruits.push("Kiwi");
Try it Yourself 
Browser Support
Object.preventExtensions()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript Object valueOf()
Examples
Get the value of fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const myArray = fruits.valueOf();
Try it Yourself 
fruits.valueOf()
returns the same as fruits:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const myArray = fruits;
Try it Yourself 
Description
The
valueOf()
method returns the primitive value of an object.
If the object has no primitive value,
valueOf()
returns the object itself.
The
valueOf()
method does not change the original object.
Syntax
object
.valueOf()
Parameters
NONE
Return Value
The primitive value of an object.
If the object has no primitive value,
valueOf()
returns the object itself.
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript RegExp exec()
Example
Search a string for the character "e":
let text = "The best things in life are free";
let result = /e/.exec(text);
Try it Yourself 
Description
The exec() method tests for a match in a string.
If it finds a match, it returns a result array, otherwise it returns null.
Browser Support
exec()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.exec(
string
)
Parameter Values
Parameter
Description
string
Required. The string to be searched
Return Value
Type
Description
Array
An array containing the matched text if it finds a match, otherwise it 
returns null
More Examples
Example
Do a global search for "Hello" and "W3Schools" in a string:
let text = "Hello world!";
// Look for "Hello"
let result1 = /Hello/.exec(text);
// Look for "W3Schools"
let result2 = /W3Schools/.exec(text);
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript Set Reference
A JavaScript Set is a collection of unique values.
Each value can only occur once in a Set.
The values can be of any type, primitive values or objects.
How to Create a Set
You can create a JavaScript Set by:
Passing an Array to
new Set()
Create a Set and use
add()
to add values
Example 1
Pass an Array to the
new Set()
constructor:
// Create a Set
const letters = new Set(["a","b","c"]);
Try it Yourself 
Example 2
Create a Set and add values:
// Create a Set
const letters = new Set();
// Add Values to the Set
letters.add("a");
letters.add("b");
letters.add("c");
Try it Yourself 
JavaScript Set Methods and Properties
Method
Description
new Set()
Creates a new Set
add()
Adds a new element to the Set
clear()
Removes all elements from a Set
delete()
Removes an element from a Set
entries()
Returns an Iterator with the [value,value] pairs from a Set
forEach()
Invokes a callback for each element
has()
Returns true if a value exists
keys()
Same as values()
values()
Returns an Iterator with the values in a Set
Sets have only one property:
Property
Description
size
Returns the number of elements in a Set
The new Set() Method
Pass an Array to the
new Set()
constructor:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
Try it Yourself 
Listing Set Elements
You can list all Set elements (values) with a
for..of
loop:
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Elements
let text = "";
for (const x of letters) {
text += x;
}
Try it Yourself 
JavaScript Set has()
The has() Method
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Does the Set contain "d"?
answer = letters.has("d");
Try it Yourself 
Description
The
has()
method returns
true
if a specified value exists in a set.
Syntax
set
.has(
value
)
Parameters
Parameter
Description
value
Required.
The value to test for.
Return Value
Type
Description
Boolean
true
if the value exists, otherwise
false
.
Browser Support
set.has()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.has()
is not supported in Internet Explorer.
JavaScript Statements Reference
JavaScript Statements
In HTML, JavaScript statements are "instructions" to be "executed" by the web 
browser.
This statement tells the browser to write "Hello Dolly." inside an HTML 
element with id="demo":
Example
document.getElementById("demo").innerHTML = "Hello Dolly.";
Try it Yourself 
For a tutorial about Statements, read our
JavaScript Statements Tutorial
.
JavaScript Statement Identifiers
JavaScript statements often start with a
statement identifier
to identify the JavaScript action to be performed.
Statement identifiers are reserved words and cannot be used as variable names 
(or any other things).
The following table lists all JavaScript statement identifiers:
Statement
Description
break
Exits a switch or a loop
class
Declares a class
const
Declares a variable with a constant value
continue
Breaks one iteration (in the loop) if a specified condition occurs, and 
continues with the next iteration in the loop
debugger
Stops the execution of JavaScript, and calls (if available) the debugging function
do ... while
Executes a block of statements and repeats the block while a condition is 
true
for
Loops through a block of code a number of times
for ... in
Loops through the properties of an object
for ... of
Loops through the values of an iterable object
function
Declares a function
if ... else ... else if
Marks a block of statements to be executed depending on a condition
let
Declares a variable
return
Stops the execution of a function and returns a value from that function
switch
Marks a block of statements to be executed depending on different cases
throw
Throws (generates) an error
try ... catch ... finally
Marks the block of statements to be executed when an error occurs in a try 
block, and implements error handling
var
Declares a variable
while
Marks a block of statements to be executed while a condition is true
JavaScript class
Example
Create a Car class, and then an object (myCar) based on the Car class:
// Create a Car class
class Car {
constructor(brand) {
this.carname = brand;
}
}
// Create a Car Object
myCar = new Car("Ford");
Try it Yourself 
Description
A
class
is a type of object template.
The
class
statement initiates a JavaScript class.
Properties and methods are assigned in the
constructor()
method.
The
constructor()
method is called each time a class object is initialized.
Syntax
class
className
{
// class body
}
Related Pages
JavaScript Tutorial:
JavaScript Classes
JavaScript Tutorial:
JavaScript ES6 (EcmaScript 2015)
JavaScript Tutorial:
JavaScript this
JavaScript Tutorial:
JavaScript Strict Mode
Browser Support
class
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
class
is not supported in Internet Explorer.
JavaScript break
Examples
Break out of a loop when i is 3:
let text = "";
for (let i = 0; i < 5; i++) {
if (i === 3) break;
text += i + "<br>";
}
Try it Yourself 
let text = "";i = 0;
while (i < 5) {
text += i + "<br>";
i++;
if (i === 3) break;
}
Try it Yourself 
More examples below.
Description
The
break
statement breaks out of a switch or a loop.
In a switch, it breaks out of the switch block. This stops the execution of more code inside the switch.
In in a loop, it breaks out of the loop and continues executing the code after the loop (if any).
Using Lables
The
break
statement can use a label reference, to break out of any JavaScript code block (see "More Examples" 
below).
Without a label, break can only be used inside a loop or a switch.
Syntax
break;
Using the optional label reference:
break
labelname;
More Examples
Break out of a switch block when a case is true:
let day;
switch (new Date().getDay()) {
case 0:
day = "Sunday";
break;
case 1:
day = "Monday";
break;
case 2:
day = "Tuesday";
break;
case 3:
day = "Wednesday";
break;
case 4:
day = "Thursday";
break;
case 5:
day = "Friday";
break;
case 6:
day = "Saturday";
break;
}
Try it Yourself 
Break out of a list:
let text = "";
const cars = ["BMW", "Volvo", "Saab", "Ford"];
list: {
text += cars[0] + "<br>";
text += cars[1] + "<br>";
text += cars[2] + "<br>";
break list;
text += cars[3] + "<br>";
}
Try it Yourself 
Example
Break out of a nested loop:
// The first for loop is labeled "Loop1"
Loop1:
for (let i = 0; i < 3; i++) {
// The second for loop is labeled "Loop2"
Loop2:
for (let i = 10; i < 15; i++) {
if (i === 12) break Loop1;
}
}
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Break and Continue
JavaScript Tutorial:
JavaScript For Loop
JavaScript Tutorial:
JavaScript While Loop
JavaScript Tutorial:
JavaScript Switch
JavaScript Reference:
JavaScript continue Statement
JavaScript Reference:
JavaScript for Statement
JavaScript Reference:
JavaScript while Statement
JavaScript Reference:
JavaScript switch Statement
Browser Support
break
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String indexOf()
Examples
Search a string for "welcome":
let text = "Hello world, welcome to the universe.";
let result = text.indexOf("welcome");
Try it Yourself 
Search a string for "Welcome":
let text = "Hello world, welcome to the universe.";
let result = text.indexOf("Welcome");
Try it Yourself 
Find the first occurrence of "e":
let text = "Hello world, welcome to the universe.";
text.indexOf("e");
Try it Yourself 
Find the first occurrence of "e", starting at position 5:
let text = "Hello world, welcome to the universe.";
text.indexOf("e", 5);
Try it Yourself 
Find the first occurrence of "a":
let text = "Hello world, welcome to the universe.";
text.indexOf("a");
Try it Yourself 
Description
The
indexOf()
method returns the position of the first occurrence of a value in a string.
The
indexOf()
method returns -1 if the value is not found.
The
indexOf()
method is case sensitive.
Syntax
string
.indexOf(
searchvalue
,
start
)
Parameters
Parameter
Description
searchvalue
Required.
The string to search for.
start
Optional.
The position to start from (default is 0).
Return Value
Type
Description
A number
The first position where the search-value occurs.
-1 if it never occurs.
The Differense Between
String indexOf() and String search()
The
indexOf()
method cannot search against a regular expression.
The
search()
cannot take a start position argument.
Browser Support
indexOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String includes()
Examples
Check if a string includes "world":
let text = "Hello world, welcome to the universe.";
let result = text.includes("world");
Try it Yourself 
More examples below.
Description
The
includes()
method returns
true
if a string contains a specified string.
Otherwise it returns
false
.
The
includes()
method is case sensitive.
Syntax
string
.includes(
searchvalue
,
start
)
Parameters
Parameter
Description
searchvalue
Required.
The string to search for.
start
Optional.
The position to start from.
Default value is 0.
Return Value
Type
Description
A boolean.
true
if the string contains the value,
otherwise
false
.
More Examples
Start at position 12:
let text = "Hello world, welcome to the universe.";
let result = text.includes("world", 12);
Try it Yourself 
Browser Support
includes()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
includes()
is not supported in Internet Explorer.
JavaScript String match()
Examples
A search for "ain" using a string:
let text = "The rain in SPAIN stays mainly in the plain";
text.match("ain");
Try it Yourself 
A search for "ain" using a regular expression:
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/);
Try it Yourself 
A global search for "ain":
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/g);
Try it Yourself 
A global, case-insensitive search:
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/gi);
Try it Yourself 
Description
The
match()
method matches a string against a regular expression **
The
match()
method returns an array with the matches.
The
match()
method returns
null
if no match is found.
Syntax
string
.match(
match
)
Parameters
Parameter
Description
match
Required.
The search value.
A regular expression (or a string that will be converted to a regular expression).
Return Values
Type
Description
An array
or
null
An array containing the matches.
null
if no match is found.
The Difference Between
String match() and String search()
The
match()
method returns an array of matches.
The
search()
method returns the position of the first match.
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
Browser Support
match()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String length
Example
let text = "Hello World!";
let length = text.length;
Try it Yourself 
Description
The
length
property returns the length of a string.
The
length
property of an empty string is 0.
Syntax
string
.length
Return Value
Type
Description
A number
The length of the string.
Browser Support
length
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String slice()
Examples
Slice the first 5 positions:
let text = "Hello world!";
let result = text.slice(0, 5);
Try it Yourself 
From position 3 to the end:
let result = text.slice(3);
Try it Yourself 
More examples below.
Description
The
slice()
method extracts a part of a string.
The
slice()
method returns the extracted part in a new string.
The
slice()
method does not change the original string.
The start and end parameters specifies the part of the string to extract.
The first position is 0, the second is 1, ...
A negative number selects from the end of the string.
Syntax
string
.slice(
start
,
end
)
Parameters
Parameter
Description
start
Required.
The start position.
(First character is 0).
end
Optional.
The end position (up to, but not including).
Default is string length.
Return Value
Type
Description
A string
The extracted part of the string.
More Examples
From position 3 to 8:
let result = text.slice(3, 8);
Try it Yourself 
Only the first character:
let result = text.slice(0, 1);
Try it Yourself 
Only the last character:
let result = text.slice(-1);
Try it Yourself 
The whole string:
let result = text.slice(0);
Try it Yourself 
Browser Support
slice()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Promise catch()
Example
myPromise.catch(x => myDisplay(x));
Try it Yourself 
Description
The
catch()
method provides a callback.
The callback is a function to run when a promise is rejected.
Syntax
promise
.catch(
rejected()
)
Parameters
rejected()
Function to run when the promise is rejected
Return Value
Type
Description
Object
A new Promise Object
Browser Support
catch()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
catch()
is not supported in Internet Explorer.
JavaScript Promise.any()
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// Run when any promise fulfill
Promise.any([myPromise1, myPromise2]).then((x) => {
myDisplay(x);
});
Try it Yourself 
Description
The
Promise.any()
method returns a single Promise from a list of promises,
when any promise fulfill.
Syntax
Promise.any(
iterable
)
Parameters
iterable
An Array of promises
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.any()
is supported in all modern browsers since September 2020:
Chrome 85
Edge 85
Firefox 79
Safari 14
Opera 71
Aug 2019
Aug 2020
Jul 2020
Sep 2020
Sep 2020
JavaScript Promise.race()
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// When the faster promise settles
Promise.race([myPromise1, myPromise2]).then((x) => {
myDisplay(x);
});
Try it Yourself 
Description
The
Promise.race()
method returns a Promise from a list of promises,
when the faster promise settles.
Syntax
Promise.race(iterable)
Parameters
iterable
An Array of promises
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.race()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Promise.race()
is not supported in Internet Explorer.
JavaScript Promise.allSettled()
Example
// Create a Promise
const myPromise1 = new Promise((resolve, reject) => {
setTimeout(resolve, 200, "King");
});
// Create another Promise
const myPromise2 = new Promise((resolve, reject) => {
setTimeout(resolve, 100, "Queen");
});
// Settle All
Promise.allSettled([myPromise1, myPromise2]).then((results) =>
results.forEach((x) => myDisplay(x.status)),
);
Try it Yourself 
Description
The
Promise.allSettled()
method returns a single Promise from a list of promises,
when all promises sette.
Syntax
Promise.allSettled(
iterable
)
Parameters
iterable
An Array of promises
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.allSettled()
is supported in all modern browsers since March 2020:
Chrome 76
Edge 79
Firefox 71
Safari 13
Opera 63
May 2019
Nov 2019
Mar 2020
Sep 2019
Aug 2019
JavaScript Promise.reject()
Example
Promise.reject("Not Allowed");
Try it Yourself 
Description
The
Promise.reject()
method returns a Promise object rejected with a value.
Syntax
Promise.reject(message)
Parameters
message
Argument to be used as reject value
Return Value
Type
Description
Object
A new Promise Object
Browser Support
Promise.Reject()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
Promise.Reject()
is not supported in Internet Explorer.
JavaScript Promise Object
The
Promise Object
represents the completion or failure of an asynchronous operation and its results.
A Promise can have 3 states:
pending
initial state
rejected
operation failed
fulfilled
operation completed
Example
// Create a Promise Object
let myPromise = new Promise(function(myResolve, myReject) {
let result = true;
// Code that may take some time goes here
if (result == true) {
myResolve("OK");
} else {
myReject("Error");
}
});
// Using then() to display result
myPromise.then(x => myDisplay(x), x => myDisplay(x));
Try it Yourself 
JavaScript Promise Methods and Properties
Name
Description
Promise.all()
Returns a single Promise from a list of promises
When all promises fulfill
Promise.allSettled()
Returns a single Promise from a list of promises
When all promises sette
Promise.any()
Returns a single Promise from a list of promises
When any promise fulfills
Promise.race()
Returns a single Promise from a list of promises
When the faster promise settles
Promise.reject()
Returns a Promise object rejected with a value
Promise.resolve()
Returns a Promise object resolved with a value
catch()
Provides a function to be called when a promise is rejected
finally()
Provides a function to be called when a promise is fulfilled or rejected
then()
Provide two functions to be called when a promise is fulfilled or rejected
JavaScript RegExp m Modifier
Example
Do a multiline search for "is" at the beginning of each line in a string:
let text = `Is this
all there
is`
let pattern = /^is/m;
Try it Yourself 
Description
The "m" modifier specifies a
multiline match
.
It only affects the behavior of start
^
and end
$
.
^
specifies a match at the start of a string.
$
specifies a match at the end of a string.
With the "m" set, ^ and $ also match at the beginning and end of each line.
Browser Support
/
regexp
/m
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
", "m")
or simply:
/
regexp
/m
Example
A global, multiline search for "is" at the beginning of each string line:
let text = `Is this
all there
is`
let pattern = /^is/gm;
Try it Yourself 
Example
A global, case-insensitive, multiline search for "is" at the beginning of each string line:
let text = `Is this
all there
is`
let pattern = /^is/gmi;
Try it Yourself 
Example
A global, multiline search for "is" at the end of each string line:
let text = `Is this
all there
is`
let text = "Is\nthis\nhis\n?";
let pattern = /is$/gm;
Try it Yourself 
Check if the "m" modifier is set:
let pattern = /W3S/gi;
let result = pattern.multiline;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp Group [0-9]
Example
A global search for the numbers 1, 2, 3 and 4 in a string:
let text = "123456789";
let pattern = /[1-4]/g;
Try it Yourself 
Description
The [0-9] expression is used to find any character between the brackets.
The digits inside the brackets can be any numbers or span of numbers from 0 to 9.
Tip:
Use the
[^0-9]
expression to find any 
character that is NOT a digit.
Browser Support
/[0-9]/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("[
0-9
]")
or simply:
/[
0-9
]/
Syntax with modifiers
new RegExp("[
0-9
]", "g")
or simply:
/[
0-9
]/g
More Examples
Example
Do a global search for the number "1" in a string:
let text  = "12121212";
let pattern = /[1]/g;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
.
Metacharacter
Example
A global search for any character between h and t:
let text = "That's hot!";
let pattern = /h.t/g;
Try it Yourself 
Description
The . metacharacter matches any character, except newline or other line terminators.
Browser Support
/./
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
regexp
.")
or simply:
/
regexp
./
Syntax with modifiers
new RegExp("
regexp.
", "g")
or simply:
/
regexp
./g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript for...in Loop
Examples
Iterate (loop) over the properties of an object:
const person = {fname:"John", lname:"Doe", age:25};
let text = "";
for (let x in person) {
text += person[x] + " ";
}
Try it Yourself 
Iterate (loop) over the values of an array:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
for (let x in cars) {
text += cars[x] + " ";
}
Try it Yourself 
More examples below.
Description
The
for...in
statements combo iterates (loops) over the properties of an object.
The code block inside the loop is executed once for each property.
Syntax
for (x
in
object) {
code block to be executed
}
Parameters
Parameter
Description
x
Required.
A variable to iterate over the properties.
object
Required.
The object to be iterated
JavaScript Loop Statements
Statement
Description
break
Breaks out of a loop
continue
Skips a value in a loop
while
Loops a code block while a condition is true
do...while
Loops a code block once, and then while a condition is true
for
Loops a code block while a condition is true
for...of
Loops the values of any iterable
for...in
Loops the properties of an object
More Examples
Iterate over the properties of window.location:
let text = "";
for (let x in location) {
text += x + "
";
}
document.getElementById("demo").innerHTML = text;
Try it Yourself 
Browser Support
for...in
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript return
Examples
Return the value of PI:
function myFunction() {
return Math.PI;
}
Try it Yourself 
Return "Hello John":
document.getElementById("demo").innerHTML = myFunction("John");
function myFunction(name) {
return "Hello " + name;
}
Try it Yourself 
More examples below.
Description
The
return
statement stops the execution of a function and returns a value.
Read our JavaScript Tutorial to learn all you need to know about functions. 
Start with the introduction chapter about
JavaScript Functions
and
JavaScript Scope
. For more detailed information, see our Function Section on
Function Definitions
,
Parameters
,
Invocation
and
Closures
.
Syntax
return
value
;
Parameters
Parameter
Description
value
Optional.
The value to be returned.
If omitted, it returns
undefined
More Examples
Calculate the product of two numbers and return the result:
// Call a function and save the return value in x:
var x = myFunction(4, 3);
function myFunction(a, b) {
// Return the product of a and b
return a * b;
}
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Functions
JavaScript Tutorial:
JavaScript Scope
JavaScript Tutorial:
JavaScript Function Definitions
JavaScript Tutorial:
JavaScript Function Parameters
JavaScript Tutorial:
JavaScript Function Invocation
JavaScript Tutorial:
JavaScript Function Closures
JavaScript Reference:
JavaScript function Statement
Browser Support
return
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript throw
Example
This example examines input.
If the value is wrong, an exception (err) is thrown:
<p>Please input a number between 
5 and 10:</p>
<input id="demo" type="text">
<button type="button" 
onclick="myFunction()">Test Input</button>
<p id="message"></p>
<script>
function myFunction() {
const message = document.getElementById("message");
message.innerHTML = "";
let x = 
document.getElementById("demo").value;
try {
if(x == "") throw "is Empty";
if(isNaN(x)) throw "not a number";
if(x > 10) throw "too high";
if(x < 5) throw "too low";
}
catch(err) {
message.innerHTML = 
"Input " + err;
}
}
</script>
Try it Yourself 
Description
The
throw
statement allows you to create a custom error.
The
throw
statement
throws
(generates) an error.
The technical term for this is:
The
throw
statement
throws an exception
.
The exception can be a JavaScript String, a Number, a Boolean or an Object:
throw "Too big";// throw a text
throw 500;// throw a number
throw false;// throw a boolean
throw person;// throw an object
Syntax
throw
expression
;
Parameters
Parameter
Description
expression
Required.
The exception to throw.
Can be a string, number, boolean, or an object
Browser Support
break
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String at()
Examples
Get the first character of the text:
let text = "W3Schools";
let character = text.at(0);
Try it Yourself 
Get the first character of the text:
let text = "W3Schools";
let character = text[0];
Try it Yourself 
More examples below.
Description
The
at()
method returns an indexed character from a string.
The
at()
method returns the same as
[]
.
Syntax
string
.at(
index
)
Parameters
Parameter
Description
index
Optional.
The index (position) of the character to be returned.
Default is 0.
-1 returns the last character.
Return Value
Type
Description
A String
A single character.
The character in the given position (index) in the string.
Browser Support
JavaScript String
at()
is supported in all browsers since March 2022:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Jul 2021
Jul 2021
Jul 2021
Mar 2022
Aug 2021
More Examples
Get the first character of the text:
let text = "W3Schools";
let character = text.at();
Try it Yourself 
Get the last character of the text:
let text = "W3Schools";
let character = text.at(-1);
Try it Yourself 
JavaScript String charAt()
Examples
Get the
first
character in a string:
let text = "HELLO WORLD";
let letter = text.charAt(0);
Try it Yourself 
Get the
second
character in a string:
let text = "HELLO WORLD";
let letter = text.charAt(1);
Try it Yourself 
Get the
last
character in a string:
let text = "HELLO WORLD";
let letter = text.charAt(text.length-1);
Try it Yourself 
More examples below.
Description
The
charAt()
method returns the character at a specified index (position) in a string.
The index of the first character is 0, the second 1, ...
Syntax
string
.charAt(
index
)
Parameters
Parameter
Description
index
Optional.
The index (position) of the character.
Default = 0.
Return Value
Type
Description
String
The character at the specified index.
Empty string ("") if the index is out of range.
More Examples
Index out of range returns empty string:
let text = "HELLO WORLD";
let letter = text.charAt(15);
Try it Yourself 
Default index is 0:
let text = "HELLO WORLD";
let letter = text.charAt();
Try it Yourself 
Invalid index converts to 0:
let text = "HELLO WORLD";
let letter = text.charAt(3.14);
Try it Yourself 
Browser Support
charAt()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String substr()
Examples
Extract a substring from text:
let text = "Hello world!";
let result = text.substr(1, 4);
Try it Yourself 
Start at position 2:
let result = text.substr(2);
Try it Yourself 
More examples below.
Description
The
substr()
method extracts a part of a string.
The
substr()
method begins at a specified position, and returns a specified number of characters.
The
substr()
method does not change the original string.
To extract characters from the end of the string, use a negative start position.
Syntax
string
.substr(
start
,
length
)
Parameters
Parameter
Description
start
Required.
The start position.
First character is at index 0.
If
start
is greater than the length, substr() returns "".
If
start
is 
    negative, substr() counts from the end of the string.
length
Optional.
The number of characters to extract.
If omitted, it extracts the rest of the string
Return Value
Type
Description
A string
A string containing the extracted part.
If
length
is 0 or negative, an empty string is returned.
More Examples
Only the first:
let result = text.substr(0, 1);
Try it Yourself 
Only the last:
let result = text.substr(text.length-1, 1);
Try it Yourself 
The last 6:
let result = text.substr(-6, 6);
Try it Yourself 
Browser Support
substr()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String toLocaleLowerCase()
Example
Convert to lowercase:
let text = "Hello World!";
let result = text.toLocaleLowerCase();
Try it Yourself 
Description
The
toLocaleLowerCase()
method converts a string to lowercase letters, 
using current locale.
The locale is based on the language settings of the browser.
The
toLocaleLowerCase()
method does not change the original string.
The
toLocaleLowerCase()
returns the same result as
toLowerCase()
, except for locales
that conflict with the regular Unicode case mappings (such as Turkish).
Syntax
string
.toLocaleLowerCase()
Parameters
NONE
Return Value
Type
Description
A string
A new string converted to lowercase according to current locale.
Browser Support
toLocaleLowerCase()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String toLowerCase()
Example
Convert to lowercase:
let text = "Hello World!";
let result = text.toLowerCase();
Try it Yourself 
Description
The
toLowerCase()
method converts a string to lowercase letters.
The
toLowerCase()
method does not change the original string.
Syntax
string
.toLowerCase()
Parameters
NONE
Return Value
Type
Description
A string
The string converted to lowercase.
Browser Support
toLowerCase()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String toString()
Example
Get the content of the text:
let text = "Hello World!";
let result = text.toString();
Try it Yourself 
Same as:
let text = "Hello World!";
let result = text;
Try it Yourself 
More examples below.
Description
The
toString()
method returns a string as a string.
The
toString()
method does not change the original string.
The
toString()
method can be used to convert a string object into a string.
Syntax
string
.toString()
Parameters
NONE
Return Value
Type
Description
A string
The content of the string.
More Examples
Get the value of a String object:
let text = new String("Hello World!");
let result = text.toString();
Try it Yourself 
Browser Support
toString()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window addEventListener()
Examples
Add a click event handler to the window:
window.addEventListener("click", myFunction);
function myFunction() {
document.getElementById("demo").innerHTML = "Hello World";
}
Try it Yourself 
Simpler syntax:
window.addEventListener("click", function(){
document.getElementById("demo").innerHTML = "Hello World";
});
Try it Yourself 
More examples below.
Description
The
addEventListener()
method attaches an event handler to a window.
Syntax
window.addEventListener(
event
,
function
,
Capture
)
Parameters
Parameter
Description
event
Required.
The event name.
Do not use the "on" prefix.
Use "click" instead of "onclick".
All HTML DOM events are listed in the:
HTML DOM Event Object Reference
.
function
Required.
The function to run when the event occurs.
When 
the event occurs, an event object is passed to the function as 
the first parameter. The type of the event object depends on the specified event. 
For example, the "click" event belongs to the MouseEvent object.
capture
Optional (default = false).
true
- The handler is executed in the capturing phase.
false
- The handler is executed in the bubbling phase.
Return Value
NONE
More Examples
You can add many event listeners to a window:
window.addEventListener("click", myFunction1);
window.addEventListener("click", myFunction2);
Try it Yourself 
You can add different types of events:
window.addEventListener("mouseover", myFunction);
document.addEventListener("click", someOtherFunction);
window.addEventListener("mouseout", someOtherFunction);
Try it Yourself 
When passing parameters, use an "anonymous function" to call a function with the parameters:
window.addEventListener("click", function() {
myFunction(p1, p2);
});
Try it Yourself 
Change the background color of a document:
window.addEventListener("click", function(){
document.body.style.backgroundColor = "red";
});
Try it Yourself 
Using the removeEventListener() method:
// Add an event listener
window.addEventListener("mousemove", myFunction);
// Remove the event listener
window.removeEventListener("mousemove", myFunction);
Try it Yourself 
Browser Support
addEventListener
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window btoa()
Example
Encode a string in base-64:
let text = "Hello World!";
let encoded = window.btoa(text);
Try it Yourself 
Description
The
btoa()
method encodes a string in base-64.
The
btoa()
method uses the "A-Z", "a-z", "0-9", "+", "/" and "=" characters to encode the string.
Syntax
window.btoa(
string
)
Parameters
Parameter
Description
string
Required.
The string to be encoded.
Return Value
Type
Description
A string
The base-64 encoded string.
Browser Support
btoa()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
Window atob()
Example
Decode a base-64 encoded string:
let text = "Hello World!";
let encoded = window.btoa(text);
let decoded = window.atob(encoded);
Try it Yourself 
Description
The
atob()
method decodes a base-64 encoded string.
Syntax
window.atob(
encoded
)
Parameters
Parameter
Description
encoded
Required.
The string to be decoded.
Return Value
Type
Description
A string
The decoded string.
Browser Support
atob()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
Window alert()
Example
Display an alert box:
alert("Hello! I am an alert box!!");
Try it Yourself 
More examples below.
Description
The
alert()
method displays an alert box with a message and an OK button.
The
alert()
method is used when you want information to come through to the user.
Syntax
alert(
message
)
Parameters
Parameter
Description
message
Optional.
The text to display in the alert box.
Return Value
NONE
More Examples
Alert box with line-breaks:
alert("Hello\nHow are you?");
Try it Yourself 
Alert the hostname of the current URL:
alert(location.hostname);
Try it Yourself 
Browser Support
alert()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript RegExp
\n
Metacharacter
Example
Search for a newline character in a string:
let text = "Visit W3Schools.\nLearn Javascript.";
let pattern = /\n/;
Try it Yourself 
Description
The \n character matches newline characters.
Browser Support
/\n/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\n")
or simply:
/\n/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\b
Metacharacter
Example
Search for "LO" at the beginning of a word:
let text = "HELLO, LOOK AT YOU";
let pattern = /\bLO/;
Try it Yourself 
Description
The \b metacharacter matches at the beginning or end of a word.
Search for the pattern LO at the beginning of a word like this:
\bLO
Search for the pattern LO at the end of a word like this:
LO\b
Browser Support
/\b/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\b
regexp
")
or simply:
/\b
regexp
/
Syntax with modifiers
new RegExp("\\b
regexp
", "g")
or simply:
/\b
regexp
/g
More Examples
Example
Search for "LO" at the END of a word:
let text = "HELLO, LOOK AT YOU";
let pattern = /LO\b/;
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\v
Metacharacter
Example
Search for a vertical tab character in a string:
let text = "Visit W3Schools.\vLearn Javascript.";
let pattern = /\v/;
Try it Yourself 
Description
The \v metacharacter matches vertical tab characters (tabulators).
Browser Support
/\v/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\v")
or simply:
/\v/
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
\udddd
Metacharacter
Example
Do a global search for the hexadecimal number 0057 (W) in a string:
let text = "Visit W3Schools. Hello World!";
let pattern = /\u0057/g;
Try it Yourself 
Description
The \udddd metacharacters matches Unicode characters specified by a hexadecimal number (dddd).
Browser Support
/\udd/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("\\u
dddd
")
or simply:
/\u
dddd
/
Syntax with modifiers
new RegExp("\\u
dddd
", "g")
or simply:
/\u
dddd
/g
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript RegExp
+
Quantifier
Example 1
Do a global search for at least one "o":
let text = "Hellooo World! Hello W3Schools!";
let pattern = /o+/g;
Try it Yourself 
Description
The
n
+ quantifier matches any string that contains at least one
n
.
Example 2
Do a global search for at least one word character:
let text = "Hellooo World! Hello W3Schools!";
let pattern = /\w+/g;
Try it Yourself 
Browser Support
/n+/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
+")
or simply:
/
n
+/
Syntax with modifiers
new RegExp("
n
+", "g")
or simply:
/
n
+/g
JavaScript String localeCompare()
Examples
Compare "ab" with "cd":
let text1 = "ab";
let text2 = "cd";
let result = text1.localeCompare(text2);
Try it Yourself 
let text1 = "cd";
let text2 = "ab";
let result = text1.localeCompare(text2);
Try it Yourself 
More examples below.
Description
The
localeCompare()
method compares two strings in the current locale.
The
localeCompare()
method returns sort order -1, 1, or 0
(for before, after, or equal).
The current locale is based on the language settings of the browser.
Syntax
string
.localeCompare(
compareString
)
Parameters
Parameter
Description
compareString
Required.
The string to compare with.
Return Value
Type
Description
A number
One of 3 values:
-1 if the string is sorted before the
compareString
0 if the two strings are equal
1 if the string is sorted after the
compareString
More Examples
let text1 = "ab";
let text2 = "ab";
let result = text1.localeCompare(text2);
Try it Yourself 
let text1 = "A";
let text2 = "a";
let result = text1.localeCompare(text2);
Try it Yourself 
Browser Support
localeCompare()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String lastIndexOf()
Examples
Search for the last occurrence of "planet":
let text = "Hello planet earth, you are a great planet.";
let result = text.lastIndexOf("planet");
Try it Yourself 
let text = "Hello planet earth, you are a great planet.";
let result = text.lastIndexOf("Planet");
Try it Yourself 
More examples below.
Description
The
lastIndexOf()
method returns the index (position) of the last occurrence of a specified value in a string.
The
lastIndexOf()
method searches the string from the end to the beginning.
The
lastIndexOf()
method returns the index from the beginning (position 0).
The
lastIndexOf()
method returns -1 if the value is not found.
The
lastIndexOf()
method is case sensitive.
Syntax
string
.lastIndexOf(
searchvalue
,
start
)
Parameters
Parameter
Description
searchvalue
Required.
The string to search for.
start
Optional.
The position where to start.
Default value is string length.
Return Value
Type
Description
A number
The position where the search-value occurs.
-1 if it never occurs.
More Examples
Search for the last occurrence of "planet", starting at position 20:
let text = "Hello planet earth, you are a great planet.";
let result = text.lastIndexOf("planet", 20);
Try it Yourself 
Browser Support
lastIndexOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String padEnd()
Examples
let text = "5";
let padded = text.padEnd(4,"0");
Try it Yourself 
let text = "5";
let padded = text.padEnd(4,"x");
Try it Yourself 
Description
The
padEnd()
method pads a string at the end.
The
padEnd()
method pads a string with another string (multiple times) until it reaches a given length.
Example
let numb = 5;
let text = numb.toString();
let padded = text.padEnd(4,"0");
Try it Yourself 
Syntax
string
.padEnd(
length, string
)
Parameters
Parameter
Description
length
Required.
The length of the resulting string.
string
Optional.
The string to pad with.
Default is space.
Return Value
Type
Description
A string
A String of the specified length, with the padding applied at the end.
Browser Support
padEnd()
is an
ECMAScript 2017
feature.
ES2017 is supported in all modern browsers since September 2017:
Chrome 58
Edge 15
Firefox 52
Safari 11
Opera 45
Apr 2017
Apr 2017
Mar 2017
Sep 2017
May 2017
padEnd()
is not supported in Internet Explorer.
JavaScript String repeat()
Examples
Create copies of a text:
let text = "Hello world!";
let result = text.repeat(2);
Try it Yourself 
let text = "Hello world!";
let result = text.repeat(4);
Try it Yourself 
Description
The
repeat()
method returns a string with a number of copies of a string.
The
repeat()
method returns a new string.
The
repeat()
method does not change the original string.
Syntax
string
.repeat(
count
)
Parameters
Parameter
Description
count
Required.
The number of copies.
Return Value
Type
Description
A string
The copies of the original string.
Browser Support
repeat()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
repeat()
is not supported in Internet Explorer.
JavaScript String replaceAll()
Examples
text = text.replaceAll("Cats","Dogs");
text = text.replaceAll("cats","dogs");
Try it Yourself 
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");
Try it Yourself 
More example below.
Description
The
replaceAll()
method searches a string for a value or a regular expression.
The
replaceAll()
method returns a new string with all values replaced.
The
replaceAll()
method does not change the original string.
The
replaceAll()
method was introduced in JavaScript 2021.
The
replaceAll()
method does not work in Internet Explorer.
Syntax
string
.replaceAll(
searchValue, newValue
)
Parameters
Parameter
Description
searchValue
Required.
The value, or regular expression, to search for.
newValue
Required.
The new value (to replace with).
This parameter can be a JavaScript function.
Return Value
Type
Description
A string
A new string where the search values has been replaced.
More Examples
A global, case-insensitive replacement:
let text = "Mr Blue has a blue house and a blue car";
let result = text.replaceAll(/blue/gi, "red");
Try it Yourself 
A function to return the replacement text:
let text = "Mr Blue has a blue house and a blue car";
let result = text.replaceAll(/blue|house|car/gi, function (x) {
return x.toUpperCase();
});
Try it Yourself 
JavaScript String search()
Examples
Search for "Blue":
let text = "Mr. Blue has a blue house";
let position = text.search("Blue");
Try it Yourself 
Search for "blue":
let text = "Mr. Blue has a blue house";
let position = text.search("blue");
Try it Yourself 
Search for /Blue/:
let text = "Mr. Blue has a blue house";
let position = text.search(/Blue/);
Try it Yourself 
Search for /blue/:
let text = "Mr. Blue has a blue house";
let position = text.search(/blue/);
Try it Yourself 
Search case insensitive:
let text = "Mr. Blue has a blue house";
let position = text.search(/blue/i);
Try it Yourself 
Description
The
search()
method matches a string against a regular expression **
The
search()
method returns the index (position) of the first match.
The
search()
method returns -1 if no match is found.
The
search()
method is case sensitive.
Syntax
string
.search(
searchValue
)
Parameters
Parameter
Description
searchValue
Required.
The search value.
A regular expression (or a string that will be converted to a regular expression).
Return Value
Type
Description
A number
The position of the first match.
-1 if no match.
The Difference Between
String search() and String indexOf()
The
search()
cannot take a start position argument.
The
indexOf()
method cannot search against a regular expression.
The Difference Between
String search() and String match()
The
search()
method returns the position of the first match.
The
match()
method returns an array of matches.
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
Browser Support
search()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String replace()
Examples
Replace Microsoft:
let text = "Visit Microsoft!";
let result = text.replace("Microsoft", "W3Schools");
Try it Yourself 
A global replacement:
let text = "Mr Blue has a blue house and a blue car";
let result = text.replace(/blue/g, "red");
Try it Yourself 
More examples below.
Description
The
replace()
method searches a string for a value or a regular expression.
The
replace()
method returns a new string with the value(s) replaced.
The
replace()
method does not change the original string.
Syntax
string
.replace(
searchValue, newValue
)
Parameters
Parameter
Description
searchValue
Required.
The value, or regular expression, to search for.
newValue
Required.
The new value (to replace with).
Return Value
Type
Description
A string
A new string where the specified value(s) has been replaced.
More Examples
A global, case-insensitive replacement:
let text = "Mr Blue has a blue house and a blue car";
let result = text.replace(/blue/gi, "red");
Try it Yourself 
A function to return the replacement text:
let text = "Mr Blue has a blue house and a blue car";
let result = text.replace(/blue|house|car/gi, function (x) {
return x.toUpperCase();
});
Try it Yourself 
Browser Support
replace()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window clearInterval()
Example
Display the time once every second. Use clearInterval() to stop the time:
const myInterval = setInterval(myTimer, 1000);
function myTimer() {
const date = new Date();
document.getElementById("demo").innerHTML = date.toLocaleTimeString();
}
function myStopFunction() {
clearInterval(myInterval);
}
Try it Yourself 
More examples below.
Description
The
clearInterval()
method clears a timer set with the
setInterval()
method.
Syntax
clearInterval(
intervalId
)
Parameters
Parameter
Description
intervalId
Required.
The interval id returned from setInterval().
Return Value
NONE
More Examples
Toggle between two background colors once every 500 milliseconds:
const myInterval = setInterval(setColor, 500);
function setColor() {
let x = document.body;
x.style.backgroundColor = x.style.backgroundColor == "yellow" ? "pink" : "yellow";
}
function stopColor() {
clearInterval(myInterval);
}
Try it Yourself 
Using setInterval() and clearInterval() to create a dynamic progress bar:
function move() {
const element = document.getElementById("myBar");
let width = 0;
const id = setInterval(frame, 100);
function frame() {
if (width == 100) {
clearInterval(id);
} else {
width++;
element.style.width = width + '%';
}
}
}
Try it Yourself 
Browser Support
clearInterval()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window close()
Example
Use open() to open a window and close() to close the window:
let myWindow;
function openWin()
{
myWindow = window.open("", "myWindow", "width=200, height=100");
}
function closeWin()
{
myWindow.close();
}
Try it Yourself 
More examples below.
Description
The
close()
method closes a window.
Syntax
window.close()
Parameters
NONE
Return Value
NONE
More Examples
Example
Open "www.w3schools.com" in a new window, and use close() to close it:
function openWin() {
myWindow = window.open("https://www.w3schools.com", "_blank", "width=200, height=100");
}
function closeWin() {
myWindow.close();
}
Try it Yourself 
Browser Support
close()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window closed
Example
A function to check if a window is closed:
function checkWin()
{
if (!myWindow) {
text = "It has never been opened!";
} else {
if (myWindow.closed) {
text = "It is closed.";
} else {
text = "It is open.";
}
}
}
Try it Yourself 
Description
The
closed
property returns
true
if the window is closed.
The
closed
property is read-only.
Syntax
window.closed
Return Value
Type
Description
A boolean
true
if the window is closed,
otherwise
false
.
Browser Support
window.closed
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Console Object
The Console Object
The
console object
provides access to the browser's debugging console.
The
console object
is a property of the
window object
.
The
console object
is accessed with:
window.console
or just
console
Examples
window.console.error("You made a mistake");
Try it Yourself 
console.error("You made a mistake");
Try it Yourself 
Console Object Methods
Method
Description
assert()
Writes an error message to the console if a assertion is false
clear()
Clears the console
count()
Logs the number of times that this particular call to count() has been 
    called
error()
Outputs an error message to the console
group()
Creates a new inline group in the console. This indents following 
    console messages by an additional level, until console.groupEnd() is called
groupCollapsed()
Creates a new inline group in the console. However, the new group is 
    created collapsed. The user will need to use the disclosure button to expand 
    it
groupEnd()
Exits the current inline group in the console
info()
Outputs an informational message to the console
log()
Outputs a message to the console
table()
Displays tabular data as a table
time()
Starts a timer (can track how long an operation takes)
timeEnd()
Stops a timer that was previously started by console.time()
trace()
Outputs a stack trace to the console
warn()
Outputs a warning message to the console
Window length
Example
How many windows are in the window:
let length = window.length;
Try it Yourself 
More examples below.
Description
The
length
property returns the number of (framed) windows in the window.
The
length
property is read-only.
The windows can be accessed by index numbers. The first index is 0.
Syntax
window.length
Return Value
Type
Description
A number
The number of windows in the current window.
More Examples
Loop through all frames and change the color:
const frames = window.frames;
for (let i = 0; i < frames.length; i++) {
frames[i].document.body.style.background = "red";
}
Try it Yourself 
Browser Support
window.lenght
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript RegExp
{X,}
Quantifier
Example
A global search for a sequence of at least three digits:
let text = "100, 1000 or 10000?";
let pattern = /\d{3,}/g;
Try it Yourself 
Description
The
n
{
X
,} quantifier matches any string that contains a 
sequence of at least X
n
's.
X
must be a number.
Browser Support
/n{X,}/
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
new RegExp("
n
{
X,
}")
or simply:
/
n
{
X,
}/
Syntax with modifiers
new RegExp("
n
{
X,
}", "g")
or simply:
/
n
{
X,
}/g
JavaScript RegExp compile()
RegExp compile() has been deprecated since 1999.
Avoid using it.
It may cease to work in your browser at any time.
Description
The compile() method was
deprecated
in JavaScript version 1.5.
The method was used to compile a regular expression during execution of a script.
Syntax
RegExpObject
.compile(
regexp
,
modifier
)
Parameter Values
Parameter
Description
regexp
A regular expression
modifier
Specifies the type of matching. "g" for a global match, "i" for a case-insensitive match and "gi" for a global, case-insensitive match
JavaScript
multiline
Property
Example
let text = "Visit W3Schools!";
let pattern = /W3S/gi; // "g" and "i" is set, "m" is not.
let result = pattern.multiline;
Try it Yourself 
Description
The multiline property specifies whether or not the m modifier is set.
This property returns true if the "m" modifier is set, otherwise it returns false.
Browser Support
multiline
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.multiline
Return Value
Type
Description
Boolean
Returns true if the "m" modifier is set, false otherwise
JavaScript String split()
Examples
Split the words:
let text = "How are you doing today?";
const myArray = text.split(" ");
Try it Yourself 
Split the words, and return the second word:
let text = "How are you doing today?";
const myArray = text.split(" ");
let word = myArray[1];
Try it Yourself 
Split the characters, including spaces:
const myArray = text.split("");
Try it Yourself 
Use the limit parameter:
const myArray = text.split(" ", 3);
Try it Yourself 
More examples below.
Description
The
split()
method splits a string into an array of substrings.
The
split()
method returns the new array.
The
split()
method does not change the original string.
If (" ") is used as separator, the string is split between words.
Syntax
string
.split(
separator
,
limit
)
Parameters
Parameter
Description
separator
Optional.
A string or regular expression to use for splitting.
If omitted, an array with the original string is returned.
limit
Optional.
An integer that limits the number of splits.
Items after the limit are excluded.
Return Value
Type
Description
Array
An array containing the splitted values.
More Examples
Split a string into characters and return the second character:
const myArray = text.split("");
Try it Yourself 
Use a letter as a separator:
const myArray = text.split("o");
Try it Yourself 
If the separator parameter is omitted, an array with the original string is returned:
const myArray = text.split();
Try it Yourself 
Browser Support
split()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String toUpperCase()
Example
Convert to uppercase:
let text = "Hello World!";
let result = text.toUpperCase();
Try it Yourself 
Description
The
toUpperCase()
method converts a string to uppercase letters.
The
toUpperCase()
method does not change the original string.
Syntax
string
.toUpperCase()
Parameters
NONE
Return Value
Type
Description
A string
The string converted to uppercase.
Browser Support
toUpperCase()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String trim()
Example 1
Remove spaces with trim():
let text = " Hello World! ";
let result = text.trim();
Try it Yourself 
Remove spaces with replace() using a regular expression:
let text = " Hello World! ";
let result = text.replace(/^\s+|\s+$/gm,'');
Try it Yourself 
Description
The
trim()
method removes whitespace from both sides of a string.
The
trim()
method does not change the original string.
Syntax
string
.trim()
Parameters
NONE
Return Value
Type
Description
A string
A string with removed whitespace from both ends.
Browser Support
trim()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
JavaScript String trimStart()
Example
let text1 = "Hello World!";
let text2 = text1.trimStart();
Try it Yourself 
Description
The
trimStart()
method removes whitespace from the beginning of a string.
The
trimStart()
method does not change the original string.
The
trimStart()
method works like
trim()
, but removes whitespace only from the start of a string.
Syntax
string
.trimStart()
Parameters
NONE
Return Value
Type
Description
A string
A string with removed whitespace from the beginning of the string.
JavaScript String
trimStart()
is supported in all browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
JavaScript String valueOf()
Example
Get the value of a text:
let text = "Hello World!";
let result = text.valueOf();
Try it Yourself 
The same as:
let text = "Hello World!";
let result = text;
Try it Yourself 
More examples below.
Description
The
valueOf()
method returns the primitive value of a string.
The
valueOf()
method does not change the original string.
The
valueOf()
method can be used to convert a string object into a string.
Syntax
string
.valueOf()
Parameters
NONE
Return Value
Type
Description
A string
The primitive value of the string.
More Examples
Get the value of a String object:
let text = new String("Hello World!");
let result = text.valueOf();
Try it Yourself 
Browser Support
valueOf()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Typed Array Reference
Example
const myArr = new Int8Array(10);
Try it Yourself 
JavaScript Typed Arrays
In Javascript, a typed array is an array-like buffer of binary data.
There is no JavaScript property or object named TypedArray,
but properties and methods can be used with typed array objects:
Typed Array Objects
Object
Data Type
Range
Try it
Int8Array
Signed integer (byte)
-128/127
Try it 
Uint8Array
Unsigned integer (octet)
0/255
Try it 
Uint8ClampedArray
Unsigned integer (octet)
0/255
Try it 
Int16Array
Short integer
-32768/32767
Try it 
Uint16Array
Unsigned short integer
0/65535
Try it 
Int32Array
Signed long integer
-2
31
/2
31
-1
Try it 
Uint32Array
Unsigned long integer
0/2
32
Try it 
Float32Array
Float - 7 significant digits
1.2x10
-38
/3.4x10
38
Try it 
Float64Array
Double - 16 significant digits
5.0x10
-324
/1.8x10
308
Try it 
BigInt64Array
Big signed integer
-2
63
/2
63
-1
Try it 
BigUint64Array
Big unsigned integer
0/2
64
Try it 
Typed Array Methods and Properties
Method / Property
Description
Try it
BYTES_PER_ELEMENT
Property to count the number of bytes used to store one element
Try it 
fill()
Fill all elements with a value
Try it 
find()
Returns the first element that satisfies a condition
Try it 
name
Returns the name of the typed array
Try it 
of()
Method to create a typed array from an array
Try it 
some()
Reurns true if one element satisfies a condition
Try it 
Uint8Array vs Uint8ClampedArray
The difference between an Uint8Array and  an Uint8ClampedArray is how values are added.
If you set one element in an Uint8ClampedArray to a value outside the 0-255 range,
it will default to 0 or 255.
A typed array will just take the first 8 bits of the value.
Typed Array Benefits
Typed arrays provide a way to handle binary data as efficiently as arrays work in C.
Typed arrays are raw memory, so JavaScript can pass them directly to any function
without converting the data to another representation.
Typed arrays are seriously faster than normal arrays for passing data
to functions that can use raw binary data (Computer Games, WebGL,
Canvas, File APIs, Media APIs).
Browser APIs Supporting Typed Arrays
Fetch API Example
fetch(url)
.then(request => request.arrayBuffer())
.then(arrayBuffer =>...);
Canvas Example
const canvas = document.getElementById('my_canvas');
const context = canvas.getContext('2d');
const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
const uint8ClampedArray = imageData.data;
Browser Support
typedArray
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
typedArray
is not supported in Internet Explorer.
The
Window
Object
Window Object
The window object represents an open window in a browser.
If a document contain frames (<iframe> tags), the browser creates one window object for the HTML document, and one additional window object for each frame.
Window Object Properties
Property
Description
closed
Returns a boolean true if a window is closed.
console
Returns the Console Object for the window.
See also
The Console Object
.
defaultStatus
Deprecated.
document
Returns the Document object for the window.
See also
The Document Object
.
frameElement
Returns the frame in which the window runs.
frames
Returns all window objects running in the window.
history
Returns the History object for the window.
See also
The History Object
.
innerHeight
Returns the height of the window's content area (viewport) including 
    scrollbars
innerWidth
Returns the width of a window's content area (viewport) including 
    scrollbars
length
Returns the number of <iframe> elements in the current window
localStorage
Allows to save key/value pairs in a web browser. Stores the data with no expiration date
location
Returns the Location object for the window.
See also the
The Location Object
.
name
Sets or returns the name of a window
navigator
Returns the Navigator object for the window.
See also
The Navigator object
.
opener
Returns a reference to the window that created the window
outerHeight
Returns the height of the browser window, including toolbars/scrollbars
outerWidth
Returns the width of the browser window, including toolbars/scrollbars
pageXOffset
Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window
pageYOffset
Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window
parent
Returns the parent window of the current window
screen
Returns the Screen object for the window
See also
The Screen object
screenLeft
Returns the horizontal coordinate of the window relative to the screen
screenTop
Returns the vertical coordinate of the window relative to the screen
screenX
Returns the horizontal coordinate of the window relative to the screen
screenY
Returns the vertical coordinate of the window relative to the screen
sessionStorage
Allows to save key/value pairs in a web browser. Stores the data for one 
    session
scrollX
An alias of
pageXOffset
scrollY
An alias of
pageYOffset
self
Returns the current window
status
Deprecated. Avoid using it.
top
Returns the topmost browser window
Window Object Methods
Method
Description
addEventListener()
Attaches an event handler to the window
alert()
Displays an alert box with a message and an OK button
atob()
Decodes a base-64 encoded string
blur()
Removes focus from the current window
btoa()
Encodes a string in base-64
clearInterval()
Clears a timer set with setInterval()
clearTimeout()
Clears a timer set with setTimeout()
close()
Closes the current window
confirm()
Displays a dialog box with a message and an OK and a Cancel button
focus()
Sets focus to the current window
getComputedStyle()
Gets the current computed CSS styles applied to an element
getSelection()
Returns a Selection object representing the range of text selected by the user
matchMedia()
Returns a MediaQueryList object representing the specified CSS media query string
moveBy()
Moves a window relative to its current position
moveTo()
Moves a window to the specified position
open()
Opens a new browser window
print()
Prints the content of the current window
prompt()
Displays a dialog box that prompts the visitor for input
removeEventListener()
Removes an event handler from the window
requestAnimationFrame()
Requests the browser to call a function to update an animation before 
    the next repaint
resizeBy()
Resizes the window by the specified pixels
resizeTo()
Resizes the window to the specified width and height
scroll()
Deprecated.
Use
scrollTo()
instead.
scrollBy()
Scrolls the document by the specified number of pixels
scrollTo()
Scrolls the document to the specified coordinates
setInterval()
Calls a function or evaluates an expression at specified intervals (in milliseconds)
setTimeout()
Calls a function or evaluates an expression after a specified number of milliseconds
stop()
Stops the window from loading
Window blur()
Example
Open a new window and blur it:
const myWindow = window.open("", "", "width=200, height=100");
myWindow.blur();
Try it Yourself 
Open a new window and set focus to it:
const myWindow = window.open("", "", "width=200, height=100");
myWindow.focus();
Try it Yourself 
Description
The
blur()
method removes focus from a window.
The
focus()
method sets focus to a window.
Syntax
window.blur()
Parameters
None
Return Value
NONE
Browser Support
blur()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window moveBy()
Example
Open a new window and move it 250px relative to its current 
position:
function openWin()
{
myWindow = window.open('', '', 'width=400, height=400');
}
function moveWin()
{
myWindow.moveBy(250, 250);
}
Try it Yourself 
More examples below.
Description
The
moveBy()
method moves a window a number of pixels relative to its current coordinates.
Syntax
window.moveBy(
x, y
)
Parameters
Parameter
Description
x
Required.
A positive or negative number.
The number of pixels to move the window horizontally.
y
Required.
A positive or negative number.
The number of pixels to move the window vertically.
Return Value
NONE
More Examples
Using moveBy() together with moveTo():
function moveWinTo() {
myWindow.moveTo(150, 150);
}
function moveWinBy() {
myWindow.moveBy(75, 75);
}
Try it Yourself 
Browser Support
moveBy()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window moveTo()
Example
Open a new window, and move it to position 500 x 100:
function openWin()
{
myWindow = window.open('', '', 'width=400, height=200');
}
function moveWin()
{
myWindow.moveTo(500, 100);
}
Try it Yourself 
More examples below.
Description
The
moveTo()
method moves a window to the specified coordinates.
Syntax
window.moveTo(
x, y
)
Parameters
Parameter
Description
x
Required.
A positive or negative number.
The horizontal coordinate to move to.
y
Required.
A positive or negative number.
The vertical coordinate to move to.
Return Value
NONE
More Examples
Using moveTo() together with moveBy():
function moveWinTo() {
myWindow.moveTo(150, 150);
}
function moveWinBy() {
myWindow.moveBy(75, 50);
}
Try it Yourself 
Browser Support
moveTo()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window pageXOffset
Example 1
Scroll the content by 100 pixels, and alert the pageXOffset and pageYOffset:
window.scrollBy(100, 100);
alert(window.pageXOffset + window.pageYOffset);
Try it Yourself 
More examples below.
Description
The
pageXOffset
property returns the pixels a 
document has scrolled from the upper left corner of the window.
The
pageXOffset
property is equal to the
scrollX
property.
The
pageXOffset
property is read-only.
Syntax
window.pageXOffset
or just:
pageXOffset
Return Value
Type
Description
A number
The number of pixels the document has scrolled from the upper left corner of the window.
More Examples
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position. Remove the sticky class when you leave the scroll position.
function myFunction() {
if (window.pageYOffset >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
window.pageXOffset
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window open()
Example 1
Open "www.w3schools.com" in a new browser tab:
window.open("https://www.w3schools.com");
Try it Yourself 
More examples below.
Description
The
open()
method opens a new browser window, or a new tab, depending on your 
browser settings and the parameter values.
Syntax
window.open(
URL, name, specs, replace
)
Parameters
Parameter
Description
URL
Optional.
The URL of the page to open.
If no URL is specified, a new blank window/tab is opened
name
Optional.
The target attribute or the name of the window.
The following values are supported:
Value
Description
_blank
URL is loaded into a new window, or tab. This is the default
_parent
URL is loaded into the parent frame
_self
URL replaces the current page
_top
URL replaces any framesets that may be loaded
name
The name of the window (does  not specify the title of the window)
specs
Optional.
A comma-separated list of items, no whitespaces.
The following values are supported:
fullscreen=yes|no|1|0
Whether or not to display the browser in full-screen mode. Default is no. A window in full-screen mode must also be in theater mode. IE only
height=pixels
The height of the window. Min. value is 100
left=pixels
The left position of the window. Negative values not allowed
location=yes|no|1|0
Whether or not to display the address field. Opera only
menubar=yes|no|1|0
Whether or not to display the menu bar
resizable=yes|no|1|0
Whether or not the window is resizable. IE only
scrollbars=yes|no|1|0
Whether or not to display scroll bars. IE, Firefox & Opera only
status=yes|no|1|0
Whether or not to add a status bar
titlebar=yes|no|1|0
Whether or not to display the title bar. Ignored unless the calling application is an HTML Application or a trusted dialog box
toolbar=yes|no|1|0
Whether or not to display the browser toolbar. IE and Firefox only
top=pixels
The top position of the window. Negative values not allowed
width=pixels
The width of the window. Min. value is 100
replace
Deprecated
Specifies whether the URL creates a new entry or replaces the current entry in the history list. The following values are supported:
true - URL replaces the current document in the history list
false - URL creates a new entry in the history list
Warning
Chrome throws an exception when using this parameter.
Source:
Bugs Chromium Issue 1164959
.
Return Value
A reference to the new window, or
null
if the call failed.
More Examples
Open an about:blank page in a new window/tab:
var myWindow = window.open("", "", "width=200,height=100");
Try it Yourself 
Open a new window called "MsgWindow", and write some text into it:
var myWindow = window.open("", "MsgWindow", "width=200,height=100");
myWindow.document.write("<p>This is 'MsgWindow'. I am 200px wide and 100px tall!</p>");
Try it Yourself 
Replace the current window with a new window:
var myWindow = window.open("", "_self");
myWindow.document.write("<p>I replaced the current window.</p>");
Try it Yourself 
Open a new window and control its appearance:
window.open("https://www.w3schools.com", "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=400,height=400");
Try it Yourself 
Open multiple tabs:
window.open("
http://www.google.com/
");
window.open("https://www.w3schools.com/");
Try it Yourself 
Open a new window. Use close() to close the new window:
function openWin() {
myWindow = window.open("", "myWindow", "width=200,height=100");// Opens a new window
}
function closeWin() {
myWindow.close();// Closes the new window
}
Try it Yourself 
Open a new window. Use the name property to return the name of the new window:
var myWindow = window.open("", "MsgWindow", "width=200,height=100");
myWindow.document.write("<p>This window's name is: " + myWindow.name + "</p>");
Try it Yourself 
Using the opener property to return a reference to the window that created 
the new window:
var myWindow = window.open("", "myWindow", "width=200,height=100"); // Opens a new window
myWindow.document.write("<p>This is 'myWindow'</p>"); // Text in the new window
myWindow.opener.document.write("<p>This is the source window!</p>"); // Text in the window that created the new window
Try it Yourself 
Browser Support
open()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Set clear()
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Clear Set
letters.clear()
Try it Yourself 
Description
The
clear()
method removes all values from a set.
Syntax
set
.clear()
Parameters
NONE
Return Value
NONE
Browser Support
set.clear()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.clear()
is not supported in Internet Explorer.
JavaScript Set add()
The add() Method
Example
letters.add("d");
letters.add("e");
Try it Yourself 
If you add equal elements, only the first will be saved:
Example
letters.add("a");
letters.add("b");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
letters.add("c");
Try it Yourself 
Description
The
add()
method inserts a new element in the set.
Syntax
set
.add(
value
)
Parameters
Parameter
Description
value
Required.
The value to add.
Return Value
Type
Description
Set
A set object with the added value.
Browser Support
set.add()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.add()
is not supported in Internet Explorer.
JavaScript RegExp test()
Example
Search a string for the character "e":
let text = "The best things in life are free";
let pattern = /e/;
let result = pattern.test(text);
Try it Yourself 
Description
The test() method tests for a match in a string.
If it finds a match, it returns true, otherwise it returns false.
Browser Support
test()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Syntax
RegExpObject
.test(
string
)
Parameter Values
Parameter
Description
string
Required. The string to be searched
Return Value
Type
Description
Boolean
Returns true if it finds a match, otherwise false
More Examples
Example
Do a global search, and test for "Hello" and "W3Schools" in a 
string:
// The string:
let text = "Hello world!";
// Look for "Hello"
let pattern1 = /Hello/g;
let result1 = pattern1.test(text);
// Look for "W3Schools"
let pattern2 = /W3Schools/g;
let result2 = pattern2.test(text);
Try it Yourself 
Regular Expression Search Methods
In JavaScript, a regular expression text search, can be done with different methods.
With a
pattern
as a regular expression, these are the most common methods:
Example
Description
text.match(
pattern
)
The String method match()
text.search(
pattern
)
The String method search()
pattern
.exec(text)
The RexExp method exec()
pattern
.test(text)
The RegExp method test()
JavaScript Set delete()
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Remove one Element
letters.delete("a");
Try it Yourself 
Description
The
delete()
method removes a specified value from a set.
Syntax
set
.delete(
value
)
Parameters
Parameter
Description
value
Required.
The value to remove.
Return Value
Type
Description
Boolean
true
if the value existed, otherwise
false
.
Browser Support
set.delete()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.delete()
is not supported in Internet Explorer.
JavaScript Set forEach()
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all entries
let text = "";
letters.forEach (function(value) {
text += value;
})
Try it Yourself 
Description
The
forEach()
method invokes a function for each set element:
The
forEach()
method does not change the original set.
Syntax
set
.forEach(
callback
)
Parameters
Parameter
Description
callback
Required.
A function to execute for each element.
Return Value
NONE
Browser Support
set.forEach()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.forEach()
is not supported in Internet Explorer.
JavaScript Set entries()
Example 1
// Create a Set
const letters = new Set(["a","b","c"]);
// Get all Entries
const myIterator = letters.entries();
// List all Entries
let text = "";
for (const entry of myIterator) {
text += entry;
}
Try it Yourself 
More Examples Below !
Description
The
entries()
method returns an Iterator with [value,value] pairs from a set.
Syntax
set
.entries()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the values of the set.
More Examples
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Entries
let text = "";
for (const entry of letters.entries()) {
text += entry;
}
Try it Yourself 
Browser Support
set.entries()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.entries()
is not supported in Internet Explorer.
JavaScript Set keys()
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Get the Values
const myIterator = letters.keys();
// List the Values
let text = "";
for (const x of myIterator) {
text += x;
}
Try it Yourself 
More Examples Below !
Description
The
keys()
method returns an Iterator object with the values in a set.
The
keys()
method does not change the original set.
Syntax
set
.keys()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the values of the set.
More Examples
Looping the set.keys() directly:
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Elements
let text = "";
for (const x of letters.keys()) {
text += x;
}
Try it Yourself 
Browser Support
set.keys()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.keys()
is not supported in Internet Explorer.
JavaScript Set size
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Get the Size
let x = letters.size
Try it Yourself 
Description
The
size
property returns the number of elements in a set.
Syntax
set
.size
Parameters
NONE
Return Value
Type
Description
Number
The number of elements in the set.
Browser Support
set.size()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.size()
is not supported in Internet Explorer.
JavaScript const
Constant Array:
// Create an array:
const cars = ["Saab", "Volvo", "BMW"];
// Change an element:
cars[0] = "Toyota";
// Add an element:
cars.push("Audi");
Try it Yourself 
Constant Object:
// Create an object:
const car = {type:"Fiat", model:"500", color:"white"};
// Change a property:
car.color = "red";
// Add a property:
car.owner = "Johnson";
Try it Yourself 
Description
The
const
statement declares a variable.
Variables are containers for storing information.
Creating a variable in JavaScript is called "declaring" a variable:
const name = "Volvo";
Syntax
const
name
=
value
;
Parameters
Parameter
Description
name
Required.
The name of the variable.
Variable names must follow these rules:
Must begin with a letter, or $, or _
Names are case sensitive (y and Y are different)
Reserved JavaScript words cannot be used as names
value
Required.
A value to be assigned to the variable.
Browser Support
const
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
const
is an ECMAScript6 (ES6 - JavaScript 2015) feature.
JavaScript debugger
Example
With the debugger turned on, this code should stop executing before the third line:
let x = 15 * 5;
debugger;
document.getElementbyId("demo").innerHTML = x;
Try it Yourself 
Description
The
debugger
statement stops the execution of JavaScript, and calls the debugger.
Syntax
debugger;
Browser Support
debugger
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript Set values()
Example
// Create a Set
const letters = new Set(["a","b","c"]);
// Get all Values
const myIterator = letters.values();
// List all Values
let text = "";
for (const entry of myIterator) {
text += entry;
}
Try it Yourself 
More Examples Below !
Description
The
values()
method returns an Iterator object with the values in a set.
The
values()
method does not change the original set.
Syntax
set
.values()
Parameters
NONE
Return Value
Type
Description
Iterator
An iterable object with the values of the set.
More Examples
Looping the set.values() directly:
// Create a Set
const letters = new Set(["a","b","c"]);
// List all Values
let text = "";
for (const entry of letters.values()) {
text += entry;
}
Try it Yourself 
Browser Support
set.values()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
set.values()
is not supported in Internet Explorer.
JavaScript for Loop
Example
Loop (iterate over) a code block five times:
for (let i = 0; i < 5; i++) {
text += i + "<br>";
}
Try it Yourself 
Loop (iterate over) an array to collect car names:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
for (let i = 0; i < cars.length; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
The loop starts in position 0 (
let i = 0
).
The loop automatically increments
i
for each run.
The loop runs as long as
i < cars.length
.
More examples below.
Description
The
for
statement defines a code block that is executed as long as a condition is
true
.
Syntax
for (statement 1; statement 2; statement 3) {
code block to be executed
}
Parameters
Parameter
Description
statement 1
Optional.
Executed before the code block starts.
Normally used to initialize a counter variable.
To initiate multiple values, separate each value with a comma.
This parameter can be omitted, but not the semicolon ";"
statement 2
Optional.
The condition for running the code block.
If it returns
true
the loop will start over again, otherwise the loop will end.
This parameter can be omitted, but not the semicolon ";"
statement 3
Optional.
Executed after the code block.
Normally used to increment the counter variable.
This parameter can be omitted (e.g. to increase/decrease values inside the loop)
JavaScript Loop Statements
Statement
Description
break
Breaks out of a loop
continue
Skips a value in a loop
while
Loops a code block while a condition is true
do...while
Loops a code block once, and then while a condition is true
for
Loops a code block while a condition is true
for...of
Loops the values of any iterable
for...in
Loops the properties of an object
More Examples
Initiate multiple values in the first parameter:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
for (let i = 0, len = cars.length, text = ""; i < len; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
Omit the first parameters (set the values before the loop starts):
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 2;
let len = cars.length;
let text = "";
for (; i < len; i++) {
text += cars[i] + "<br>";
}
Try it Yourself 
Use
continue
- Loop through a block of code, but skip the value 3:
let text = "";
for (let i = 0; i < 5; i++) {
if (i == 3) continue;
text += i + "<br>";
}
Try it Yourself 
Use
break
- Loop a code block, but exit the loop when
i == 3
:
let text = "";
for (let i = 0; i < 5; i++) {
if (i == 3) break;
text += i + "<br>";
}
Try it Yourself 
Omit the second parameter.
Use
break
to exit the loop,
otherwise the loop will never end, and your browser will crash:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
for (let i = 0; ; i++) {
if (i == cars-length) break;
text += cars[i] +  "<br>";
}
Try it Yourself 
Loop over an array in descending order (negative increment):
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
for (let i = cars.length - 1; i >= 0; i--) {
text += cars[i] + "<br>";
}
Try it Yourself 
Omit the last parameter, and increment the values inside the loop:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let i = 0;
let len = cars.length;
for (; i < len;) {
text += cars[i] + "<br>";
i++;
}
Try it Yourself 
Loop a NodeList and change the color of all p elements in the list:
const myNodelist = document.getElementsByTagName("P");
for (let i = 0; i < myNodelist.length; i++) {
myNodelist[i].style.color = "blue";
}
Try it Yourself 
A nested loop (a loop inside a loop):
let text = "";
for (let = 0; i < 3; i++) {
text += i + "<br>";
for (let j = 10; j < 15; j++) {
text += j + "<br>";
}
}
Try it Yourself 
Browser Support
for
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window clearTimeout()
Example 1
How to prevent myGreeting() to execute:
const myTimeout = setTimeout(myGreeting, 3000);
function myGreeting() {
document.getElementById("demo").innerHTML = "Happy Birthday to You !!"
}
function myStopFunction() {
clearTimeout(myTimeout);
}
Try it Yourself 
More examples below.
Description
The
clearTimeout()
method clears a timer set with the
setTimeout()
method.
Syntax
clearTimeout(
id_of_settimeout
)
Parameters
Parameter
Description
timeout id
Required.
The id returned by the setTimeout() method.
Return Value
NONE
More Examples
This example has a "Start" button to start a timer, an input 
field for a counter, and a "Stop" button to stop the 
timer:
<button onclick="startCount()">Start count!</button>
<input type="text" id="demo">
<button onclick="stopCount()">Stop count!</button>
<script>
let counter = 0;
let timeout;
let timer_on = 0;
function timedCount() {
document.getElementById("demo").value = counter;
counter++;
timeout = setTimeout(timedCount, 1000);
}
function startCount() {
if (!timer_on) {
timer_on = 1;
timedCount();
}
}
function stopCount() {
clearTimeout(timeout);
timer_on = 0;
}
</script>
Try it Yourself 
Browser Support
clearTimeout()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window confirm()
Examples
Display a confirmation box:
confirm("Press a button!");
Try it Yourself 
Confirmation box with line-breaks:
confirm("Press a button!\nEither OK or Cancel.");
Try it Yourself 
More examples below.
Description
The
confirm()
method displays a dialog box with a message, an OK button, and a Cancel button.
The
confirm()
method returns
true
if the user clicked "OK", otherwise
false
.
Syntax
confirm(
message
)
Parameters
Parameter
Description
message
Optional.
The text to display in the confirm box.
Return Value
Type
Description
A boolean
true
if the user clicked OK,
otherwise
false
.
More Examples
Display a confirmation box, and output what the user clicked:
let text;
if (confirm("Press a button!") == true) {
text = "You pressed OK!";
} else {
text = "You canceled!";
}
Try it Yourself 
Browser Support
confirm()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window defaultStatus
Example
Set a default text in the window status bar:
window.defaultStatus = "Default text in the status bar!"
Try it Yourself 
Description
The defaultStatus property is deprecated.
Remove it to prevent RUN-TIME ERRORS in the future.
Syntax
window.defaultStatus
Return Value
The default text in the window's status bar.
Window Document
The Document Object
When an HTML document is loaded into a web browser, it becomes a
document object
.
The
document object
is the root node of the HTML document.
The
document object
is a property of the
window object
.
The
document object
is accessed with:
window.document
or just
document
Examples
let url = window.document.URL;
Try it Yourself 
let url = document.URL;
Try it Yourself 
Document Object Properties and Methods
The following properties and methods can be used on HTML documents:
Property / Method
Description
activeElement
Returns the currently focused element in the document
addEventListener()
Attaches an event handler to the document
adoptNode()
Adopts a node from another document
anchors
Deprecated
applets
Deprecated
baseURI
Returns the absolute base URI of a document
body
Sets or returns the document's body (the <body> element)
charset
Deprecated
characterSet
Returns the character encoding for the document
close()
Closes the output stream previously opened with document.open()
cookie
Returns all name/value pairs of cookies in the document
createAttribute()
Creates an attribute node
createComment()
Creates a Comment node with the specified text
createDocumentFragment()
Creates an empty DocumentFragment node
createElement()
Creates an Element node
createEvent()
Creates a new event
createTextNode()
Creates a Text node
defaultView
Returns the window object associated with a document, or null if none is available.
designMode
Controls whether the entire document should be editable or not.
doctype
Returns the Document Type Declaration associated with the document
documentElement
Returns the Document Element of the document (the <html> element)
documentMode
Deprecated
documentURI
Sets or returns the location of the document
domain
Returns the domain name of the server that loaded the document
domConfig
Deprecated
embeds
Returns a collection of all <embed> elements the document
execCommand()
Deprecated
forms
Returns a collection of all <form> elements in the document
getElementById()
Returns the element that has the ID attribute with the specified value
getElementsByClassName()
Returns an
HTMLCollection
containing all elements with the specified class name
getElementsByName()
Returns an live
NodeList
containing all elements with the specified name
getElementsByTagName()
Returns an
HTMLCollection
containing all elements with the specified tag name
hasFocus()
Returns a Boolean value indicating whether the document has focus
head
Returns the <head> element of the document
images
Returns a collection of all <img> elements in the document
implementation
Returns the DOMImplementation object that handles this document
importNode()
Imports a node from another document
inputEncoding
Deprecated
lastModified
Returns the date and time the document was last modified
links
Returns a collection of all <a> and <area> elements in the document that have a href attribute
normalize()
Removes empty Text nodes, and joins adjacent nodes
normalizeDocument()
Deprecated
open()
Opens an HTML output stream to collect output from document.write()
querySelector()
Returns the first element that matches a specified CSS selector(s) in the document
querySelectorAll()
Returns a static
NodeList
containing all elements that matches a specified CSS selector(s) in the document
readyState
Returns the (loading) status of the document
referrer
Returns the URL of the document that loaded the current document
removeEventListener()
Removes an event handler from the document (that has been attached with the
addEventListener()
method)
renameNode()
Deprecated
scripts
Returns a collection of <script> elements in the document
strictErrorChecking
Deprecated
title
Sets or returns the title of the document
URL
Returns the full URL of the HTML document
write()
Writes HTML expressions or JavaScript code to a document
writeln()
Same as write(), but adds a newline character after each statement
Window getComputedStyle()
Example
Get the computed background color of an element:
const element = document.getElementById("test");
const cssObj = window.getComputedStyle(element, null);
let bgColor = cssObj.getPropertyValue("background-color");
Try it Yourself 
More examples below.
Description
The
getComputedStyle()
method gets the computed CSS properties and values of an HTML element.
The
getComputedStyle()
method returns a
CSSStyleDeclaration object
.
Computed Style
The computed style is the style used on the element after all styling sources have been applied.
Style sources: external and internal style sheets, inherited styles, and browser default styles.
Syntax
window
.getComputedStyle(
element, pseudoElement
)
Parameters
Parameter
Description
element
Required.
The element to get the computed style for.
pseudoElement
Optional.
A pseudo-element to get.
Return Value
Type
Description
An object
A CSSStyleDeclaration object with all the CSS properties and values of the element.
More Examples
Get all the computed styles from an element:
const element = document.getElementById("test");
const cssObj = window.getComputedStyle(element, null);
let text = "";
for (x in cssObj) {
cssObjProp = cssObj.item(x)
text += cssObjProp + " = " + cssObj.getPropertyValue(cssObjProp) + "<br>";
}
Try it Yourself 
Get computed font size of the first letter in an element (using pseudo-element):
const element = document.getElementById("test");
const cssObj = window.getComputedStyle(element, ":first-letter")
let size = cssObj.getPropertyValue("font-size");
Try it Yourself 
Browser Support
getComputedStyle()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window innerWidth
Example
Get window width:
let width = window.innerWidth;
Try it Yourself 
let width = innerWidth;
Try it Yourself 
More examples below.
Description
The
innerWidth
property returns the width of a window's content area.
The
innerWidth
property is read-only.
Syntax
window.innerWidth
or just:
innerWidth
Return Value
Type
Description
A number
The the inner width of the browser window's content area in pixels.
More Examples
All height and width properties:
let text =
"<p>innerWidth: " + window.innerWidth + "</p>" +
"<p>innerHeight: " + window.innerHeight + "</p>" +
"<p>outerWidth: " + window.outerWidth + "</p>" +
"<p>outerHeight: " + window.outerHeight + "</p>";
Try it Yourself 
Browser Support
window.innerWidth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window innerHeight
Example
Get the window height:
let height = window.innerHeight;
Try it Yourself 
let height = innerHeight;
Try it Yourself 
More examples below.
Description
The
innerHeight
property returns the height of a window's content area.
The
innerHeight
property is read only.
Syntax
window.innerHeight
or just:
innerHeight
Return Value
Type
Description
A number
The the inner height of the browser window's content area in pixels.
More Examples
All height and width properties:
let text =
"<p>innerWidth: " + window.innerWidth + "</p>" +
"<p>innerHeight: " + window.innerHeight + "</p>" +
"<p>outerWidth: " + window.outerWidth + "</p>" +
"<p>outerHeight: " + window.outerHeight + "</p>";
Try it Yourself 
Browser Support
window.innerHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window prompt()
Example 1
Prompt for a user name and output a message:
let person = prompt("Please enter your name", "Harry Potter");
if (person != null) {
document.getElementById("demo").innerHTML =
"Hello " + person + "! How are you today?";
}
Try it Yourself 
More examples below.
Description
The
prompt()
method displays a dialog box that prompts the user for input.
The
prompt()
method returns the input value if the user clicks "OK",
otherwise it returns
null
.
Syntax
prompt(
text, defaultText
)
Parameters
Parameter
Description
text
Optional.
The text to display in the dialog box.
defaultText
Optional.
The default input text.
Return Value
Parameter
Description
A string
If the user clicks "OK", the input value is returned.
Otherwise
null
is returned.
More Examples
Prompt for his favourite drink:
let text;
let favDrink = prompt("What's your favorite cocktail drink?");
switch(favDrink) {
case "Coca-Cola":
text = "Excellent choice! Coca-Cola is good for your soul.";
break;
case "Pepsi":
text = "Pepsi is my favorite too!";
break;
case "Sprite":
text = "Really? Are you sure the Sprite is your favorite?";
break;
default:
text = "I have never heard of that one!";
}
Try it Yourself 
Browser Support
prompt()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window parent
Example
Change the background-color of the parent:
parent.document.body.style.backgroundColor = "lightblue";
Try it Yourself 
Description
The
parent
property returns the parent window (of the current window).
The
parent
property is read-only.
Syntax
window.parent
or just:
parent
Return Value
Type
Description
An object
The parent window of the current window.
More Examples
The location of the parent window:
location = window.parent.location;
Try it Yourself 
Browser Support
window.parent
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Screen
The Window Screen Object
The screen object contains information about the visitor's screen.
Screen Object Properties
Property
Description
availHeight
Returns the height of the screen (excluding the Windows Taskbar)
availWidth
Returns the width of the screen (excluding the Windows Taskbar)
colorDepth
Returns the bit depth of the color palette for displaying images
height
Returns the total height of the screen
pixelDepth
Returns the color resolution (in bits per pixel) of the screen
width
Returns the total width of the screen
Window scrollBy()
Example
Scroll the document 100px horizontally:
window.scrollBy(100, 0);
Try it Yourself 
Scroll the document 100px vertically:
window.scrollBy(0, 100);
Try it Yourself 
More examples below.
Description
The
scrollBy()
method scrolls the document by the specified number of pixels.
Syntax
window.scrollBy(
x, y
)
or just:
scrollBy(
x, y
)
Parameters
Parameter
Description
x
Required.
Number of pixels to scroll (horizontally).
Positive values scroll to the right, negative values to the left.
y
Required.
Number ofpixels to scroll (vertically).
Positive values scroll down, negative values scroll up.
Return Value
NONE
More Examples
Scroll the document up and down:
<button onclick="scrollWin(0, 50)">Scroll down</button>
<button  onclick="scrollWin(0, -50)">Scroll up</button>
<script>
function scrollWin(x, y) {
window.scrollBy(x, y);
}
</script>
Try it Yourself 
Scroll the document right and left:
<button onclick="scrollWin(100, 0)">Scroll  right</button>
<button onclick="scrollWin(-100, 0)">Scroll  left</button>
<script>
function scrollWin(x, y) {
window.scrollBy(x, y);
}
</script>
Try it Yourself 
Browser Support
scrollBy()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window scrollTo()
Example
Scroll the document to the horizontal position 500:
window.scrollTo(500, 0);
Try it Yourself 
Scroll the document to the vertical position 500:
window.scrollTo(0, 500);
Try it Yourself 
More examples below.
Description
The
scrollTo()
method scrolls the document to specified coordinates.
Syntax
window.scrollTo(
x, y
)
or just:
scrollTo(
x, y
)
Parameters
Parameter
Description
x
Required.
The coordinate to scroll to (horizontally), in pixels.
y
Required.
The coordinate to scroll to (vertically), in pixels.
Return Value
NONE
More Examples
Scroll the document to position 300 horizontally and 500 vertically:
window.scrollTo(300, 500);
Try it Yourself 
Browser Support
scrollTo()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window scrollX
Example 1
Scroll the content by 100 pixels, and alert the scrollX and scrollY:
window.scrollBy(100, 100);
alert(window.scrollX + window.scrollY);
Try it Yourself 
More examples below.
Description
The
scrollX
property returns the pixels a 
document has scrolled from the upper left corner of the window.
The
scrollX
property is read-only.
Syntax
window.scrollX
or just:
scrollX
Return Value
Type
Description
A number
The number of pixels the document has scrolled from the upper left corner of the window.
More Examples
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position. Remove the sticky class when you leave the scroll position.
function myFunction() {
if (window.scrollY >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
window.scrollX
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window sessionStorage
Example
Set and retrieve a sessionStorage name/value pair:
sessionStorage.setItem("lastname", "Smith");
sessionStorage.getItem("lastname");
Try it Yourself 
More examples below.
Description
The
sessionStorage
object let you store key/value pairs in the browser.
Syntax
window.sessionStorage
Or just:
sessionStorage
Save Data to Session Storage
sessionStorage.setItem("key", "value");
Read Data from Session Storage
let lastname = sessionStorage.getItem("key");
Remove Data from Session Storage
sessionStorage.removeItem("key");
Remove All (Clear session Storage)
sessionStorage.clear();
Parameters
Parameter
Description
key
Required.
The name of a key.
value
Required.
The value of the key.
Return Value
Type
Description
Object
A sessionStorage object.
More Examples
Count the number of times a user has clicked a button:
if (sessionStorage.clickcount) {
sessionStorage.clickcount = Number(sessionStorage.clickcount) 
  + 1;
} else {
sessionStorage.clickcount = 1;
}
Try it Yourself 
Browser Support
window.sessionStorage
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
8-11
Yes
Yes
Yes
Yes
Window setTimeout()
Examples
Wait 5 seconds for the greeting:
const myTimeout = setTimeout(myGreeting, 5000);
Try it Yourself 
Use clearTimeout(myTimeout) to prevent myGreeting from running:
const myTimeout = setTimeout(myGreeting, 5000);
function myStopFunction() {
clearTimeout(myTimeout);
}
Try it Yourself 
More examples below.
Description
The
setTimeout()
method calls a function after a number of milliseconds.
1 second = 1000 milliseconds.
Syntax
setTimeout(
function, milliseconds, param1, param2, ...
)
Parameters
Parameter
Description
function
Required.
The function to execute.
milliseconds
Optional.
Number of milliseconds to wait before executing.
Default value is 0.
param1,
param2,
...
Optional.
Parameters to pass to the
function.
Not supported in IE9 and earlier.
Return Value
Type
Description
A number
The id of the timer.
Use this id with clearTimeout(id) to cancel the timer.
More Examples
Display an alert box after 3 seconds (3000 milliseconds):
let timeout;
function myFunction() {
timeout = setTimeout(alertFunc, 3000);
}
function alertFunc() {
alert("Hello!");
}
Try it Yourself 
Display a timed text:
let x = document.getElementById("txt");
setTimeout(function(){ x.value = "2 seconds" }, 2000);
setTimeout(function(){ x.value = "4 seconds" }, 4000);
setTimeout(function(){ x.value = "6 seconds" }, 6000);
Try it Yourself 
Open a new window and close the window after three seconds (3000 
milliseconds):
const myWindow = window.open("", "", "width=200, height=100");
setTimeout(function() {myWindow.close()}, 3000);
Try it Yourself 
Count forever - but with the ability to stop the count:
function startCount()
function stopCount()
Try it Yourself 
A clock created with timing events:
function startTime() {
const date = new Date();
document.getElementById("txt").innerHTML = date.toLocaleTimeString();
setTimeout(function() {startTime()}, 1000);
}
Try it Yourself 
Pass parameters to the function (does not work in IE9 and earlier):
setTimeout(myFunc, 2000, "param1", "param2");
Try it Yourself 
However, if you use an anonymous function, it will work in all browsers:
setTimeout(function() {myFunc("param1", "param2")}, 2000);
Try it Yourself 
Browser Support
setTimeout()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window
top
Property
Example
Is this window the topmost window:
if (window.top != window.self) {
text = "This window is NOT the topmost window!";
} else {
text = "This window is the topmost window!";
}
Try it Yourself 
Description
The
top
property returns the topmost window in the current browser window.
The
top
property is read-only.
Syntax
window.top
Return Value
Type
Description
An object.
The topmost window in the hierarchy of windows in the current browser window.
Browser Support
window.top
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript for...of Loop
Examples
Iterate (loop) over the values of an array:
let text = "";
const cars = ['BMW', 'Volvo', 'Mini'];
for (let x of cars) {
text += x + " ";
}
Try it Yourself 
Example
Iterate (loop) over the values of a string:
let text = "JavaScript";
for (let x of text) {
text += x + " ";
}
Try it Yourself 
Description
The
for...of
statements combo iterates (loops) over the values of any iterable.
The code block inside the loop is executed once for each value.
Syntax
for (x
of
iterable) {
code block to be executed
}
Parameters
Parameter
Description
x
Required.
For every iteration the value of the next property is assigned to x.
iterable
Required.
Anything that has iterable properties.
JavaScript Loop Statements
Statement
Description
break
Breaks out of a loop
continue
Skips a value in a loop
while
Loops a code block while a condition is true
do...while
Loops a code block once, and then while a condition is true
for
Loops a code block while a condition is true
for...of
Loops the values of any iterable
for...in
Loops the properties of an object
Browser Support
for..of
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
for..of
is not supported in Internet Explorer.
JavaScript if...else
Example
If the hour is less than 20, output "Good day":
let hour = new Date().getHours();
if (hour < 20) {
document.getElementById("demo").innerHTML = "Good day";
}
Try it Yourself 
Output "Good day" or "Good evening":
let hour = new Date().getHours();
if (hour < 20) {
greeting = "Good day";
}
else {
greeting = "Good evening";
}
Try it Yourself 
More examples below.
Description
The if/else statement executes a block of code if a specified condition is 
true. If the condition is false, another block of code can be executed.
The if/else statement is a part of JavaScript's "Conditional" Statements, 
which are used to perform different actions based on different conditions.
In JavaScript we have the following conditional statements:
Use
if
to specify a block of code to be executed, if a specified condition is true
Use
else
to specify a block of code to be executed, if the same condition is false
Use
else if
to specify a new condition to test, if the first condition is false
Use
switch
to select one of many blocks of code to be executed
Syntax
The
if
statement specifies a block of code to be 
executed if a condition is true:
if (
condition
) {
// block of code to be executed if the condition is true
}
The
else
statement specifies a block of code to be 
executed if the condition is false:
if (
condition
) {
// block of code to be executed if the condition is true
}
else {
// block of code to be executed if the condition is false
}
The
else if
statement specifies a new condition if the 
first condition is false:
if (
condition1
) {
// block of code to be executed if condition1 is true
}
else if (
condition2
) {
// block of code to be executed if the condition1 is false and condition2 is true
} else {
// block of code to be executed if the condition1 is false and condition2 is false
}
Parameter Values
Parameter
Description
condition
Required. An expression that evaluates to true or false
More Examples
If time is less than 10:00, create a "Good 
morning" 
greeting, if not, but time is less than 20:00, create a "Good day" greeting, 
otherwise a "Good evening":
var time = new Date().getHours();
if (time < 10) {
greeting = "Good morning";
}
else if (time < 20){
greeting = "Good day";
}
else{
greeting = "Good evening";
}
Try it Yourself 
If the first <div> element in the document has an id of "myDIV", change its 
font-size:
var x = document.getElementsByTagName("DIV")[0];
if (x.id === "myDIV") {
x.style.fontSize = "30px";
}
Try it Yourself 
Change the value of the source attribute (src) of an <img> element, if the user clicks on the image:
<img id="myImage" onclick="changeImage()" src="pic_bulboff.gif" width="100" height="180">
<script>
function changeImage() {
var image = document.getElementById("myImage");
if (image.src.match("bulbon")) {
image.src = "pic_bulboff.gif";
} else {
image.src = "pic_bulbon.gif";
}
}
</script>
Try it Yourself 
Display a message based on user input:
var letter = document.getElementById("myInput").value;
var text;
// If the letter is "c"
if (letter === "c") {
text = "Spot on! Good job!";
// If the letter is "b" or "d"
}  else if (letter === "b" || letter === "d") {
text  = "Close, but not close enough.";
// If the letter is anything  else
} else {
text = "Waaay off..";
}
Try it Yourself 
Validate input data:
var x, text;
// Get the value of the input field with id="numb"
x = document.getElementById("numb").value;
// If x is Not a Number or less than 1 or greater than 10, output "input is not valid"
// If x is a number between 1 and 10, output "Input OK"
if (isNaN(x) || x < 1 || x > 10) {
text = "Input not valid";
} else {
text = "Input OK";
}
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript If...Else Statements
JavaScript Tutorial:
JavaScript Switch Statement
Browser Support
if...else
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript let
Example
Create a variable called carName and assign the value "Volvo" to it:
let carName = "Volvo";
Try it Yourself 
More examples below.
Description
The
let
statement declares a variable.
Variables are containers for storing information.
Creating a variable in JavaScript is called "declaring" a variable:
let carName;
After the declaration, the variable is empty (it has no value).
To assign a value to the variable, use the equal sign:
carName = "Volvo";
You can also assign a value to the variable when you declare it:
let carName = "Volvo";
Syntax
let
name
=
value
;
Parameters
Parameter
Description
name
Required.
The name of the variable.
Variable names must follow these rules:
Must begin with a letter, or $, or _
Names are case sensitive (y and Y are different)
Reserved JavaScript words cannot be used as names
value
Optional.
A value to be assigned to the variable.
More Examples
Use
let
to assign 5 to x and 6 to y, and display x + y:
let x = 5;
let y = 6;
document.getElementById("demo").innerHTML = x + y;
Try it Yourself 
Declare many variables in one statement.
Start the statement with
let
and separate the variables by
comma
:
let lastName = "Doe",
age = 30,
job = "carpenter";
Try it Yourself 
Use
let
in a loop:
let text = "";
for (let i = 0; i < 5; i++) {
text += i + "<br>";
}
Try it Yourself 
Browser Support
let
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
let
is not supported in Internet Explorer.
JavaScript
switch
Statement
Example
Execute a block of code based on user input:
var text;
var fruits = document.getElementById("myInput").value;
switch(fruits) {
case "Banana":
text = "Banana is good!";
break;
case "Orange":
text = "I am not a fan of orange.";
break;
case "Apple":
text = "How you like them apples?";
break;
default:
text = "I have never heard of that fruit...";
}
Try it Yourself 
More "Try it Yourself" examples below.
Description
The switch statement executes a block of code depending on different cases.
The switch statement is a part of JavaScript's "Conditional" Statements, 
which are used to perform different actions based on different conditions. Use 
switch to select one of many blocks of code to be executed. This is the perfect 
solution for long, nested
if/else
statements.
The switch statement evaluates an expression. The value of the expression is then compared with the values of each case in the structure. If there is a match, the associated block of code is executed.
The switch statement is often used together with a break or a default keyword 
(or both). These are both optional:
The
break
keyword breaks out of the switch block. This will stop the execution of more execution of code and/or case testing inside 
the block. If break is omitted, the next code block in the switch statement is 
executed.
The
default
keyword specifies some code to run if there is no 
case match. There can only be one default keyword in a switch. Although this is optional, it is recommended that 
you use it, as it takes care of 
unexpected cases.
Syntax
switch(
expression
) {
case
n
:
code block
break;
case
n
:
code block
break;
default:
default code block
}
Parameter Values
Parameter
Description
expression
Required. Specifies an expression to be evaluated. The expression is evaluated once. The value of the expression is compared with the values of each case labels in the structure. If there is a match, the associated block of code is executed
More Examples
Example
Use today's weekday number to calculate the weekday name (Sunday=0, Monday=1, Tuesday=2, 
...):
var day;
switch (new Date().getDay()) {
case 0:
day = "Sunday";
break;
case 1:
day = "Monday";
break;
case 2:
day = "Tuesday";
break;
case 3:
day = "Wednesday";
break;
case 4:
day = "Thursday";
break;
case 5:
day = "Friday";
break;
case 6:
day = "Saturday";
break;
default:
day = "Unknown Day";
}
Try it Yourself 
Example
If today is neither Saturday nor Sunday, write a default message:
var text;
switch (new Date().getDay()) {
case 6:
text = "Today is Saturday";
break;
case 0:
text = "Today is Sunday";
break;
default:
text = "Looking forward to the Weekend";
}
Try it Yourself 
Example
Sometimes you will want different cases to use the same code, or fall-through to a common default.
Note that in this example, the cases share the same code block, and that the default case does not have to be the last case in a switch block (however, if
default
is NOT the last case in the switch block, remember to end it with a break).
var text;
switch (new Date().getDay()) {
case 1:
case 2:
case 3:
default:
text = "Looking forward to the Weekend";
break;
case 4:
case 5:
text = "Soon it is Weekend";
break;
case 0:
case 6:
text = "It is Weekend";
}
Try it Yourself 
Example
Using the switch statement to execute a block of code based on user input, from a prompt box:
var text;
var favDrink = prompt("What's your favorite cocktail drink?");
switch(favDrink) {
case "Martini":
text = "Excellent choice! Martini is good for your soul.";
break;
case "Daiquiri":
text = "Daiquiri is my favorite too!";
break;
case "Cosmopolitan":
text = "Really? Are you sure the Cosmopolitan is your favorite?";
break;
default:
text = "I have never heard of that one..";
}
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript If...Else Statements
JavaScript Tutorial:
JavaScript Switch Statement
JavaScript Reference:
JavaScript if/else Statement
JavaScript Reference:
JavaScript break Statement
Browser Support
switch
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript var
Example
Create a variable called carName and assign the value "Volvo" to it:
var carName = "Volvo";
Try it Yourself 
More examples below.
Description
The
var
statement declares a variable.
Variables are containers for storing information.
Creating a variable in JavaScript is called "declaring" a variable:
var carName;
After the declaration, the variable is empty (it has no value).
To assign a value to the variable, use the equal sign:
carName = "Volvo";
You can also assign a value to the variable when you declare it:
var carName = "Volvo";
Syntax
var
name
=
value
;
Parameters
Parameter
Description
name
Required.
The name of the variable.
Variable names must follow these rules:
Must begin with a letter, or $, or _
Names are case sensitive (y and Y are different)
Reserved JavaScript words cannot be used as names
value
Optional.
A value to be assigned to the variable.
More Examples
Use
var
to assign 5 to x and 6 to y, and display x + y:
var x = 5;
var y = 6;
document.getElementById("demo").innerHTML = x + y;
Try it Yourself 
Use
let
to assign 5 to x and 6 to y, and display x + y:
let x = 5;
let y = 6;
document.getElementById("demo").innerHTML = x + y;
Try it Yourself 
Declare many variables in one statement.
Start the statement with
var
and separate the variables by
comma
:
var lastName = "Doe",
age = 30,
job = "carpenter";
Try it Yourself 
Declare many variables in one statement.
Start the statement with
let
and separate the variables by
comma
:
let lastName = "Doe",
age = 30,
job = "carpenter";
Try it Yourself 
Using
var
in a loop:
let text = "";
for (var i = 0; i < 5; i++) {
text += i + "<br>";
}
Try it Yourself 
Using
let
in a loop:
let text = "";
for (let i = 0; i < 5; i++) {
text += i + "<br>";
}
Try it Yourself 
Browser Support
var
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript try...catch...finally
Example
This example has a typo in the
try block
. Alert is misspelled.
The
catch block
catches the error and executes the code to handle it:
<p id="demo"></p>
<script>
try {
adddlert("Welcome guest!");
}
catch(err) {
document.getElementById("demo").innerHTML = err.message;
}
</script>
Try it Yourself 
More examples below.
Description
When an
error
occurs, JavaScript will
stop
and generate an error message.
The
try...catch...finally
statements combo handles errors without stopping JavaScript.
The
try
statement defines the code block to run (to try).
The
catch
statement defines a code block to handle any error.
The
finally
statement defines a code block to run regardless of the result.
The
throw
statement defines a custom error.
Both
catch
and
finally
are optional, but you must use one of them.
Syntax
try {
tryCode - Code block to run
}
catch(
err
) {
catchCode -
 Code block to handle errors
}
finally {
finallyCode - Code block to be executed regardless of the try result
}
Parameters
Parameter
Description
tryCode
Required.
Code block to be tested while executing.
err
A local reference to the error object.
catchCode
Optional.
Code block to execute if an error occurs.
finallyCode
Optional.
Code block to execute regardless of the try result
More Examples
This example examines input.
If the value is wrong, an exception (err) is thrown:
<p>Please input a number between 
5 and 10:</p>
<input id="demo" type="text">
<button type="button" 
onclick="myFunction()">Test Input</button>
<p id="message"></p>
<script>
function myFunction() {
const message = 
document.getElementById("message");
message.innerHTML = "";
let x = 
document.getElementById("demo").value;
try {
if(x == "") throw "is Empty";
if(isNaN(x)) throw "not a number";
if(x > 10) throw "too high";
if(x < 5) throw "too low";
}
catch(err) {
message.innerHTML = 
"Input " + err;
}
}
</script>
Try it Yourself 
The
finally
statement executes code, after regardless of the try result:
function myFunction()
const message = 
document.getElementById("message");
message.innerHTML = "";
let x = 
document.getElementById("demo").value;
try {
if(x == "") throw "Empty";
if(isNaN(x)) 
throw "Not a number";
if(x > 
10) throw "Too high";
if(x < 
5) throw "Too low";
}
catch(err) 
{
message.innerHTML = "Error: " + 
err + ".";
}
finally {
document.getElementById("demo").value = "";
}
}
Try it Yourself 
Browser Support
try...catch
is an ECMAScript3 (ES3) feature.
ES3 (JavaScript 1999) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript while Loop
Example
Loop a code block as long as a i is less than 5:
let text = "";
let i = 0;
while (i < 5) {
text += i + "<br>";
i++;
}
Try it Yourself 
Loop (iterate over) an array to collect car names:
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
let i = 0;
while (i < cars.length) {
text += cars[i] + "<br>";
i++;
}
Try it Yourself 
The loop starts in position 0 (
let i = 0
).
The loop increments
i
for each run (
i++
).
The loop runs as long as
i < cars.length
.
More examples below.
Description
The
while
statement creates a loop (araund a code block) that is executed while a condition is
true
.
The loop runs while the condition is
true
. Otherwise it stops.
JavaScript Loop Statements
Statement
Description
break
Breaks out of a loop
continue
Skips a value in a loop
while
Loops a code block while a condition is true
do...while
Loops a code block once, and then while a condition is true
for
Loops a code block while a condition is true
for...of
Loops the values of any iterable
for...in
Loops the properties of an object
Syntax
while (condition) {
code block to be executed
}
Parameters
Parameter
Description
condition
Required.
The condition for running the code block. If it returns true, the code clock will start over again, otherwise it ends.
More Examples
Loop over an array in descending order (negative increment):
const cars = ["BMW", "Volvo", "Saab", "Ford"];
let text = "";
let len = cars.length;
while (len--) {
text += cars[len] + "<br>";
}
Try it Yourself 
Using break - Loop through a block of code, but exit the loop when i == 3:
let text = "";
let i = 0;
while (i < 5) {
text += i + "<br>";
i++;
if (i == 3) break;
}
Try it Yourself 
Using continue -Loop through a block of code, but skip the value 3:
let text = "";
let i = 0;
while (i < 5) {
i++;
if (i == 3) continue;
text += i + "<br>";
}
Try it Yourself 
Browser Support
while
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String charCodeAt()
Examples
Get the Unicode of the first character in a string:
let text = "HELLO WORLD";
let code = text.charCodeAt(0);
Try it Yourself 
Get the Unicode of the second:
let text = "HELLO WORLD";
let code = text.charCodeAt(1);
Try it Yourself 
More examples below.
Description
The
charCodeAt()
method returns the Unicode of the character
at a specified index (position) in a string.
The index of the first character is 0, the second is 1, ....
The index of the last character is string length - 1 (See Examples below).
See also the
charAt()
method.
charCodeAt() vs codePointAt()
charCodeAt()
is UTF-16,
codePointAt()
is Unicode.
charCodeAt()
returns a number between 0 and 65535.
Both methods return an integer representing the UTF-16 code of a character,
but only
codePointAt()
can return the full value of a Unicode value greather 0xFFFF (65535).
For more information about Unicode Character Sets, 
visit our
Unicode Reference
.
Syntax
string
.charCodeAt(
index
)
Parameters
Parameter
Description
index
Optional. A number.
The index (position) of a character.
Default value = 0.
Return Value
Type
Description
A number
The Unicode of the character at the specified index.
NaN if the index is invalid.
More Examples
Get the Unicode of the last character in a string:
let text = "HELLO WORLD";
let code = text.charCodeAt(text.length-1);
Try it Yourself 
Get the Unicode of the 15th character:
let text = "HELLO WORLD";
let code = text.charCodeAt(15);
Try it Yourself 
Browser Support
charCodeAt()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String codePointAt()
Examples
Get code point value at the first position in a string:
let text = "HELLO WORLD";
let code = text.codePointAt(0);
Try it Yourself 
Get the code point value at the second position:
let text = "HELLO WORLD";
let code = text.codePointAt(1);
Try it Yourself 
More examples below.
Description
The
codePointAt()
method returns the Unicode value at
an index (position) in a string.
The index of the first position is 0, the second is 1, ....
Difference Between charCodeAt() and codePointAt()
charCodeAt()
is UTF-16,
codePointAt()
is Unicode.
charCodeAt()
returns a number between 0 and 65535.
Both methods return an integer representing the UTF-16 code of a character,
but only
codePointAt()
can return the full value of a Unicode value greather 0xFFFF (65535).
For more information about Unicode Character Sets, 
visit our
Unicode Reference
.
Syntax
string
.codePointAt(
index
)
Parameters
Parameter
Description
index
Optional.
The index (position) in a the string.
Default value = 0.
Return Value
Type
Description
Number
The code point value at the specified index.
undefined
if the index is invalid.
More Examples
Get the code point value at the last position:
let text = "HELLO WORLD";
let code = text.charCodeAt(text.length-1);
Try it Yourself 
Get the code point value at the 15th position:
let text = "HELLO WORLD";
let code = text.charCodeAt(15);
Try it Yourself 
Browser Support
codePointAt()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
codePointAt()
is not supported in Internet Explorer.
JavaScript String constructor
Example
Get the constructor of a string:
let message = "Hello World!";
let text = message.constructor;
Try it Yourself 
Description
The
constructor
property returns the function that created the String prototype.
For JavaScript strings the
constructor
returns:
function String() { [native code] }
Syntax
string
.constructor
Return Value
function String() { [native code] }
Browser Support
constructor
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window localStorage
Example
Set and retrieve localStorage name/value pair:
localStorage.setItem("lastname", "Smith");
localStorage.getItem("lastname");
Try it Yourself 
More examples below.
Description
The
localStorage
object allows you to save key/value pairs in the  browser.
Syntax
window.localStorage
or just:
localStorage
Save Data to Local Storage
localStorage.setItem(
key
,
value
);
Read Data from Local Storage
let lastname = localStorage.getItem(
key
);
Remove Data from Local Storage
localStorage.removeItem(
key
);
Remove All (Clear Local Storage)
localStorage.clear();
Parameters
Parameter
Description
key
Required.
The name of a key.
value
Required.
The value of the key.
Return Value
Type
Description
An object
A localStorage object.
More Examples
Count the number of times a user has clicked a button:
if (localStorage.clickcount) {
localStorage.clickcount = Number(localStorage.clickcount) 
  + 1;
} else {
localStorage.clickcount = 1;
}
Try it Yourself 
Browser Support
window.localStorage
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window Location
The Window Location Object
The
location object
contains information about the current URL.
The
location object
is a property of the
window object
.
The
location object
is accessed with:
window.location
or just
location
Examples
let origin = window.location.origin;
Try it Yourself 
let origin = location.origin;
Try it Yourself 
Location Object Properties
Property
Description
hash
Sets or returns the anchor part (#) of a URL
host
Sets or returns the hostname and port number of a URL
hostname
Sets or returns the hostname of a URL
href
Sets or returns the entire URL
origin
Returns the protocol, hostname and port number of a URL
pathname
Sets or returns the path name of a URL
port
Sets or returns the port number of a URL
protocol
Sets or returns the protocol of a URL
search
Sets or returns the querystring part of a URL
Location Object Methods
Method
Description
assign()
Loads a new document
reload()
Reloads the current document
replace()
Replaces the current document with a new one
Window name
Examples
Get window name:
let name = window.name;
Try it Yourself 
Set window name:
window.name = "myWindowName";
Try it Yourself 
More examples below.
Description
The
name
property sets or returns the name of the window.
Syntax
Return the name property:
window.name
Set the name property:
window.name =
winName
Property Value
Type
Description
winName
The name of the window.
Return Value
Type
Description
A string
The name of the window.
Or "view" (If the window has no name).
More Examples
Open a frame with a special name:
const otherWindow = window.open();
otherWindow.name = "Butterfly";
Try it Yourself 
Browser Support
window.name
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Console log()
Example
Write to the console:
console.log("Hello world!");
Try it Yourself 
More examples below.
Description
The
log()
method writes (logs) a message to the console.
The
log()
method is useful for testing purposes.
Syntax
console.log(
message
)
Parameters
Parameter
Description
message
Required.
The message to write to the console.
More Examples
Write an object to the console:
const myObj = {firstname:"John", lastname:"Doe"};
console.log(myObj);
Try it Yourself 
Write an array to the console:
const myArr = ["Orange", "Banana", "Mango", "Kiwi"];
console.log(myArr);
Try it Yourself 
Browser Support
console.log()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
8-11
Yes
Yes
Yes
Yes
Console warn()
Example
Write a warning to the console:
console.warn("This is a warning!");
Try it Yourself 
More examples below.
Description
The
warn()
method writes a warning to the console.
Syntax
console.warn(
message
)
Parameters
Parameter
Description
message
Required.
The message (warning) to write to the console.
More Examples
Example
Use an object as the warning message:
const myObj = {firstname:"John", lastname:"Doe"};
console.warn(myObj);
Try it Yourself 
Example
Use an array as the warning message:
const myArr = ["Orange", "Banana", "Mango", "Kiwi"];
console.warn(myArr);
Try it Yourself 
Browser Support
console.warn()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
8-11
Yes
Yes
Yes
Yes
JavaScript String.fromCharCode()
Examples
How to convert Unicode values to characters:
let char = String.fromCharCode(65);
Try it Yourself 
let text = String.fromCharCode(72, 69, 76, 76, 79);
Try it Yourself 
Description
The
String.fromCharCode()
method converts Unicode values to characters.
The
String.fromCharCode()
is a static method of the String object.
The syntax is always
String.fromCharCode()
.
You cannot use
myString.fromCharCode()
.
Syntax
String.fromCharCode(
n1
,
n2
, ...,
nX
)
Parameters
Parameters
Description
n1
,
n2
,
nX
Required.
One or more Unicode values to be converted.
Return Value
Type
Description
A string
A string representing the unicode character(s).
Browser Support
String.fromCharCode()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String padStart()
Examples
Pad a string with "0" until it reaches the length 4:
let text = "5";
let padded = text.padStart(4,"0");
Try it Yourself 
Pad a string with "x" until it reaches the length 4:
let text = "5";
let padded = text.padStart(4,"x");
Try it Yourself 
Description
The
padStart()
method pads a string from the start.
The
padStart()
method pads a string with another string (multiple times) until it reaches a given length.
Example
let numb = 5;
let text = numb.toString();
let padded = text.padStart(4,"0");
Try it Yourself 
Syntax
string
.padStart(
length, string
)
Parameters
Parameter
Description
length
Required.
The length of the resulting string.
string
Optional.
The string to pad with.
Default is space.
Return Value
Type
Description
A string
A String of the specified length, with the padding applied from the start.
Browser Support
padStart()
is an
ECMAScript 2017
feature.
ES2017 is supported in all modern browsers since September 2017:
Chrome 58
Edge 15
Firefox 52
Safari 11
Opera 45
Apr 2017
Apr 2017
Mar 2017
Sep 2017
May 2017
padStart()
is not supported in Internet Explorer.
JavaScript String prototype
Example
Use the prototype property to add a new property to all objects of a given 
type:
function employee(name, jobtitle, born)
{
this.name = name;
this.jobtitle = jobtitle;
this.born = born;
}
employee.prototype.salary = 2000;
const fred = new employee("Fred Flintstone", "Caveman", 1970);
Try it Yourself 
Description
The
prototype
is a property available with all JavaScript objects.
The
prototype
property allows you to add new properties and methods to strings.
Syntax
object
.prototype.
name
=
value
Warning
You are not advised to change the prototype of an object that you do not control.
You should not change the prototype of built in JavaScript datatypes like:
Numbers
Strings
Arrays
Dates
Booleans
Function
Objects
Only change the prototype of your own objects.
The prototype Property
The JavaScript
prototype
property allows you to add new properties to objects:
Example
function Person(first, last, age, eyecolor) {
this.firstName = first;
this.lastName = last;
this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
Try it Yourself 
Browser Support
prototype
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window
print()
Method
Example
Print the current page:
window.print();
Try it Yourself 
Description
The print() method prints the contents of the current window.
The print() method opens the Print Dialog Box, which lets the user to select preferred printing options.
Browser Support
Method
print()
Yes
Yes
Yes
Yes
Yes
Syntax
window.print()
Parameters
None
Technical Details
Return Value:
No return value
Window screenLeft
Example
Return the x and y coordinates of the window:
let x = window.screenLeft;
let y = window.screenTop;
Try it Yourself 
Description
The
screenLeft
property returns the x (horizontal) position of a window, relative to the screen.
Syntax
window.screenLeft
Return Value
Type
Description
A number
The x (horizontal) position of the window relative to the screen, in pixels.
Browser Support
window.screenLeft
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
window.screenLeft
was not supported in Firefox before version 64 (Nov 2018).
Window scrollY
Example 1
Scroll the content by 100 pixels, and alert the scrollX and scrollY:
window.scrollBy(100, 100);
alert(window.scrollX + window.scrollY);
Try it Yourself 
More examples below.
Description
The
scrollY
property returns the pixels a 
document has scrolled from the upper left corner of the window.
The
scrollY
property is read-only.
Syntax
window.scrollY
or just:
scrollY
Return Value
Type
Description
A number
The number of pixels the document has scrolled from the upper left corner of the window.
More Examples
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position. Remove the sticky class when you leave the scroll position.
function myFunction() {
if (window.scrollY >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
window.scrollY
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Windows history.length
Example
Get the number of URLs in the history list:
let length = history.length;
Try it Yourself 
Description
The length property returns the number of URLs in the history list of the 
current browser window.
The property returns at least 1, because the list includes the current page.
This property is useful to find out how many pages the 
user has visited in the current browsing session.
Syntax
history.length
Parameters
NONE
Return Value
Type
Description
A number
The number of entries in the history list.
Browser Support
history.length()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Location
The Window Location Object
The
location object
contains information about the current URL.
The
location object
is a property of the
window object
.
The
location object
is accessed with:
window.location
or just
location
Examples
let origin = window.location.origin;
Try it Yourself 
let origin = location.origin;
Try it Yourself 
Location Object Properties
Property
Description
hash
Sets or returns the anchor part (#) of a URL
host
Sets or returns the hostname and port number of a URL
hostname
Sets or returns the hostname of a URL
href
Sets or returns the entire URL
origin
Returns the protocol, hostname and port number of a URL
pathname
Sets or returns the path name of a URL
port
Sets or returns the port number of a URL
protocol
Sets or returns the protocol of a URL
search
Sets or returns the querystring part of a URL
Location Object Methods
Method
Description
assign()
Loads a new document
reload()
Reloads the current document
replace()
Replaces the current document with a new one
Window location.hash
Examples
Get the anchor part of the URL:
<a href="/js/js_strings.asp#part2">JavaScript Strings</a>
Try it Yourself 
Set the anchor part:
location.hash = "part5";
Try it Yourself 
Description
The
location.hash
property sets or returns the anchor part of a URL, including the hash 
sign (#).
Syntax
Return the hash property:
location.hash
Set the hash property:
location.hash =
anchorname
Parameters
Parameter
Description
anchorname
The anchor part of a URL.
Return Value
Type
Description
A string
The anchor part of the URL, including the hash sign (#).
Browser Support
location.hash
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.host
Example
Get the host and port of the current URL:
let host = location.host;
Try it Yourself 
Description
The
location.host
property
returns the host (IP adress or domain) and port of a URL.
The
location.host
property
can also be set, to navigate to the same URL with a new host and port.
Syntax
Return the host property:
location.host
Set the host property:
location.host =
host:port
Property Value
Value
Description
host:port
The host and port number of the URL.
Return Value
Type
Description
A string
The host (IP address or domain) and port number of a URL.
Browser Support
location.host
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.hostname
Example
Return the hostname of the current URL:
let hostname = location.hostname;
Try it Yourself 
Description
The
location.hostname
property
returns the host (IP adress or domain) of a URL.
The
location.hostname
property
can also be set, to navigate to the same URL with a new hostname.
Syntax
Return the hostname property:
location.hostname
Set the hostname property:
location.hostname =
hostname
Property Value
Value
Description
hostname
The hostname of the URL.
Return Value
Type
Description
A string
The host (IP address or domain) of a URL.
Browser Support
location.hostname
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.origin
Example
Get the protocol, hostname and port number of the URL:
let origin = location.origin;
Try it Yourself 
Description
The
origin
property returns the protocol, hostname and port number of a URL.
The
origin
property is read-only.
Syntax
location.origin
Return Value
Type
Description
A string
The protocol (including ://), the domain name (or IP address) and port 
number (including the colon sign (:) of the URL.
For URL's using the "file:" protocol, the 
return value differs between browsers.
Browser Support
location.origin
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.port
Example
Get the port number of the current URL:
let port = location.port;
Try it Yourself 
Description
The
port
property sets or returns the port number of a URL.
Syntax
Return the port property:
location.port
Set the port property:
location.port =
port
Property Value
Parameter
Description
port
The port number of the URL
Return Value
Type
Description
A string
The port number of a URL.
If the port number 
is not specified or if it is a default port (like 80 or 443),  most browsers will return an empty string.
Browser Support
location.port
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.protocol
Example
Return the protocol of the current URL:
let protocol = location.protocol;
Try it Yourself 
Description
The protocol property sets or returns the protocol of the current URL, 
including the colon (:).
The protocol is a standard that specifies how data are transmitted between 
computers.
Syntax
Return the protocol property:
location.protocol
Set the protocol property:
location.protocol =
protocol
Property Value
Parameter
Description
protocol
The protocol of the URL. Examples:
file:
ftp:
http:
https:
mailto:
Return Value
Type
Description
A string
The protocol of the current URL, including the colon (:)
Browser Support
location.protocol
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.replace()
Example
Replace the current document:
location.replace("https://www.w3schools.com");
Try it Yourself 
Description
The
replace()
method replaces the current document with a new one.
Syntax
location.replace(
newURL
)
Parameters
Parameter
Description
newURL
Required.
The URL of a page to navigate to.
Return Value
NONE
Browser Support
location.replace()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Navigator
The Window Navigator Object
The
navigator object
contains information about the browser.
The
navigator object
is a property of the
window object
.
The
navigator object
is accessed with:
window.navigator
or just
navigator
:
Examples
let url = window.navigator.language;
Try it Yourself 
let url = navigator.language;
Try it Yourself 
Navigator Object Properties
Property
Description
appCodeName
Returns browser code name
appName
Returns browser name
appVersion
Returns browser version
cookieEnabled
Returns true if browser cookies are enabled
geolocation
Returns a geolocation object for the user's location
language
Returns browser language
onLine
Returns true if the browser is online
platform
Returns browser platform
product
Returns  browser engine name
userAgent
Returns browser user-agent header
Navigator Object Methods
Method
Description
javaEnabled()
Returns true if the browser has Java enabled
taintEnabled()
Removed in JavaScript version 1.2 (1999).
JavaScript Math.asin()
Examples
let x = Math.asin(-1);
Try it Yourself 
let x = Math.asin(0);
Try it Yourself 
let x = Math.asin(1);
Try it Yourself 
Description
The
Math.asin()
method returns the arcsine (in radians) of a number.
The
Math.asin()
method returns a value between -PI/2 and PI/2.
The
Math.asin()
method expects a parameter in the range -1 to 1.
Math.asin(-1)
returns -PI/2.
Math.asin(0)
returns 0.
Math.asin(1)
returns PI/2.
Syntax
Math.asin(
x
)
Parameters
Parameter
Description
x
Required.
A number.
Return Value
Type
Description
Number
-PI/2 to PI/2.
NaN
if the parameter is not numeric or outside the range of -1 to 1.
Browser Support
Math.asin()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String toLocaleUpperCase()
Example
Convert to uppercase:
let text = "Hello World!";
let result = text.toLocaleUpperCase();
Try it Yourself 
Description
The
toLocaleUpperCase()
method converts a string to uppercase letters, 
using current locale.
The locale is based on the language settings of the browser.
The
toLocaleUpperCase()
method does not change the original string.
The
toLocaleUpperCase()
returns the same result as
toUpperCase()
, except for locales
that conflict with the regular Unicode case mappings (such as Turkish).
Syntax
string
.toLocaleUpperCase()
Parameters
NONE
Return Value
Type
Description
A string.
A new string converted to uppercase according to current locale.
Browser Support
toLocalUpperCase()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String startsWith()
Examples
Start at position 0 (true):
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello");
Try it Yourself 
Start at position 1 (false):
let text = "Hello world, welcome to the universe.";
text.startsWith("Hello", 1);
Try it Yourself 
Description
The
startsWith()
method returns
true
if a string starts with a specified string.
Otherwise it returns
false
.
The
startsWith()
method is case sensitive.
Syntax
string
.startsWith(
searchValue
,
start
)
Parameters
Parameter
Description
searchValue
Required.
The string to search for.
start
Optional.
Start position. Default is 0.
Return Value
Type
Description
A boolean
Returns
true
if the string starts with the value.
Otherwise it returns
false
.
Browser Support
startsWith()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
startsWith()
is not supported in Internet Explorer.
JavaScript String substring()
Examples
Extract a substring from text:
let text = "Hello world!";
let result = text.substring(1, 4);
Try it Yourself 
Start from position 2:
let result = text.substring(2);
Try it Yourself 
More examples below.
Description
The
substring()
method extracts characters, between two indices (positions), from a string,
and returns the substring.
The
substring()
method extracts characters from start to end (exclusive).
The
substring()
method does not change the original string.
If start is greater than end, arguments are swapped: (4, 1) = (1, 4).
Start or end values less than 0, are treated as 0.
Syntax
string
.substring(
start, end
)
Parameters
Parameter
Description
start
Required.
Start position.
First character is at index 0.
end
Optional.
End position (up to, but not including).
If omitted: the rest of the string.
Return Value
Type
Description
A string
A string containing the extracted characters.
More Examples
If start is greater than end, parameters are swapped:
let result = text.substring(4, 1);
Try it Yourself 
If "start" is less than 0, it will start from index 0:
let result = text.substring(-3);
Try it Yourself 
Only the first:
let result = text.substring(0, 1);
Try it Yourself 
Only the last:
let result = text.substring(text.length - 1);
Try it Yourself 
Browser Support
substring()
is an ECMAScript1 (ES1) feature.
ES1 (JavaScript 1997) is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
JavaScript String trimEnd()
Example
let text1 = "Hello World!";
let text2 = text1.trimEnd();
Try it Yourself 
Description
The
trimEnd()
method removes whitespace from the end of a string.
The
trimEnd()
method does not change the original string.
The
trimEnd()
method works like
trim()
, but removes whitespace only from the end of a string.
Syntax
string
.trimEnd()
Parameters
NONE
Return Value
Type
Description
A string
A string with removed whitespace from the end of the string.
JavaScript String
trimEnd()
is supported in all browsers since January 2020:
Chrome 66
Edge 79
Firefox 61
Safari 12
Opera 50
Apr 2018
Jan 2020
Jun 2018
Sep 2018
May 2018
Console count()
Examples
Call console.count() 5 times:
for (let i = 0; i < 5; i++) {
console.count();
}
Try it Yourself 
Call console.count() 5 times, with a label:
for (let i = 0; i < 5; i++) {
console.count("myLabel");
}
Try it Yourself 
More examples below.
Description
The
count()
method counts the number of times console.count() is called.
The
count()
method this number to the console.
Syntax
console.count(
label
)
Parameters
Parameter
Description
label
Optional.
Default label is "Default".
More Examples
Call console.count() two times:
console.count();
console.count();
Try it Yourself 
Call console.count two times, with a label:
console.count("myLabel");
console.count("myLabel");
Try it Yourself 
To remove the label, use "" as a parameter:
console.count("");
console.count("");
Try it Yourself 
Browser Support
console.count()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Console assert()
Examples
Write a message to the console:
console.assert(x + y == 11, "Expression returned false");
Try it Yourself 
Write an object to the console:
const myObj = {firstname:"John", lastname:"Doe"};
console.assert(x + y == 11, myObj);
Try it Yourself 
More examples below.
Description
The
assert()
method writes a message to the console
if an expression evaluates to
false
.
Syntax
console.assert(
expression
,
message
)
Parameters
Parameter
Description
expression
Required.
Any expression.
If the expression evaluates to
false
, a message 
is written in the console.
message
Required.
The message to write in the console.
More Examples
Check for an element:
console.assert(document.getElementById("demo"), "You have no element with ID 'demo'");
Try it Yourself 
Write an array to the console:
const myArr = ["Orange", "Banana", "Mango", "Kiwi" ];
console.assert(x + y == 11, myArr);
Try it Yourself 
Browser Support
console.assert()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Console Object
The Console Object
The
console object
provides access to the browser's debugging console.
The
console object
is a property of the
window object
.
The
console object
is accessed with:
window.console
or just
console
Examples
window.console.error("You made a mistake");
Try it Yourself 
console.error("You made a mistake");
Try it Yourself 
Console Object Methods
Method
Description
assert()
Writes an error message to the console if a assertion is false
clear()
Clears the console
count()
Logs the number of times that this particular call to count() has been 
    called
error()
Outputs an error message to the console
group()
Creates a new inline group in the console. This indents following 
    console messages by an additional level, until console.groupEnd() is called
groupCollapsed()
Creates a new inline group in the console. However, the new group is 
    created collapsed. The user will need to use the disclosure button to expand 
    it
groupEnd()
Exits the current inline group in the console
info()
Outputs an informational message to the console
log()
Outputs a message to the console
table()
Displays tabular data as a table
time()
Starts a timer (can track how long an operation takes)
timeEnd()
Stops a timer that was previously started by console.time()
trace()
Outputs a stack trace to the console
warn()
Outputs a warning message to the console
Console error()
Example
Write an error to the console:
console.error("You made a mistake");
Try it Yourself 
More examples below.
Description
The
error()
method writes an error message to the console.
The console is useful for testing purposes.
Syntax
console.error(
message
)
Parameters
Parameter
Description
message
Required.
The error message to write to the console.
More Examples
Use an object as the error message:
const myObj = {firstname:"John", lastname:"Doe"};
console.error(myObj);
Try it Yourself 
Use an array as the error message:
const myArr = ["Orange", "Banana", "Mango", "Kiwi"];
console.error(myArr);
Try it Yourself 
Browser Support
console.error()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
8-11
Yes
Yes
Yes
Yes
Console group()
Example
Create a group of messages in the console:
console.log("Hello world!");
console.group();
console.log("Hello again, 
this time inside a group!");
Try it Yourself 
More examples below.
Description
The
group()
method starts a message group.
All new messages will be written inside this group.
Syntax
console.group(
label
)
Parameters
Parameter
Description
label
Optional.
A label for the group
More Examples
End a group with console.groupEnd():
console.log("Hello world!");
console.group();
console.log("Hello again, 
  this time inside a group!");
console.groupEnd();
console.log("and we 
  are back.");
Try it Yourself 
Specify a label for the group:
console.log("Hello world!");
console.group("myLabel");
console.log("Hello again, 
  this time inside a group, with a label!");
Try it Yourself 
Browser Support
console.group()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console groupEnd()
Example
End a message group with console.groupEnd():
console.log("Hello world!");
console.group();
console.log("Hello again, 
  this time inside a group!");
console.groupEnd();
console.log("and we 
  are back.");
Try it Yourself 
Description
The
groupEnd()
ends a message group.
Syntax
console.groupEnd()
Browser Support
console.groupEnd()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console info()
Example
Write a message to the console:
console.info("Hello world!");
Try it Yourself 
More examples below.
Description
The
info()
method writes a message to the console.
Syntax
console.info(
message
)
Parameters
Parameter
Description
message
Required.
The message to write to the console.
More Examples
Using an object as the message:
const myObj = {firstname:"John", lastname:"Doe"};
console.info(myObj);
Try it Yourself 
Using an array as the message:
const myArr = ["Orange", "Banana", "Mango", "Kiwi"];
console.info(myObj);
Try it Yourself 
Browser Support
console.info()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
8-11
Yes
Yes
Yes
Yes
Console time()
Example
The time it takes to run a for-loop 100.000 times:
console.time();
for (let i = 0; i < 100000; i++) {
// some code
}
console.timeEnd();
Try it Yourself 
More examples below.
Description
The
time()
method starts a timer in the console view.
The
time()
method allows you to time code for testing purposes.
Syntax
console.time(
label
)
Parameters
Parameter
Description
label
Optional.
A label to give the timer a name.
More Examples
Using the
label
parameter:
console.time("test1");
for (let i = 0; i < 100000; i++) {
// some code
}
console.timeEnd("test1");
Try it Yourself 
Which is fastest, the for loop or the while loop?
console.time("for loop");
for (let i = 0; i < 1000000; i++) {
// some code
}
console.timeEnd("for loop");
let i = 0;
console.time("while loop");
while (i < 1000000) {
i++
}
console.timeEnd("while loop");
Try it Yourself 
Browser Support
console.time()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console timeEnd()
Example
How long does it take to perform a for-loop 100.000 times:
console.time();
for (let i = 0; i < 100000; i++) {
// some code
}
console.timeEnd();
Try it Yourself 
More examples below.
Description
The
timeEnd()
method ends a timer, and writes the result to the console.
The
timeEnd()
method allows you to time code operations for testing purposes.
Syntax
console.timeEnd(
label
)
Parameters
Parameter
Description
label
Optional.
The name of the timer.
More Examples
Using the
label
parameter:
console.time("test1");
for (let i = 0; i < 100000; i++) {
// some code
}
console.timeEnd("test1");
Try it Yourself 
Which is fastest, the for loop or the while loop?
console.time("for loop");
for (let i = 0; i < 100000; i++) {
// some code
}
console.timeEnd("for loop");
let i = 0;
console.time("while loop");
while (i < 1000000) {
i++
}
console.timeEnd("while loop");
Try it Yourself 
Browser Support
console.timeEnd()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console trace()
Example
Show how the code ended up here:
function myFunction() {
myOtherFunction();
}
function 
  myOtherFunction() {
console.trace();
}
Try it Yourself 
Description
The
trace()
method displays a trace that show how the code ended up 
at a certain point.
Syntax
console.trace(
label
)
Parameters
Parameter
Description
label
Optional.
A label to give the timer a name.
Browser Support
console.trace()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
JavaScript Object.groupBy()
Example
// Create an Array
const fruits = [
{name:"apples", quantity:300},
{name:"bananas", quantity:500},
{name:"oranges", quantity:200},
{name:"kiwi", quantity:150}
];
// Callback function to Group Elements
function myCallback({ quantity }) {
return quantity > 200 ? "ok" : "low";
}
// Group by Quantity
const result = Object.groupBy(fruits, myCallback);
Try it Yourself 
Description
The
Object.groupBy()
method groups elements of an object
according to string values returned from a callback function.
The
Object.groupBy()
method does not change the original object.
Object.groupBy() vs Map.groupBy()
The difference between Object.groupBy() and Map.groupBy() is:
Object.groupBy() groups elements into a JavaScript object.
Map.groupBy() groups elements into a Map object.
Syntax
Object.groupBy(
iterable
,
callback
)
Parameters
Parameter
Description
iterable
Required.
An iterable array or map.
callback
Required.
A function to execute for each element.
The function should return a group name for the element.
Return Value
Type
Description
Iterator
An iterable object with the grouped elements.
Browser Support
Object.groupby()
is an ES2024 feature.
It is fully supported in all modern browsers since March 2024:
Chrome 117
Edge 117
Firefox 119
Safari 17.4
Opera 103
Sep 2023
Sep 2023
Oct 2023
Okt 2024
May 2023
Window navigator.appName
Example
Get browser name:
let browser = navigator.appName;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
appName
property returns the browser name.
The
appName
property is read-only.
Syntax
navigator.appName
Return Value
Type
Description
A string
The browser name.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.appName
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.appVersion
Example
Get browser version:
let version = navigator.appVersion;
Try it Yourself 
More examples below.
Description
The
appVersion
property returns the browser version.
The
appVersion
property is read-only.
Syntax
navigator.appVersion
Return Value
Type
Description
A string
The browser version.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.appVersion
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window screen.availHeight
Example
Get the available height of your screen:
let height = screen.availHeight;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
availHeight
property returns the height of the user's screen.
The
availHeight
property returns the height in pixels.
The
availHeight
property returns the height minus interface features like the Windows Taskbar.
Syntax
screen.availHeight
Return Value
Type
Description
A number
The height of the user's screen, in pixels.
More Examples
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.availHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Documents
The Document Object
When an HTML document is loaded into a web browser, it becomes a
document object
.
The
document object
is the root node of the HTML document.
The
document object
is a property of the
window object
.
The
document object
is accessed with:
window.document
or just
document
Examples
let url = window.document.URL;
Try it Yourself 
let url = document.URL;
Try it Yourself 
Document Object Properties and Methods
The following properties and methods can be used on HTML documents:
Property / Method
Description
activeElement
Returns the currently focused element in the document
addEventListener()
Attaches an event handler to the document
adoptNode()
Adopts a node from another document
anchors
Deprecated
applets
Deprecated
baseURI
Returns the absolute base URI of a document
body
Sets or returns the document's body (the <body> element)
charset
Deprecated
characterSet
Returns the character encoding for the document
close()
Closes the output stream previously opened with document.open()
cookie
Returns all name/value pairs of cookies in the document
createAttribute()
Creates an attribute node
createComment()
Creates a Comment node with the specified text
createDocumentFragment()
Creates an empty DocumentFragment node
createElement()
Creates an Element node
createEvent()
Creates a new event
createTextNode()
Creates a Text node
defaultView
Returns the window object associated with a document, or null if none is available.
designMode
Controls whether the entire document should be editable or not.
doctype
Returns the Document Type Declaration associated with the document
documentElement
Returns the Document Element of the document (the <html> element)
documentMode
Deprecated
documentURI
Sets or returns the location of the document
domain
Returns the domain name of the server that loaded the document
domConfig
Deprecated
embeds
Returns a collection of all <embed> elements the document
execCommand()
Deprecated
forms
Returns a collection of all <form> elements in the document
getElementById()
Returns the element that has the ID attribute with the specified value
getElementsByClassName()
Returns an
HTMLCollection
containing all elements with the specified class name
getElementsByName()
Returns an live
NodeList
containing all elements with the specified name
getElementsByTagName()
Returns an
HTMLCollection
containing all elements with the specified tag name
hasFocus()
Returns a Boolean value indicating whether the document has focus
head
Returns the <head> element of the document
images
Returns a collection of all <img> elements in the document
implementation
Returns the DOMImplementation object that handles this document
importNode()
Imports a node from another document
inputEncoding
Deprecated
lastModified
Returns the date and time the document was last modified
links
Returns a collection of all <a> and <area> elements in the document that have a href attribute
normalize()
Removes empty Text nodes, and joins adjacent nodes
normalizeDocument()
Deprecated
open()
Opens an HTML output stream to collect output from document.write()
querySelector()
Returns the first element that matches a specified CSS selector(s) in the document
querySelectorAll()
Returns a static
NodeList
containing all elements that matches a specified CSS selector(s) in the document
readyState
Returns the (loading) status of the document
referrer
Returns the URL of the document that loaded the current document
removeEventListener()
Removes an event handler from the document (that has been attached with the
addEventListener()
method)
renameNode()
Deprecated
scripts
Returns a collection of <script> elements in the document
strictErrorChecking
Deprecated
title
Sets or returns the title of the document
URL
Returns the full URL of the HTML document
write()
Writes HTML expressions or JavaScript code to a document
writeln()
Same as write(), but adds a newline character after each statement
HTML DOM Document addEventListener()
Examples
Add a click event to the document:
document.addEventListener("click", myFunction);
function myFunction() {
document.getElementById("demo").innerHTML = "Hello World";
}
Try it Yourself 
Simpler syntax:
document.addEventListener("click", function(){
document.getElementById("demo").innerHTML = "Hello World";
});
Try it Yourself 
More examples below.
Description
The
addEventListener()
method attaches an event handler to a document.
Syntax
document.addEventListener(
event
,
function
,
Capture
)
Parameters
Parameter
Description
event
Required.
The event name.
Do not use the "on" prefix.
Use "click" instead of "onclick".
All HTML DOM events are listed in the:
HTML DOM Event Object Reference
.
function
Required.
The function to run when the event occurs.
When 
the event occurs, an event object is passed to the function as 
the first parameter. The type of the event object depends on the specified event. 
For example, the "click" event belongs to the MouseEvent object.
capture
Optional (default = false).
true
- The handler is executed in the capturing phase.
false
- The handler is executed in the bubbling phase.
Return Value
NONE
More Examples
You can add many event listeners to the document:
document.addEventListener("click", myFunction1);
document.addEventListener("click", myFunction2);
Try it Yourself 
You can add different types of events:
document.addEventListener("mouseover", myFunction);
document.addEventListener("click", someOtherFunction);
document.addEventListener("mouseout", someOtherFunction);
Try it Yourself 
When passing parameters, use an "anonymous function" to call a function with the parameters:
document.addEventListener("click", function() {
myFunction(p1, p2);
});
Try it Yourself 
Change the background color of the document:
document.addEventListener("click", function(){
document.body.style.backgroundColor = "red";
});
Try it Yourself 
Using the removeEventListener() method:
// Add an event listener
document.addEventListener("mousemove", myFunction);
// Remove event listener
document.removeEventListener("mousemove", myFunction);
Try it Yourself 
Browser Support
document.addEventListener
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document activeElement
Example
Get the currently focused element:
const element = document.activeElement.tagName;
Try it Yourself 
Description
The
activeElement
property returns the HTML element that have focus.
The
activeElement
property is read-only.
Syntax
document.activeElement
Return Value
Type
Description
Element
The HTML element that has focus
Browser Support
document.activeElement
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window focus()
Examples
Open a new window and set focus to it:
const myWindow = window.open("", "", "width=200, height=100");
myWindow.focus();
Try it Yourself 
Open a new window and blur it:
const myWindow = window.open("", "", "width=200, height=100");
myWindow.blur();
Try it Yourself 
Description
The
focus()
method sets focus to a window.
The
blur()
method removes focus from a window.
Syntax
window.focus()
Parameters
None
Return Value
NONE
Browser Support
focus()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window frameElement
Example
Is the current window in a frame?
if (window.frameElement) {
let answer = "YES";
}
Try it Yourself 
More example below.
Description
The
frameElement
property returns the frame where the window runs.
The
frameElement
property returns
null
if the 
window does not run in a frame.
The
frameElement
property is read only.
Syntax
window.frameElement
or:
frameElement
Return Value
Type
Description
An object
The host of the window (the parent document).
Or
null
if no host exists.
More Examples
Example
If the window is in a frame, change the URL to "w3schools.com":
const frame = window.frameElement;
if (frame) {
frame.src = "https://www.w3schools.com/";
}
Try it Yourself 
Browser Support
window.frameElement
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.reload()
Example
Reload the current document:
location.reload();
Try it Yourself 
Description
The
reload()
method reloads the current document.
The
reload()
method does the same as the reload button in your browser.
Syntax
location.reload()
Parameters
NONE
Return Value
NONE
Browser Support
location.reload()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document characterSet
Example
Get the character encoding for a document:
encoding = document.characterSet;
Try it Yourself 
Description
The
characterSet
property returns the character encoding for a document.
Syntax
document.characterSet
Return Value
Type
Description
String
The document's character encoding.
Browser Support
document.characterSet
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document baseURI
Example
Get the baseURI of the document:
let base = document.baseURI;
Try it Yourself 
Description
The
baseURI
property returns the base URI of the document.
The
baseURI
property is read-only.
Syntax
document
.baseURI
Return Value
Type
Description
String
The Base URI of the document.
Browser Support
document.baseURI
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
document.baseURI
is not supported in Internet Explorer 11 (or earlier).
HTML DOM Document close()
Example
Open a document, write some text to it, and close it:
document.open();
document.write("<h1>Hello World</h1>");
document.write("<p>Open owerwrites original content.</p>");
document.close();
Try it Yourself 
Open a new window, then open a document, write some text to it, and close it:
const myWindow = window.open();
myWindow.document.open();
myWindow.document.write("<h1>Hello World!</h1>");
myWindow.document.close();
Try it Yourself 
Description
The
close()
method closes a window
previously opened with the
open()
method.
Warning
The document.open() method clears the document (overwrites all previous  content).
Syntax
document.close()
Parameters
NONE
Return Value
NONE
Browser Support
document.close()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document createDocumentFragment()
Examples
Add elements to an empty list:
const fruits = ["Banana", "Orange", "Mango"];
// Create a document fragment:
const dFrag = document.createDocumentFragment();
// Add li elements to the fragment:
for (let x in fruits) {
const li = document.createElement('li');
li.textContent = fruits[x];
dFrag.appendChild(li);
}
// Add fragment to a list:
document.getElementById('myList').appendChild(dFrag);
Try it Yourself 
Add elements to an existing list:
const fruits = ["Banana", "Orange", "Mango"];
// Create a document fragment:
const dFrag = document.createDocumentFragment();
// Add li elements to the fragment:
for (let x in fruits) {
const li = document.createElement('li');
li.textContent = fruits[x];
dFrag.appendChild(li);
}
// Add fragment to a list:
document.getElementById('myList').appendChild(dFrag);
Try it Yourself 
Description
The
createDocumentFragment()
method creates an offscreen node.
The offscreen node can be used to build a new document fragment that can be insert into any document.
The
createDocumentFragment()
method can also be used to extract parts of a document,
change, add, or delete some of the content, and insert it back to the document.
Warning!
Document nodes appended to the document fragment, are removed from the original document.
Syntax
document.createDocumentFragment()
Parameters
NONE
Return Value
Type
Description
Node
The created DocumentFragment node.
Browser Support
document.createComment()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document defaultView
Example
Get the document's window object:
const view = document.defaultView;
Try it Yourself 
Get the size of the window:
const view = document.defaultView;
let width = view.innerWidth;
let height = view.innerHeight;
Try it Yourself 
Description
The
defaultView
property returns the document's window object.
Syntax
document.defaultView
Return Value
Type
Description
Object
The document's
Window
Object
Browser Support
document.defaultView
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window matchMedia()
Example 1
Is the screen/viewport greater than 700 pixels wide:
if (window.matchMedia("(max-width: 700px)").matches) {
// Viewport is less or equal to 700 pixels wide
} else {
// Viewport is greater than 700 pixels wide
}
Try it Yourself 
Description
The
matchMedia()
method returns a
MediaQueryList
with the results from the query.
Media Queries
The media queries of the
matchMedia()
method can be any of the media features of the
CSS @media rule
, like min-height, min-width, orientation, etc.
Examples
matchMedia("(max-height: 480px)").matches);
matchMedia("(max-width: 640px)").matches);
Syntax
window
.matchMedia(
mediaQuery
)
Parameters
Parameter
Description
mediaQuery
Required.
A string representing a media query.
Return Value
Type
Description
An object
A MediaQueryList object with the results of the media query.
Examples Explained
The first example on this page runs a media query and compares it to the
current
window state.
To run
responsive
media query
whenever
the window 
state changes, add an event listener to the MediaQueryList object (See "More Examples" below):
More Examples
If the viewport is less or equal to 500 pixels wide, set background color to yellow, otherwise to pink:
// Create a match Function
function myFunction(x) {
if 
  (x.matches) {
document.body.style.backgroundColor = 
  "yellow";
} else {
document.body.style.backgroundColor = "pink";
}
}
// 
  Create a MediaQueryList object
const mmObj = window.matchMedia("(max-width: 
  500px)")
// Call the match function at run time
myFunction(mmObj);
// Add the match function as a listener for state changes
mmObj.addEventListener("change", function() {
myFunction(mmObj);
});
Try it Yourself 
Browser Support
matchMedia()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Window outerHeight
Example
Get the browser window's height and width:
let height = window.outerHeight;
Try it Yourself 
let height = outerHeight;
Try it Yourself 
More examples below.
Description
The
outerHeight
property returns the outer height of the browser window, including all interface elements 
(like toolbars/scrollbars).
The
outerHeight
property is read only.
Syntax
window.outerHeight
or just:
outerHeight
Return Value
Type
Description
A number
The height of the browser's window, including all interface elements, in pixels.
More Examples
All height and width properties:
let text =
"<p>innerWidth: " + window.innerWidth + "</p>" +
"<p>innerHeight: " + window.innerHeight + "</p>" +
"<p>outerWidth: " + window.outerWidth + "</p>" +
"<p>outerHeight: " + window.outerHeight + "</p>";
Try it Yourself 
Browser Support
window.outerHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window Navigator
The Window Navigator Object
The
navigator object
contains information about the browser.
The
navigator object
is a property of the
window object
.
The
navigator object
is accessed with:
window.navigator
or just
navigator
:
Examples
let url = window.navigator.language;
Try it Yourself 
let url = navigator.language;
Try it Yourself 
Navigator Object Properties
Property
Description
appCodeName
Returns browser code name
appName
Returns browser name
appVersion
Returns browser version
cookieEnabled
Returns true if browser cookies are enabled
geolocation
Returns a geolocation object for the user's location
language
Returns browser language
onLine
Returns true if the browser is online
platform
Returns browser platform
product
Returns  browser engine name
userAgent
Returns browser user-agent header
Navigator Object Methods
Method
Description
javaEnabled()
Returns true if the browser has Java enabled
taintEnabled()
Removed in JavaScript version 1.2 (1999).
Window
opener
Property
Example
Open a window and write some text in the opener window:
const myWindow = window.open("", "", "width=300,height=300");
myWindow.opener.document.getElementById("demo").innerHTML = "HELLO!";
Try it Yourself 
Description
The
opener
property returns a reference to the window that created the window.
Syntax
window
.opener
Return Value
Type
Description
A window
The window that created the window.
Browser Support
window.opener
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window outerWidth
Example
Get the browser window's height and width:
let width = window.outerWidth;
Try it Yourself 
let width = outerWidth;
Try it Yourself 
More examples below.
Description
The
outerWidth
property returns the outer width of the browser window, including all interface elements 
(like toolbars/scrollbars).
The
outerWidth
property is read only.
Syntax
window.outerWidth
or just:
outerWidth
Return Value
Type
Description
A number
The width of the browser's window, including all interface elements, in pixels.
More Examples
All height and width properties:
let text =
"<p>innerWidth: " + window.innerWidth + "</p>" +
"<p>innerHeight: " + window.innerHeight + "</p>" +
"<p>outerWidth: " + window.outerWidth + "</p>" +
"<p>outerHeight: " + window.outerHeight + "</p>";
Try it Yourself 
Browser Support
window.outerWidth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window navigator.onLine
Example
Is the browser online?
let online = navigator.onLine;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
onLine
property returns
true
if the browser is online, otherwise
false
.
The
onLine
property is read-only.
Syntax
navigator.onLine
Return Value
Type
Description
A boolean
true
if the browser is in online,
otherwise
false
.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.onLine
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window Screen
The Window Screen Object
The screen object contains information about the visitor's screen.
Screen Object Properties
Property
Description
availHeight
Returns the height of the screen (excluding the Windows Taskbar)
availWidth
Returns the width of the screen (excluding the Windows Taskbar)
colorDepth
Returns the bit depth of the color palette for displaying images
height
Returns the total height of the screen
pixelDepth
Returns the color resolution (in bits per pixel) of the screen
width
Returns the total width of the screen
Window screen.colorDepth
Example
Get the bit depth of the color palette:
let depth = screen.colorDepth;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
colorDepth
property returns the screen's color depth.
The
colorDepth
property returns the depth in bits per pixel.
The
colorDepth
property is read-only.
Syntax
screen.colorDepth
Return Value
Type
Description
A number
The depth of the screen's color palette in bits per pixel:
1, 4, 8, 15, 16, 24, 32, or 48.
More Examples
Display an alternate background color for 8 bit screens (to avoid that 8 bit 
screens, which do not support the modern color, uses an ugly substitute color 
instead):
if (screen.colorDepth <= 8)
//simple blue background color for 8 bit screens
document.body.style.background = "#0000FF"
else
//fancy blue background color for modern screens
document.body.style.background = "#87CEFA"
Try it Yourself 
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.colorDepth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document adoptNode()
Example
Adopt the first <h1> element that appears in an iframe (another document):
const frame = document.getElementById("myFrame");
const h1 = frame.contentWindow.document.getElementsByTagName("H1")[0];
const node = document.adoptNode(h1);
Try it Yourself 
Description
The
adoptNode()
method adopts a node from another document.
Syntax
document.adoptNode(
node
)
Parameters
Parameter
Description
node
Required.
A node from another document.
Can be of any node type.
Return Value
Type
Description
Node
The adopted node.
Browser Support
document.adoptNode
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document getElementsByName()
Example
Get all elements with the name "fname":
let elements = document.getElementsByName("fname");
Try it Yourself 
Number of elements with name="animal":
let num = document.getElementsByName("animal").length;
Try it Yourself 
More examples below.
Description
The
getElementsByName()
method returns a collection of elements with a specified name.
The
getElementsByName()
method returns a live
NodeList
.
NodeList
A
NodeList
is an array-like collection (list) of nodes.
The nodes in the list can be accessed by index. The index starts at 0.
The length Poperty
returns the number of nodes in the list.
Syntax
document.getElementsByName(
name
)
Parameters
Parameter
Description
name
Required.
The value of the element's name attribute.
Return Value
Type
Description
Object
A NodeList Object
.
A collection of elements with the specified name.
The elements are sorted as they appear in the document.
More Examples
Check all <input> elements with type="checkbox" that have the name "animal":
const collection = document.getElementsByName("animal");
for (let i = 0; i < collection.length; i++) {
if (collection[i].type == "checkbox") {
collection[i].checked = true;
}
}
Try it Yourself 
Browser Support
document.getElementsByName()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document links
Example
Number of links in the document:
let numb = document.links.length;
Try it Yourself 
Get the URL of the first link in the document:
let url = document.links[0].href;
Try it Yourself 
Get the URL of the first link in the document:
let url = document.links.item(0).href;
Try it Yourself 
More examples below.
Description
The
links
property returns a collection of all links in the document.
The
links
property returns an
HTMLCollection
.
The
links
property is read only.
The links in the collection represents <a> and <area> elements with an href attribute.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.links
Properties
Property
Description
length
The number of elements in the collection.
Methods
Method
Description
[
index
]
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
item(
index
)
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
namedItem(
id
)
Returns the element with the specified id.
Returns
null
if the id does not exist.
Return Value
Type
Description
Object
An HTMLCollection Object
.
All <a> and <area> elements in the document.
The elements are sorted as they appear in the document.
More Examples
Get the URL of the element with id="myLink":
let url = document.links.namedItem("myLink").href;
Try it Yourself 
Add a red border to the first link in the document:
document.links[0].style.border = "5px solid red";
Try it Yourself 
Loop over all links and output the URL (href) of each:
const links = document.links;
let text = "";
for (let i = 0; i < links.length; i++) {
text += links[i].href + "<br>";
}
Try it Yourself 
Browser Support
document.links
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document inputEncoding
Example
Display the character encoding for this document:
let encoding = document.inputEncoding;
Try it Yourself 
Description
The inputEncoding property is deprecated. Do NOT use it.
The inputEncoding property may not work in future browsers.
Syntax
document.inputEncoding
Return Value
Type
Description
String
The document's character encoding.
HTML DOM Document importNode()
Example
Import the first <h1> element from an iframe (another document):
const frame = document.getElementsById("myFrame");
const h1 = frame.contentWindow.document.getElementsByTagName("H1")[0];
const node = document.importNode(h1, true);
Try it Yourself 
Description
The
importNode()
method imports a node from another document.
With the second parameter set to
true
, child nodes will also be imported.
Syntax
document.importNode(
node
,
deep
)
Parameters
Parameter
Description
node
Required.
A node from another document.
Can be type of node.
deep
Required.
false
: only the node itself is imported.
true
: child nodes (descendants) are also imported.
Return Value
Type
Description
Node
The imported node.
Browser Support
document.importNode()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window removeEventListener()
Example
Remove a "mousemove" event handler:
window.removeEventListener("mousemove", myFunction);
Try it Yourself 
Description
The
removeEventListener()
method removes an event handler from a window.
Syntax
window.removeEventListener(
event
,
function
,
capture
)
Parameters
Parameter
Description
event
Required.
The name of the event to remove.
Do not use the "on" prefix.
use "click" instead of "onclick".
All HTML DOM events are listed in the:
HTML DOM Event Object Reference
.
function
Required.
The function to remove.
capture
Optional (default = false).
true
- Remove the handler from capturing.
false
- Remove the handler from bubbling.
If the event handler was attached two times, one with capturing and one with bubbling, each must be removed separately.
Return Value
NONE
Browser Support
removeEventListener()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window resizeBy()
Example 1
Open a new window, and resize (increase) the width and height:
function openWin() {
myWindow = window.open("", "", "width=100, height=100");
}
function resizeWin() {
myWindow.resizeBy(250, 250);
}
Try it Yourself 
More  examples below.
Description
The
resizeBy()
method resizes a window by a specified amount.
Syntax
resizeBy(
width, height
)
Parameters
Parameter
Description
width
Required.
A positive or a negative number.
The number of pixels to resize the width by.
height
Required.
A positive or a negative number.
The number of pixels to resize the height by.
Return Value
NONE
More Examples
Open a new window, and decrease the width by 50px and increase the height by 
50px:
myWindow.resizeBy(-50, 50);
Try it Yourself 
Using resizeBy() with resizeTo():
function resizeWinTo() {
myWindow.resizeTo(800, 600);
myWindow.focus();
}
function resizeWinBy() {
myWindow.resizeBy(-100, -50);
}
Try it Yourself 
Browser Support
resizeBy()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window resizeTo()
Example 1
Open a new window, and resize it to 300 x 300:
function openWin() {
myWindow = window.open("", "", "width=200, height=100");
}
function resizeWin() {
myWindow.resizeTo(300, 300);
}
Try it Yourself 
More examples below.
Description
The
resizeTo()
method resizes a window to a new width and height.
Syntax
window
.resizeTo(
width, height
)
Parameters
Parameter
Description
width
Required.
The new window width, in pixels
height
Required.
The new window height, in pixels
Return Value
NONE
More Examples
Using resizeTo() with resizeBy():
function resizeWinTo() {
myWindow.resizeTo(800, 600);
}
function resizeWinBy() {
myWindow.resizeBy(-100, -50);
}
Try it Yourself 
Browser Support
resizeTo()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window pageYOffset
Example 1
Scroll the content by 100 pixels, and alert the pageXOffset and pageYOffset:
window.scrollBy(100, 100);
alert(window.pageXOffset + window.pageYOffset);
Try it Yourself 
More examples below.
Description
The
pageYOffset
property returns the pixels a 
document has scrolled from the upper left corner of the window.
The
pageYOffset
property is equal to the
scrollY
property.
The
pageYOffset
property is read-only.
Syntax
window.pageYOffset
or just:
pageYOffset
Return Value
Type
Description
A number
The number of pixels the document has scrolled from the upper left corner of the window.
More Examples
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position. Remove the sticky class when you leave the scroll position.
function myFunction() {
if (window.pageYOffset >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
pageYOffset
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window screenTop
Example
Return the x and y coordinates of the window:
let x = window.screenLeft;
let y = window.screenTop;
Try it Yourself 
Description
The
screenTop
property returns the y (vertical) position of the window relative to the screen.
Syntax
window.screenTop
Return Value
Type
Description
A number
The y (vertical) position of the window relative to the screen, in pixels.
Browser Support
window.screenTop
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
window.screenLeft
was not supported in Firefox before version 64 (Nov 2018).
Window screenX
Example
Open a new window with a specified left and top position, and return its 
coordinates:
const myWin = window.open("", "", "left=700,top=350,width=200,height=100");
let x = myWin.screenX;
let y = myWin.screenY;
Try it Yourself 
More examples below.
Description
The
screenX
property returns the x (horizontal) coordinate of a window,
relative to the screen.
Syntax
window.screenX
or just:
screenX
Parameters
NONE
Return Value
Parameter
Description
A number
The horizontal distance of the window relative to the screen, in pixels
More Examples
Open a new window and return its coordinates:
const myWin = window.open("", "", "width=200,height=100");
let x = myWin.screenX;
let y = myWin.screenY;
Try it Yourself 
Browser Support
window.screenX
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
Window screenY
Example 1
Open a new window with a specified left and top position, and return its 
coordinates:
const myWin = window.open("", "", "left=700,top=350,width=200,height=100");
let x = myWin.screenX;
let y = myWin.screenY;
Try it Yourself 
More examples below.
Description
The
screenY
property returns the y (vertical) coordinate of a window,
relative to the screen.
Syntax
window.screenY
or just:
screenY
Parameters
NONE
Return Value
Parameter
Description
A number
The vertical distance of the window relative to the screen, in pixels
More Examples
Open a new window and return its coordinates:
const myWin = window.open("", "", "width=200,height=100");
let x = myWin.screenX;
let y = myWin.screenY;
Try it Yourself 
Browser Support
window.screenY
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
Window
self
Property
Example
Is this window the topmost window:
if (window.top != window.self) {
text = "This window is NOT the topmost window!";
} else {
text = "This window is the topmost window!";
}
Try it Yourself 
Description
The
self
property returns the current window.
The
self
property is read-only.
Syntax
window.self
Return Value
Type
Description
An object
The Window object itself.
Browser Support
window.self
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window status
Example
Set the text in the status bar:
window.status = "Some text in the status bar!!";
Try it Yourself 
Description
The status property is deprecated.
It should be avoided to prevent RUN-TIME ERRORS in the future.
Syntax
window.status
Return Value
The text displayed in the status bar
Window stop()
Example
Stop the loading of a window:
window.stop();
Try it Yourself 
Description
The
stop()
method stops window loading.
The
stop()
method is the same as clicking stop in the browser.
Syntax
window.stop()
Parameters
NONE
Return Value
NONE
Browser Support
window.stop()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
window.stop()
is not supported in Internet Explorer 11 (or earlier).
Window setInterval()
Examples
Display "Hello" every second (1000 milliseconds):
setInterval(function () {element.innerHTML += "Hello"}, 1000);
Try it Yourself 
Call displayHello every second:
setInterval(displayHello, 1000);
Try it Yourself 
More examples below.
Description
The
setInterval()
method calls a function at specified intervals (in milliseconds).
The
setInterval()
method continues calling the function until
clearInterval()
is called, or the window is closed.
1 second = 1000 milliseconds.
Syntax
setInterval(
function, milliseconds, param1, param2, ...
)
Parameters
Parameter
Description
function
Required.
The function to execute
milliseconds
Required.
The execution interval.
If the value is less than 10, 10 is used
param1, param2, ...
Optional.
Additional parameters to pass to the
function
Not supported in IE9 and earlier.
Return Value
Type
Description
A number
The id of the timer.
Use this id with clearInterval() to cancel the timer.
More Examples
Example
Display the time like a digital watch:
setInterval(myTimer, 1000);
function myTimer()
 {
const date = new Date();
document.getElementById("demo").innerHTML = date.toLocaleTimeString();
}
Try it Yourself 
Example
Using clearInterval() to stop the digital watch:
const myInterval = setInterval(myTimer, 1000);
function myTimer() {
const date = new Date();
document.getElementById("demo").innerHTML = date.toLocaleTimeString();
}
function myStopFunction()
 {
clearInterval(myInterval);
}
Try it Yourself 
Example
Using setInterval() and clearInterval() to create a dynamic progress bar:
function move() {
const element = document.getElementById("myBar");
let width = 0;
let id = setInterval(frame, 10);
function frame() {
if (width == 100) {
clearInterval(id);
} else {
width++;
element.style.width = width + '%';
}
}
}
Try it Yourself 
Example
Toggle between two background colors once every 500 milliseconds:
const myInterval = setInterval(setColor, 500);
function setColor() {
let x = document.body;
x.style.backgroundColor = x.style.backgroundColor == "yellow" ? "pink" : "yellow";
}
function stopColor() {
clearInterval(myInterval);
}
Try it Yourself 
Example
Pass parameters to the function (does not work in IE9 and earlier):
setInterval(myFunc, 2000, "param1", "param2");
Try it Yourself 
However, if you use an anonymous function it works in all browsers:
setInterval(function() {myFunc("param1", "param2")}, 2000);
Try it Yourself 
Browser Support
setInterval()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document body
Examples
Get the HTML content of a document:
const myBody = document.body.innerHTML;
Try it Yourself 
Change the background color of a document:
document.body.style.backgroundColor = "yellow";
Try it Yourself 
Change the <body> of a document (overwrite all existing content):
document.body.innerHTML = "Some new HTML content";
Try it Yourself 
More examples below.
Description
The
body
property sets or returns a document's <body> element.
Warning
Setting the
body
property overwrites all elements in the document's <body>.
Syntax
Return the body property:
document.body
Set the body property:
document.body =
newContent
Property Values
Value
Description
newContent
The new content for the <body> element.
Return Value
Type
Description
Object
The body element of the document.
More Examples
Create a <p> element and append it to the document's body:
const para = document.createElement("p");
const node = document.createTextNode("This is a paragraph.");
para.appendChild(node);
document.body.appendChild(para);
Try it Yourself 
Browser Support
document.body
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document createTextNode()
Examples
Create a text node and append it to the document:
let textNode = document.createTextNode("Hello World");
document.body.appendChild(textNode);
Try it Yourself 
Create a <h1> element with a text node:
const h1 = document.createElement("h1");
const textNode = document.createTextNode("Hello World");
h1.appendChild(textNode);
Try it Yourself 
Create a <p> element with a text node:
const para = document.createElement("p");
const textNode = document.createTextNode("Hello World");
para.appendChild(textNode);
Try it Yourself 
Description
The
createTextNode()
method creates a text node.
Syntax
document.createTextNode(
text
)
Parameters
Parameter
Description
text
Required.
The text for the node.
Return Value
Type
Description
Node
The created text node.
Browser Support
document.createTextNode()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document open()
Example
Open this document, write some text, and close:
document.open();
document.write("<h1>Hello World</h1>");
document.close();
Try it Yourself 
Using document.open() in a new window:
const myWindow = window.open();
myWindow.document.open();
myWindow.document.write("<h1>Hello World!</h1>");
myWindow.document.close();
Try it Yourself 
More examples below.
Description
The
open()
method opens a document for writing.
Warning!
All existing document content will be cleared.
Syntax
document.open()
document.open(
Mimetype
, replace)
Parameters
Parameter
Description
Mimetype
Ignored by all modern browsers.
replace
Ignored by all modern browsers.
Return Value
NONE
More Examples
If document.write() is used on a closed document, document.open() is automatically called.
This will delete existing content.
document.write("<h1>Hello World!</h1>");
Try it Yourself 
Browser Support
document.Open()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document referrer
Example
Return the referrer of the document:
document.referrer;
Try it Yourself 
Description
The
referrer
property returns the URL of the document that loaded the current document.
The
referrer
property is read-only.
Syntax
document.referrer
Return Value
Type
Description
String
The URL of the document that loaded the current document.
If the document was not opened with a link, an empty string is returned.
Browser Support
document.referrer
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document removeEventListener()
Example
Remove a "mousemove" event handler:
document.removeEventListener("mousemove", myFunction);
Try it Yourself 
Description
The
removeEventListener()
method removes an event handler from a document.
Syntax
document.removeEventListener(
event
,
function
,
capture
)
Parameters
Parameter
Description
event
Required.
The name of the event to remove.
Do not use the "on" prefix.
use "click" instead of "onclick".
All HTML DOM events are listed in the:
HTML DOM Event Object Reference
.
function
Required.
The function to remove.
capture
Optional (default = false).
true
- Remove the handler from capturing.
false
- Remove the handler from bubbling.
If the event handler was attached two times, one with capturing and one with bubbling, each must be removed separately.
Return Value
NONE
Browser Support
document.removeEventListener()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Object.getOwnPropertyNames()
Example
// Create an Object
const person = {
firstName: "John",
lastName: "Doe",
age: 50,
eyeColor: "blue"
};
// Get Properties
let props = Object.getOwnPropertyNames(person);
Try it Yourself 
Description
The
Object.getOwnPropertyNames()
method returns an array with the properties of an object.
The
Object.getOwnPropertyNames()
method does not change the original object.
Syntax
Object.getOwnPropertyNames(
object
)
Parameters
Parameter
Description
object
Required.
An iterable object.
Return Value
Type
Description
Array
An array containing the properties of the object.
Browser Support
Object.getOwnPropertyNames()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
Console clear()
Example
Clear all messages in the console:
console.clear();
Try it Yourself 
Description
The
clear()
method clears the console.
The
clear()
method also write "Console was cleared" in the console.
Syntax
console.clear()
Browser Support
console.clear()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Console groupCollapsed()
Example
Create a collapsed group of messages in the console:
console.log("Hello world!");
console.groupCollapsed();
console.log("Hello again, 
  this time inside a collapsed group!");
Try it Yourself 
More examples below.
Description
The
groupCollapsed()
method starts a collapsed message group.
In the Console, click the expand button to open the new message group.
All new messages will now be written inside this group.
Syntax
console.groupCollapsed(
label
)
Parameters
Parameter
Description
label
Optional.
A label for the group.
More Examples
End a group with console.groupEnd():
console.log("Hello world!");
console.groupCollapsed();
console.log("Hello again, 
  this time inside a collapsed group!");
console.groupEnd();
console.log("and we 
  are back.");
Try it Yourself 
Specify a label for the collapsed group:
console.log("Hello world!");
console.groupCollapsed("myLabel");
console.log("Hello again, 
  this time inside a collapsed group, with a label!");
Try it Yourself 
Browser Support
console.groupCollapsed()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console table()
Example
Write an array as a table in the console:
console.table(["Audi", "Volvo", "Ford"]);
Try it Yourself 
Write an object as a table in the console:
console.table({firstname:"John", lastname:"Doe"});
Try it Yourself 
More examples below.
Description
The
table()
method writes a table to the console.
Syntax
console.table(
tabledata, tablecolumns
)
Parameters
Parameter
Description
tabledata
Required.
The data to fill the table with.
tablecolumns
Optional.
An array with the names of the table columns.
More Examples
Using an array of objects:
const car1 = {name:"Audi", model:"A4"}
const car2 = {name:"Volvo", model:"XC90"}
const car3 = {name:"Ford", model:"Fusion"}
console.table([car1, car2, car3]);
Try it Yourself 
Only include the "model" column in the table:
const car1 = {name:"Audi", model:"A4"}
const car2 = {name:"Volvo", model:"XC90"}
const car3 = {name:"Ford", model:"Fusion"}
console.table([car1, car2, car3],
["model"]
);
Try it Yourself 
Browser Support
console.table()
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
console.table()
is not supported in Internet Explorer 11 (or earlier).
Window history.forward()
Example
Create a forward button on a page:
<button onclick="history.forward()">Go Forward</button>
The output of the code above will be:
Go Forward
Click on Go Forward to see how it works.
(Will only work if a next page exists in your history list)
Try it Yourself 
Description
The
history.forward()
method loads the next URL (page) in the history list.
The
history.forward()
method only works if a next page exists.
Syntax
history.forward()
Parameters
NONE
Return Value
NONE
Browser Support
history.forward()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window history.go()
Example
Create a button to go back two pages:
<button onclick="history.go(-2)">Go Back 2 Pages</button>
The output of the code above will be:
Go Back 2 Pages
Click on Go Back to see how it works.
(Will only work if the previous pages exist in your history list)
Try it Yourself 
Description
The
history.go()
method loads a URL (page) from the history list.
The
history.go()
method only works if the page exist in the history list.
Syntax
history.go(
number
)
Parameters
Parameter
Description
number
Required.
Negative values go back.
Positive values go forward.
Return Value
NONE
Browser Support
history.go()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document documentElement
Example
Get the name of the document element node:
document.documentElement.nodeName;
Try it Yourself 
Description
The
documentElement
property returns a document's element (as an Element object).
The
documentElement
is read-only.
For HTML documents the returned object is the
<html>
element.
Syntax
document.documentElement
Return Value
Type
Description
Object
The document's
Element Object
Browser Support
document.documentElement()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document execCommand()
Example
Make the selected text bold:
document.execCommand("bold");
Try it Yourself 
Description
The execCommand() method is deprecated. Do NOT use it.
The applets property returns an empty HTMLCollection in all new browsers.
The <applet> element is not supported in HTML5.
Syntax
document.execCommand(
command
,
showUI
,
value
)
Parameters
Parameter
Description
command
The name of the command to execute:
"backColor"
"bold"
"createLink"
"copy"
"cut"
"defaultParagraphSeparator"
"delete"
"fontName"
"fontSize"
"foreColor"
"formatBlock"
"forwardDelete"
"insertHorizontalRule"
"insertHTML"
"insertImage"
"insertLineBreak"
"insertOrderedList"
"insertParagraph"
"insertText"
"insertUnorderedList"
"justifyCenter"
"justifyFull"
"justifyLeft"
"justifyRight"
"outdent"
"paste"
"redo"
"selectAll"
"strikethrough"
"styleWithCss"
"subscript"
"superscript"
"undo"
"unlink"
"useCSS"
showUI
A Boolean.
Specifies if the UI should be shown or not.
value
Some commands need a value to be completed.
Return Value
Type
Description
Boolean
true
if the command is supported, otherwise
false
.
HTML DOM Document getElementById()
Example
Get the element with the specified id:
document.getElementById("demo");
Try it Yourself 
Get the element and change its color:
const myElement = document.getElementById("demo");
myElement.style.color = "red";
Try it Yourself 
Or just change its color:
document.getElementById("demo").style.color = "red";
Try it Yourself 
Description
The
getElementById()
method returns an element with a specified value.
The
getElementById()
method returns
null
if the element does not exist.
The
getElementById()
method is one of the most common methods in the HTML DOM.
It is used almost every time you want to read or edit an HTML element.
Syntax
document.getElementById(
elementID
)
Parameters
Parameter
Description
id
Required.
The id value of an element.
Return Value
Type
Description
Object
The element with the specified id.
null
if the element does not exist.
Browser Support
document.getElementById()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document getElementsByClassName()
Example
Get all elements with class="example":
const collection = document.getElementsByClassName("example");
Try it Yourself 
Get all elements with both the "example" and "color" classes:
const collection = document.getElementsByClassName("example color");
Try it Yourself 
More examples below.
Description
The
getElementsByClassName()
method returns a collection of elements with a specified class name(s).
The
getElementsByClassName()
method returns an
HTMLCollection
.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.getElementsByClassName(
classname
)
Parameters
Parameter
Description
classname
Required.
The class name of the elements.
Search for multiple class names separated by spaces like "test demo".
Return Value
Type
Description
Object.
An
HTMLCollection
object.
A collection of elements with the specified class name.
The elements are sorted as they appear in the document.
More Examples
Number of elements with class="example":
let numb = document.getElementsByClassName("example").length;
Try it Yourself 
Change the background color of all elements with class="example":
const collection = document.getElementsByClassName("example");
for (let i = 0; i < collection.length; i++) {
collection[i].style.backgroundColor = "red";
}
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Syntax
CSS Reference:
CSS
.class
Selector
HTML DOM Reference:
element
.getElementsByClassName()
HTML DOM Reference:
className Property
HTML DOM Reference:
classList Property
HTML DOM Reference:
Style Object
Browser Support
document.getElementsByClassName()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document getElementsByTagName()
Example
Get all elements with the tag name "li":
const collection = document.getElementsByTagName("li");
Try it Yourself 
Get all elements in the document:
const collection = document.getElementsByTagName("*");
Try it Yourself 
Change the inner HTML of the first <p> element in the document:
document.getElementsByTagName("p")[0].innerHTML = "Hello World!";
Try it Yourself 
More examples below.
Description
The
getElementsByTagName()
method returns a collection of all elements with a specified tag name.
The
getElementsByTagName()
method returns an
HTMLCollection
.
The
getElementsByTagName()
property is read-only.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.getElementsByTagName(
tagname
)
Parameters
Parameter
Description
tagname
Required.
The tagname of the elements.
Return Value
Type
Description
Object
An HTMLCollection
object.
A collection of elements with a specified tag name.
The elements are sorted as they appear in the document.
More Examples
The number of <li> elements in the document:
let numb = document.getElementsByTagName("li").length;
Try it Yourself 
Change the background color of all <p> elements:
const collection = document.getElementsByTagName("P");
for (let i = 0; i < collection.length; i++) {
collection[i].style.backgroundColor = "red";
}
Try it Yourself 
Related Pages
JavaScript Reference:
element
.getElementsByTagName()
JavaScript Tutorial:
JavaScript HTML DOM Node List
Browser Support
document.getElementsByTagName()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document writeln()
Example
document.writeln("Hello World!");
document.writeln("Have a nice day!");
Try it Yourself 
More examples below.
Description
The
writeln()
method writes directly to an open (HTML) document stream.
The
writeln()
method is identical to the write() method,
with the addition of writing a newline character (U+000A) after each statement.
Warning
The
writeln()
method deletes all existing HTML when used on a loaded document.
The
writeln()
method cannot be used in XHTML or XML.
Syntax
document.writeln(
exp1, exp2, ..., expN
)
Parameters
Parameter
Description
exp1,...
Optional.
The output stream.
Multiple arguments are appended to the document in order of occurrence.
Return Value
NONE
The Difference Between write() and writeln()
writeln() adds a newline character after each statement. write() does not.
Example
document.write("Hello World!");
document.write("Have a nice day!");
document.write("<br>");
document.writeln("Hello World!");
document.writeln("Have a nice day!");
Try it Yourself 
Examples
document.write("Hello World!");
document.write("<br>");
document.write("Have a nice day!");
Try it Yourself 
document.write("<p>Hello World!</p>");
document.write("<p>Have a nice day!</p>");
Try it Yourself 
Browser Support
document.write
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Elements
The Element Object
In the HTML DOM, the
Element object
represents an HTML element, 
like P, DIV, A, TABLE, or any other HTML element.
Properties and Methods
The following properties and methods can be used on all HTML elements:
Property / Method
Description
accessKey
Sets or returns the accesskey attribute of an element
addEventListener()
Attaches an event handler to an element
appendChild()
Adds (appends) a new child node to an element
attributes
Returns a
NamedNodeMap
of an element's attributes
blur()
Removes focus from an element
childElementCount
Returns an elements's number of child elements
childNodes
Returns a
NodeList
of an element's child nodes
children
Returns an
HTMLCollection
of an element's child elements
classList
Returns the class name(s) of an element
className
Sets or returns the value of the class attribute of an element
click()
Simulates a mouse-click on an element
clientHeight
Returns the height of an element, including padding
clientLeft
Returns the width of the left border of an element
clientTop
Returns the width of the top border of an element
clientWidth
Returns the width of an element, including padding
cloneNode()
Clones an element
closest()
Searches the DOM tree for the closest element that matches a CSS selector
compareDocumentPosition()
Compares the document position of two elements
contains()
Returns true if a node is a descendant of a node
contentEditable
Sets or returns whether the content of an element is editable or not
dir
Sets or returns the value of the dir attribute of an element
firstChild
Returns the first child node of an element
firstElementChild
Returns the first child element of an element
focus()
Gives focus to an element
getAttribute()
Returns the value of an element's attribute
getAttributeNode()
Returns an attribute node
getBoundingClientRect()
Returns the size of an element and its position relative to the viewport
getElementsByClassName()
Returns a collection of child elements with a given class name
getElementsByTagName()
Returns a collection of child elements with a given tag name
hasAttribute()
Returns true if an element has a given attribute
hasAttributes()
Returns true if an element has any attributes
hasChildNodes()
Returns true if an element has any child nodes
id
Sets or returns the value of the id attribute of an element
innerHTML
Sets or returns the content of an element
innerText
Sets or returns the text content of a node and its descendants
insertAdjacentElement()
Inserts a new HTML element at a position relative to an element
insertAdjacentHTML()
Inserts an HTML formatted text at a position relative to an element
insertAdjacentText()
Inserts text into a position relative to an element
insertBefore()
Inserts a new child node before an existing child node
isContentEditable
Returns true if an element's content is editable
isDefaultNamespace()
Returns true if a given namespaceURI is the default
isEqualNode()
Checks if two elements are equal
isSameNode()
Checks if two elements are the same node
isSupported()
Deprecated
lang
Sets or returns the value of the lang attribute of an element
lastChild
Returns the last child node of an element
lastElementChild
Returns the last child element of an element
matches()
Returns true if an element is matched by a given CSS selector
namespaceURI
Returns the namespace URI of an element
nextSibling
Returns the next node at the same node tree level
nextElementSibling
Returns the next element at the same node tree level
nodeName
Returns the name of a node
nodeType
Returns the node type of a node
nodeValue
Sets or returns the value of a node
normalize()
Joins adjacent text nodes and removes empty text nodes in an element
offsetHeight
Returns the height of an element, including padding, border and scrollbar
offsetWidth
Returns the width of an element, including padding, border and scrollbar
offsetLeft
Returns the horizontal offset position of an element
offsetParent
Returns the offset container of an element
offsetTop
Returns the vertical offset position of an element
outerHTML
Sets or returns the content of an element (including the start tag and the end tag)
outerText
Sets or returns the outer text content of a node and its descendants
ownerDocument
Returns the root element (document object) for an element
parentNode
Returns the parent node of an element
parentElement
Returns the parent element node of an element
previousSibling
Returns the previous node at the same node tree level
previousElementSibling
Returns the previous element at the same node tree level
querySelector()
Returns the first child element that matches a CSS selector(s)
querySelectorAll()
Returns all child elements that matches a CSS selector(s)
remove()
Removes an element from the DOM
removeAttribute()
Removes an attribute from an element
removeAttributeNode()
Removes an attribute node, and returns the removed node
removeChild()
Removes a child node from an element
removeEventListener()
Removes an event handler that has been attached with the addEventListener() method
replaceChild()
Replaces a child node in an element
scrollHeight
Returns the entire height of an element, including padding
scrollIntoView()
Scrolls the an element into the visible area of the browser window
scrollLeft
Sets or returns the number of pixels an element's content is scrolled horizontally
scrollTop
Sets or returns the number of pixels an element's content is scrolled vertically
scrollWidth
Returns the entire width of an element, including padding
setAttribute()
Sets or changes an attribute's value
setAttributeNode()
Sets or changes an attribute node
style
Sets or returns the value of the style attribute of an element
tabIndex
Sets or returns the value of the tabindex attribute of an element
tagName
Returns the tag name of an element
textContent
Sets or returns the textual content of a node and its descendants
title
Sets or returns the value of the title attribute of an element
toString()
Converts an element to a string
HTML DOM Element accessKey
Example
Set the access key of a link:
document.getElementById("myAnchor").accessKey = "w";
Try it Yourself 
Return the accesskey of a link:
document.getElementById("myAnchor").accessKey;
Try it Yourself 
Description
The
accessKey
property sets or returns the accesskey attribute of an element.
The
accessKey
property specifies a shortcut key to activate or focus an element.
Warning
Using accesskeys is difficult because they may conflict with other key standards in the browser.
To avoid this problem, most browsers will use accesskeys only if pressed together with the Alt key.
Concerns
Adapting accesskeys to all international languages is difficult.
The accesskey value may not be present on all keyboards.
Because of these concerns, it is advised not to use accesskeys.
Syntax
Return the accessKey property:
element
.accessKey
Set the accessKey property:
element
.accessKey =
character
Property Value
Value
Description
character
Specifies the shortcut key to activate/focus the element.
Return Value
Type
Description
String
A keyboard key.
Browser Support
element.accessKey
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element children
Example
Get a collection of the <body> element's children:
const collection = document.body.children;
Try it Yourself 
More examples below.
Description
The
children
property returns a collection of an element's child elements.
The
children
property returns an
HTMLCollection
object.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
element
.children
Return Value
Type
Description
Object
A
HTMLCollection
object.
The collection of element nodes.
The elements are sorted as they appear in the document.
More Examples
How many children does "myDIV" have:
let count = document.getElementById("myDIV").children.length;
Try it Yourself 
Change the background of the second child element of "myDIV":
const collection = document.getElementById("myDIV").children;
collection[1].style.backgroundColor = "yellow";
Try it Yourself 
Get the text of the third child element (index 2) of a <select> element:
const collection = document.getElementById("mySelect").children[2].text;
Try it Yourself 
Loop all children of <body> and change their background:
const collection = document.body.children;
for (let i = 0; i < collection.length; i++) {
collection[i].style.backgroundColor = "red";
}
Try it Yourself 
Browser Support
element.children
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element childElementCount
Examples
Number of child elements of a <div> element:
let numb = document.getElementById("myDIV").childElementCount;
Try it Yourself 
childElementCount returns the same as children.length:
let numb = document.getElementById("myDIV").children.length;
Try it Yourself 
Description
The
childElementCount
property returns the number of child elements of an element.
The
childElementCount
property returns the same as
children.length
.
The
childElementCount
is read only.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
element
.childElementCount
Return Value
Type
Description
Number
The number of child elements of the element
Browser Support
element.childElementCount
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Window location.assign()
Example
Load a new document:
location.assign("https://www.w3schools.com");
Try it Yourself 
Description
The
assign()
method loads a new document.
Syntax
location.assign(
URL
)
Parameters
Parameter
Description
URL
Required.
The URL of a page to navigate to.
Return Value
NONE
Browser Support
location.assign()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.href
Examples
Get the URL of the current page:
let url = location.href;
Try it Yourself 
Set the URL of the current page:
location.href = "https://www.w3schools.com";
Try it Yourself 
More examples below.
Description
The
location.href
property sets or returns the entire URL of the current page.
Syntax
Return the href property:
location.href
Set the href property:
location.href =
URL
Property Value
Parameter
Description
URL
An absolute URL like:
http://www.example.com/default.htm
A relative URL like
default.htm
An anchor URL like
location.href="#top"
A new protocol like:
ftp://someftpserver.com
mailto:someone@example.com
file://host/path/example.txt
Return Value
Type
Description
A string
The full URL of the page, including the protocol (like https://).
More Examples
Set the href value to point to an anchor within a page:
location.href = "#top";
Try it Yourself 
Set the href value to point to an email address (will open and create a new 
email message):
location.href = "mailto:someone@example.com";
Try it Yourself 
Browser Support
location.href
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.pathname
Example
Get the current path:
let path x = location.pathname;
Try it Yourself 
Description
The
pathname
property sets or returns the pathname of a URL (page).
Syntax
Return the pathname property:
location.pathname
Set the pathname property:
location.pathname =
path
Property Values
Parameter
Description
path
The pathname of the URL.
Return Value
Type
Description
A string
The current pathname.
Browser Support
location.pathname
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window location.search
Example
Return the querystring part of a URL:
let query = location.search;
Try it Yourself 
Description
The
search
property returns the querystring part of a URL, including the question mark (?).
The
search
property can also be used to set the querystring.
Syntax
Return the search property:
location.search
Set the search property:
location.search =
querystring
Property Value
Parameter
Description
querystring
The querystring part of the URL
Return Value
Type
Description
A string
The querystring part of a URL, including the question mark (?)
Browser Support
location.search
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document querySelector()
Examples
Get the first <p> element:
document.querySelector("p");
Try it Yourself 
Get the first element with class="example":
document.querySelector(".example");
Try it Yourself 
More examples below.
Description
The
querySelector()
method returns the
first
element that matches a CSS selector.
To return
all
matches (not only the first), use the
querySelectorAll()
instead.
Both
querySelector()
and
querySelectorAll()
throw a SYNTAX_ERR exception if the selector(s) is invalid.
The Difference Between an HTMLCollection and a NodeList
A
NodeList
and an
HTMLcollection
is very much the same thing.
Both are array-like collections (lists) of nodes (elements) extracted from a 
document. The nodes can be accessed by index numbers. The index starts at 0.
Both have a
length
property that returns the number of elements in the list (collection).
An HTMLCollection is a collection of
document elements
.
A NodeList is a collection of
document nodes
(element nodes, attribute nodes, and text nodes).
HTMLCollection items can be accessed by their name, id, or index number.
NodeList items can only be accessed by their index number.
An HTMLCollection is always a
live
collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.
A NodeList is most often a
static
collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.
The
getElementsByClassName()
and
getElementsByTagName()
methods return a live HTMLCollection.
The
querySelectorAll()
method returns a static NodeList.
The
childNodes
property returns a live NodeList.
Syntax
document.querySelector(
CSS selectors
)
Parameters
Parameter
Description
CSS
selectors
Required.
One or more CSS selectors.
CSS selectors select HTML 
elements based on id, classes, types, attributes, values of attributes etc.
For a full list, go to our
CSS Selectors Reference
.
For multiple selectors, separate each selector with a comma (See "More Examples").
Return Value
Type
Description
Object
A
NodeList
with the first element that matches the CSS selector(s).
If no matches are found,
null
is returned.
More Examples
Get the first <p> element in with class="example":
document.querySelector("p.example");
Try it Yourself 
Change the text of the element with id="demo":
document.querySelector("#demo").innerHTML = "Hello World!";
Try it Yourself 
Select the first <p> element with the parent is a <div> 
element.
document.querySelector("div > p");
Try it Yourself 
Select the first <a> element that has a "target" attribute:
document.querySelector("a[target]");
Try it Yourself 
Select the first <h3> or the first <h4>:
<h3>A h3 element</h3>
<h4>A h4 element</h4>
document.querySelector("h3, h4").style.backgroundColor = "red";
Try it Yourself 
Select the first <h3> or the first <h4>:
<h4>A h4 element</h4>
<h3>A h3 element</h3>
document.querySelector("h3, h4").style.backgroundColor = "red";
Try it Yourself 
Browser Support
document.querySelector()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document querySelectorAll()
Example
Select all elements with class="example":
document.querySelectorAll(".example");
Try it Yourself 
More examples below.
Description
The
querySelectorAll()
method returns all elements that matches a CSS selector(s).
The
querySelectorAll()
method returns a
NodeList
.
The
querySelectorAll()
method throws a SYNTAX_ERR exception if the selector(s) is invalid
NodeList
A
NodeList
is an array-like collection (list) of nodes.
The nodes in the list can be accessed by index. The index starts at 0.
The length Poperty
returns the number of nodes in the list.
Syntax
document.querySelectorAll(
CSS selectors
)
Parameters
Parameter
Description
CSS selectors
Required.
One or more CSS selectors.
CSS selectors select HTML 
elements based on id, classes, types, attributes, values of attributes etc.
For a full list, go to our
CSS Selectors Reference
.
For multiple selectors, separate each selector with a comma (See "More Examples").
Return Value
Type
Description
Object
A
NodeList
object with the elements that matches the CSS selector(s).
If no matches are found, an empty NodeList object is returned.
More Examples
Add a background color to the first <p> element:
const nodeList= document.querySelectorAll("p");
nodeList[0].style.backgroundColor = "red";
Try it Yourself 
Add a background color to the first <p> element with class="example":
const nodeList = document.querySelectorAll("p.example");
nodeList[0].style.backgroundColor = "red";
Try it Yourself 
Number of elements with class="example":
let numb = document.querySelectorAll(".example").length;
Try it Yourself 
Set the background color of all elements with class="example":
const nodeList = document.querySelectorAll(".example");
for (let i = 0; i < nodeList.length; i++) {
nodeList[i].style.backgroundColor = "red";
}
Try it Yourself 
Set the background color of all <p> elements:
let nodeList = document.querySelectorAll("p");
for (let i = 0; i < nodeList.length; i++) {
nodeList[i].style.backgroundColor = "red";
}
Try it Yourself 
Set the border of all <a> elements with  a "target" attribute:
const nodeList = document.querySelectorAll("a[target]");
for (let i = 0; i < nodeList.length; i++) {
nodeList[i].style.border = "10px solid red";
}
Try it Yourself 
Set the background color of every <p> element where the parent is a <div> element:
const nodeList = document.querySelectorAll("div > p");
for (let i = 0; i < nodeList.length; i++) {
nodeList[i].style.backgroundColor = "red";
}
Try it Yourself 
Set the background color of all <h3> and <span> elements:
const nodeList = document.querySelectorAll("h3, span");
for (let i = 0; i < nodeList.length; i++) {
nodeList[i].style.backgroundColor = "red";
}
Try it Yourself 
Browser Support
document.querySelectorAll()
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document readyState
Example
Return the loading status of the document:
document.readyState;
Try it Yourself 
Description
The
readyState
property returns the (loading) status of the current document.
The
readyState
property is read-only.
Syntax
document.readyState
Return Value
Type
Description
String
The status of the current document:
uninitialized - Has not started loading
loading - Is loading
loaded - Has been loaded
interactive - Has loaded enough to interact with
complete - Fully loaded
Browser Support
document.readyState
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document strictErrorChecking
Example
Return the DOM error setting for the document:
document.strictErrorChecking;
Try it Yourself 
Description
The strictErrorChecking property is deprecated. Do NOT use it.
The strictErrorChecking property returns undefined in all new browsers.
Syntax
Return the strictErrorChecking
document.strictErrorChecking
Set the strictErrorChecking
document.strictErrorChecking = true|false
Return Value
Type
Description
Boolean
true
if strictErrorChecking is on.
undefined
in all new browsers.
HTML DOM Element clientHeight
Example
Get the height and width of "myDIV", including padding:
const element = document.getElementById("myDIV");
let text = "clientHeight: " + element.clientHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px";
Try it Yourself 
More examples below.
Description
The
clientHeight
property returns the viewable height of an element in 
pixels, including padding, but not the border, scrollbar or margin.
The
clientHeight
property is read-only.
Syntax
element
.clientHeight
Return Value
Type
Description
Number
The viewable height of the element (in pixels) including padding
The difference between clientHeight/clientWidth and offsetHeight/offsetWidth
Without a scrollbar:
const element = document.getElementById("myDIV");
let text = "";
text += "clientHeight: " + element.clientHeight + "px<br>";
text += "offsetHeight: " + element.offsetHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px<br>";
text += "offsetWidth: " + element.offsetWidth + "px";
Try it Yourself 
With a scrollbar:
const element = document.getElementById("myDIV");
let text = "";
text += "clientHeight: " + element.clientHeight + "px<br>";
text += "offsetHeight: " + element.offsetHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px<br>";
text += "offsetWidth: " + element.offsetWidth + "px";
Try it Yourself 
Browser Support
element.clientHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element classList
Example
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Toggle "myStyle" on and off:
const list = element.classList;
list.toggle("myStyle");
Try it Yourself 
More examples below.
Description
The
classList
property returns the CSS classnames of an element.
The
classList
property returns a
DOMTokenList
.
Syntax
element
.classList
Return Value
Type
Description
Object
A
DOMTokenList
.
A list of the class names of an element.
classList Properties and Methods
Name
Description
add()
Adds one or more tokens to the list
contains()
Returns true if the list contains a class
entries()
Returns an Iterator with key/value pairs from the list
forEach()
Executes a callback function for each token in the list
item()
Returns the token at a specified index
keys()
Returns an Iterator with the keys in the list
length
Returns the number of tokens in the list
remove()
Removes one or more tokens from the list
replace()
Replaces a token in the list
supports()
Returns true if a token is one of an attribute's supported tokens
toggle()
Toggles between tokens in the list
value
Returns the token list as a string
values()
Returns an Iterator with the values in the list
More Examples
Add multiple classes to the an element:
element.classList.add("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Remove multiple classes from an element:
element.classList.remove("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
How many class names the element have:
let numb = element.classList.length;
Try it Yourself 
Get the class names of the "myDIV" element:
<div id="myDIV" class="myStyle anotherClass thirdClass">
<p>I am myDIV.</p>
</div>
const list = document.getElementById("myDIV").classList;
Try it Yourself 
Get the first class of an element:
let className = element.classList.item(0);
Try it Yourself 
Does an an element has a "myStyle" class?
let x = element.classList.contains("myStyle");
Try it Yourself 
Remove "anotherClass" if an element has a "myStyle" class.
if (element.classList.contains("mystyle")) {
element.classList.remove("anotherClass");
}
Try it Yourself 
Toggle between classes to create a dropdown button:
document.getElementById("myBtn").onclick = function() {myFunction()};
function myFunction() {
document.getElementById("myDropdown").classList.toggle("show");
}
Try it Yourself 
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// 
  Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position
// Remove it when you leave the scroll position
function myFunction() {
if (window.pageYOffset 
  >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
element.classList
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
HTML DOM Element cloneNode()
Example
Copy a <li> element from "myList2" to "myList1":
const node = document.getElementById("myList2").lastChild;
const clone = node.cloneNode(true);
document.getElementById("myList1").appendChild(clone);
Before:
Coffee
Tea
Water
Milk
After:
Coffee
Tea
Milk
Water
Milk
Try it Yourself 
More examples below.
Description
The
cloneNode()
method creates a copy of a node, and returns the clone.
The
cloneNode()
method clones all attributes and their values.
Set the
deep
parameter to
true
if you also want to clone descendants (children).
Syntax
node
.cloneNode(
deep
)
Parameters
Parameter
Description
deep
Optional.
false
- Default. Clone only the node and its attributes.
true
- Clone the node, its attributes, and its descendants.
Return Value
Type
Description
Node
The cloned node.
More Examples
Example
Copy the "demo" element, including attributes and child elements, and 
append it to the document:
const node = document.getElementById("demo");
const clone = node.cloneNode(true);
document.body.appendChild(clone);
Try it Yourself 
Browser Support
element.cloneNode()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element contentEditable
Example
This paragraph is editable:
<p id="myP" contenteditable="true">I am editable.</p>
Returns true if "myP" is editable:
document.getElementById("myP").contentEditable;
Try it Yourself 
Set the content of "myP" to be editable:
document.getElementById("myP").contentEditable = "true";
Try it Yourself 
More examples below.
Description
The
contentEditable
property sets or returns if the content of an element is editable.
Syntax
Return the contentEditable property:
element
.contentEditable
Set the contentEditable property:
ement
.contentEditable =
value
Parameters
Parameter
Description
value
"true" - The content is editable
"false" - The content is not editable
"inherit"- Default. Is editable if parent element is editable
Return Value
Type
Description
String
true
if the element is editable, otherwise
false
.
Toggle between content editable:
const x = document.getElementById("myP");
if (x.contentEditable == "true") {
x.contentEditable = "false";
button.innerHTML = "Enable myP to be editable!";
} else {
x.contentEditable = "true";
button.innerHTML = "Disable myP be editable!";
}
Try it Yourself 
Browser Support
element.contentEditable()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element closest() Method
Examples
Find the closest element that matches the CSS selector ".container":
const element = document.getElementById("myElement");
const closest = element.closest(".container");
Try it Yourself 
Find the closest element that matches ".container" or ".wrapper":
const element = document.getElementById(".container, .wrapper");
const closest = element.closest(".container");
Try it Yourself 
Description
The
closest()
method searches
up
the DOM tree for elements which
matches a specified CSS selector.
The
closest()
method starts at the element itself, then the anchestors (parent, grandparent, ...)
until a match is found.
The
closest()
method returns
null()
if no match is found.
Syntax
element
.closest(
selectors
)
Parameters
Parameter
Description
selectors
Required.
One or more (comma separeted) CSS selectors to match.
See our
Complete CSS Selectors Reference
.
Return Value
Type
Description
Object
The closest ancestor element, or the element itself, that matches the specified CSS selector(s).
If no matches are found,
null
is returned.
Throws a SYNTAX_ERR exception if the selector(s) is invalid.
Browser Support
The first browser versions that fully support the
closest()
method:
Chrome
41
Edge
15
Firefox
35
Safari
9
Opera
28
Mar 2015
Apr 2017
Jan 2015
Oct 2015
Mar 2015
JavaScript Object.isFrozen()
Example
// Create Object
const person = {firstName:"John", lastName:"Doe"};
// Freeze Object
Object.freeze(person);
// This will return true
let text = Object.isFrozen(person);
Try it Yourself 
More Examples Below !
Description
The
Object.isFrozen()
returns true if an object is frozen.
Syntax
Object.isFrozen(
object
)
Parameters
Parameter
Description
object
Required.
The object to check.
Return Value
Type
Description
Boolean
true
if the object is frozen.
false
if not.
More Examples
Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Object.freeze(fruits);
// This will return true:
let answer = Object.isFrozen(fruits);
Try it Yourself 
Browser Support
Object.isFrozen()
is an ECMAScript5 (ES5) feature.
ES5 (JavaScript 2009) is fully supported in all modern browsers since July 2013:
Chrome
23
IE/Edge
11
Firefox
21
Safari
6
Opera
15
Sep 2012
Sep 2012
Apr 2013
Jul 2012
Jul 2013
Window navigator.platform
Example
Get the browser version:
let platform = navigator.platform;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
platform
property returns for which platform the browser is compiled.
The
platform
property is read-only.
Syntax
navigator.platform
Return Value
Type
Description
A string
The browser platform.
Examples:
HP-UX
Linux i686
Linux armv7l
Mac68K
MacPPC
MacIntel
SunOS
Win16
Win32
WebTV OS
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.platform
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.cookieEnabled
Example
Cookies enabled in your browser?
let cookies = navigator.cookieEnabled;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
cookieEnabled
property returns
true
if cookies are enabled in the browser.
Syntax
navigator.cookieEnabled
Return Value
Type
Description
A boolean
true
if cookies are enabled in the browser,
otherwise
false
.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.cookieEnabled
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.javaEnabled()
Example
Is Java enabled in your browser?
let java = navigator.javaEnabled();
Try it Yourself 
Description
The
javaEnabled()
method returns a Boolean value that specifies whether the browser has Java enabled.
Syntax
navigator.javaEnabled()
Parameters
NONE
Return Value
Type
Description
A boolean
true
if the browser has Java enabled, otherwise
false
.
Browser Support
navigator.javaEnabled()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.appCodeName
Example
Get browser code name:
let browser = navigator.appCodeName;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
appCodeName
property returns browser code name.
The
appCodeName
property is read-only.
Syntax
navigator.appCodeName
Return Value
Type
Description
A string
The browser code name.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.appCodeName
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.product
Example
Get the navigator.product:
let product = navigator.product;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
product
property returns the browser engine (product name).
The
product
property is read-only.
Syntax
navigator.product
Return Value
Type
Description
A string
The browser engine name.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.product
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.language
Example
Get the browser language:
let language = navigator.language;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
language
property returns the browser language.
The
language
property is read-only.
Syntax
navigator.language
Return Value
Type
Description
A string
The browser language:
Examples: "en", "en-US", "de", "fr".
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.language
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.geolocation
Example
Get the latitude and longitude of the user's position:
if (navigator.geolocation) {
navigator.geolocation.getCurrentPosition(showPosition);
} else {
document.getElementById("demo").innerHTML =
"Geolocation is not supported by this browser.";
}
function showPosition(position) {
document.getElementById("demo").innerHTML =
"Latitude: " + position.coords.latitude +
"Longitude: " + position.coords.longitude;
}
Try it Yourself 
Description
The
geolocation
property returns a
Geolocation object
that can be used to 
locate the user's position.
The
geolocation
property is read-only.
The
geolocation
property is only available in secure contexts (HTTPS).
The
geolocation
property is only available if the user approves it.
Syntax
navigator.geolocation
Return Value
Type
Description
An object
A reference to a Geolocation object.
Browser Support
navigator.geolocation
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window navigator.taintEnabled()
Description
The taintEnabled() method was removed in JavaScript version 1.2.
It should be avoided to prevent RUN-TIME ERRORS in the future.
Syntax
navigator.taintEnabled()
Parameters
NONE
Return Value
Type
Description
A boolean
true
if the browser has data tainting enabled,
otherwise
false
Window navigator.userAgent
Example
Get navigator.userAgent:
let agent = navigator.userAgent;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
userAgent
property returns the user-agent header sent by the 
browser to the server.
The
userAgent
property is read-only.
Syntax
navigator.userAgent
Return Value
Type
Description
A string
The browser user agent header.
More Examples
Display all navigator properties:
let text = "<p>Browser CodeName: " + navigator.appCodeName + "</p>" +
"<p>Browser Name: " + navigator.appName + "</p>" +
"<p>Browser Version: " + navigator.appVersion + "</p>" +
"<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>" +
"<p>Browser Language: " + navigator.language + "</p>" +
"<p>Browser Online: " + navigator.onLine + "</p>" +
"<p>Platform: " + navigator.platform + "</p>" +
"<p>User-agent header: " + navigator.userAgent + "</p>";
Try it Yourself 
Browser Support
navigator.userAgent
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window screen.availWidth
Example
Get the available width of your screen:
let width = screen.availWidth;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
availWidth
property returns the width of the user's screen.
The
availWidth
property returns the width in pixels.
The
availWidth
property returns the width minus interface features like the Windows Taskbar.
The
availWidth
property is read-only.
Syntax
screen.availWidth
Return Value
Type
Description
A number
The width of the user's screen in pixels.
More Examples
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.availWith
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window screen.height
Example
Get the total height of your screen:
let height = screen.height;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
height
property returns the total height of the user's screen.
The
height
property returns the height in pixels.
The
height
property is read only.
Syntax
screen.height
Return Value
Type
Description
A number
The total height of the user's screen in pixels.
More Examples
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.height
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window screen.width
Example
Get the total width of your screen:
let width = screen.width;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
width
property returns the total width of the user's screen.
The
width
property returns width in pixels.
The
width
property is read-only.
Syntax
screen.width
Return Value
Type
Description
A number
The total width of the user's screen in pixels.
More Examples
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.width
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document applets
Example
Number of <applet> elements in a document:
let num = document.applets.length;
Try it Yourself 
Description
The applets property is deprecated. Do NOT use it.
The applets property returns an empty HTMLCollection in all new browsers.
The <applet> element is not supported in HTML5.
Alternative:
Get the number of <applet> elements in a document:
let num = document.getElementsByTagName("applet").length;
Try it Yourself 
Syntax
document.applets
Return Value
Type
Description
Object
An HTMLCollection Object with all <applet> elements in the document.
Window screen.pixelDepth
Example
Get the color resolution of your screen:
let depth = screen.pixelDepth;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
pixelDepth
property returns the screen's color depth.
The
pixelDepth
property returns the color depth in bits per pixel.
The
pixelDepth
property is read-only.
Syntax
screen.pixelDepth
Return Value
Type
Description
A number
The color resolution in bits per pixel:
1, 4, 8, 15, 16, 24, 32, or 48.
More Examples
All screen properties:
let text = "Total width/height: " + screen.width + "*" + screen.height + "<br>" +
"Available width/height: " + screen.availWidth + "*" + screen.availHeight + "<br>" +
"Color depth: " + screen.colorDepth + "<br>" +
"Color resolution: " + screen.pixelDepth;
Try it Yourself 
Browser Support
screen.pixelDepth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document anchors
Examples
The number of <a> elements in a document:
let num = document.anchors.length;
Try it Yourself 
The content of the first <a> element:
let content = document.anchors[0].innerHTML;
Try it Yourself 
Description
The anchors property is deprecated. Do NOT use it.
The anchors property only returns those <a> elements with a name attribute.
The name attribute of the <a> element is not supported in HTML5.
Alternatives
The number of <a> elements in a document:
let num = document.getElementsByTagName("a").length;
Try it Yourself 
The content of the first <a> element:
let content = document.getElementsByTagName("a")[0].innerHTML;
Try it Yourself 
Syntax
document.anchors
Parameters
NONE
Return Value
Type
Description
Object
An HTMLCollection of all lt;a> elements in the document that have a name attribute.
HTML DOM Document write()
Examples
Write some text directly to the HTML output:
document.write("Hello World!");
Try it Yourself 
Write some HTML elements directly to the HTML output:
document.write("<h2>Hello World!</h2><p>Have a nice day!</p>");
Try it Yourself 
Using document.write() after a document is loaded, deletes all existing HTML:
// This should be avoided:
function myFunction() {
document.write("Hello World!");
}
Try it Yourself 
More examples below.
Description
The
write()
method writes directly to an open (HTML) document stream.
Warning
The
write()
method deletes all existing HTML when used on a loaded document.
The
write()
method cannot be used in XHTML or XML.
Syntax
document.write(
exp1, exp2, ..., expN
)
Parameters
Parameter
Description
exp1,...
Optional.
The output stream.
Multiple arguments are appended to the document in order of occurrence.
Return Value
NONE
More Examples
Write a date object directly to the HTML ouput:
document.write(Date());
Try it Yourself 
Open an output stream, add some HTML, then close the output stream:
document.open();
document.write("<h1>Hello World</h1>");
document.close();
Try it Yourself 
Open a new window and write some HTML into it:
const myWindow = window.open();
myWindow.document.write("<h1>New Window</h1>");
myWindow.document.write("<p>Hello World!</p>");
Try it Yourself 
The Difference Between write() and writeln()
The writeln( ) method is only useful when writing to text documents (type=".txt").
Example
document.write("Hello World!");
document.write("Have a nice day!");
document.write("<br>");
document.writeln("Hello World!");
document.writeln("Have a nice day!");
Try it Yourself 
Examples
document.write("Hello World!");
document.write("<br>");
document.write("Have a nice day!");
Try it Yourself 
document.write("<p>Hello World!</p>");
document.write("<p>Have a nice day!</p>");
Try it Yourself 
Browser Support
document.write
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element appendChild()
Examples
Append an item to a list:
const node = document.createElement("li");
const textnode = document.createTextNode("Water");
node.appendChild(textnode);
document.getElementById("myList").appendChild(node);
Before:
Coffee
Tea
After:
Coffee
Tea
Water
Try it Yourself 
Move an item from one list to another:
const node = document.getElementById("myList2").lastElementChild;
document.getElementById("myList1").appendChild(node);
Before:
Coffee
Tea
Water
Milk
After:
Coffee
Tea
Milk
Water
Try it Yourself 
More examples below.
Description
The
appendChild()
method appends a node (element) as the last child of an element.
Syntax
element
.appendChild(
node
)
or
node
.appendChild(
node
)
Parameters
Parameter
Description
node
Required.
The node to append.
Return Value
Type
Description
Node
The appended node.
More Examples
To create a paragraph with a text.
Create a paragraph element
Create a text node
Append the text node to the paragraph
Append the paragraph to the document.
Create a <p> element and append it to a <div> element:
const para = document.createElement("p");
const node = document.createTextNode("This is a paragraph.");
para.appendChild(node);
document.getElementById("myDIV").appendChild(para);
Try it Yourself 
Create a <p> element and append it to the document's body:
const para = document.createElement("P");
const node = document.createTextNode("This is a paragraph.");
para.appendChild(node);
document.body.appendChild(para);
Try it Yourself 
Browser Support
element.appendChild()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element childNodes
Example
Get the <body> element's child nodes:
const nodeList = document.body.childNodes;
Try it Yourself 
Get the number of child nodes in "myDIV":
let numb = document.getElementById("myDIV").childNodes.length;
Try it Yourself 
More examples below.
Description
The
childNodes
property returns a collection (list) of an elements's child nodes.
The
childNodes
property returns a
NodeList
object.
The
childNodes
property is read-only.
childNodes[0]
is the same as
firstChild
.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
element
.childNodes
Return Value
Type
Description
Object
A
NodeList
object collection of nodes.
The nodes are sorted as they appear in the document.
More Examples
Change the background color of the second child node:
element.childNodes[1].style.backgroundColor = "yellow";
Try it Yourself 
Get the text of the third child node of a <select> element:
let text = document.getElementById("mySelect").childNodes[2].text;
Try it Yourself 
Browser Support
element.childNodes
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element getBoundingClientRect()
Example
Return the size of an element and its position relative to the viewport:
const rect = element.getBoundingClientRect();
Try it Yourself 
Description
The
getBoundingClientRect()
method returns the size of an element and its 
position relative to the viewport.
The
getBoundingClientRect()
method returns a DOMRect object with eight properties: left, top, right, 
bottom, x, y, width, height.
Syntax
element
.getBoundingClientRect()
Return Value
Type
Description
Object
A DOMRect object with eight properties:
left, top, right, bottom, x, y, width, height.
Browser Support
element.getBoundingClientRect()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element getAttributeNode()
Example
Get the value of the class attribute node of an <h1> element:
const element = document.getElementsByTagName("H1")[0];
let text = element.getAttributeNode("class").value;
Try it Yourself 
More examples below.
Description
The
getAttributeNode()
method returns an element's attribute.
The
getAttributeNode()
method returns an
Attribute object
.
The Difference Between getAttribute() and getAttributeNode()
The
getAttribute()
method returns the value of an attribute.
The
getAttributeNode()
method returns an
Attr object
,
and you must use the
Attr value
property to get the value.
The result will be the same.
Syntax
element
.getAttributeNode(
name
)
Parameters
Parameter
Description
name
Required.
The name of the attribute.
Return Value
Type
Description
Object
The Attr object of the attribute node.
null
if the attribute does not exist.
More Examples
Example
Get the value of the target attribute node of an <a> element:
var elmnt = document.getElementById("myAnchor");
var attr = elmnt.getAttributeNode("target").value;
Try it Yourself 
Example
Get the value of the onclick attribute node of a <button> element:
var elmnt = document.getElementById("myBtn");
var attr = elmnt.getAttributeNode("onclick").value;
Try it Yourself 
Browser Support
element.getAttributeNode()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element getElementsByClassName()
Examples
Change the text of the first list item with class="child":
const list = document.getElementsByClassName("example")[0];
list.getElementsByClassName("child")[0].innerHTML = "Milk";
Try it Yourself 
Number of elements with class="child" in "myDIV":
const element = document.getElementById("myDIV");
const nodes = element.getElementsByClassName("child");
let number = nodes.length;
Try it Yourself 
Change the size of the second element with class="child":
const element = document.getElementById("myDIV");
element.getElementsByClassName("child")[1].style.fontSize = 24px";
Try it Yourself 
More examples below.
Description
The
getElementsByClassName()
method returns a collection of
all child elements with a given class name.
The
getElementsByClassName()
method returns a live
HTMLCollection
.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
element
.getElementsByClassName(
classname
)
Parameters
Parameter
Description
classname
Required.
The class name of the elements.
Search for multiple class names separated by spaces like "test demo".
Return Value
Type
Description
Object.
An
HTMLCollection
object.
A collection of elements with the specified class name.
The elements are sorted as they appear in the document.
More Examples
Change the size of the first element with "child" and "color" classes
inside the second element with class="example":
const elements = document.getElementsByClassName("example")[1];
elements.getElementsByClassName("child color")[0].style.fontSize = "24px";
Try it Yourself 
Change the color of all elements in "myDIV" with class="child":
const element = document.getElementById("myDIV");
const nodes = element.getElementsByClassName("child");
for (let i = 0; i < nodes.length; i++) {
nodes[i].style.color = "red";
}
Try it Yourself 
Browser Support
element.getElementsByClassName()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element hasAttribute()
Examples
Does "myButton" have an onclick attribute:
let answer = myButton.hasAttribute("onclick");
Try it Yourself 
If an <a> element has a target attribute, change the value to "_self":
if (element.hasAttribute("target")) {
element.setAttribute("target", "_self");
}
Try it Yourself 
Description
The
hasAttribute()
method returns
true
if the attribute exists, otherwise
false
.
Syntax
element
.hasAttribute(
name
)
Parameters
Parameter
Description
name
Required.
The name of the attribute.
Return Value
Type
Description
Boolean
true
if the element has the attribute,
  otherwise
false
.
Browser Support
element.hasAttribute()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element hasChildNodes()
Example
Does an element have child nodes:
let answer = element.hasChildNodes();
Try it Yourself 
Remove the first child node of an element:
if (element.hasChildNodes()) {
element.removeChild(element.childNodes[0]);
}
Try it Yourself 
Description
The
hasChildNodes()
method returns true if the specified node has any child nodes, otherwise false.
The
hasChildNodes()
method is read-only.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
element
.hasChildNodes()
Parameters
NONE
Return Value
Type
Description
Boolean
true
if the element has child nodes,
  otherwise
false
.
Browser Support
element.hasChildNodes()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element id
Examples
Get the id of the first anchor:
let id = document.getElementsByTagName("a")[0].id;
Try it Yourself 
Change the id of an element:
document.getElementById("demo").id = "newid";
Try it Yourself 
Change the font size of "myP":
const element = document.getElementById("myP");
element.style.fontSize = "30px";
Try it Yourself 
Description
The
id
property sets or returns the value of an element's id attribute.
Syntax
Return the id property:
element
.id
Set the id property:
element
.id =
id
Property Value
Value
Description
id
The id of the element.
Return Value
Type
Description
String
The id of the element.
Browser Support
element.id
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element innerHTML
Example
Get the HTML content of an element with id="myP":
let html = document.getElementById("myP").innerHTML;
Try it Yourself 
Change the HTML content of an element with id="demo":
document.getElementById("demo").innerHTML = "I have changed!";
Try it Yourself 
Get the HTML content of a <ul> element with id="myList":
let html = document.getElementById("myList").innerHTML;
Try it Yourself 
Delete the HTML content of a <p> element with id="demo":
element.innerHTML = "";
Try it Yourself 
More examples below.
Description
The
innerHTML
property sets or returns the HTML content (inner HTML) of an element.
The Differences Between
innerHTML, innerText and textContent
See below
Syntax
Return the innerHTML property:
element
.innerHTML
Set the innerHTML property:
element
.innerHTML =
text
Property Value
Property
Description
String
HTML content.
Return Value
Type
Description
String
The HTML content of the element.
More Examples
Example
Change the HTML content of two elements:
let text = "Hello Dolly.";
document.getElementById("myP").innerHTML = text;
document.getElementById("myDIV").innerHTML = text;
Try it Yourself 
Example
Repeat the HTML content of an element:
element.innerHTML += element.innerHTML;
Try it Yourself 
Example
Change the HTML content and URL of a link:
element.innerHTML = "W3Schools";
element.href = "https://www.w3schools.com";
Try it Yourself 
The Differences Between
innerHTML, innerText and textContent
The innerHTML property returns:
The text content of the element, including all spacing and inner HTML tags.
The innerText property returns:
Just the text content of the element and all its children, without CSS hidden text spacing and tags,
except <script> and <style> elements.
The textContent property returns:
The text content of the element and all descendaces, with spacing and CSS hidden text,
but without tags.
HTML Example
<p id="myP"> This element has extra spacing and contains <span>a span 
  element</span>.</p>
JavaScript Examples
let text = document.getElementById("myP").innerText;
let text = document.getElementById("myP").innerHTML;
let text = document.getElementById("demo").textContent;
Try it Yourself 
In the example above:
The innerText property returns:
This element has extra spacing and contains a span element.
The innerHTML property returns:
This element has extra spacing and contains <span>a span element</span>.
The textContent property returns:
This element has extra spacing and contains a span element.
Browser Support
element.innerHTML
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element insertAdjacentHTML()
Example
Insert a new <p> element after a header element:
const h2 = document.getElementById("myH2");
let html = "<p>My new paragraph.</p>";
h2.insertAdjacentHTML("afterend", html);
Try it Yourself 
Description
The
insertAdjacentHTML()
method inserts HTML code into a specified position.
Legal positions:
Value
Description
afterbegin
After the beginning of the element (first child)
afterend
After the element
beforebegin
Before the element
beforeend
Before the end of the element (last child)
Syntax
element
.insertAdjacentHTML(
position, html
)
or
node
.insertAdjacentHTML(
position, html
)
Parameters
Parameter
Description
position
Required.
A position relative to the element:
afterbegin
afterend
beforebegin
beforeend
html
The HTML to insert.
More Examples
Example
Using "afterbegin":
let html = "<span style='color:red'>My span</span>";
h2.insertAdjacentHTML("afterbegin", html);
Try it Yourself 
Example
Using "beforebegin":
h2.insertAdjacentHTML("beforebegin", html);
Try it Yourself 
Example
Using "beforeend":
h2.insertAdjacentHTML("beforeend", html);
Try it Yourself 
Browser Support
element.insertAjacentHTML()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element insertBefore()
Examples
Create an <li> element
Create a text node
Append the text to the <li> element
Insert the <li> element before the first child in a <ul>:
const newNode = document.createElement("li");
const textNode = document.createTextNode("Water");
newNode.appendChild(textNode);
const list = document.getElementById("myList");
list.insertBefore(newNode, list.children[0]);
Try it Yourself 
Move the last element from one list to the beginning of another:
const node = document.getElementById("myList2").lastElementChild;
const list = document.getElementById("myList1");
list.insertBefore(node, list.children[0]);
Try it Yourself 
Move the last element from one list to the end of another:
const node = document.getElementById("myList2").lastElementChild;
const list = document.getElementById("myList1");
list.insertBefore(node, null);
Try it Yourself 
Description
The
insertBefore()
method inserts a child node before an existing child.
Syntax
element
.insertBefore(
new, existing
)
or
node
.insertBefore(
new, existing
)
Parameters
Parameter
Description
new
Required.
The node (element) to insert.
existing
Required.
The node (element) to insert before.
If
null
, it will be inserted at the end.
Return Value
Type
Description
Node
The inserted node.
Browser Support
element.insertBefore()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document cookie
Example
Get all cookies associated with this document:
let allCookies = document.cookie;
Try it Yourself 
Description
The
cookie
property sets or returns a semicolon-separated list of key=value pairs (document cookies).
An example of creating a cookie:
document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; 
path=/";
Syntax
Return the cookie:
document.cookie
Set the cookie:
document.cookie =
newCookie
Parameter
A semicolon-separated list of
name=value
pairs, followed with any of thise optional values:
expires=
date
A date in GMT format (Use the
Date.toUTCString method
).
Default value: The cookie is deleted when the browser is closed.
max-age=
seconds
The max age before the cookie is deleted.
If to 0 or a date in the past, the cookie is deleted.
path=
path
An absoulute path to the directory the cookie belongs to ('/dir').
Default value: Current directory.
domain=
domainname
The domain of the site ('example.com').
Default value: The domain of the document.
secure
Use a secure protocol (https) for sending the cookie to the server.
Return Value
Type
Description
String
A semicolon-separated list of key=value pairs (document cookies).
Cookies vs Local Storage
Cookies are for client-server (browser-server) applications.
Local storage are for client (browser) applications.
Cookies are associated with websites. If the data is for client use,
sending cookies in every HTTP header is waste of bandwith.
Some users have cookies disabled as a rule in their browsers.
A Cookie has a size limit of 4 Kilobytes. Local Storage has a limit of 5 Megabytes per domain.
A Cookie have expiration date. Local Storage has not.
Browser Support
document.cookie
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document charset
Example
Get the character encoding for a document:
encoding = document.charset;
Try it Yourself 
Description
The charset property is deprecated. Do NOT use it.
The charset property may not work in future browsers.
Syntax
document.charset
Return Value
Type
Description
String
The document's character encoding.
HTML DOM Document createAttribute()
Examples
// Create a class attribute:
const att = document.createAttribute("class");
// Set the value of the class attribute:
att.value = "democlass";
// Add the class attribute to the first h1:
const h1 = document.getElementsByTagName("H1")[0];
h1.setAttributeNode(att);
Try it Yourself 
// Create a style attribute:
const att = document.createAttribute("style");
// Set the value of the style attribute:
att.value = "color:red";
// Add the style attribute to the first h1:
const h1 = document.getElementsByTagName("h1")[0];
h1.setAttributeNode(att);
Try it Yourself 
More examples below.
Description
The
createAttribute()
method creates an attribute and returns the attribute as an Attr object.
Syntax
document.createAttribute(
name
)
Parameters
Parameter
Description
name
Required.
The name of the attribute to create.
Return Value
Type
Description
Node
The created attribute node.
More Examples
Add a href="www.w3schools.com" attribute an anchor element:
// Create a href attribute:
const att = document.createAttribute("href");
// Set the value of the href attribute:
att.value = "https://www.w3schools.com";
// Add the href attribute to an element:
element.setAttributeNode(att);
Try it Yourself 
Browser Support
document.createAttribute()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document createComment()
Example
Create a comment node, and add it to the document:
const comment = document.createComment("My comments");
document.body.appendChild(comment);
Try it Yourself 
Description
The
createComment()
method creates a comment and returns the comment node.
Syntax
document.createComment(
text
)
Parameters
Parameter
Description
text
Optional.
The comment text.
Return Value
Type
Description
Node
The created comment node.
Browser Support
document.createComment()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document createElement()
Examples
Create a <p> element and append it to the document:
const para = document.createElement("p");
para.innerText = "This is a paragraph";
document.body.appendChild(para);
Try it Yourself 
Create a <p> element and append it to an element:
const para = document.createElement("p");
para.innerHTML = "This is a paragraph.";
document.getElementById("myDIV").appendChild(para);
Try it Yourself 
More examples below.
Description
The
createElement()
method creates an element node.
Syntax
document.createElement(
type
)
Parameters
Parameter
Description
type
Required.
The type of element to create.
Return Value
Type
Description
Node
The created element node.
More Examples
Create a button:
const btn = document.createElement("button");
btn.innerHTML = "Hello Button";
document.body.appendChild(btn);
Try it Yourself 
Browser Support
document.createElement()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element className
Example
Set the class attribute for an element:
element.className = "myStyle";
Try it Yourself 
Get the class attribute of "myDIV":
let value = document.getElementById("myDIV").className;
Try it Yourself 
Toggle between two class names:
if (element.className == "myStyle") {
element.className = "newStyle";
} else {
element.className = "myStyle";
}
Try it Yourself 
More examples below.
Description
The
className
property sets or returns an element's class attribute.
Syntax
Return the className property:
HTMLElementObject
.className
Set the className property:
HTMLElementObject
.className =
class
Property Values
Value
Description
class
The class name(s) of an element.
Separate multiple classes with spaces, like "test demo".
Return Value
Type
Description
String
The class, or a space-separated list of classes, of an element
More Examples
Get the class attribute of the first <div> element (if any):
let value = document.getElementsByTagName("div")[0].className;
Try it Yourself 
Get a class attribute with multiple classes:
<div id="myDIV" class="myStyle test example">
<p>I am myDIV.</p>
</div>
let value = document.getElementById("myDIV").className;
Try it Yourself 
Overwrite an existing class attribute with a new one:
element.className = "newClassName";
Try it Yourself 
To add new classes, without overwriting existing values, add a space and the new classes:
element.className += " class1 class2";
Try it Yourself 
if "myDIV" has a "myStyle" class, change the font size:
const elem = document.getElementById("myDIV");
if (elem.className == "mystyle") {
elem.style.fontSize = "30px";
}
Try it Yourself 
If you scroll 50 pixels from the top of this page, the class "test" is added:
window.onscroll = function() {myFunction()};
function myFunction() {
if (document.body.scrollTop > 50) {
document.getElementById("myP").className = "test";
} else {
document.getElementById("myP").className = "";
}
}
Try it Yourself 
Browser Support
element.className
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element clientWidth
Example
Get the height and width of "myDIV", including padding:
const element = document.getElementById("myDIV");
let text = "clientHeight: " + element.clientHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px";
Try it Yourself 
More examples below.
Description
The
clientWidth
property returns the viewable width of an element in 
pixels, including padding, but not the border, scrollbar or margin.
The
clientWidth
property is read-only.
Syntax
element
.clientWidth
Return Value
Type
Description
Number
The viewable width of an element (in pixels) including padding.
The difference between clientHeight/clientWidth and offsetHeight/offsetWidth
Without a scrollbar:
const element = document.getElementById("myDIV");
let text = "";
text += "clientHeight: " + element.clientHeight + "px<br>";
text += "offsetHeight: " + element.offsetHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px<br>";
text += "offsetWidth: " + element.offsetWidth + "px";
Try it Yourself 
With a scrollbar:
const element = document.getElementById("myDIV");
let text = "";
text += "clientHeight: " + element.clientHeight + "px<br>";
text += "offsetHeight: " + element.offsetHeight + "px<br>";
text += "clientWidth: " + element.clientWidth + "px<br>";
text += "offsetWidth: " + element.offsetWidth + "px";
Try it Yourself 
Browser Support
element.clientWidth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element compareDocumentPosition()
Example
Where is "p1" compared to "p2":
const p1 = document.getElementById("p1");
const p2 = document.getElementById("p2");
let position = p1.compareDocumentPosition(p2);
Try it Yourself 
Description
The
compareDocumentPosition()
method compares two nodes,
and returns an integer describing where they are positioned in the document:
Value
Meaning
1
The nodes do not belong to the same document
2
The first node is positioned after the second
4
The first node is positioned before the second
8
The first node is positioned inside the second
16
The second node is positioned inside the first
32
The nodes are attributes on the same element
Syntax
node
.compareDocumentPosition(
node
)
Parameters
Parameter
Description
Node
Required.
The node to compare with current node.
Return Value
Type
Description
Number
Where two nodes are positioned compared to each other.
Value
Meaning
1
The nodes do not belong to the same document
2
The first node is positioned after the second
4
The first node is positioned before the second
8
The first node is positioned inside the second
16
The second node is positioned inside the first
32
The nodes are attributes on the same element
Browser Support
element.compareDocumentPosition()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element contains()
Example
Is "mySPAN" a descendant of "myDIV"?
const span = document.getElementById("mySPAN");
let answer = document.getElementById("myDIV").contains(span);
Try it Yourself 
Description
The
contains()
method returns
true
if a node is a descendant of a node.
The
contains()
method returns
false
if not.
Syntax
node
.contains(
node
)
Parameters
Parameter
Description
node
Required.
The node that may be a descendant of the node.
Return Value
Type
Description
Boolean
true
- The node is a descendant
false
- The node is NOT a descendant
Browser Support
element.contains()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Window frames
Example
Change the location of the first frame:
window.frames[0].location = "https://www.w3schools.com/jsref/";
Try it Yourself 
More examples below.
Description
The
frames
property returns an array with all window objects in the window.
The
frames
property is read-only.
The windows can be accessed by index numbers. The first index is 0.
Syntax
window.frames
Return Value
Type
Description
An array
All window objects in the window.
More Examples
Example
Loop through all frames and change the color:
const frames = window.frames;
for (let i = 0; i < frames.length; i++) {
frames[i].document.body.style.background = "red";
}
Try it Yourself 
Browser Support
window.frames
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element isEqualNode()
Example
Check if two list items in two different lists are equal:
var item1 = document.getElementById("myList1").firstChild;
var item2 = document.getElementById("myList2").firstChild;
var x =
 item1.isEqualNode(item2);
Try it Yourself 
Description
The
isEqualNode()
returns
true
if two elements (or nodes) are equal.
Two nodes are equal if all of the following conditions are true:
They have the same
nodeType
They have the same
nodeName
They have the same
nodeValue
They have the same
nameSpaceURI
They have the same
childNodes
with all the descendants
They have the same
attributes
and attribute values
They have the same localName and prefix
Syntax
element
.isEqualNode(
node
)
or
node
.isEqualNode(
node
)
Parameters
Parameter
Description
node
Required.
The node to compare.
Return Value
Type
Description
Boolean
true
if the nodes are equal, otherwise
false
.
Browser Support
element.isEqualNode()
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Node
isSupported()
Method
Example
Check if Core, version 2.0, is supported for an element:
element.isSupported("Core", "2.0");
Description
The isSupported() method is deprecated. Do NOT use it.
Syntax
element
.isSupported(
feature
,
version
)
Parameters
Parameter
Description
feature
Required.
The feature to check if it is supported.
version
Optional.
The version of the feature.
Return Value
Type
Description
Boolean
true
if the feature is supported,
otherwise
false
.
HTML DOM Element lastChild
Example
Return the HTML content of the last child node of an <ul> element:
document.getElementById("myList").lastChild.innerHTML;
Try it Yourself 
Get the text of the last child node of a <select> element:
let text = document.getElementById("mySelect").lastChild.text;
Try it Yourself 
More examples below.
Description
The
lastChild
property returns the last child node of a node.
The
lastChild
property returns  returns a node object.
The
lastChild
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
firstChild vs firstElementChild
firstChild
returns the first child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
firstElementChild
returns the first child
element
(not text and comment nodes).
lastChild vs lastElementChild
lastChild
returns the last child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
lastElementChild
returns the last child
element
(not text and comment nodes).
Syntax
element
.lastChild
or
node
.lastChild
Return Value
Type
Description
Node
The last child of a node.
null
if no child exists.
More Examples
This example demonstrates how whitespace may interfare:
Try to get the node name of the last child node of "myDIV":
<div id="myDIV">
<p>Looks like first child</p>
<p>Looks like last Child</p>
</div>
<script>
let text = document.getElementById("myDIV").lastChild.nodeName;
</script>
Try it Yourself 
However, if you remove the whitespace from the source, there are no #text 
nodes in "myDIV":
<div id="myDIV"><p>First child</p><p>Last Child</p></div>
<script>
let text = document.getElementById("myDIV").lastChild.nodeName;
</script>
Try it Yourself 
Browser Support
element.lastChild
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM
lastElementChild
Property
Example
Get the HTML content of the last child of a <ul> element:
const element = document.getElementById("myList")
let html = element.lastElementChild.innerHTML;
Try it Yourself 
Get the tag name of the last child of a <div> element:
const element =document.getElementById("myDIV")
let tag = element.lastElementChild.tagName;
Try it Yourself 
Get the text of the last child of a <select> element:
const element = document.getElementById("mySelect")
let text = element.lastElementChild.text;
Try it Yourself 
Description
The
lastElementChild
property returns the last child element of an element.
The
lastElementChild
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
firstChild vs firstElementChild
firstChild
returns the first child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
firstElementChild
returns the first child
element
(not text and comment nodes).
lastChild vs lastElementChild
lastChild
returns the last child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
lastElementChild
returns the last child
element
(not text and comment nodes).
Syntax
element
.lastElementChild
Return Value
Type
Description
Node
The last child element of the element.
null
if no child element exists.
Browser Support
element.lastElementChild
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element matches()
Examples
Does the element match a CSS selector?
const element = document.getElementById("demo");
let answer = element.matches(".container");
Try it Yourself 
Does the element match one of two selectors?:
const element = document.getElementById("demo");
let answer = element.matches(".container, .wrapper");
Try it Yourself 
Description
The
matches()
method returns
true
if an element matches a specific CSS selector(s).
The
matches()
method returns
false
if not.
Syntax
element
.matches(
selectors
)
Parameters
Parameter
Description
selectors
Required.
One or more (comma separeted) CSS selectors to match.
The returned element is the first found in the document.
See our
Complete CSS Selectors Reference
.
Return Value
Type
Description
Boolean
true
- The element matches the CSS selector.
false
- The element does not match the CSS selector.
Browser Support
The first browser versions that fully support the
matches()
method:
Chrome
33
Edge
15
Firefox
34
Safari
7
Opera
21
Feb 2014
Apr 2017
Dec 2014
Oct 2013
May 2014
HTML DOM Element nodeType
Example
Get the node type of the body element:
var x = document.getElementById("myP").nodeType;
Try it Yourself 
More "Try it Yourself" examples below.
Description
The nodeType property returns the node type, as a number, of the specified node.
If the node is an element node, the nodeType property will return 1.
If the node is an attribute node, the nodeType property will return 2.
If the node is a text node, the nodeType property will return 3.
If the node is a comment node, the nodeType property will return 8.
This property is read-only.
Syntax
node
.nodeType
Return Value
Type
Description
Number
The node type of the node.
See table below.
Node Types
Documents, elements, attributes, and other nodes of HTML or XML documents has different node types.
There are 12 different node types, which may have children of various node types:
Type
Description
Children
1
Element
Represents an element
Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference
2
Attr
Represents an attribute
Text, EntityReference
3
Text
Represents textual content in an element or attribute
None
4
CDATASection
Represents a CDATA section in a document (text that will NOT be parsed by a parser)
None
5
EntityReference
Represents an entity reference
Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
6
Entity
Represents an entity
Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
7
ProcessingInstruction
Represents a processing instruction
None
8
Comment
Represents a comment
None
9
Document
Represents the entire document (the root-node of the DOM tree)
Element, ProcessingInstruction, Comment, DocumentType
10
DocumentType
Provides an interface to the entities defined for the document
None
11
DocumentFragment
Represents a "lightweight" Document object, which can hold a portion of a document
Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
12
Notation
Represents a notation declared in the DTD
None
Node Types - Return Values
The return value of the nodeName and the nodeValue properties for each node type:
Type
nodeName
nodeValue
1
Element
element name
null
2
Attr
attribute name
attribute value
3
Text
#text
content of node
4
CDATASection
#cdata-section
content of node
5
EntityReference
entity reference name
null
6
Entity
entity name
null
7
ProcessingInstruction
target
content of node
8
Comment
#comment
comment text
9
Document
#document
null
10
DocumentType
doctype name
null
11
DocumentFragment
#document fragment
null
12
Notation
notation name
null
NodeTypes - Named Constants
Type
Named Constant
1
ELEMENT_NODE
2
ATTRIBUTE_NODE
3
TEXT_NODE
4
CDATA_SECTION_NODE
5
ENTITY_REFERENCE_NODE
6
ENTITY_NODE
7
PROCESSING_INSTRUCTION_NODE
8
COMMENT_NODE
9
DOCUMENT_NODE
10
DOCUMENT_TYPE_NODE
11
DOCUMENT_FRAGMENT_NODE
12
NOTATION_NODE
More Examples
Example
Return the node type of the <body> element:
document.body.nodeType;
Try it Yourself 
Example
Display the node types of all elements:
const nodes = document.body.childNodes;
let text = "";
for (let i = 0; i < nodes.length; i++) {
text += nodes[i].nodeType + "<br>";
}
Try it Yourself 
Example
Get the node name, value and type of "myDIV"s first child node:
const x = document.getElementById("myDIV").firstChild;
let text = "";
text += "Name: " + x.nodeName + "<br>";
text += "Value: " + x.nodeValue + "<br>";
text += "Type: " + x.nodeType;
Try it Yourself 
Browser Support
element.nodeType
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document designMode
Examples
Get the designMode:
document.designMode;
Try it Yourself 
Make the document editable:
document.designMode = "on";
Try it Yourself 
Description
The
designMode
property sets or returns if the document is editable.
Syntax
Get:
document.designMode
Set:
document.designMode = "on|off"
Property Values
Value
Description
off
Default.
The document is not editable.
on
The document is editable.
Browser Support
document.designMode
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document doctype
Example
Get the doctype name of an HTML document:
const doctypeObj = document.doctype.name;
Try it Yourself 
Description
The
doctype
property returns a document's doctype (as a DocumentType object).
The
doctype
property returns
null
if the document has no doctype.
The
doctype
property is read-only.
The
doctype.name
property returns the name of the doctype.
Syntax
document.doctype
Return Value
Type
Description
Object
A DocumentType object.
Browser Support
document.doctype
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document documentMode
Example
Get the mode used by the browser to render this document:
document.documentMode;
Try it Yourself 
Description
The documentMode property is deprecated. Do NOT use it.
The documentMode only works in Internet Explorer.
All other browsers return undefined.
Syntax
document.documentMode
HTML DOM Document documentURI
Example
Get the location URI of the document:
let uri = document.documentURI;
Try it Yourself 
Description
The
documentURI
property sets or returns a document's location.
The
documentURI
property returns
null
if the document was created in memory.
Syntax
Return the documentURI property:
document.documentURI
Set the documentURI property:
document.documentURI =
locationURI
Property Value
Type
Description
String
The URI of the document.
Browser Support
document.documentURI
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
document.documentURI
is not supported in Internet Explorer 11 (or earlier).
HTML DOM Document domain
Example
The domain name of the server that loaded this document:
let myDomain = document.domain;
Try it Yourself 
Description
The
domain
property returns the domain name of the server (the document was loaded from).
The
domain
property returns
null
if the document was created in memory.
Syntax
document.domain
Return Value
Type
Description
String
The domain name of the server (the document was loaded from).
null
if the domain cannot be identified.
Browser Support
document.domain
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document domConfig
Example
Return the DOM configuration of the document:
document.domConfig;
Try it Yourself 
Description
The domConfig property is deprecated. Do NOT use it.
The domConfig property returns undefined in all new browsers.
Syntax
document.domConfig
Return Value
Type
Description
Object
The document's DOM configuration.
undefined
in all new browsers.
HTML DOM Document embeds
Example
Number of <embed> elements in a document:
let num = document.embeds.length;
Try it Yourself 
Description
The
embeds
property returns a collection of all <embed> elements in the document.
The
embeds
property is read-only.
Syntax
document.embeds
Properties
Property
Description
length
The number of <embed> elements in the collection.
Methods
Method
Description
[
index
]
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
item(
index
)
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
namedItem(
id
)
Returns the element with the specified id.
Returns
null
if the id does not exist.
Return Value
Type
Description
Node list
An HTMLCollection
.
All <embed> elements in the document.
Sorted as they appear in the source code.
Browser Support
document.embeds
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document forms
Example
Number of <form> elements in the document:
let num = document.forms.length;
Try it Yourself 
Get the id of the first <form> element:
let id = document.forms[0].id;
Try it Yourself 
Get the id of the first <form> element:
let id = document.forms.item(0).id;
Try it Yourself 
Get the HTML content of the <form> element with id="myCarForm":
let html = document.forms.namedItem("myCarForm").innerHTML;
Try it Yourself 
More examples below.
Description
The
forms
property returns a collection of all <form> elements in a document.
The
forms
property returns an
HTMLCollection
.
The
forms
property is read-only.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.forms
Properties
Property
Description
length
The number of elements in the collection.
Methods
Method
Description
[
index
]
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
item(
index
)
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
namedItem(
id
)
Returns the element with the specified id.
Returns
null
if the id does not exist.
Return Value
Type
Description
Object
An HTMLCollection Object
.
All <form> elements in the document.
Sorted as they appear in the source code
More Examples
Loop through all <form> elements and output the id of each form:
const forms = document.forms;
let text = "";
for (let i = 0; i < forms.length; i++) {
text += forms[i].id + "<br>";
}
Try it Yourself 
Using the
form.elements collection
to get
the value of each element in the form:
const form  = document.forms[0];
let text = "";
for (let i = 0; i < form.length; i++) {
text += forms.elements[i].value + "<br>";
}
Try it Yourself 
Browser Support
document.forms
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document normalize()
Example
Normalize a document:
document.normalize();
Try it Yourself 
Description
The
normalize()
method removes empty text nodes, and joins adjacent text nodes.
Syntax
document.normalize()
Parameters
NONE
Return Value
NONE
Browser Support
document.normalize()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document images
Example
The number of <img> elements in the document:
document.images.length;
Try it Yourself 
Loop over all <img> elements, and output the URL (src) of each:
const myImages = document.images;
let text = "";
for (let i = 0; i < myImages.length; i++) {
text += myImages[i].src + "<br>";
}
Try it Yourself 
The URL of the first <img> element is:
document.images[0].src;
Try it Yourself 
The URL of the first <img> element is:
document.images.item(0).src;
Try it Yourself 
More examples below.
Description
The
images
property returns a collection of all <img> elements in a document.
The
images
property returns an
HTMLCollection
.
The
images
property is read-only.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.images
Properties
Property
Description
length
The number of <img> elements in the collection.
Methods
Method
Description
[
index
]
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
item(
index
)
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
namedItem(
id
)
Returns the element with the specified id.
Returns
null
if the id does not exist.
Return Value
Type
Description
Object
An HTMLCollection Object.
All <img> elements in the document.
The elements are sorted as they appear in the document.
More Examples
The URL of the <img> element with id="myImg" is:
document.images.namedItem("myImg").src;
Try it Yourself 
Add a black border to the first <img> element:
document.images[0].style.border = "10px dotted black";
Try it Yourself 
Browser Support
document.images
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document lastModified
Examples
Get the date and time the document was last modified:
let text = document.lastModified;
Try it Yourself 
Convert the lastModified property into a date object:
const date = new Date(document.lastModified);
Try it Yourself 
Description
The
lastModified
property returns the date and time the document was last modified.
The
lastModified
property is read-only.
Syntax
document.lastModified
Return Value
Type
Description
String
The date and time the document was last modified.
Browser Support
document.lastModified
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Document implementation
Examples
Does this document has the feature DOM 1.0?
document.implementation.hasFeature("DOM", "1.0");
Try it Yourself 
Does this document has the feature TESLA X?
document.implementation.hasFeature("TESLA", "X");
Try it Yourself 
Description
The
implementation
property returns the DOMimplementation object that handles the document.
Warning!
The DOM 1 Recommendation (1998) only specified one method for this object: hasFeature().
The hasFeature() method was ment to check if a DOM module was supported by the browser:
let answer = document.implementation.hasFeature("DOM", "1.0");
Problem is
: All modern browsers always return true.
Syntax
document.implementation
Return Value
Type
Description
Object
A DocumentImplementation object.
The document's implementation object.
Browser Support
document.implementation
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document hasFocus()
Example
Display if the document has focus:
if (document.hasFocus()) {
text = "The document has focus.";
} else {
text = "The document does NOT have focus.";
}
Try it Yourself 
Description
The
hasFocus()
method returns a
true
if the document (or any element in the document) has focus.
Otherwise it returns
false
.
Syntax
document.hasFocus()
Parameters
NONE
Return Value
Type
Description
Boolean
true
if the document (or an element in the document) has focus.
Otherwise
false
.
Browser Support
document.hasFocus()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Document head
Examples
Get the tag name of the the <head> element:
document.head.tagName;
Try it Yourself 
Try with a document without a <head> element:
document.head.tagName;
Try it Yourself 
Get the tag name of the the first child element of the <head> element:
document.head.firstElementChildtagName;
Try it Yourself 
You can also access the <head> element with getElementsByTagName("head"):
getElementsByTagName("head")[0].tagName;
Try it Yourself 
Description
The
head
property returns the <head> element of the document.
Syntax
document.head
Return Value
Type
Description
Node
The head element of the document.
Browser Support
document.head
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element firstElementChild
Examples
Get the HTML content of the first child element:
let text = element.firstElementChild.innerHTML;
Try it Yourself 
Get the tag name of the first child element of "myDIV":
let text = document.getElementById("myDIV").firstElementChild.tagName;
Try it Yourself 
Get the text of the first child element of a <select> element:
let text = document.getElementById("mySelect").firstElementChild.text;
Try it Yourself 
Description
The
firstElementChild
property returns the first child element of the specified 
element.
The
firstElementChild
property is read-only.
The
firstElementChild
property returns the same as children[0].
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
firstChild vs firstElementChild
firstChild
returns the first child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
firstElementChild
returns the first child
element
(not text and comment nodes).
lastChild vs lastElementChild
lastChild
returns the last child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
lastElementChild
returns the last child
element
(not text and comment nodes).
Syntax
element
.firstElementChild
Return Value
Type
Description
Node
The first child element of an element.
null
if no child element exists.
Browser Support
element.firstElementChild
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element focus()
Example
Give focus to an element:
document.getElementById("myAnchor").focus();
Try it Yourself 
Give focus to a text field:
document.getElementById("myText").focus();
Try it Yourself 
Give focus to a text field when the document has been loaded:
window.onload = function() {
document.getElementById("myText").focus();
}
Try it Yourself 
Description
The
focus()
method gives focus to an element (if it can be focused).
Syntax
element
.focus()
Parameters
NONE
Return Value
NONE
Browser Support
element.focus()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element getElementsByTagName()
Examples
Change the HTML content of the first <li> element in a list:
const list = document.getElementsByTagName("UL")[0];
list.getElementsByTagName("li")[0].innerHTML = "Milk";
Try it Yourself 
Number of <p> elements in "myDIV":
const element = document.getElementById("myDIV");
const nodes = element.getElementsByTagName("p");
let numb = nodes.length;
Try it Yourself 
Change the font size of the second <p> element in "myDIV":
const element = document.getElementById("myDIV");
element.getElementsByTagName("p")[1].style.fontSize = "24px";
Try it Yourself 
More examples below.
Description
The
getElementsByTagName()
method returns a collection of
all child elements with a given tag name.
The
getElementsByTagName()
method returns
a live
HTMLCollection
.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
element
.getElementsByTagName(
tagname
)
Parameters
Parameter
Description
tagname
Required.
The tagname of the elements.
Return Value
Type
Description
Object
An HTMLCollection
object.
A collection of elements with a specified tag name.
The elements are sorted as they appear in the document.
More Examples
Change the background color of all <p> elements inside "myDIV":
const div = document.getElementById("myDIV");
const nodes = x.getElementsByTagName("P");
for (let i = 0; i < nodes.length; i++) {
nodes[i].style.backgroundColor = "red";
}
Try it Yourself 
Change the background color of the fourth element (index 3) inside "myDIV":
const div = document.getElementById("myDIV");
div.getElementsByTagName("*")[3].style.backgroundColor = "red";
Try it Yourself 
Using the "*" parameter.
Change the background color of all elements inside "myDIV":
const div = document.getElementById("myDIV");
const nodes = div.getElementsByTagName("*");
for (let i = 0; i < nodes.length; i++) {
nodes[i].style.backgroundColor = "red";
}
Try it Yourself 
Browser Support
element.getElementsByTagName()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window history.back()
Example
Create a back button on a page:
<button onclick="history.back()">Go Back</button>
The output of the code above will be:
Go Back
Click on Go Back to see how it works.
(Will only work if a previous page exists in your history list)
Try it Yourself 
Description
The
history.back()
method loads the previous URL (page) in the history list.
The
history.back()
method only works if a previous page exists.
Syntax
history.back()
Parameters
NONE
Return Value
NONE
Browser Support
history.back()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
Window History
The Window History Object
The
history object
contains the URLs visited by the user (in the browser window).
The
history object
is a property of the
window object
.
The
history object
is accessed with:
window.history
or just
history
:
Examples
let length = window.history.length;
Try it Yourself 
let length = history.length;
Try it Yourself 
History Object Properties and Methods
Property/Method
Description
back()
Loads the previous URL (page) in the history list
forward()
Loads the next URL (page) in the history list
go()
Loads a specific URL (page) from the history list
length
Returns the number of URLs (pages) in the history list
HTML DOM Element offsetWidth
Example
Get the height and width of "myDIV", including padding and border:
const elmnt = document.getElementById("myDIV");
let text = "Height with padding and border: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding and border: " + elmnt.offsetWidth + "px";
Try it Yourself 
More examples below.
Description
The
offsetWidth
property returns the viewable width of an element (in pixels)
including padding, border and scrollbar, but not the margin.
The
offsetWidth
property is read-only.
Syntax
element
.offsetWidth
Return Value
Type
Description
Number
The viewable width of an element (in pixels) including padding, border and scrollbar.
The Difference between
clientHeight/clientWidth and offsetHeight/offsetWidth
Without a scrollbar:
const elmnt = document.getElementById("myDIV");
let text = "";
text += "Height with padding: " + elmnt.clientHeight + "px<br>";
text += "Height with padding and border: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding: " + elmnt.clientWidth + "px<br>";
text += "Width with padding and border: " + elmnt.offsetWidth + "px";
Try it Yourself 
With a scrollbar:
const elmnt = document.getElementById("myDIV");
let text = "";
text += "Height with padding: " + elmnt.clientHeight + "px<br>";
text += "Height with padding, border and scrollbar: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding: " + elmnt.clientWidth + "px<br>";
text += "Width with padding, border and scrollbar: " + elmnt.offsetWidth + "px";
Try it Yourself 
Browser Support
element.offsetWidth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM
ownerDocument
Property
Example
Get the node type of the owner document of a <p> element:
var x = document.getElementById("myP").ownerDocument.nodeType;
Try it Yourself 
Description
The ownerDocument property returns the owner document of a node, as a Document object.
In HTML, the HTML document itself is always the ownerDocument of an element.
Read more about the Document object in our
Document object reference
.
Browser Support
Property
ownerDocument
Yes
Yes
Yes
Yes
Yes
Syntax
node
.ownerDocument
Technical Details
Return Value:
The owner document of the node, as a Document object
DOM Version
Core Level 2 Node Object
HTML DOM
querySelector()
Method
Example
Change the text of the first child element with class="example" in a <div> element:
var x = document.getElementById("myDIV");
x.querySelector(".example").innerHTML = "Hello World!";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The querySelector() method returns the first child element that matches a specified
CSS selector(s)
of an element.
Note:
The querySelector() method only returns the first 
element that matches the specified selectors. To return all the matches, use the
querySelectorAll()
method instead.
Browser Support
The numbers in the table specifies the first browser version that fully 
supports the method.
Method
querySelector()
4.0
8.0
3.5
3.2
10.0
Syntax
element
.querySelector(
CSS selectors
)
Parameter Values
Parameter
Type
Description
CSS selectors
String
Required. Specifies one or more CSS selectors to match the element. These are used to select HTML 
elements based on their id, classes, types, attributes, values of attributes, 
etc.
For multiple selectors, separate each selector with a comma. The 
returned element depends on which element that is first found in the document 
(See "More Examples").
Tip:
For a list of all CSS Selectors, look at our
CSS Selectors Reference
.
Technical Details
DOM Version:
Selectors Level 1 Element Object
Return Value:
The first element that matches the specified CSS selector(s). If no matches are found, null is returned. Throws a SYNTAX_ERR exception if the specified selector(s) is invalid.
More Examples
Example
Change the text of the first <p> element in a <div> element:
var x = document.getElementById("myDIV");
x.querySelector("p").innerHTML = "Hello World!";
Try it Yourself 
Example
Change the text of the first <p> element with class="example" in a <div> element:
var x = document.getElementById("myDIV");
x.querySelector("p.example").innerHTML = "Hello World!";
Try it Yourself 
Example
Change the text of an element with id="demo" in a <div> element:
var x = document.getElementById("myDIV");
x.querySelector("#demo").innerHTML = "Hello World!";
Try it Yourself 
Example
Add a red border to the first <a> element that has a target attribute inside 
a <div> element:
var x = document.getElementById("myDIV");
x.querySelector("a[target]").style.border = "10px solid red";
Try it Yourself 
Example
This example demonstrates how multiple selectors work.
Assume that you have two elements: a <h2> and a <h3> element.
The following code will add a background color to the first <h2> element in <div>:
<div id="myDIV">
<h2>A h2 element</h2>
<h3>A h3 element</h3>
</div>
var x = document.getElementById("myDIV");
x.querySelector("h2, h3").style.backgroundColor = "red";
Try it Yourself 
However, if the <h3> element was placed before the <h2> element in <div>. The <h3> element is the one that will get the red background color.
<div id="myDIV">
<h3>A h3 element</h3>
<h2>A h2 element</h2>
</div>
var x = document.getElementById("myDIV");
x.querySelector("h2, h3").style.backgroundColor = "red";
Try it Yourself 
Related Pages
CSS Tutorial:
CSS Selectors
CSS Reference:
CSS Selectors Reference
JavaScript Tutorial:
JavaScript HTML DOM Node List
JavaScript Reference:
document.querySelector()
JavaScript Reference:
element
.querySelectorAll()
HTML DOM Reference:
document.querySelectorAll()
HTML DOM Document normalizeDocument()
Description
The normalizeDocument() property is deprecated. Do NOT use it.
The normalizeDocument() property is no longer supported in any browser.
Syntax
document.normalizeDocument()
Parameters
NONE
Return Value
NONE
HTML DOM Document renameNode()
Description
The renameNode() method is deprecated. Do NOT use it.
It throws an error (renameNode is not a function) in all new browsers.
HTML DOM Document title
Example
Return the title of the document:
document.title;
Try it Yourself 
Change the title of the document:
document.title = "A new title";
Try it Yourself 
Description
The
title
property sets or returns the title of the document.
Syntax
Return the title property:
document.title
Set the title property:
document.title =
newTitle
Properties
Value
Description
newTitle
The new document title.
Return Value
Type
Description
String
The document title.
Browser Support
document.title
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document URL
Example
Return the full URL of the document:
document.URL;
Try it Yourself 
Description
The
URL
property returns the full URL of the document.
Syntax
document.URL
Return Value
Type
Description
String
The entire URL of the document, including the protocol (like http://)
Browser Support
document.URL
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Document scripts
Examples
Number of <script> elements in the document:
document.scripts.length;
Try it Yourself 
Return the content of the first <script> element:
document.scripts[0].text;
Try it Yourself 
Return the content of the first <script> element:
document.scripts.item(0).text;
Try it Yourself 
More examples below.
Description
The
scripts
property returns a collection of all <script> elements in the document.
The
scripts
property returns an
HTMLCollection
.
The
scripts
property is read-only.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
document.scripts
Properties
Property
Description
length
The number of <script> elements in the collection.
Methods
Method
Description
[
index
]
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
item(
index
)
Returns the element with the specified index (starts at 0).
Returns
null
if the index is out of range.
namedItem(
id
)
Returns the element with the specified id.
Returns
null
if the id does not exist.
Return Value
Type
Description
Object
An HTMLCollection Object.
All <script> elements in the document.
The elements are sorted as they appear in the document.
More Examples
Return the content of the <script> element with id="myScript":
document.scripts.namedItem("myScript").text;
Try it Yourself 
Loop over all <script> elements and output each id:
const collection = document.scripts;
let text = "";
for (let i = 0; i < collection.length; i++) {
text += collection[i].id + "<br>";
}
Try it Yourself 
Browser Support
document.scripts
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element normalize()
Example
Normalize an element:
document.getElementById("demo").normalize();
Try it Yourself 
Description
The
normalize()
method removes empty text nodes, and joins adjacent text nodes.
Syntax
node
.normalize()
Parameters
NONE
Return Value
NONE
Browser Support
element.normalize
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element scrollLeft
Example
Get the number of pixels the content of "myDIV" is scrolled:
const element = document.getElementById("myDIV");
let x = elmnt.scrollLeft;
let y = elmnt.scrollTop;
Try it Yourself 
Scroll the contents of "myDIV"
TO
50 pixels horizontally and 10 pixels vertically:
const element = document.getElementById("myDIV");
element.scrollLeft = 50;
element.scrollTop = 10;
Try it Yourself 
Scroll the contents of "myDIV"
BY
50 pixels horizontally and 10 pixels vertically:
const element = document.getElementById("myDIV");
element.scrollLeft += 50;
element.scrollTop += 10;
Try it Yourself 
More examples below.
Description
The
scrollLeft
property sets or returns the number of pixels
an element's content is scrolled horizontally.
Syntax
Return the scrollLeft property:
element
.scrollLeft
Set the scrollLeft property:
element
.scrollLeft =
pixels
Property Values
Value
Description
pixels
The number of pixels the element's content is scrolled horizontally.
If the number is negative, the number is set to 0.
If the element cannot be scrolled, the number is set to 0.
If the number is greater than maximum allowed, the number is set to the maximum.
Return Value
Type
Description
Number
The number of pixels the element's content is scrolled horizontally.
More Examples
Example
Scroll the contents of <body> by 30 pixels horizontally and 10 
pixels vertically:
const html = document.documentElement;
html.scrollLeft += 30;
html.scrollTop += 10;
Try it Yourself 
Browser Support
element.scrollLeft
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element removeEventListener()
Example
Remove a "mousemove" event from an element:
myDIV.removeEventListener("mousemove", myFunction);
Try it Yourself 
Description
The
removeEventListener()
method removes an event handler from an element.
Syntax
element
.removeEventListener(
event
,
function
,
capture
)
Parameters
Parameter
Description
event
Required.
The name of the event to remove.
Do not use the "on" prefix.
Use "click" instead of "onclick".
All HTML DOM events are listed in the:
HTML DOM Event Object Reference
.
function
Required.
The function to remove.
useCapture
Optional (default = false).
true
- Remove the handler from capturing.
false
- Remove the handler from bubbling.
If the event handler was attached two times, one with capturing and one with bubbling, each must be removed separately.
Return Value
NONE
Browser Support
element.removeEventListener()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element setAttribute()
Example
Add a class attribute to an element:
element.setAttribute("class", "democlass");
Before:
The Element Object
After:
The Element Object
Try it Yourself 
More examples below.
Description
The
setAttribute()
method sets a new value to an attribute.
If the attribute does not exist, it is created first.
Syntax
element
.setAttribute(
name
,
value
)
Parameters
Parameter
Description
name
Required.
The name of the attribute.
value
Required.
The new attribute value.
Return Value
NONE
NO:
element
.setAttribute("style", "background-color:red;");
YES:
element
.style.backgroundColor = "red";
More Examples
Change an input field to an input button:
myInput.setAttribute("type", "button");
Before:
After:
Try it Yourself 
Add a href attribute to an <a> element:
myAnchor.setAttribute("href", "https://www.w3schools.com");
Before:
Go to w3schools.com
After:
Go to w3schools.com
Try it Yourself 
Change the value of the target attribute to "_self":
if (element.hasAttribute("target")) {
element.setAttribute("target", "_self");
}
Try it Yourself 
Browser Support
element.setAttribute()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element removeAttributeNode()
Examples
Remove the class attribute node from the first <h1> element:
const element = document.getElementsByTagName("H1")[0];
const attr = element.getAttributeNode("class");
element.removeAttributeNode(attr);
Try it Yourself 
Remove the href attribute node from a link:
const element = document.getElementById("myAnchor");
const attr = element.getAttributeNode("href");
element.removeAttributeNode(attr);
Try it Yourself 
Description
The
removeAttributeNode()
method removes an attribute from an element.
The
removeAttributeNode()
method returns an
Attribute object
.
The Difference Between removeAttribute() and removeAttributeNode()
The
removeAttribute()
method removes an attribute, and does not have a return value.
The
removeAttributeNode()
method removes an
Attr object
, and returns the removed object.
The result will be the same.
Syntax
element
.removeAttributeNode(
node
)
Parameters
Parameter
Description
attributenode
Required.
The attribute node to remove.
Return Value
Type
Description
Object
An
Attr object
representing the removed attribute.
Browser Support
element.removeAttributeNode()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element removeChild()
Examples
Remove the first element from a list:
const list = document.getElementById("myList");
list.removeChild(list.firstElementChild);
Before:
Coffee
Tea
Milk
After:
Tea
Milk
Try it Yourself 
If a list has child nodes, remove the first (index 0):
const list = document.getElementById("myList");
if (list.hasChildNodes()) {
list.removeChild(list.children[0]);
}
Try it Yourself 
Remove all child nodes from a list:
const list = document.getElementById("myList");
while (list.hasChildNodes()) {
list.removeChild(list.firstChild);
}
Try it Yourself 
More examples below.
Description
The
removeChild()
method removes an element's child.
Syntax
element
.removeChild(
node
)
or
node
.removeChild(
node
)
Parameters
Parameter
Description
node
Required.
The node (element) to remove.
Return Value
Type
Description
Node
The removed node (element).
null
if the child does not exist.
More Examples
Remove an element from its parent node:
element.parentNode.removeChild(element);
Try it Yourself 
Example
Remove an element from its parent, and insert it again:
const element = document.getElementById("myLI");
function removeLi() {
element.parentNode.removeChild(element);
}
function appendLi() {
const list = document.getElementById("myList");
list.appendChild(element);
}
Try it Yourself 
Example
Remove an element from its parent and insert it into another document:
const child = document.getElementById("mySpan");
function remove() {
child.parentNode.removeChild(child);
}
function insert() {
const frame = document.getElementsByTagName("IFRAME")[0]
const h = frame.contentWindow.document.getElementsByTagName("H1")[0];
const x = document.adoptNode(child);
h.appendChild(x);
}
Try it Yourself 
Browser Support
element.removeChild()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element scrollHeight
Examples
Get the height and width of an element, including padding:
const element = document.getElementById("content");
let x = element.scrollHeight;
let y = element.scrollWidth;
Try it Yourself 
How padding, border, and scrollbar affects the scrollWidth and scrollHeight:
const element = document.getElementById("content");
let x = element.scrollHeight;
let y = element.scrollWidth;
Try it Yourself 
More examples below.
Description
The
scrollHeight
property returns the height of an element including padding,
but excluding borders, scrollbars, or margins.
The
scrollHeight
property returns the height in pixels.
The
scrollHeight
property is read-only.
Syntax
element
.scrollHeight
Return Value
Type
Description
Number
The height of the element, in pixels.
More Examples
Set the height and width of an element to the values returned from scrollHeight and scrollWidth:
element.style.height = element.scrollHeight + "px";
element.style.width = element.scrollWidth + "px";
Try it Yourself 
Browser Support
element.scrollHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element replaceChild()
Example
Replace a text node in an <li> element with a new text node:
const newNode = document.createTextNode("Water");
const element = document.getElementById("myList").children[0];
element.replaceChild(newNode, element.childNodes[0]);
Before:
Coffee
Tea
Milk
After:
Water
Tea
Milk
Try it Yourself 
More examples below.
Description
The
replaceChild()
method replaces a child node with a new node.
Syntax
node
.replaceChild(
newnode
,
oldnode
)
Parameters
Parameter
Description
newnode
Required.
The node to insert.
oldnode
Required.
The node to remove.
Return Value
Type
Description
Node
The replaced node.
More Examples
Example
Replace an <li> element with a new <li> element:
// Create a new <li> element:
const element = document.createElement("li");
// Create a new text node:
const textNode = document.createTextNode("Water");
// Append the text node to the <li> element:
element.appendChild(textNode);
// Get the <ul> element with id="myList":
const list = document.getElementById("myList");
// Replace the first child node with the new <li> element:
list.replaceChild(element, list.childNodes[0]);
Before:
Coffee
Tea
Milk
After:
Water
Tea
Milk
Try it Yourself 
Browser Support
element.replaceChild()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attributes
The Attr Object
In the HTML DOM, an
Attr object
represents an
HTML attribute
.
An HTML attribute always belongs to an
HTML element
.
NamedNodeMap
A
NamedNodeMap
is an array-like unordered collection of an element's attributes.
In other words: a NamedNodeMap is a list of
Attr objects
.
A NamedNodeMap has a
length
property that returns the number of nodes.
The nodes can be accessed by name or index numbers. The index starts at 0.
Attribute Properties
Property
Description
isId
Deprecated
name
Returns an attribute's name
value
Sets or returns an attribute's value
specified
Returns true if the attribute is specified
NamedNodeMap Properties and Methods
Method
Description
getNamedItem()
Returns an attribute node (by name) from a NamedNodeMap
item()
Returns an attribute node (by index) from a NamedNodeMap
length
Returns the number of attributes in a NamedNodeMap
removeNamedItem()
Removes an attribute (node)
setNamedItem()
Sets an attribute (node) by name
HTML DOM  Element textContent
Examples
Return the text content of an element:
let text = element.textContent;
Try it Yourself 
Change the textual content of a <p> element with id="demo":
element.textContent = "I have changed!";
Try it Yourself 
Get all the textual content of an <ul> element with id="myList":
let text = document.getElementById("myList").textContent;
Try it Yourself 
Description
The
textContent
property sets or returns the text content of the specified node,
and all its descendants
.
The Differences Between
innerHTML, innerText and textContent
See below
Syntax
Return the text content of a node:
element
.textContent
or
node
.textContent
Set the text content of a node:
element
.textContent =
text
node
.textContent =
text
Property Value
Property
Description
text
The text content of the element or node.
Return Value
Type
Description
String
The text content of the element and all its descendants.
Returns
null
if the element is a document, a document type, or a notation.
The Differences Between
innerHTML, innerText and textContent
The innerHTML property returns:
The text content of the element, including all spacing and inner HTML tags.
The innerText property returns:
Just the text content of the element and all its children, without CSS hidden text spacing and tags,
except <script> and <style> elements.
The textContent property returns:
The text content of the element and all descendaces, with spacing and CSS hidden text,
but without tags.
HTML Example
<p id="myP"> This element has extra spacing and contains <span>a span 
  element</span>.</p>
JavaScript Examples
let text = document.getElementById("myP").innerText;
let text = document.getElementById("myP").innerHTML;
let text = document.getElementById("demo").textContent;
Try it Yourself 
In the example above:
The innerText property returns:
This element has extra spacing and contains a span element.
The innerHTML property returns:
This element has extra spacing and contains <span>a span element</span>.
The textContent property returns:
This element has extra spacing and contains a span element.
Browser Support
element.textContent
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Attribute name
Example
Get the name of an attribute:
let aName = element.attributes[0].name;
Try it Yourself 
Description
The
name
property returns the name of an attribute.
The
name
property is read-only.
Syntax
attribute
.name
Return Value
Type
Description
A string
The name of the attribute.
Browser Support
attribute
.name
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element addEventListener()
Examples
Add a click event to a <button> element:
element.addEventListener("click", myFunction);
function myFunction() {
document.getElementById("demo").innerHTML = "Hello World";
}
Try it Yourself 
More compact code:
element.addEventListener("click", function() {
document.getElementById("demo").innerHTML = "Hello World";
});
Try it Yourself 
More examples below.
Description
The
addEventListener()
method attaches an event handler to an element.
Syntax
element
.addEventListener(
event
,
function
,
useCapture
)
Parameters
Parameter
Description
event
Required.
The name of the event.
Do not use the "on" prefix.
Use "click" not "onclick".
The Complete List of DOM Events
.
function
Required.
The function to run when the event occurs.
useCapture
Optional (default = false).
false
- The handler is executed in the bubbling phase.
true
- The handler is executed in the capturing phase.
Return Value
NONE
More Examples
You can add many events to the same element:
element.addEventListener("click", myFunction1);
element.addEventListener("click", myFunction2);
Try it Yourself 
You can add different events to the same element:
element.addEventListener("mouseover", myFunction);
element.addEventListener("click", someOtherFunction);
element.addEventListener("mouseout", someOtherFunction);
Try it Yourself 
To pass parameter values, use an "anonymous function":
element.addEventListener("click", function() {
myFunction(p1, p2);
});
Try it Yourself 
Change the background color of a <button> element:
element.addEventListener("click", function() {
this.style.backgroundColor = "red";
});
Try it Yourself 
The difference between bubbling and capturing:
element1.addEventListener("click", myFunction, false);
element2.addEventListener("click", myFunction, true);
Try it Yourself 
Remove an event handler:
element.addEventListener("mousemove", myFunction);
element.removeEventListener("mousemove", myFunction);
Try it Yourself 
Browser Support
element.addEventListener()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element blur()
Examples
Remove focus from a text field:
document.getElementById("myText").blur();
Try it Yourself 
Remove focus from an <a> element:
document.getElementById("myAnchor").blur();
Try it Yourself 
Description
The
blur()
method removes focus from an element.
Syntax
HTMLElementObject
.blur()
Parameters
NONE
Return Value
NONE
Browser Support
element.blur()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element attributes
Examples
How many attributes does the <img> element have:
let numb = document.getElementById("myImg").attributes.length;
Try it Yourself 
Display all attributes of an <img> element:
const nodeMap = document.getElementById("myImg").attributes;
let text = "";
for (let i = 0; i < nodeMap.length; i++) {
text += nodeMap[i].name + " = " + nodeMap[i].value + "<br>";
}
document.getElementById("demo").innerHTML = text;
Try it Yourself 
More examples below.
Description
The
attributes
property returns a collection of attributes in an element.
The
attributes
property returns a NamedNodeMap.
NamedNodeMap
A
NamedNodeMap
is an array-like unordered collection of an element's attributes.
In other words: a NamedNodeMap is a list of
Attr objects
.
A NamedNodeMap has a
length
property that returns the number of nodes.
The nodes can be accessed by name or index numbers. The index starts at 0.
Syntax
node
.attributes
Return Value
Type
Description
NamedNodeMap
A collection of attribute objects.
More Examples
How many attributes does the <button> element have:
let numb = document.getElementById("myButton").attributes.length;
Try it Yourself 
Get the name of a <button> element's second (index 1) attribute:
let attr = document.getElementById("myBtn").attributes[1].name;
Try it Yourself 
Browser Support
element.attributes
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element offsetTop
Example
Get the offsetTop position of "myDIV":
const element = document.getElementById("myDIV");
let pos = element.offsetTop;
Try it Yourself 
Get the positions of "myDIV":
const element = document.getElementById("test");
Let pos1 = element.offsetTop;
let pos2 = element.offsetLeft;
Try it Yourself 
More examples below.
Description
The
offsetTop
property returns the top position (in pixels) relative to the parent.
The returned value includes:
the top position, and margin of the element
the top padding, scrollbar and border of the parent
The
offsetTop
property is read-only.
Syntax
Return the top offset position:
element
.offsetTop
Return Value
Type
Description
Number
The top position of the element, in pixels.
More Examples
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// 
  Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position.
  Remove the sticky class when you leave the scroll position.
function myFunction() {
if (window.pageYOffset 
  >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
Browser Support
element.offsetTop
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM
parentElement
Property
Examples
Get the node name of the parent element of a <li> element:
var x = document.getElementById("myLI").parentElement.nodeName;
Try it Yourself 
Click on an element (<span>) to hide its parent element (<div>):
<div>
<span onclick="this.parentElement.style.display = 'none';">x</span>
</div>
Try it Yourself 
Description
The parentElement property returns the parent element of the specified 
element.
The difference between parentElement and
parentNode
, is that parentElement 
returns
null
if the parent node is not an element node:
document.body.parentNode; // Returns the <html> element
document.body.parentElement; // Returns the <html> element
document.documentElement.parentNode; // Returns the Document node
document.documentElement.parentElement; // Returns null (<html> does not have a parent ELEMENT node)
In most cases, it does not matter which property you use, however, parentNode 
is probably the most popular.
This property is read-only.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
node
.parentElement
Technical Details
Return Value:
An Element object, representing the parent element node of a node, or
null
if the node has no parent
Browser Support
element.parentElement
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Attribute value
Examples
Get the value of the first attribute:
let value = element.attributes[0].value;
Try it Yourself 
Get the value of the "id" attribute:
let value = element.getAttributeNode("id").value;
Try it Yourself 
More examples below.
Description
The
value
property sets or returns the value of an attribute.
Syntax
Return the attribute value:
attribute
.value
Set the attribute value:
attribute
.value =
value
Property
Property
Description
value
The value of the attribute.
Return Value
Type
Description
A string
The value of the attribute.
More Examples
Change the value of the src attribute of an image:
Use the getNamedItem() method:
const nodeMap = document.getElementById("light").attributes;
let value = nodeMap.getNamedItem("src").value;
Try it Yourself 
Use the getAttributeNode() method:
const element = document.getElementById("light");
element.getAttributeNode("src").value = "pic_bulbon.gif";
Try it Yourself 
Ligh On
Browser Support
attribute
.value
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attribute specified
Example
Is the style attribute specified?:
document.getElementById("myDiv").getAttributeNode("style").specified
Try it Yourself 
Description
The
specified
property returns
true
if an attribute is specified.
Syntax
attribute
.specified
Return Value
Type
Description
A boolean
true
if the attribute is specified.
Otherwise it returns an error.
Browser Support
attribute
.specified
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element click()
Example
Simulate a mouse-click when moving the mouse pointer over a checkbox:
<input type="checkbox" id="myCheck" onmouseover="myFunction()";
<script>
function myFunction() {
document.getElementById("myCheck").click();
}
</script>
Try it Yourself 
Description
The
click()
method simulates a mouse-click on an element.
This method can be used to execute a click on an element as if the user 
manually clicked on it.
Syntax
element
.click()
Parameters
NONE
Return Value
NONE
Browser Support
element.click()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element clientLeft
Example
Display the width of myDIV's top and left border:
const elmnt = document.getElementById("myDIV");
let text = "Border top width: " + elmnt.clientTop + "px<br>";
text += "Border left width: " + elmnt.clientLeft + "px";
Try it Yourself 
More examples below.
Description
The
clientLeft
property returns the width of the element's left border, in pixels.
The
clientLeft
property does not include the element's left padding or left margin.
The
clientLeft
property is read-only.
Syntax
element
.clientLeft
Return Value
Type
Description
Number
The width of the element's left border, in pixels.
More Examples
In this example, the text direction of "myDIV" is right-to-left, and it has a scrollbar:
let left = document.getElementById("myDIV").clientLeft;
Try it Yourself 
Browser Support
element.clientLeft
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element clientTop
Example
Get the width of myDIV's top and left border:
const element = document.getElementById("myDIV");
let text = "clientTop: " + element.clientTop + "px<br>";
text += "clientLeft: " + element.clientLeft + "px";
Try it Yourself 
Description
The
clientTop
property returns the width of the top border of an element, in pixels.
The
clientTop
property does not include the element's top padding or top margin.
The
clientTop
property is read-only.
Syntax
element
.clientTop
Return Value
Type
Description
Number
The width of an element's top border, in pixels.
Browser Support
element.clientTop
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element remove()
Example
Remove an element from the document:
const element = document.getElementById("demo");
element.remove();
Try it Yourself 
Description
The
remove()
method removes an element (or node) from the document.
Syntax
element
.remove()
or
node
.remove()
Parameters
NONE
Return Value
NONE
Browser Support
element.remove()
is a DOM Living Standard feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
element.remove()
is not supported in Internet Explorer 11 (or earlier).
HTML DOM Element scrollIntoView
Example
Scroll the element with id="content" into the visible area of the browser window:
const element = document.getElementById("content");
element.scrollIntoView();
Try it Yourself 
More examples below.
Description
The
scrollIntoView()
method scrolls an element into the visible area of the browser window.
Syntax
element
.scrollIntoView(
align
)
Parameters
Parameter
Description
align
Optional.
A boolean that indicates the type of the align:
true - the top of the element will be aligned to the top of the visible area of the scrollable ancestor
false - the bottom of the element will be aligned to the bottom of the visible area of the scrollable ancestor.
If omitted, it will scroll to the top of the element.
Note:
Depending on the layout of other elements, some elements may not be scrolled completely to the top or to the bottom.
Return Value
NONE
More Examples
Example
Scroll to the top or to the bottom of an element:
const element = document.getElementById("content");
function scrollToTop() 
  {
element.scrollIntoView(true);
}
function scrollToBottom() {
element.scrollIntoView(false);
}
Try it Yourself 
Browser Support
element.scrollIntoView()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element
removeAttribute()
Method
Example
Remove the class attribute from an <h1> element:
document.getElementsByTagName("H1")[0].removeAttribute("class");
Try it Yourself 
Remove the href attribute from an <a> element:
document.getElementById("myAnchor").removeAttribute("href");
Try it Yourself 
Description
The
removeAttribute()
method removes an attribute from an element.
The Difference Between removeAttribute() and removeAttributeNode()
The
removeAttribute()
method removes an attribute, and does not have a return value.
The
removeAttributeNode()
method removes an
Attr object
, and returns the removed object.
The result will be the same.
Syntax
element
.removeAttribute(
name
)
Parameters
Parameter
Description
name
Required.
The name of the attribute.
Return Value
NONE
Browser Support
element.removeAttribute()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element scrollTop
Example
Get the number of pixels the content of "myDIV" is scrolled:
const element = document.getElementById("myDIV");
let x = elmnt.scrollLeft;
let y = elmnt.scrollTop;
Try it Yourself 
Scroll the contents of "myDIV"
TO
50 pixels horizontally and 10 pixels vertically:
const element = document.getElementById("myDIV");
element.scrollLeft = 50;
element.scrollTop = 10;
Try it Yourself 
Scroll the contents of "myDIV"
BY
50 pixels horizontally and 10 pixels vertically:
const element = document.getElementById("myDIV");
element.scrollLeft += 50;
element.scrollTop += 10;
Try it Yourself 
More examples below.
Description
The
scrollTop
property sets or returns the number of pixels an element's content is scrolled vertically.
Syntax
Return the scrollTop property:
element
.scrollTop
Set the scrollTop property:
element
.scrollTop =
pixels
Property Values
Value
Description
pixels
The number of pixels the element's content is scrolled vertically.
If the number is negative, the number is set to 0.
If the element cannot be scrolled, the number is set to 0.
If the number is greater than maximum allowed, the number is set to the maximum.
Return Value
Type
Description
Number
The number of pixels the element's content is scrolled vertically.
More Examples
Example
Scroll the contents of <body> by 30 pixels horizontally and 10 
pixels vertically:
const html = document.documentElement;
html.scrollLeft += 30;
html.scrollTop += 10;
Try it Yourself 
Example
Toggle between class names on different scroll positions - When the user 
scrolls down 50 pixels from the top of the page, the class name "test" will be added to an 
element (and removed when scrolled up again):
window.onscroll = function() {myFunction()};
function myFunction() {
if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
document.getElementById("myP").className = "test";
} else {
document.getElementById("myP").className = "";
}
}
Try it Yourself 
Example
Slide in an element when the user has scrolled down 350 pixels from the top of the page 
(add the slideUp class):
window.onscroll = function() {myFunction()};
function myFunction() {
if (document.body.scrollTop > 350 || document.documentElement.scrollTop > 350) {
document.getElementById("myImg").className = "slideUp";
}
}
Try it Yourself 
Browser Support
element.scrollTop
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element tagName
Examples
Get the tagName of the "demo" element:
let name = document.getElementById("demo").tagName;
Try it Yourself 
Find which element triggered an event:
const element = event.target;
let name = element.tagName;
Try it Yourself 
Description
The
tagName
property returns the tag name of an element.
The
tagName
property returns the tag name in UPPERCASE.
The
tagName
property is read-only.
Syntax
element
.tagName
Return Value
Type
Description
String
The tag name of the element (in uppercase).
Browser Support
element.tagName
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attributes setNamedItem()
Examples
Set a H1's class attribute:
const nodeMap = document.getElementsByTagName("H1")[0].attributes;
const node = document.createAttribute("class");
node.value = "democlass";
nodeMap.setNamedItem(node);
Try it Yourself 
It is easier to use
element
.setAttribute():
const element = document.getElementsByTagName("H1")[0];
element.setAttribute("class", "democlass");
Try it Yourself 
Description
The
setNamedItem()
method adds an attribute node to a NamedNodeMap.
If the attribute node already exists, it will be replaced, and the replaced attribute node is returned,
otherwise the return value is
null
.
Syntax
namednodemap
.setNamedItem(
node
)
Parameters
Parameter
Description
node
Required.
The node to add or replace in the NamedNodeMap.
Return Value
Type
Description
A node
The replaced node (if any).
Otherwise
null
.
Browser Support
attributes
.setNamedItem
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
animation
Property
Example
Changing the animation of a <div> element, using the shorthand property:
document.getElementById("myDIV").style.animation = "mynewmove 4s 2";
Try it Yourself 
Description
The animation property is a shorthand property for six of the animation properties:
animationName
animationDuration
animationTimingFunction
animationDelay
animationIterationCount
animationDirection
Note:
Always specify the animationDuration property, otherwise the duration is 0, and will never be played.
Syntax
Return the animation property:
object
.style.animation
Set the animation property:
object
.style.animation
= "name duration timingFunction delay iterationCount direction fillMode playState
"
Property Values
Value
Description
animationName
Specifies the name of the keyframe you want to bind to the selector
animationDuration
Specifies how many seconds or milliseconds an animation takes to complete
animationTimingFunction
Specifies the speed curve of the animation
animationDelay
Specifies a delay before the animation will start
animationIterationCount
Specifies how many times an animation should be played
animationDirection
Specifies whether or not the animation should play in reverse on alternate cycles
animationFillMode
Specifies what values are applied by the animation outside the time it is executing
animationPlayState
Specifies whether the animation is running or paused
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none 0 ease 0 1 normal none running
Return Value:
A String, representing the animation property of an element
CSS Version
CSS3
Browser Support
animation
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation property
Style
alignSelf
Property
Example
Set the alignments for one of the items inside a flexible element to fit the 
container:
document.getElementById("myBlueDiv").style.alignSelf = "stretch";
Try it Yourself 
Description
The alignSelf property specifies the alignment for the selected item inside the flexible container.
Note:
The alignSelf property overrides the flexible container's alignItems property.
Syntax
Return the alignSelf property:
object
.style.alignSelf
Set the alignSelf property:
object
.style.alignSelf = "auto|stretch|center|flex-start|flex-end|baseline|initial|inherit"
Property Values
Value
Description
auto
Default. The element inherits its parent container's align-items property, or "stretch" if it has no parent container
stretch
The element is positioned to fit the conatiner
center
The element is positioned at the center of the container
flex-start
The element is are positioned at the beginning of the container
flex-end
The element is positioned at the end of the container
baseline
The element is positioned at the baseline of the container
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the align-self property of an element
CSS Version
CSS3
Browser Support
alignSelf
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
align-self property
HTML DOM STYLE Reference:
alignContent property
HTML DOM STYLE Reference:
alignItems property
HTML DOM NodeList entries()
 The NodeList Object
Examples
List the entries of a document's child nodes:
const list = document.body.childNodes;
for (let x of list.entries()) {
text += x[0] + " " + x[1];
}
Try it Yourself 
List the names of a document's child nodes:
const list = document.body.childNodes;
for (let x of list.entries()) {
text += x[0] + " " + x[1].nodeName;
}
Try it Yourself 
List the values of a document's child nodes:
const list = document.body.childNodes;
for (let x of list.entries()) {
text += x[0] + " " + x[1].nodeValue;
}
Try it Yourself 
More examples below.
Description
The
entries()
method returns an Iterator with the key/value pairs from a
NodeList
.
Syntax
nodelist
.entries()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the key/value pairs from the list.
More examples
Example
Get the keys of the <body> element's child nodes:
const list = document.body.childNodes;
for (let x of list.keys()) {
... code ...
}
Try it Yourself 
Example
Get the values of the <body> element's child nodes:
const list = document.body.childNodes;
for (let x of list.values()) {
... code ...
}
Try it Yourself 
Browser Support
nodelist.entries()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
nodelist.entries()
is not supported in Internet Explorer 11 (or earlier).
 The NodeList Object
HTML DOM Element firstChild
Example
Return the HTML content of the first child node of an <ul> element:
document.getElementById("myList").firstChild.innerHTML;
Try it Yourself 
Get the text of the first child node of a <select> element:
let text = document.getElementById("mySelect").firstChild.text;
Try it Yourself 
More examples below.
Description
The
firstChild
property returns the first child node of a node.
The
firstChild
property returns a node object.
The
firstChild
property is read-only.
The
firstChild
property is the same as
childNodes[0]
.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
firstChild vs firstElementChild
firstChild
returns the first child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
firstElementChild
returns the first child
element
(not text and comment nodes).
lastChild vs lastElementChild
lastChild
returns the last child
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
lastElementChild
returns the last child
element
(not text and comment nodes).
Syntax
element
.firstChild
or
node
.firstChild
Return Value
Type
Description
Node
The first child of a node.
null
if no child exists.
More Examples
This example demonstrates how whitespace may interfere.
Try to get the node name of the first child node of "myDIV":
<div id="myDIV">
<p>Looks like first child</p>
<p>Looks like last Child</p>
</div>
<script>
let text = document.getElementById("myDIV").firstChild.nodeName;
</script>
Try it Yourself 
However, if you remove the whitespace from the source, there are no #text 
nodes in "myDIV":
<div id="myDIV"><p>First child</p><p>Last Child</p></div>
<script>
let text = document.getElementById("myDIV").firstChild.nodeName;
</script>
Try it Yourself 
Browser Support
element.firstChild
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element getAttribute()
Examples
Get the value of the class attribute of an element:
let text = element.getAttribute("class");
Try it Yourself 
Get the value of the target attribute of an <a> element:
let text = myAnchor.getAttribute("target");
Try it Yourself 
More examples below.
Description
The
getAttribute()
method returns the value of an element's attribute.
Syntax
element
.getAttribute(
name
)
Parameters
Parameter
Description
name
Required.
The name of the attribute.
Return Value
Type
Description
String
The attribute's value.
null
if the attribute does not exist.
More Examples
Get the value of the onclick attribute of a <button> element:
let text = myButton.getAttribute("onclick");
Try it Yourself 
Browser Support
element
.getAttribute
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element hasAttributes()
Example
Does the <body> element have attributes?
let answer = document.body.hasAttributes();
Try it Yourself 
Description
The
hasAttributes()
method returns
true
if a node has attributes,
otherwise
false
.
The
hasAttributes()
method always returns
false
if the node is not an element node.
Syntax
element
.hasAttributes()
or
node
.hasAttributes()
Parameters
NONE
Return Value
Type
Description
Boolean
true
if the element has attributes, otherwise
false
.
Browser Support
element.hasAttributes()
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element innerText
Example
Get the inner text of an element:
let text = element.innerText;
Try it Yourself 
More examples below.
Description
The
innerText
property sets or returns the text content of an element.
The Differences Between
innerHTML, innerText and textContent
See below
Syntax
Return the text content of an element or node:
element
.innerText
or
node
.innerText
Set the text content of an element or node:
element
.innerText =
text
or
node
.innerText =
text
Property Value
Property
Description
text
The text content of the element.
Return Value
Type
Description
String
The text content of the element and all descendants, except for <script> and <style> elements.
The Differences Between
innerHTML, innerText and textContent
The innerHTML property returns:
The text content of the element, including all spacing and inner HTML tags.
The innerText property returns:
Just the text content of the element and all its children, without CSS hidden text spacing and tags,
except <script> and <style> elements.
The textContent property returns:
The text content of the element and all descendaces, with spacing and CSS hidden text,
but without tags.
HTML Example
<p id="myP"> This element has extra spacing and contains <span>a span 
  element</span>.</p>
JavaScript Examples
let text = document.getElementById("myP").innerText;
let text = document.getElementById("myP").innerHTML;
let text = document.getElementById("demo").textContent;
Try it Yourself 
In the example above:
The innerText property returns:
This element has extra spacing and contains a span element.
The innerHTML property returns:
This element has extra spacing and contains <span>a span element</span>.
The textContent property returns:
This element has extra spacing and contains a span element.
Browser Support
element.innerText
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
HTML DOM Element insertAdjacentElement()
Example
Insert a span element after the header:
const span = document.getElementById("mySpan");
const h2 = document.getElementById("myH2");
h2.insertAdjacentElement("afterend", span);
Try it Yourself 
More examples below.
Description
The
insertAdjacentElement()
method inserts a an element into a specified position.
Legal positions:
Value
Description
afterbegin
After the beginning of the element (first child)
afterend
After the element
beforebegin
Before the element
beforeend
Before the end of the element (last child)
Syntax
element
.insertAdjacentElement(
position, element
)
or
node
.insertAdjacentElement(
position, element
)
Parameters
Parameter
Description
position
Required.
A position relative to the element:
afterbegin
afterend
beforebegin
beforeend
element
The element to insert.
More Examples
Example
Using "afterbegin":
const span = document.getElementById("mySpan");
const h2 = document.getElementById("myH2");
h2.insertAdjacentElement("afterbegin", span);
Try it Yourself 
Example
Using "beforebegin":
const span = document.getElementById("mySpan");
const h2 = document.getElementById("myH2");
h2.insertAdjacentElement("beforebegin", span);
Try it Yourself 
Example
Using "beforeend":
const span = document.getElementById("mySpan");
const h2 = document.getElementById("myH2");
h2.insertAdjacentElement("beforeend", span);
Try it Yourself 
Browser Support
element.insertAjacentElement()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element insertAdjacentText()
Example
Insert text after a header element:
const h2 = document.getElementById("myH2");
let text = "My inserted text";
h2.insertAdjacentText("afterend", text);
Try it Yourself 
Description
The
insertAdjacentText()
method inserts a 
a text into a specified position.
Legal positions:
Value
Description
afterbegin
After the beginning of the element (first child)
afterend
After the element
beforebegin
Before the element
beforeend
Before the end of the element (last child)
Syntax
element
.insertAdjacentText(
position, text
)
or
node
.insertAdjacentText(
position, text
)
Parameters
Parameter
Description
position
Required.
A position relative to the element:
afterbegin
afterend
beforebegin
beforeend
text
The text to insert.
More Examples
Example
Using "afterbegin":
const h2 = document.getElementById("myH2");
let text = "My inserted text";
h2.insertAdjacentText("afterbegin", text);
Try it Yourself 
Example
Using "beforebegin":
h2.insertAdjacentText("beforebegin", text);
Try it Yourself 
Example
Using "beforeend":
h2.insertAdjacentText("beforeend", text);
Try it Yourself 
Browser Support
element.insertAjacentText()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element isDefaultNamespace()
Example
Is the defined namespace the default namespace?
let answer = element.isDefaultNamespace("http://www.w3.org/1999/xhtml");
Try it Yourself 
Description
The
isDefaultNamespace()
method returns
true
if the elements's namespace is default.
Syntax
element
.isDefaultNamespace(
namespaceURI
)
or
node
.isDefaultNamespace(
namespaceURI
)
Parameters
Parameter
Description
namespaceURI
Required.
The URI of the namespace to check.
Return Value
Type
Description
Boolean
true
if the namespace is default,
otherwise
false
.
Browser Support
element.isDefaultNamespace()
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element isContentEditable
Example
Is "myP" element editable:
let answer = document.getElementById("myP").isContentEditable;
Try it Yourself 
Description
The
isContentEditable
property returns
true
if the content of an 
element is editable.
The
isContentEditable
property is read-only.
Syntax
element
.isContentEditable
Return Value
Type
Description
Boolean
true
if the content of an element is editable,
otherwise
false
.
Browser Support
element.isContentEditable()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTMLCollection item()
Example
Get the HTML content of the first <p> element:
const collection = document.getElementsByTagName("p").item(0);
let text = collection.innerHTML;
Try it Yourself 
This shorthand produces the same result:
const collection = document.getElementsByTagName("p")[0];
let text = collection.innerHTML;
Try it Yourself 
Change the HTML content of the first <p> element:
document.getElementsByTagName("p")[0].innerHTML = "Paragraph changed";
Try it Yourself 
More examples below.
Description
The
item()
method returns the element at a specified index in an
HTMLCollection
.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
HTMLCollection
.item(
index
)
or
HTMLCollection
[
index
]
Parameters
Parameter
Description
index
Required.
The index of the element to return.
The index starts at 0.
Return Value
Type
Description
Element
The element at the specified index.
null
if the index is out of range.
More Examples
Example
Loop over all elements with class="myclass", and change their font size:
const collection = document.getElementsByClassName("myclass");
for (let i = 0; i < collection.length; i++) {
collection.item(i).style.fontSize ="24px";
}
Try it Yourself 
Example
Get the content of the second <p> element inside "myDIV":
const div = document.getElementById("myDIV");
const collection = div.getElementsByTagName("p");
let text = collection[1].innerHTML;
Try it Yourself 
Browser Support
HTMLCollection.item()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
DOM
HTMLCollection
HTMLCollection
An HTMLCollection is an array-like collection (list) of HTML elements.
The elements in a collection can be accessed by index (starts at 0).
The length Property
returns the number of elements in the collection.
HTMLCollection vs NodeList
An HTMLCollection is almost the same as a
NodeList
.
See the description below.
Properties and Methods
The following properties and methods can be used on an HTMLCollection:
Name
Description
length
Returns the number of elements in an HTMLCollection
item()
Returns the element at a specified index
namedItem()
Returns the element with a specified id
Examples
Example
Get all parapgraphs:
const elements = document.getElementsByTagName("p");
Try it Yourself 
Example
The number of <p> elements in the document are:
const elements = document.getElementsByTagName("p");
let numb = elements.length;
Try it Yourself 
Example
Loop over the elements in an HTMLCollection:
const elements = document.getElementsByTagName("*");
for (let i = 0; i < elements.length; i++) {
.. some code ..
}
Try it Yourself 
The Difference Between an HTMLCollection and a NodeList
A
NodeList
and an
HTMLcollection
is very much the same thing.
Both are array-like collections (lists) of nodes (elements) extracted from a 
document. The nodes can be accessed by index numbers. The index starts at 0.
Both have a
length
property that returns the number of elements in the list (collection).
An HTMLCollection is a collection of
document elements
.
A NodeList is a collection of
document nodes
(element nodes, attribute nodes, and text nodes).
HTMLCollection items can be accessed by their name, id, or index number.
NodeList items can only be accessed by their index number.
An HTMLCollection is always a
live
collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.
A NodeList is most often a
static
collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.
The
getElementsByClassName()
and
getElementsByTagName()
methods return a live HTMLCollection.
The
querySelectorAll()
method returns a static NodeList.
The
childNodes
property returns a live NodeList.
HTMLCollection length
Examples
How many paragraphs in the document:
let number = document.getElementsByTagName("p").length;
Try it Yourself 
Loop over elements with class="myclass" and change their font size:
const collection = document.getElementsByClassName("myclass");
for (let i = 0; i < collection.length; i++) {
collection[i].style.fontSize = "24px";
}
Try it Yourself 
Description
The
length
property returns the number of elements in an
HTMLCollection
.
The
length
property is read-only.
The
length
property is useful when you want to loop through an HTMLCollection.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The elements in a collection can be accessed by index. The index starts at 0.
Syntax
HTMLCollection
.length
Return Value
Type
Description
Number
The number of elements the HTMLCollection.
Browser Support
HTMLCollection.length
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTMLCollection namedItem()
Example
Get the content of the p element with id="myElement":
const collection = document.getElementsByTagName("p");
const element = collection.namedItem("myElement");
let text = element.innerHTML;
Try it Yourself 
This shorthand produces the same result:
const collection = document.getElementsByTagName("p");
const element = collection["myElement"];
let text = element.innerHTML;
Try it Yourself 
Description
The
namedItem()
method returns a named element from
an
HTMLCollection
.
The
namedItem()
method uses the id or name attribute to identify the element.
HTMLCollection
An
HTMLCollection
is an array-like collection (list) of HTML elements.
The
length Property
returns the number of elements in the collection.
The elements can be accessed by index (starts at 0).
An HTMLCollection is live. It is automatically updated when the document is changed.
Syntax
HTMLCollection
.namedItem(
name
)
or
HTMLCollection
[name]
Parameters
Parameter
Description
name
Required.
The value of the id attribute, or the name attribute, of the element.
Return Value
Type
Description
Element
The element with the specified id or name.
null
if the element does not exist.
Browser Support
HTMLCollection.namedItem()
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM NodeList
NodeList
A NodeList is an array-like collection (list) of Node Objects.
The nodes in a NodeList can be accessed by index (starts at 0).
The length property
returns the number of nodes in a NodeList.
NodeList vs. HTMLCollection
A NodeList is almost the same as an
HTMLCollection
.
See the description below.
Properties and Methods
The following properties and methods can be used on a NodeList:
Name
Description
entries()
Returns an Iterator with the key/value pairs from the list
forEach()
Executes a callback function for each node in the list
item()
Returns the node at a specified index
keys()
Returns an Iterator with the keys from the list
length
Returns the number of nodes in a NodeList
values()
Returns an Iterator with the values from the list
Example
Select all
<p>
nodes in a document:
const myNodeList = document.querySelectorAll("p");
The elements in the NodeList can be accessed by an index number.
To access the 
second <p> node you can write:
myNodeList[1]
Try it Yourself 
Note:
The index starts at 0.
HTML DOM Node List Length
The
length
property defines the number of nodes in a node list:
Example
myNodelist.length
Try it Yourself 
The
length
property is useful when you want to loop through the nodes in a node 
list:
Example
Change the color of all <p> elements in a node 
list:
const myNodelist = document.querySelectorAll("p");
for (let i = 0; i < myNodelist.length; i++) {
myNodelist[i].style.color = "red";
}
Try it Yourself 
The Difference Between an HTMLCollection and a NodeList
A
NodeList
and an
HTMLcollection
is very much the same thing.
Both are array-like collections (lists) of nodes (elements) extracted from a 
document. The nodes can be accessed by index numbers. The index starts at 0.
Both have a
length
property that returns the number of elements in the list (collection).
An HTMLCollection is a collection of
document elements
.
A NodeList is a collection of
document nodes
(element nodes, attribute nodes, and text nodes).
HTMLCollection items can be accessed by their name, id, or index number.
NodeList items can only be accessed by their index number.
An HTMLCollection is always a
live
collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.
A NodeList is most often a
static
collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.
The
getElementsByClassName()
and
getElementsByTagName()
methods return a live HTMLCollection.
The
querySelectorAll()
method returns a static NodeList.
The
childNodes
property returns a live NodeList.
Live NodeList
In some cases, the NodeList is
live
: A change in the DOM updates the NodeList.
The
childNodes
method returns a live NodeList.
HTML DOM NodeList keys()
 The NodeList Object
Examples
List the keys of the document's child nodes:
const list = document.body.childNodes;
for (let x of list.keys()) {
text += x;
}
Try it Yourself 
List the documents's child nodes:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x;
}
Try it Yourself 
Description
The
keys()
method returns an Iterator with the keys from a
NodeList
.
Syntax
nodelist
.keys()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the keys from the list.
Browser Support
nodelist.keys()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
nodelist.keys()
is not supported in Internet Explorer 11 (or earlier).
 The NodeList Object
HTML DOM NodeList forEach()
 The NodeList Object
Examples
Execute a function for each of the document's child nodes:
const list = document.body.childNodes;
list.forEach(
function(node, index) {
text += index + " " + node;
}
);
Try it Yourself 
List the names of the document's child nodes:
const list = document.body.childNodes;
list.forEach(
function(node) {
text += node.nodeName;
}
);
More examples below.
Try it Yourself 
Description
The
forEach()
method executes a callback function for each node in a
NodeList
.
Syntax
nodelist
.forEach(
function(currentValue, index, arr), thisValue
)
Parameters
function()
Required.
A function to run for each node.
currentValue
Required.
The value of the current node.
index
Optional.
The index of the current node.
arr
Optional.
The NodeList of the current node.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
NONE
More Examples
Example
List the types of the document's child nodes:
const list = document.body.childNodes;
list.forEach(
function(node) {
text += node.nodeType;
}
);
Try it Yourself 
Browser Support
nodelist.forEach()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
nodelist.forEach()
is not supported in Internet Explorer 11 (or earlier).
 The NodeList Object
Style
background
Property
Example
Style the background of a document:
document.body.style.background = "#f3f3f3 url('img_tree.png') no-repeat right 
top";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The background property sets or returns up to eight separate background 
properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any 
order):
DOM Property
CSS Property
backgroundAttachment
background-attachment
backgroundClip
background-clip
backgroundColor
background-color
backgroundImage
background-image
backgroundOrigin
background-origin
backgroundPosition
background-position
backgroundRepeat
background-repeat
backgroundSize
background-size
The properties above can also be set with separate style properties. The use 
of separate properties is highly recommended for non-advanced authors for better 
controllability.
Syntax
Return the background property:
object
.style.background
Set the background property:
object
.style.background
= "color image
repeat attachment position size origin clip
|initial|inherit"
Property Values
Value
Description
attachment
Sets if a background image is fixed or scrolls
clip
Sets the painting area of a background image
color
Sets the background color of an element
image
Sets the background image for an element
origin
Sets the background positioning area
position
Sets the starting position of a background image
repeat
Sets how a background image will be repeated
size
Sets the size of a background image
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
transparent none repeat scroll 0% 0% auto padding-box border-box
Return Value:
A String, representing the background of an element
CSS Version
CSS1
Browser Support
background
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Change the background of a DIV element:
document.getElementById("myDIV").style.background = "url('smiley.gif') blue repeat-x center";
Try it Yourself 
Example
Set a background color for a document:
document.body.style.backgroundColor = "red";
Try it Yourself 
Example
Set a background image for a document:
document.body.style.backgroundImage = "url('img_tree.png')";
Try it Yourself 
Example
Set a background-image to no-repeat:
document.body.style.backgroundRepeat = "repeat-y";
Try it Yourself 
Example
Set the background-image to be fixed (will not scroll):
document.body.style.backgroundAttachment = "fixed";
Try it Yourself 
Example
Change the position of a background-image:
document.body.style.backgroundPosition = "top right";
Try it Yourself 
Example
Return the background property values of a document:
document.body.style.background;
Try it Yourself 
Style
backgroundSize
Property
Example
Specify the size of a background image:
document.getElementById("myDIV").style.backgroundSize = "60px 120px";
Try it Yourself 
Description
The backgroundSize property sets or returns the size of the background images.
Syntax
Return the backgroundSize property:
object
.style.backgroundSize
Set the backgroundSize property:
object
.style.backgroundSize = "auto|
length
|cover|contain|intial|inherit"
Property Values
Value
Description
auto
Default value. The background-image contains its width and height
length
Sets the width and height of the background image. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"
percentage
Sets the width and height of the background image in percent of the parent element. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"
cover
Scale the background image to be as large as possible so that the background area is completely covered by the background image. Some parts of the background image may not be in view within the background positioning area
contain
Scale the image to the largest size such that both its width and its height can fit inside the content area
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the background-size property of an element
CSS Version
CSS3
Browser Support
backgroundSize
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
backgroundColor
Property
Example
Set a background color for a document:
document.body.style.backgroundColor = "red";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The backgroundColor property sets or returns the background color of an element.
Syntax
Return the backgroundColor property:
object
.style.backgroundColor
Set the backgroundColor property:
object
.style.backgroundColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the background color.
  Look at
CSS Color Values
for a  complete list of possible color values
transparent
Default. The background color is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
transparent
Return Value:
A String, representing the background color
CSS Version
CSS1
Browser Support
backgroundColor
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Set a background color of a specific <div> element:
document.getElementById("myDiv").style.backgroundColor = "lightblue";
Try it Yourself 
Example
Return the background color of a specific <div> element:
let color = document.getElementById("myDiv").style.backgroundColor;
Try it Yourself 
Example
Return the background color of a document:
let color = document.body.style.backgroundColor;
Try it Yourself 
Style
backgroundImage
Property
Example
Set a background image for a document:
document.body.style.backgroundImage = "url('img_tree.png')";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The backgroundImage property sets or returns the background image of an element.
Tip:
In addition to the background-image you should also specify a 
background-color. The background-color will be used if the image is unavailable.
Syntax
Return the backgroundImage property:
object
.style.backgroundImage
Set the backgroundImage property:
object
.style.backgroundImage = "url('
URL
')|none|initial|inherit"
Property Values
Value
Description
url(
'URL'
)
The location of the image file
none
No background image. This is default
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the background image
CSS Version
CSS1
Browser Support
backgroundImage
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Set a background image of a specific <div> element:
document.getElementById("myDiv").style.backgroundImage = "url('img_tree.png')";
Try it Yourself 
Example
Return the background image of a specific <div> element:
let img = document.getElementById("myDiv").style.backgroundImage;
Try it Yourself 
Example
Return the background image of a document:
let img = document.body.style.backgroundImage;
Try it Yourself 
HTML DOM Element lang
Example
Ge the language code of an element:
let text = element.lang;
Try it Yourself 
Description
The
lang
property sets or returns the value of an element's lang attribute.
The lang attribute specifies the element's language code, like
"en" for English, "es" for Spanish, or "fr" for French.
Syntax
Return the lang property:
element
.lang
Set the lang property:
element
.lang =
lang_code
Property Value
Value
Description
lang_code
The value for the element's lang attribute.
See our
Full Language Code Reference
Return Value
Type
Description
String
The value of the element's lang attribute.
Browser Support
element.lang
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element namespaceURI
Examples
Get the namespace URI of an element in a HTML document:
let uri = element.namespaceURI;
Try it Yourself 
Get the namespace URI of an element an XHTML document:
let uri = element.namespaceURI;
Try it Yourself 
Description
The
namespaceURI
property returns the URI of an elements namespace.
The
namespaceURI
property is read-only.
The
namespaceURI
property has no practical use in HTML.
Syntax
element
.namespaceURI
Return Value
Type
Description
String
The URI of the elements's namespace.
null
if the element is not in a namespace.
Browser Support
element.namespaceURI
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM
nodeValue
Property
Example
Return the node value of the first <button> element in the document:
document.getElementsByTagName("BUTTON")[0].childNodes[0].nodeValue;
Try it Yourself 
More examples below.
Description
The
nodeValue
property sets or returns the value of a node.
If the node is an element node, the nodeValue property will return null.
Note:
If you want to return the text of an element, remember 
that text is always inside a
Text node
, and you will have to return the
Text node's
node value (
element
.childNodes[0].nodeValue).
For other node types, the nodeValue property will return different values for different node types.
Syntax
Return the node value:
node
.nodeValue
Set the node value:
node
.nodeValue =
value
Property
Pryperty
Description
value
The node value.
Return Value
Type
Description
String
The node value.
null
for element and document nodes.
The attribute value for attribute nodes.
The text content for text nodes.
The text content for comment nodes.
More Examples
Get the node name, value and type of "myDIV"s first child:
const x = document.getElementById("myDIV").firstChild;
let text = "";
text += "Name: " + x.nodeName + "<br>";
text += "Value: " + x.nodeValue + "<br>";
text += "Type: " + x.nodeType;
Try it Yourself 
Browser Support
element.nodeValue
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element nextElementSibling
Example
Return the HTML content of the next sibling:
let text = element.nextElementSibling.innerHTML;
Try it Yourself 
Description
The
nextElementSibling
property returns the next element in the same tree level.
The
nextElementSibling
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
nextSibling vs nextElementSibling
nextSibling
returns the next
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
nextElementSibling
returns the next
element
(not text and comment nodes).
previousSibling vs previousElementSibling
previousSibling
returns the previous
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
previousElementSibling
returns the previous
element
(not text and comment nodes).
Syntax
element
.nextElementSibling
Return Value
Type
Description
Element
The next sibling element.
null
if no next sibling exists.
Browser Support
element.nextElementSibling
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element nodeName
Example
Return the node name of a <p> element:
document.getElementById("myP").nodeName;
Try it Yourself 
Return the node name of the <body> element:
document.body.nodeName;
Try it Yourself 
Get the node names of the <body> element's child nodes:
const nodes = document.body.childNodes;
let text = "";
for (let i = 0; i < nodes.length; i++) {
text += nodes[i].nodeName + "<br>";
}
Try it Yourself 
More examples below.
Description
The
nodeName
property returns the name of a node:
The tagname (in upper case) for element nodes
The attribute name for attribute nodes
#text for text nodes
#comment for comment nodes
#document for document nodes
The
nodeName
property is read-only.
Syntax
element
.nodeName
or
node
.nodeName
Return Values
The tagname (in upper case) for element nodes
The attribute name for attribute nodes
#text for text nodes
#comment for comment nodes
#document for document nodes
More Examples
Get the node name, value and type of "myDIV"s first child node:
const x = document.getElementById("myDIV").firstChild;
let text = "";
text += "Name: " + x.nodeName + "<br>";
text += "Value: " + x.nodeValue + "<br>";
text += "Type: " + x.nodeType;
Try it Yourself 
Browser Support
element.nodeName
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element nextSibling
Example
Return the HTML content of the next sibling of a list item:
document.getElementById("item1").nextSibling.innerHTML;
Try it Yourself 
Description
The
nextSibling
property returns the next node on the same tree level.
The
nextSibling
returnes a node object.
The
nextSibling
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
nextSibling vs nextElementSibling
nextSibling
returns the next
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
nextElementSibling
returns the next
element
(not text and comment nodes).
previousSibling vs previousElementSibling
previousSibling
returns the previous
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
previousElementSibling
returns the previous
element
(not text and comment nodes).
Syntax
element
.nextSibling
or
node
.nextSibling
Return Value
Type
Description
Node
The next sibling of the element.
null
if no next sibling exists.
Browser Support
element.nextSibling
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
alignContent
Property
Example
Position the items of the flexible <div> element with space between the 
lines:
document.getElementById("main").style.alignContent = "space-between";
Try it Yourself 
Description
The alignContent property aligns the flexible container's items when the items do not use all available space on the cross-axis (vertically).
Tip:
Use the justifyContent property to align the items on the main-axis (horizontally).
Note:
There must be multiple lines of items for this property to have any effect.
Syntax
Return the alignContent property:
object
.style.alignContent
Set the alignContent property:
object
.style.alignContent = "stretch|center|flex-start|flex-end|space-between|space-around|initial|inherit"
Property Values
Value
Description
stretch
Default value. Items are stretched to fit the container
center
Items are positioned at the center of the container
flex-start
Items are positioned at the beginning of the container
flex-end
Items are positioned at the end of the container
space-between
Items are positioned with space between the lines
space-around
Items are positioned with space before, between, and after the lines
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
stretch
Return Value:
A String, representing the align-content property of an element
CSS Version
CSS3
Browser Support
alignContent
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
align-content property
HTML DOM STYLE Reference:
alignItems property
HTML DOM STYLE Reference:
alignSelf property
HTML DOM STYLE Reference:
justifyContent property
Style
animationDelay
Property
Example
Changing the animationDelay property of a <div> element:
document.getElementById("myDIV").style.animationDelay = "1s";
Try it Yourself 
Description
The animationDelay property defines when the animation will start.
The animationDelay value is defined in seconds (s) or milliseconds (ms).
Tip:
Negative values are allowed, -2s makes the animation start at once, but 
starts 2 seconds into the animation.
Syntax
Return the animationDelay property:
object
.style.animationDelay
Set the animationDelay property:
object
.style.animationDelay = "
time
|initial|inherit"
Property Values
Value
Description
time
Optional. Defines the number of seconds or milliseconds to wait before the animation will start. Default value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the animation-delay property of an element
CSS Version
CSS3
Browser Support
animationDelay
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-delay property
HTML DOMTokenList remove()
 The DOMTokenList Object
Examples
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Toggle "myStyle" on and off:
const list = element.classList;
list.toggle("myStyle");
Try it Yourself 
More examples below.
Description
The
remove()
method removes one (or more) tokens from a
DOMTokenList
.
Syntax
domtokenlist
.remove(token, ...)
Parameters
Parameter
Description
token
Required.
The token(s) to remove from the list.
Return Value
NONE
More Examples
Remove multiple classes from an element:
element.classList.remove("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Get the number of class names for an element:
let numb = element.classList.length;
Try it Yourself 
Does an an element has a "myStyle" class?
let x = element.classList.contains("myStyle");
Try it Yourself 
Remove "anotherClass" if an element has a "myStyle" class.
if (element.classList.contains("mystyle")) {
element.classList.remove("anotherClass");
}
Try it Yourself 
Browser Support
domtokenlist.remove()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.remove()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
Style
borderBottomColor
Property
Example
Change the color of the bottom border of a <div> element to red:
document.getElementById("myDiv").style.borderBottomColor = "red";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The borderBottomColor property sets or returns the color of the bottom border of an element.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottomColor
1.0
4.0
1.0
1.0
3.5
Syntax
Return the borderBottomColor property:
object
.style.borderBottomColor
Set the borderBottomColor property:
object
.style.borderBottomColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the bottom border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the current color of the element
transparent
The color of the bottom border is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
current color
Return Value:
A String, representing the color of an element's bottom border
CSS Version
CSS1
More Examples
Example
Return the bottom border color of a <div> element:
alert(document.getElementById("myDiv").style.borderBottomColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom-color property
HTML DOM reference:
border property
Style
borderBottomWidth
Property
Example
Change the width of the bottom border of a <div> element to 10px:
document.getElementById("myDiv").style.borderBottomWidth = "10px";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The borderBottomWidth property sets or returns the width of the bottom border of an element.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottomWidth
1.0
4.0
1.0
1.0
3.5
Syntax
Return the borderBottomWidth property:
object
.style.borderBottomWidth
Set the borderBottomWidth property:
object
.style.borderBottomWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin border
medium
Defines a medium border. This is default
thick
Defines a thick border
length
The width of the border in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's bottom border
CSS Version
CSS1
More Examples
Example
Change the width of the bottom border of a <div> element to thin:
document.getElementById("myDiv").style.borderBottomWidth = "thin";
Try it Yourself 
Example
Return the width of the bottom border of a <div> element:
alert(document.getElementById("myDiv").style.borderBottomWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom-width property
HTML DOM reference:
border property
Style
borderColor
Property
Example
Change the color of the four borders of a <div> element to red:
document.getElementById("myDiv").style.borderColor = "red";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The borderColor property sets or returns the color of an element's border.
This property can take from one to four values:
One value, like: p {border-color: red} - all four borders will be red
Two values, like: p {border-color: red transparent} -  top and bottom border will be red, left and right border will be transparent
Three values, like: p {border-color: red green blue}- top border will be red, left and right border will be green, bottom border will be blue
Four values, like: p {border-color: red green blue yellow} - top border will be red, right border will be green, bottom border will be blue, left border will be yellow
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderColor
1.0
4.0
1.0
1.0
3.5
Syntax
Return the borderColor property:
object
.style.borderColor
Set the borderColor property:
object
.style.borderColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the current color of the element
transparent
The color of the border is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
current color
Return Value:
A String, representing the color of an element's border
CSS Version
CSS1
More Examples
Example
Change the color of the top and bottom border to green, and left and right 
border to purple, of a <div> element:
document.getElementById("myDiv").style.borderColor = "green purple";
Try it Yourself 
Example
Return the border color of a <div> element:
alert(document.getElementById("myDiv").style.borderColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-color property
HTML DOM reference:
border property
Style
borderImageSlice
Property
Example
Specify the inward offsets of the image-border:
document.getElementById("myDIV").style.borderImageSlice = "50% 10%";
Try it Yourself 
Description
The borderImageSlice property specifies the inward offsets of the image-border.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImageSlice
Yes
11.0
Yes
6.0
15.0
Look at the
borderImage
property instead!
Syntax
Return the borderImageSlice property:
object
.style.borderImageSlice
Set the borderImageSlice property:
object
.style.borderImageSlice
= "number
|
%
|fill|initial|inherit"
Property Values
Value
Description
number
Numbers represent pixels in the image (if the image is a raster image) or vector coordinates (if the image is a vector image)
%
Percentages are relative to the size of the image: the width of the image for the horizontal offsets, the height for vertical offsets. Default value is 100%
fill
Causes the middle part of the border-image to be preserved
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
100%
Return Value:
A String, representing the border-image-slice property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image-slice property
HTML DOM Element dir
Example
Change the text direction of "myP" to "right-to-left":
document.getElementById("myP").dir = "rtl";
Try it Yourself 
Return the text direction of a document:
document.body.dir;
Try it Yourself 
Set the text direction of a document:
document.body.dir = "rtl";
Try it Yourself 
Description
The
dir
property sets or returns an elements's dir attribute.
The
dir
attribute specifies the text-direction.
Syntax
Return the dir property:
element
.dir
Set the dir property:
element
.dir = "ltr|rtl|auto"
Properties
Value
Description
ltr
Left-to-right text direction (default).
rtl
Right-to-left text direction.
auto
Let the browser figure out.
Return Value
Type
Description
String
The text direction of the element.
Browser Support
element.dir
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element offsetHeight
Example
Display the height and width of "myDIV", including padding and border:
const elmnt = document.getElementById("myDIV");
let text = "Height with padding and border: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding and border: " + elmnt.offsetWidth + "px";
Try it Yourself 
More examples below.
Description
The
offsetHeight
property returns the viewable height of an element (in pixels),
including padding, border and scrollbar, but not the margin.
The
offsetHeight
property id read-only.
Syntax
element
.offsetHeight
Return Value
Type
Description
Number
The viewable height of the element (in pixels) including padding, border and scrollbar.
The difference between clientHeight/clientWidth and offsetHeight/offsetWidth
Without a scrollbar:
const elmnt = document.getElementById("myDIV");
let text = "";
text += "Height with padding: " + elmnt.clientHeight + "px<br>";
text += "Height with padding and border: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding: " + elmnt.clientWidth + "px<br>";
text += "Width with padding and border: " + elmnt.offsetWidth + "px";
Try it Yourself 
With a scrollbar:
const elmnt = document.getElementById("myDIV");
let text = "";
text += "Height with padding: " + elmnt.clientHeight + "px<br>";
text += "Height with padding, border and scrollbar: " + elmnt.offsetHeight + "px<br>";
text += "Width with padding: " + elmnt.clientWidth + "px<br>";
text += "Width with padding, border and scrollbar: " + elmnt.offsetWidth + "px";
Try it Yourself 
Browser Support
element.offsetHeight
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element offsetLeft
Examples
Get the offsetLeft position of "myDIV":
const element = document.getElementById("myDIV");
let pos = element.offsetLeft;
Try it Yourself 
Get the positions of "myDIV":
const element = document.getElementById("myDIV");
let pos1=  element.offsetTop;
let pos2=  element.offsetLeft;
Try it Yourself 
Description
The
offsetLeft
property returns the left position (in pixels) relative to the parent.
The returned value includes:
the left position, and margin of the element
the left padding, scrollbar and border of the parent
The
offsetLeft
property is read-only.
Syntax
Return the left offset position:
element
.offsetLeft
Return Value
Type
Description
Number
The left position of the element, in pixels.
Browser Support
element.offsetLeft
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element
offsetParent
Property
Example
Get the offsetParent of "myDIV":
let node = document.getElementById("myDIV").offsetParent;
Try it Yourself 
Description
The
offsetParent
property returns the nearest ancestor that has a position other than static.
The
offsetParent
property returns
null
if the element is not visible
(display="none").
Syntax
element
.offsetParent
Return Value
Type
Description
Node
The nearest positioned ancestor.
Browser Support
element.offsetParent
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element outerHTML
Examples
Change the first h2 element and it's content:
document.getElementsByTagName("h2")[0] = "<h3>Changed!</h3>";
Try it Yourself 
Replace an element with a header:
element.outerHTML = "<h2>This is a h2 element</h2>";
Try it Yourself 
Alert the outer HTML of a <h1> element:
let html = document.getElementsByTagName("h1")[0].outerHTML;
alert(html);
Try it Yourself 
Alert the outer HTML of a <ul> element:
let html = document.getElementsByTagName("ul")[0].outerHTML;
alert(html);
Try it Yourself 
Description
The
outerHTML
property sets or returns the HTML element,
including attributes, start tag, and end tag.
Syntax
Return the outerHTML property:
element
.outerHTML
Set the outerHTML property:
element
.outerHTML =
text
Property Value
Value
Description
text
The new HTML content.
Return Value
Type
Description
String
The HTML content of the element, including attributes, start tag and end tag.
Browser Support
element.outerHTML
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM
outerText
Property
Example
Set the outer text of an element:
document.getElementById("myH1").outerText = "Changed content!";
Try it Yourself 
Description
The outerText property sets or returns the text content of the specified node.
This property is similar to the inner
innerText
property, in fact
getting
the outerText returns the same result as
getting
the innerText property.
There are an important difference when
setting
an element's 
outerText, because the element itself is removed.
Tip:
also check out the
outerHTML
property.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
outerText
43
11
Not supported
6
61
Syntax
Return the text content of a node:
node
.outerText
Set the text content of a node (replacing the entire node):
node
.outerText =
text
Property Values
Value
Type
Description
text
String
Specifies the text content to insert
Technical Details
Return Value:
A String, representing the text content of a node and all its descendants
HTML DOM
querySelectorAll()
Method
Example
Set the background color of the first element (in "myDiv") with class="example":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll(".example");
list[0].style.backgroundColor = "red";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
querySelectorAll()
method returns all child elements that matches a CSS selector(s).
The
querySelectorAll()
method returns a
NodeList
.
The
querySelectorAll()
method throws a SYNTAX_ERR exception if the selector(s) is invalid
NodeList
A
NodeList
is an array-like collection (list) of nodes.
The nodes in the list can be accessed by index. The index starts at 0.
The length Poperty
returns the number of nodes in the list.
Syntax
element
.querySelectorAll(
CSS selectors
)
Parameters
Parameter
Description
CSS selectors
Required.
One or more CSS selectors.
CSS selectors select HTML 
elements based on id, classes, types, attributes, values of attributes etc.
For a full list, go to our
CSS Selectors Reference
.
For multiple selectors, separate each selector with a comma (See "More Examples").
Return Value
Type
Description
NodeList
A collection of descendant elements that matches the CSS selector(s).
The NodeList is static (changes in the DOM has NO effect in the collection).
Throws a SYNTAX_ERR exception if the specified selector(s) is invalid.
More Examples
Example
Set the background color of the first <p> element in "myDIV":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll("p");
list[0].style.backgroundColor = "red";
Try it Yourself 
Example
Set the background of the first <p> element in "myDIV" with class="example":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll("p.example");
list[0].style.backgroundColor = "red"
Try it Yourself 
Example
How many elements with class="example" are there in "myDIV":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll(".example")
let len = list.length;
Try it Yourself 
Example
Set the background of all elements with class="example" in "myDIV":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll(".example");
for (let i = 0; i < list.length; i++) {
list[i].style.backgroundColor = "red";
}
Try it Yourself 
Example
Set the background color of all <p> elements in "myDIV":
const element = document.getElementById("myDIV");
const list = element.querySelectorAll("p");
for (let i = 0; i < list.length; i++) {
list[i].style.backgroundColor = "red";
}
Try it Yourself 
Example
Set the border style of all <a> elements in "myDIV" that have a "target" 
attribute:
const element = document.getElementById("myDIV");
const list = element.querySelectorAll("a[target]");
for (let i = 0; i < list.length; i++) {
list[i].style.border = "10px solid red";
}
Try it Yourself 
Example
Set the background color of all <h3> and <span> elements in a document:
const list = document.querySelectorAll("h3, span");
for (let i = 0; i < list.length; i++) {
list[i].style.backgroundColor = "red";
}
Try it Yourself 
Browser Support
element.querySelectorAll()
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element previousElementSibling
Example
Return the HTML content of the previous sibling:
let text = element.previousElementSibling.innerHTML;
Try it Yourself 
Description
The
previousElementSibling
property returns the previous element in the same tree level.
The
previousElementSibling
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
nextSibling vs nextElementSibling
nextSibling
returns the next
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
nextElementSibling
returns the next
element
(not text and comment nodes).
previousSibling vs previousElementSibling
previousSibling
returns the previous
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
previousElementSibling
returns the previous
element
(not text and comment nodes).
Syntax
element
.previousElementSibling
Return Value
Type
Description
Element
The previous sibling element.
null
if no previous sibling exists.
Browser Support
element.previousElementSibling
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM Element previousSibling
Example
Return the HTML content of the previous sibling of a list item:
document.getElementById("item2").previousSibling.innerHTML;
Try it Yourself 
Description
The
previousSibling
property returns the previous node on the same tree level.
The
previousSibling
property returns a node object.
The
previousSibling
property is read-only.
Nodes vs Elements
In the HTML DOM terminology:
Nodes
are all nodes (element nodes, text nodes, and comment nodes).
Whitespace between elements are also text nodes.
Elements
are only element nodes.
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
nextSibling vs nextElementSibling
nextSibling
returns the next
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
nextElementSibling
returns the next
element
(not text and comment nodes).
previousSibling vs previousElementSibling
previousSibling
returns the previous
node
(an element node, a text node or a comment node).
Whitespace between elements are also text nodes.
previousElementSibling
returns the previous
element
(not text and comment nodes).
Syntax
element
.previousSibling
or
node
.previousSibling
Return Value
Type
Description
Node
The previous sibling of the node.
null
if no previous sibling exists.
Browser Support
element.previousSibling
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element parentNode
Example
Get the node name of the parent node of "myLI":
let name = document.getElementById("myLI").parentNode.nodeName;
Try it Yourself 
Click on an element (<span>) to hide its parent:
<div>
<span onclick="this.parentNode.style.display = 'none';">x</span>
</div>
Try it Yourself 
Description
The
parentNode
property returns the parent node of an element or node.
The
parentNode
property is read-only.
HTML Nodes vs Elements
In the
HTML DOM
(Document Object Model), an HTML document is a collection of nodes with (or without) child nodes.
Nodes
are element nodes, text nodes, and comment nodes.
Whitespace between elements are also text nodes.
Elements
are only element nodes.
childNodes vs children
childNodes
returns child
nodes
(element nodes, text nodes, and comment nodes).
children
returns child
elements
(not text and comment nodes).
Siblings vs Element Siblings
Siblings
are "brothers" and "sisters".
Siblings
are nodes with the same parent (in the same
childNodes
list).
Element Siblings
are elements with the same parent (in the same
children
list).
Syntax
element
.parentNode
or
node
.parentNode
Return Value
Type
Description
Node
The parent node.
null
if the node has no parent.
Browser Support
element.parentnode
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
backgroundOrigin
Property
Example
Position the background image relative to the content box:
document.getElementById("myDIV").style.backgroundOrigin = "content-box";
Try it Yourself 
Description
The backgroundOrigin property sets or returns what the background-position property is relative to.
Note:
If the background-attachment property for the background image is "fixed", this property has no effect.
Syntax
Return the backgroundOrigin property:
object
.style.backgroundOrigin
Set the backgroundOrigin property:
object
.style.backgroundOrigin = "padding-box|border-box|content-box|initial|inherit"
Property Values
Value
Description
padding-box
Default value. The background image is positioned relative to the padding box
border-box
The background image is positioned relative to the border box
content-box
The background image is positioned relative to the content box
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
padding-box
Return Value:
A String, representing the background-origin property of an element
CSS Version
CSS3
Browser Support
backgroundOrigin
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
borderImageSource
Property
Example
Use an image as the border around a div element:
document.getElementById("myDIV").style.borderImageSource = "url(border.png)";
Try it Yourself 
Description
The borderImageSource property sets or returns the image to be used, instead of the border styles given by the border-style properties.
Tip:
If the value is "none", or if the image cannot be displayed, the border styles will be used.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImageSource
Yes
11.0
Yes
6.0
15.0
Look at the
borderImage
property instead!
Syntax
Return the borderImageSource property:
object
.style.borderImageSource
Set the borderImageSource property:
object
.style.borderImageSource = "none|
image
|initial|inherit"
Property Values
Value
Description
none
No image will be used
image
The path to the image to be used as a border
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the border-image-source property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image-source property
Style
borderLeft
Property
Example
Add a left border to a <div> element:
document.getElementById("myDiv").style.borderLeft = "thick solid #0000FF";
Try it Yourself 
Description
The borderLeft property sets or returns up to three separate border-left properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any order):
border-left-width
border-left-style
border-left-color
Browser Support
Property
borderLeft
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderLeft property:
object
.style.borderLeft
Set the borderLeft property:
object
.style.borderLeft
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the left border
style
Sets the style of the left border
color
Sets the color of the left border
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the width, style and/or color of the left border of an element
CSS Version
CSS1
More Examples
Example
Change the width, style and color of the left border of a <div> element:
document.getElementById("myDiv").style.borderLeft = "thin dotted red";
Try it Yourself 
Example
Return the border-left property values of a <div> element:
alert(document.getElementById("myDiv").style.borderLeft);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left property
HTML DOM reference:
border property
Style
borderSpacing
Property
Example
Set the space between cells in a table:
document.getElementById("myTable").style.borderSpacing = "20px";
Try it Yourself 
Description
The borderSpacing property sets or returns the space between cells in a 
table.
Note:
This property has no effect if
borderCollapse
is set to 
collapse.
Browser Support
Property
borderSpacing
Yes
9.0
Yes
Yes
Yes
Syntax
Return the borderSpacing property:
object
.style.borderSpacing
Set the borderSpacing property:
object
.style.borderSpacing
= "length length
|initial|inherit"
Property Values
Value
Description
length length
Specifies the space between cells in length units. Negative values are not allowed. Default value is 0.
If one length value is specified, it specifies both the horizontal and vertical spacing
If two length values are specified, the first sets the horizontal spacing and the second sets the vertical spacing
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the space between cells in a table
CSS Version
CSS2
More Examples
Example
Return the space between cells in a table:
alert(document.getElementById("myTable").style.borderSpacing);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
CSS reference:
border-spacing property
Window History
The Window History Object
The
history object
contains the URLs visited by the user (in the browser window).
The
history object
is a property of the
window object
.
The
history object
is accessed with:
window.history
or just
history
:
Examples
let length = window.history.length;
Try it Yourself 
let length = history.length;
Try it Yourself 
History Object Properties and Methods
Property/Method
Description
back()
Loads the previous URL (page) in the history list
forward()
Loads the next URL (page) in the history list
go()
Loads a specific URL (page) from the history list
length
Returns the number of URLs (pages) in the history list
HTML DOM Element scrollWidth
Examples
Get the height and width of an element, including padding:
const element = document.getElementById("content");
let x = element.scrollHeight;
let y = element.scrollWidth;
Try it Yourself 
How padding, border, and scrollbar affects the scrollWidth and scrollHeight:
const element = document.getElementById("content");
let x = element.scrollHeight;
let y = element.scrollWidth;
Try it Yourself 
More examples below.
Description
The
scrollWidth
property returns the width of an element,
including padding, excluding borders, scrollbars or margins.
The
scrollWidth
property returns the width in pixels.
The
scrollWidth
property is read-only.
Syntax
element
.scrollWidth
Return Value
Type
Description
Number
The width of the element, in pixels.
More Examples
Set the height and width of an element to the values returned from scrollHeight and scrollWidth:
element.style.height = element.scrollHeight + "px";
element.style.width = element.scrollWidth + "px";
Try it Yourself 
Browser Support
element.scrollWidth
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Element setAttributeNode()
Example
Set the class attribute node of the first <h1> element:
const attr = document.createAttribute("class");
attr.value = "democlass";
const h1 = document.getElementsByTagName("H1")[0];
h1.setAttributeNode(attr);
Before:
Hello World
After:
Hello World
Try it Yourself 
More examples below.
Description
The
setAttributeNode()
method adds an attribute node to an element.
The
setAttributeNode()
method replaces existing attribute nodes.
The
setAttributeNode()
method returns an
Attribute object
.
The Difference Between setAttribute() and setAttributeNode()
The
setAttribute()
method replaces attribute values.
The
setAttributeNode()
method replaces Attribute objects.
You must create an
Attr object
and set the
Attr value
before adding the attribute to an element.
The result will be the same.
Syntax
element
.setAttributeNode(
node
)
Parameters
Parameter
Description
node
Required.
The attribute node to add.
Return Value
Type
Description
Object
An Attr object representing the replaced attribute node.
Or
null
if no attribute is replaced.
More Examples
Set the href attribute node of a <a> element:
const attr = document.createAttribute("href");
attr.value = "https://www.w3schools.com";
const anchor = document.getElementById("myAnchor");
anchor.setAttributeNode(attr);
Before:
Go to w3schools.com
After:
Go to w3schools.com
Try it Yourself 
Browser Support
element.setAttributeNode()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element style
Examples
Change the color of "myH1":
document.getElementById("myH1").style.color = "red";
Try it Yourself 
Get the value of a "myP"s top-border:
let value = document.getElementById("myP").style.borderTop;
Try it Yourself 
Description
The
style
property returns the values of an element's style attribute.
The
style
property returns a
CSSStyleDeclaration
object.
The
CSSStyleDeclaration
object contains all inline styles properties for the element.
It does not contain any style properties set in the <head> section 
or in any external style sheets.
Syntax
Return a style property:
element
.style.
property
Set a style property:
element
.style.
property
=
value
Return Value
Type
Description
value
The value of the specified property.
For example:
element
.style.borderBottom = "2px solid red"
Return Value
Type
Description
Object
The element's CSSStyleDeclaration object.
Browser Support
element.style
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Element tabIndex
Examples
Change the tab order for 3 links:
document.getElementById("myAnchor1").tabIndex = "3";
document.getElementById("myAnchor2").tabIndex = "2";
document.getElementById("myAnchor3").tabIndex = "1";
Try it Yourself 
Get the tab order of the first <a> element:
let order = document.getElementsByTagName("A")[0].tabIndex;
Try it Yourself 
Description
The
tabIndex
property sets or returns the value of the tabindex attribute of an element.
The tabindex attribute specifies the tab order of an element, when the "tab" 
button is used for navigating.
Syntax
Return the tabIndex property:
element
.tabIndex
Set the tabIndex property:
element
.tabIndex =
number
Return Value
Type
Description
number
Tab order of the element (1 is first).
If the number is negative, the element is removed from the tab order.
Return Value
Type
Description
Number
The tab order of the element.
Browser Support
element.tabIndex
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM Attributes item()
Example
Get the name of the first attributes of an element:
const nodeMap = document.getElementById("myDiv").attributes;
let name1 = nodeMap.item(0).name;
let name2 = nodeMap.item(1).name;
Try it Yourself 
const nodeMap = document.getElementById("myDiv").attributes;
let name1 = nodeMap[0].name;
let name2 = nodeMap[1].name;
Try it Yourself 
More examples below.
Description
The
item()
method returns an attribute (by index) from a NamedNodeMap.
Syntax
namednodemap
.item(
index
)
or simply:
namednodemap
[
index
]
Parameters
Parameter
Description
index
Required.
The index of the attribute node in the NamedNodeMap.
Return Value
Type
Description
A node
The attribute node at the specified index.
Or
null
if the index number is out of range.
More Examples
Change the class (the color) of an element:
document.getElementById("myDiv").attributes.item(1).value = "class2";
Try it Yourself 
Change the class (the color) of an element:
document.getElementById("myDiv").attributes[1].value = "class2";
Try it Yourself 
Browser Support
attributes
.item()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attributes removeNamedItem()
Example
Remove the
type
attribute from an input button:
const nodeMap = document.getElementById("myInput").attributes;
nodeMap.removeNamedItem("type");
Try it Yourself 
Note:
When removing the type attribute of an input element, the element will be of type
text
, which is the default value.
Description
The
removeNamedItem()
method removes a node (by name) in a NamedNodeMap.
Syntax
namednodemap
.removeNamedItem(
nodename
)
Parameters
Parameter
Description
nodename
Required.
The name of the attribute node to remove
Return Value
Type
Description
A node
The removed attribute node.
Browser Support
attributes
.removeNamedItem()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attributes getNamedItem()
Example
Get the value of the scr attribute of an image:
const nodeMap = document.getElementById("light").attributes;
let value = nodeMap.getNamedItem("src").value;
Try it Yourself 
Get the value of the onclick attribute of a button:
const nodeMap = document.getElementById("myButton");
let value = nodeMap.getNamedItem("onclick").value;
Try it Yourself 
Description
The
getNamedItem()
method returns an attribute node from a NamedNodeMap object.
Syntax
namednodemap
.getNamedItem(
nodename
)
Parameters
Parameter
Description
nodename
Required.
The name of the node in the namedNodeMap.
Return Value
Type
Description
A node
The node with the specified name.
Browser Support
attributes
.getNamedItem
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attributes length
Example
Get the number of attributes of an HTML element:
let num x = document.getElementById("myButton").attributes.length;
Try it Yourself 
More examples below.
Description
The
length
property returns the number of nodes in a NamedNodeMap.
The
length
property is read-only.
Syntax
namednodemap
.length
Technical Details
Return Value:
A Number, representing the number of attribute nodes in the nodemap
More Examples
Get the name of all attributes:
const nodeMap = document.getElementById("myButton").attributes;
let text = "";
for (let i = 0; i < nodeMap.length; i++) {
text += nodeMap[i].name + "<br>";
}
Try it Yourself 
How many attributes does "myImg" have:
let num = document.getElementById("myImg").attributes.length;
Try it Yourself 
Get all attributes:
const nodeMap = document.getElementById("myImg").attributes;
let text = "";
for (let i = 0; i < nodeMap.length; i++) {
text += nodeMap[i].name + " = " + nodeMap[i].value + "<br>";
}
Try it Yourself 
Browser Support
attributes
.length
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM Attribute isId
Example
Is the first attribute an id?
const isid = element.attributes[0].isId;
Try it Yourself 
Description
The isId property was once supported in Chrome, Firefox and Safari.
The isId property is no longer supported in any browser.
The isId property always returns undefined.
Alternative
Get the name of an attribute:
let aName = element.attributes[0].name;
Try it Yourself 
Syntax
attribute
.isId
Return Value
undefined
HTML DOM Element title
Examples
Get the title of an element:
let title = element.title;
Try it Yourself 
Change the title of an element:
element.title = "The World's Largest Web Development Site";
Try it Yourself 
Description
The
title
property sets or returns the value of an element's title attribute.
The title attribute specifies extra information about an element.
It can be shown as a tooltip text when the mouse moves over the element.
Syntax
Return the title property:
element
.title
Set the title property:
element
.title =
text
Property Value
Value
Description
text
The value for the element's title attribute.
Return Value
Type
Description
String
The value of the element's title attribute.
Browser Support
element.title
is supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
HTML DOM
isSameNode()
Method
Example
Check if two nodes are, in fact, the same node:
var item1 = document.getElementById("myList1"); // An <ul> element with id="myList"
var item2 = document.getElementsByTagName("UL")[0]; // The first <ul> element in the document
var x =
 item1.isSameNode(item2);
Try it Yourself 
More "Try it Yourself" examples below.
Description
The isSameNode() method checks if two nodes are the same node.
The isSameNode() method returns
true
if the two nodes are the same node, otherwise
false
.
Tip:
Use the
isEqualNode() method
to check if two nodes are equal, but not necessarily the same node.
Browser Support
The numbers in the table specify the first browser version that fully supports the method.
Method
isSameNode()
Yes
9.0
Not supported
Yes
Yes
Note:
Firefox stopped supporting this method as of version 
10, because the method has been deprecated in the DOM version 4. Instead, you 
should use === to compare if two nodes are the same (See "More Examples" below).
Syntax
node
.isSameNode(
node
)
Parameter Values
Parameter
Type
Description
node
Node object
Required. The node you want to compare the specified node with
Technical Details
Return Value:
A Boolean, returns true if the two nodes are the same node, otherwise false
DOM Version
Core Level 3 Node Object
More Examples
Example
Using the === operator to check if two nodes are the same node:
var item1 = document.getElementById("myList");
var item2 = document.getElementsByTagName("UL")[0];
if (item1 === item2) {
alert("THEY ARE THE SAME!!");
} else {
alert("They are not the same.");
}
Try it Yourself 
Style
borderTop
Property
Example
Add a top border to a <div> element:
document.getElementById("myDiv").style.borderTop = "thick solid #0000FF";
Try it Yourself 
Description
The borderTop property sets or returns up to three separate border-top properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any order):
border-top-width
border-top-style
border-top-color
Browser Support
Property
borderTop
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderTop property:
object
.style.borderTop
Set the borderTop property:
object
.style.borderTop
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the top border
style
Sets the style of the top border
color
Sets the color of the top border
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the width, style and/or color of the top border of an element
CSS Version
CSS1
More Examples
Example
Change the width, style and color of the top border of a <div> element:
document.getElementById("myDiv").style.borderTop = "thin dotted red";
Try it Yourself 
Example
Return the border-top property values of a <div> element:
alert(document.getElementById("myDiv").style.borderTop);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top property
HTML DOM reference:
border property
Style
bottom
Property
Example
Set the bottom position of a <button> element:
document.getElementById("myBtn").style.bottom = "100px";
Try it Yourself 
Description
The bottom property sets or returns the bottom position of a positioned 
element.
This property specifies the bottom position of the element including padding, 
scrollbar, border and margin.
Tip:
A positioned element is an element with the position property set 
to: relative, absolute, or fixed.
Tip:
To set or return the top position of a positioned 
element, use the
top
property.
Browser Support
Property
bottom
Yes
Yes
Yes
Yes
Yes
Syntax
Return the bottom property:
object
.style.bottom
Set the bottom property:
object
.style.bottom = "auto|
length
|
%
|initial|inherit"
Property Values
Value
Description
auto
Lets the browser set the bottom position. This is default
length
Defines the bottom position in length units. Negative values are  allowed
%
Sets the bottom position in % of the height of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the bottom position of a positioned element
CSS Version
CSS2
More Examples
Example
Set the bottom position of a <div> element:
document.getElementById("myDiv").style.bottom = "10px";
Try it Yourself 
Example
Using negative values - Set the bottom position of a <div> element:
document.getElementById("myDiv").style.bottom = "-100px";
Try it Yourself 
Example
Return the bottom position of a <div> element:
alert(document.getElementById("myDiv").style.bottom);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
bottom property
Style
boxSizing
Property
Example
Change the boxSizing property:
document.getElementById("myDIV").style.boxSizing = "border-box";
Try it Yourself 
Description
The boxSizing property allows you to define certain elements to fit an area 
in a certain way.
For example, if you want two bordered boxes side by side, it can be 
achieved through setting boxSizing to "border-box". This forces the browser to 
render the box with the specified width and height, and place the border and 
padding inside the box.
Browser Support
Property
boxSizing
Yes
Yes
Yes
Yes
Yes
Syntax
Return the boxSizing property:
object
.style.boxSizing
Set the boxSizing property:
object
.style.boxSizing = "content-box|border-box|initial|inherit"
Property Values
Value
Description
content-box
Default value. This is the behavior of width and height as specified by CSS2.1. The specified width and height (and min/max properties) apply to the width and height respectively of the content box of the element. The padding and border of the element are laid out and drawn outside the specified width and height
border-box
The specified width and height (and min/max properties) on this element determine the border box of the element. That is, any padding or border specified on the element is laid out and drawn inside this specified width and height. The content width and height are calculated by subtracting the border and padding widths of the respective sides from the specified 'width' and 'height' properties
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
content-box
Return Value:
A String, representing the box-sizing property of an element
CSS Version
CSS3
Related Pages
CSS reference:
box-sizing property
Style
caretColor
Property
Example
Set the color of the cursor to red inside an input field:
document.getElementById("input1").style.caretColor = "red";
Try it Yourself 
Description
The caretColor property specifies the color of the cursor (caret) in inputs, textareas, or any element that is editable.
Browser Support
Property
caretColor
57.0
79.0
53.0
11.1
44.0
Syntax
Return the caretColor property:
object
.style.caretColor
Set the caretColor property:
object
.style.caretColor = "auto|
color
|initial|inherit"
Property Values
Value
Description
auto
Default. Browsers uses the currentColor for the caret
color
Specifies a color to use for the caret. All legal color values can be used (rgb, 
    hex, named-color, etc). For more information on legal values, read our
CSS 
    Colors Tutorial
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the caret color of an element
CSS Version
CSS3
Related Pages
CSS reference:
caret-color property
Style
borderRightStyle
Property
Example
Add a "solid" right border to a <div> element:
document.getElementById("myDiv").style.borderRightStyle = "solid";
Try it Yourself 
Description
The borderRightStyle property sets or returns the style of the right border 
of an element.
Browser Support
Property
borderRightStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderRightStyle property:
object
.style.borderRightStyle
Set the borderRightStyle property:
object
.style.borderRightStyle =
value
Property Values
Value
Description
none
Defines no border. This is default
hidden
Same as "none", except in border conflict  resolution for table elements
dotted
Defines a dotted border
dashed
Defines a dashed border
solid
Defines a solid border
double
Defines two borders. The width of the two borders are  the same as the border-width value
groove
Defines a 3D grooved border. The effect depends on the  border-color value
ridge
Defines a 3D ridged border. The effect depends on the  border-color value
inset
Defines a 3D inset border. The effect depends on the  border-color value
outset
Defines a 3D outset border. The effect depends on the  border-color value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's right border
CSS Version
CSS1
More Examples
Example
Change the style of the right border of a <div> element to "dotted":
document.getElementById("myDiv").style.borderRightStyle = "dotted";
Try it Yourself 
Example
Return the right border style of a <div> element:
alert(document.getElementById("myDiv").style.borderRightStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.borderRightStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right-style property
HTML DOM reference:
border property
Style
columnWidth
Property
Example
Change the width of the columns:
document.getElementById("myDIV").style.columnWidth = "100px";
Try it Yourself 
Description
The columnWidth property specifies the width of the columns.
Browser Support
Property
columnWidth
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnWidth property:
object
.style.columnWidth
Set the columnWidth property:
object
.style.columnWidth = "auto|
length
|initial|inherit"
Property Values
Value
Description
auto
Deafult value. The column width will be determined by the browser
length
A length that specifies the width of the columns
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the column-width property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-width property
HTML DOM NodeList item()
 The NodeList Object
Examples
Get the <body> element's child nodes:
const nodeList = document.body.childNodes;
Try it Yourself 
Get the node name of the first child node:
const list = document.body.childNodes;
let name = list.item(0).nodeName;
Try it Yourself 
This produces the same result:
const list = document.body.childNodes;
let name = list[0].nodeName;
Try it Yourself 
Get the HTML content of the first <p> element in the document:
const list = document.getElementsByTagName("p");
let text = list.item(0).innerHTML;
Try it Yourself 
More examples below.
Description
The
item()
method returns the node at a specified index in a
NodeList
.
There are two ways to access a node at a specified index:
list.item(index)
or
list[index]
The easiest and most common method is [index].
Syntax
nodelist
.item(
index
)
or simply:
nodelist
[
index
]
Parameters
Parameter
Description
index
Required.
The index of the node in the list.
The nodes are sorted as they appear in the document.
The index starts at 0.
Return Value
Type
Description
Object
The node at the specified index.
null
if the index is out of range.
More Examples
Example
Get the HTML content of the first <p> element inside "myDIV":
const div = document.getElementById("myDIV");
const list = div.getElementsByTagName("p");
let text = list[0].innerHTML;
Try it Yourself 
Example
Change the HTML content of the first <p> element inside "myDIV":
const div = document.getElementById("myDIV");
const list = div.getElementsByTagName("p");
let text = list[0].innerHTML = "Paragraph changed";
Try it Yourself 
Example
Change the color of all elements with class="child":
const list = document.querySelectorAll(".child");
for (let i = 0; i < list.length; i++) {
list[i].style.color = "red";
}
Try it Yourself 
Browser Support
nodelist.item()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
 The NodeList Object
Style
alignItems
Property
Example
Position the alignments for all the items of the flexible <div> element 
at the beginning of the container:
document.getElementById("main").style.alignItems = "flex-start";
Try it Yourself 
Description
The alignItems property specifies the default alignment for items inside the flexible container.
Tip:
Use the align-self property of each item to override the align-items property.
Syntax
Return the alignItems property:
object
.style.alignItems
Set the alignItems property:
object
.style.alignItems = "stretch|center|flex-start|flex-end|baseline|initial|inherit"
Property Values
Value
Description
stretch
Default. Items are stretched to fit the container
center
Items are positioned at the center of the container
flex-start
Items are positioned at the beginning of the container
flex-end
Items are positioned at the end of the container
baseline
Items are positioned at the baseline of the container
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
stretch
Return Value:
A String, representing the align-items property of an element
CSS Version
CSS3
Browser Support
alignItems
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
align-items property
HTML DOM STYLE Reference:
alignContent property
HTML DOM STYLE Reference:
alignSelf property
Style
animationDirection
Property
Example
Changing the animationDirection property of a <div> element:
document.getElementById("myDIV").style.animationDirection = "reverse";
Try it Yourself 
Description
The animationDirection property sets or returns whether or not the animation should play 
in reverse on alternate cycles.
Note:
If the animation is set to play only once, this property will 
have no effect.
Syntax
Return the animationDirection property:
object
.style.animationDirection
Set the animationDirection property:
object
.style.animationDirection = "normal|reverse|alternate|alternate-reverse|initial|inherit"
Property Values
Value
Description
normal
Default value. The animation should be played as normal
reverse
The animation should play in reverse direction
alternate
The animation will be played as normal every odd time (1,3,5,etc..) and in reverse direction every even time (2,4,6,etc...)
alternate-reverse
The animation will be played in reverse direction every odd time (1,3,5,etc..) and in a normal direction every even time (2,4,6,etc...)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the animation-direction property of an element
CSS Version
CSS3
Browser Support
animationDirection
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-direction property
HTML DOM NodeList values()
 The NodeList Object
Examples
List the document's child nodes:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x;
}
Try it Yourself 
List the names of the document's child nodes:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x.nodeName;
}
Try it Yourself 
List the types of the document's child nodes:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x.nodeType;
}
Try it Yourself 
Description
The
values()
method returns an Iterator with the values from a
NodeList
.
Syntax
nodelist
.values()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the values from the list.
Browser Support
nodelist.values()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
nodelist.values()
is not supported in Internet Explorer 11 (or earlier).
 The NodeList Object
HTML DOMTokenList contains()
 The DOMTokenList Object
Examples
Does an an element has a "myStyle" class token?
let x = element.classList.contains("myStyle");
Try it Yourself 
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Description
The
contains()
method returns
true
if a
DOMTokenList
contains a class, otherwise
false
.
Syntax
domtokenlist
.contains(token)
Parameters
Parameter
Description
token
Required.
The token to check for.
Return Value
Type
Description
Boolean
true
if the list contains a class, otherwise
false
.
Browser Support
domtokenlist.contains()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
 The DOMTokenList Object
HTML DOMTokenList add()
 The DOMTokenList Object
Examples
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Toggle "myStyle" on and off:
const list = element.classList;
list.toggle("myStyle");
Try it Yourself 
More examples below.
Description
The
add()
method adds one (or more) tokens to a
DOMTokenList
.
Syntax
domtokenlist
.add(token)
Parameters
Parameter
Description
token
Required.
The token(s) to add to the list.
Return Value
NONE
More Examples
Add multiple classes to the an element:
const list = element.classList;
list.add("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Get number of class tokens for an element:
const list = element.classList;
let numb = list.length;
Try it Yourself 
Get the class tokens of the "myDIV" element:
const list = document.getElementById("myDIV").classList;
Try it Yourself 
Get the first class token of an element:
let className = element.classList.item(0);
Try it Yourself 
Does an an element has a "myStyle" class token?
let x = element.classList.contains("myStyle");
Try it Yourself 
Remove "anotherClass" if an element has a "myStyle" class token.
if (element.classList.contains("mystyle")) {
element.classList.remove("anotherClass");
}
Try it Yourself 
Browser Support
domtokenlist.add()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.add()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
HTML DOMTokenList entries()
 The DOMTokenList Object
Examples
Get a DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
List the entries of the list:
for (let x of list.entries()) {
text += x[0] + " " + x[1];
}
Try it Yourself 
Description
The
entries()
method returns an Iterator with the key/value pairs from a
DOMTokenList
.
Syntax
domtokenlist
.entries()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the key/value pairs from the list.
Browser Support
domtokenlist.entries()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.entries()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
HTML DOM NodeList length
 The NodeList Object
Examples
Get the number of child nodes in the document:
const nodeList = document.body.childNodes;
let number = nodeList.length;
Try it Yourself 
Get the <body> element's child nodes:
const nodeList = document.body.childNodes;
Try it Yourself 
Get the number of child nodes in "myDIV":
const element = document.getElementById("myDIV");
let numb = element.childNodes.length;
Try it Yourself 
More examples below.
Description
The
length
property returns the number of nodes in a
NodeList
.
The
length
property is read-only.
Syntax
nodelist
.length
Return Value
Type
Description
Number
The number of nodes in the
NodeList
.
More Examples
Example
How many <p> elements inside "myDIV":
const div = document.getElementById("myDIV");
const list = div.querySelectorAll("p");
let number = list.length;
Try it Yourself 
Example
Loop over all <p> elements in "myDIV" and change their font size:
const div = document.getElementById("myDIV");
const list = div.querySelectorAll("p");
for (let i = 0; i < list.length; i++) {
list[i].style.fontSize = "red";
}
Try it Yourself 
Example
Loop over all child nodes nodes and collect the name of each node:
const list = document.body.childNodes;
let text = "";
for (let i = 0; i < list.length; i++) {
text += list[i].nodeName + "<br>";
}
Try it Yourself 
Browser Support
nodelist.length
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
 The NodeList Object
HTML DOMTokenList
DOMTokenList
A
DOMTokenList
is a set of space separated tokens.
A
DOMTokenList
can be accessed by index (starts at 0).
The length Property
returns the number of tokens in a DOMTokenList.
DOMTokenList Properties and Methods
Name
Description
add()
Adds one or more tokens to the list
contains()
Returns true if the list contains a class
entries()
Returns an Iterator with key/value pairs from the list
forEach()
Executes a callback function for each token in the list
item()
Returns the token at a specified index
keys()
Returns an Iterator with the keys in the list
length
Returns the number of tokens in the list
remove()
Removes one or more tokens from the list
replace()
Replaces a token in the list
supports()
Returns true if a token is one of an attribute's supported tokens
toggle()
Toggles between tokens in the list
value
Returns the token list as a string
values()
Returns an Iterator with the values in the list
Examples
Add a "myStyle" class to an element:
element.classList.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
element.classList.remove("myStyle");
Try it Yourself 
Toggle "myStyle" on and off:
element.classList.toggle("myStyle");
Try it Yourself 
More examples below.
Add multiple classes to the an element:
element.classList.add("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Remove multiple classes from an element:
element.classList.remove("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Get the number of class names for an element:
let numb = element.classList.length;
Try it Yourself 
Get the class names of the "myDIV" element:
<div id="myDIV" class="myStyle anotherClass thirdClass">
<p>I am myDIV.</p>
</div>
const list = document.getElementById("myDIV").classList;
Try it Yourself 
Get the first class of an element:
let className = element.classList.item(0);
Try it Yourself 
Does an an element has a "myStyle" class?
let x = element.classList.contains("myStyle");
Try it Yourself 
Remove "anotherClass" if an element has a "myStyle" class.
if (element.classList.contains("mystyle")) {
element.classList.remove("anotherClass");
}
Try it Yourself 
Toggle between classes to create a dropdown button:
document.getElementById("myBtn").onclick = function() {myFunction()};
function myFunction() {
document.getElementById("myDropdown").classList.toggle("show");
}
Try it Yourself 
Create a sticky navigation bar:
// Get the navbar
const navbar = document.getElementById("navbar");
// Get the offset position of the navbar
const sticky = navbar.offsetTop;
// Add the sticky class to the navbar when you reach its scroll position
// Remove it when you leave the scroll position
function myFunction() {
if (window.pageYOffset 
  >= sticky) {
navbar.classList.add("sticky")
} 
  else {
navbar.classList.remove("sticky");
}
}
Try it Yourself 
HTML DOMTokenList forEach()
 The DOMTokenList Object
Examples
Get a DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
Execute a function for each token:
list.forEach(
function(token, index) {
text += index + " " + token;
}
);
Try it Yourself 
Description
The
forEach()
method executes a callback function for each token in a
DOMTokenList
.
Syntax
nodelist
.forEach(
function(currentValue, index, arr), thisValue
)
Parameters
function()
Required.
A function to run for each token.
currentValue
Required.
The value of the current token.
index
Optional.
The index of the current token.
arr
Optional.
The DOMTokenList of the current token.
thisValue
Optional. Default
undefined
.
A value passed to the function as its
this
value.
Return Value
NONE
Browser Support
domtokenlist.forEach()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.forEach()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
HTML DOMTokenList keys()
 The DOMTokenList Object
Examples
Get a DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
List the keys of the list:
const list = document.body.childNodes;
for (let x of list.keys()) {
text += x;
}
Try it Yourself 
List the values from the list:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x;
}
Try it Yourself 
Description
The
keys()
method returns an Iterator with the keys from a
DOMTokenList
.
Syntax
domtokenlist
.keys()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the keys from the list.
Browser Support
domtokenlist.keys()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.keys()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
HTML DOMTokenList replace()
 The DOMTokenList Object
Examples
Replace a CSS class with another:
const list = element.classList;
list.replace("myStyle", "newStyle");
Try it Yourself 
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Toggle "myStyle" on and off:
const list = element.classList;
list.toggle("myStyle");
Try it Yourself 
Description
The
replace()
method replaces a token in a
DOMTokenList
.
Syntax
domtokenlist
.replace(old, new)
Parameters
Parameter
Description
old
Required.
The token to replace.
new
Required.
The token to replace with.
Return Value
Type
Description
Boolean
true
if the token was replaced, otherwise
false
.
Browser Support
domtokenlist.replace()
is an
ECMAScript 2017
feature.
ES2017 is supported in all modern browsers since September 2017:
Chrome 58
Edge 15
Firefox 52
Safari 11
Opera 45
Apr 2017
Apr 2017
Mar 2017
Sep 2017
May 2017
domtokenlist.replace()
is not supported in Internet Explorer.
 The DOMTokenList Object
HTML DOMTokenList supports()
 The DOMTokenList Object
Examples
Check if "allow-forms" is supported:
const list = element.sandbox;
list.supports("allow-forms");
Try it Yourself 
Check if "allow-nonsense" is supported:
const list = element.sandbox;
list.supports("allow-nonsense");
Try it Yourself 
Description
The
supports()
method returns
true
if a token in a
DOMTokenList
is one of the attribute's supported tokens.
Syntax
domtokenlist
.supports(token)
Parameters
Parameter
Description
token
Required.
The token to check for.
Return Value
Type
Description
Boolean
true
if the token is supported, otherwise
false
.
Browser Support
domtokenlist.supports()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.supports()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
HTML DOMTokenList item()
 The DOMTokenList Object
Examples
Get a DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
Get the first item in the list:
let item = list.item(0);
Try it Yourself 
This produces the same result:
let item = list[0];
Try it Yourself 
Description
The
item()
method returns the token at a specified index in a
DOMTokenList
.
There are two ways to access a token at a specified index:
list.item(index)
or
list[index]
The easiest and most common method is [index].
Syntax
domtokenlist
.item(
index
)
or simply:
domtokenlist
[
index
]
Parameters
Parameter
Description
index
Required.
The index of the token in the list.
The tokens are sorted as they appear in the document.
The index starts at 0.
Return Value
Type
Description
String
The token at the specified index.
null
if the index is out of range.
Browser Support
domtokenlist.item()
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
 The DOMTokenList Object
HTML DOMTokenList length
 The DOMTokenList Object
Examples
Get the DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
Get the number of tokens (classes) in the list:
let number = list.length;
Try it Yourself 
Description
The
length
property returns the number of tokens in a
DOMTokenList
.
The
length
property is read-only.
Syntax
domtokenlist
.length
Return Value
Type
Description
Number
The number of tokens in the
The DOMTokenList
.
Browser Support
domtokenlist.length
is supported in all browsers:
Chrome
IE
Edge
Firefox
Safari
Opera
Yes
10-11
Yes
Yes
Yes
Yes
 The DOMTokenList Object
Style
borderWidth
Property
Example
Change the width of the four borders of a <div> element:
document.getElementById("myDiv").style.borderWidth = "thick";
Try it Yourself 
Description
The borderWidth property sets or returns the width of an element's border.
This property can take from one to four values:
One value, like: p {border-width: thick} - all four borders will be thick
Two values, like: p {border-width: thick thin} - the top and bottom border will be thick, left and right border will be thin
Three values, like: p {border-width: thick thin medium}- the top border will be thick, left and right border will be thin, bottom border will be medium
Four values, like: p {border-width: thick thin medium 10px} - the top border will be thick, right border will be thin, bottom border will be medium, left border will be 10px
Browser Support
Property
borderWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderWidth property:
object
.style.borderWidth
Set the borderWidth property:
object
.style.borderWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin border
medium
Defines a medium border. This is default
thick
Defines a thick border
length
The width of the border in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's border
CSS Version
CSS1
More Examples
Example
Change the width of the top and bottom border to thick, and the left and 
right border to thin of a <div> element:
document.getElementById("myDiv").style.borderWidth = "thick thin";
Try it Yourself 
Example
Change the width of the four borders of a <div> element, using the
length
value:
document.getElementById("myDiv").style.borderWidth = "1px 5px 10px 20px";
Try it Yourself 
Example
Return the width of the border of a <div> element:
alert(document.getElementById("myDiv").style.borderWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-width property
HTML DOM reference:
border property
Style
borderTopLeftRadius
Property
Example
Add a rounded border to the top-left corner of a div element:
document.getElementById("myDIV").style.borderTopLeftRadius = "25px";
Try it Yourself 
Description
The borderTopLeftRadius property sets or returns the shape of the border of the top-left corner.
Tip:
This property allow you to add rounded borders to elements!
Browser Support
Property
borderTopLeftRadius
Yes
9.0
Yes
Yes
Yes
Syntax
Return the borderTopLeftRadius property:
object
.style.borderTopLeftRadius
Set the borderTopLeftRadius property:
object
.style.borderTopLeftRadius
= "length
|
%
[
length
|
%
]|initial|inherit"
Note:
The two length or percentage values of the 
border-top-left-radius properties define the radii of a quarter ellipse that 
defines the shape of the corner of the outer border edge. The first value is the 
horizontal radius, the second the vertical radius. If the second value is 
omitted it is copied from the first. If either length is zero, the corner is 
square, not rounded. Percentages for the horizontal radius refer to the width of 
the border box, whereas percentages for the vertical radius refer to the height 
of the border box.
Property Values
Value
Description
length
Defines the shape of the top-left corner
%
Defines the shape of the top-left corner in %
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-top-left-radius property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-top-left-radius property
Style
cssFloat
Property
Example
Let an image float to the left/right of the text, when 
clicking on two buttons:
function floatRight()
{
document.getElementById("myImg").style.cssFloat = "right";
}
function floatLeft()
{
document.getElementById("myImg").style.cssFloat = "left";
}
Try it Yourself 
Description
The cssFloat property sets or returns the horizontal alignment of an element.
Note:
The CSS "float" property is called "cssFloat" in JavaScript, because "float" is a reserved word in JavaScript.
Note:
If there is too little space on a line for the floating element, 
it will jump down to the next line that has enough space.
Browser Support
Property
cssFloat
Yes
Yes
Yes
Yes
Yes
Syntax
Return the cssFloat property:
object
.style.cssFloat
Set the cssFloat property:
object
.style.cssFloat = "left|right|none|initial|inherit"
Property Values
Value
Description
none
The object/element is not floated. This is default
left
The object/element will float to the left in the parent  element
right
The object/element will float to the right in the parent  element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the horizontal alignment of an element
DOM Version
DOM Level 2
More Examples
Example
Change the cssFloat property of a DIV element:
document.getElementById("myDIV").style.cssFloat = "left";
Try it Yourself 
Related Pages
CSS tutorial:
CSS Float
Style
display
Property
Example
Set a <div> element to not be displayed:
document.getElementById("myDIV").style.display = "none";
Try it Yourself 
Description
The display property sets or returns the element's display type.
Elements in HTML are mostly "inline" or "block" elements: An inline element 
has floating content on its left and right side. A block element fills the 
entire line, and nothing can be displayed on its left or right side.
The display property also allows the author to show or hide an element. It is 
similar to the
visibility
property. However, if you set
display:none
, it hides 
the entire element, while
visibility:hidden
means that the contents of the 
element will be invisible, but the element stays in its original position and 
size.
Tip:
If an element is a block element, its display type can also be 
changed with the float property.
Browser Support
Property
display
Yes
Yes
Yes
Yes
Yes
Syntax
Return the display property:
object
.style.display
Set the display property:
object
.style.display =
value
Property Values
Value
Description
block
Element is rendered as a block-level element
compact
Element is rendered as a block-level or inline  element. Depends on context
flex
Element is rendered as a block-level flex box. New in CSS3
grid
Element is rendered as a block-level grid. New in CSS3
inherit
Inherits this property from its parent element.
Read about
inherit
initial
Sets this property to its default value.
Read about
initial
inline
Element is rendered as an inline element. This is default
inline-block
Element is rendered as a block box inside an inline box
inline-flex
Element is rendered as a inline-level flex box. New in CSS3
inline-grid
Element is rendered as a inline-level grid. New in CSS3
inline-table
Element is rendered as an inline table (like  <table>), with no line break before or after the table
list-item
Element is rendered as a list
marker
This value sets content before or after a box to be a  marker (used with :before and  :after pseudo-elements. Otherwise this value is identical to "inline")
none
Element will not be displayed
run-in
Element is rendered as block-level or inline  element. Depends on context
table
Element is rendered as a block table (like  <table>), with a line break before and after the table
table-caption
Element is rendered as a table caption (like  <caption>)
table-cell
Element is rendered as a table cell (like  <td> and <th>)
table-column
Element is rendered as a column of cells  (like <col>)
table-column-group
Element is rendered as a group of one or more  columns (like <colgroup>)
table-footer-group
Element is rendered as a table footer  row (like <tfoot>)
table-header-group
Element is rendered as a table header row (like <thead>)
table-row
Element is rendered as a table row (like  <tr>)
table-row-group
Element is rendered as a group of one or more  rows (like <tbody>)
Technical Details
Default Value:
inline
Return Value:
A String, representing the display type of an element
CSS Version
CSS1
More Examples
Example
Difference between the display property and the visibility property:
function demoDisplay() {
document.getElementById("myP1").style.display = "none";
}
function demoVisibility() {
document.getElementById("myP2").style.visibility = "hidden";
}
Try it Yourself 
Example
Toggle between hiding and showing an element:
function myFunction() {
var x = document.getElementById('myDIV');
if (x.style.display === 'none') {
x.style.display = 'block';
} else {
x.style.display = 'none';
}
}
Try it Yourself 
Example
Difference between "inline", "block" and "none":
function myFunction(x) {
var whichSelected = x.selectedIndex;
var sel = x.options[whichSelected].text;
var elem = document.getElementById("mySpan");
elem.style.display = sel;
}
Try it Yourself 
Example
Return the display type of a <p> element:
alert(document.getElementById("myP").style.display);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Display and visibility
CSS reference:
display property
Style
flex
Property
Example
Let all the flexible items be the same length, regardless of its content:
for (i = 0; i < y.length; i++) {
y[i].style.flex = "1";
}
Try it Yourself 
Description
The flex property sets or returns the length of the item, relative to the rest of the
flexible items inside the same container.
The flex property is a shorthand for the flexGrow, flexShrink, and the flexBasis properties.
Note:
If the element is not a flexible item, the flex property has no effect.
Browser Support
Property
flex
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flex property:
object
.style.flex
Set the flex property:
object
.style.flex = "
flex-grow
flex-shrink
flex-basis
|auto|initial|inherit"
Property Values
Value
Description
flex-grow
A number specifying how much the item will grow relative to the rest of the flexible items
flex-shrink
A number specifying how much the item will shrink relative to the rest of the flexible items
flex-basis
The length of the item. Legal values: "auto", "inherit", or a number followed by "%", "px", "em" or any other length unit
auto
Same as 1 1 auto.
initial
Same as 0 1 auto.
Read about
initial
none
Same as 0 0 auto.
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0 1 auto
Return Value:
A String, representing the flex property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
animationFillMode
Property
Example
Changing the animationFillMode property of a <div> element:
document.getElementById("myDIV").style.animationFillMode = "forwards";
Try it Yourself 
Description
The animationFillMode property specifies what styles will apply for the element when the animation is not playing (when it is finished, or when it has a "delay").
By default, CSS animations will not affect the element you are animating until the first keyframe is "played", and then stops affecting it once the last 
keyframe has completed. The animationFillMode property can override this 
behavior.
Syntax
Return the animationFillMode property:
object
.style.animationFillMode
Set the animationFillMode property:
object
.style.animationFillMode = "none|forwards|backwards|both|initial|inherit"
Property Values
Value
Description
none
Default value. The animation will not apply any styles to the target before or after it is executing
forwards
After the animation ends (determined by animation-iteration-count), the animation will apply the property values for the time the animation ended
backwards
The animation will apply the property values defined in the keyframe that will start the first iteration of the animation, during the period defined by animation-delay. These are either the values of the from keyframe (when animation-direction is "normal" or "alternate") or those of the to keyframe (when animationDirection is "reverse" or "alternate-reverse")
both
The animation will follow the rules for both forwards and backwards. That is, it will extend the animation properties in both directions
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the animation-fill-mode property of an element
CSS Version
CSS3
Browser Support
animationFillMode
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-fill-mode property
Style
animationName
Property
Example
Changing the animationName property of a <div> element:
document.getElementById("myDIV").style.animationName = "myNEWmove";
Try it Yourself 
Description
The animationName property sets or returns a name for the @keyframes animation.
Syntax
Return the animationName property:
object
.style.animationName
Set the animationName property:
object
.style.animationName = "none|
keyframename
|initial|inherit"
Property Values
Value
Description
none
Default value. Specifies that there will be no animation (can be used to override animations coming from the cascade)
keyframename
Specifies the name of the keyframe you want to bind to the selector
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the animation-name property of an element
CSS Version
CSS3
Browser Support
animationName
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-name property
Style
animationIterationCount
Property
Example
Changing the animationIterationCount property of a <div> element:
document.getElementById("myDIV").style.animationIterationCount = "infinite";
Try it Yourself 
Description
The animationIterationCount property sets or returns how many times an animation should be 
played.
Syntax
Return the animationIterationCount property:
object
.style.animationIterationCount
Set the animationIterationCount property:
object
.style.animationIterationCount = "
number
|infinite|initial|inherit"
Property Values
Value
Description
number
A number that defines how many times an animation should be played. Default value is 1
infinite
Specifies that the animation should be played infinite times (for ever)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
1
Return Value:
A String, representing the animation-iteration-count property of an element
CSS Version
CSS3
Browser Support
animationIterationCount
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-iteration-count property
Style
animationTimingFunction
Property
Example
Changing the animationTimingFunction property of a <div> element:
document.getElementById("myDIV").style.animationTimingFunction = "linear";
Try it Yourself 
Description
The animationTimingFunction specifies the speed curve of the animation.
The speed curve defines the TIME an animation uses to change 
from one set of CSS styles to another.
The speed curve is used to make the changes smoothly.
Syntax
Return the animationTimingFunction property:
object
.style.animationTimingFunction
Set the animationTimingFunction property:
object
.style.animationTimingFunction = "linear|ease|ease-in|ease-out|cubic-bezier(
n
,
n
,
n
,
n
)|initial|inherit"
Property Values
Value
Description
linear
The animation has the same speed from start to end
ease
Default value. The animation has a slow start, then fast, before it ends slowly
ease-in
The animation has a slow start
ease-out
The animation has a slow end
ease-in-out
The animation has both a slow start and a slow end
cubic-bezier(
n
,
n
,
n
,
n
)
Define your own values in the cubic-bezier function
Possible values are numeric values from 0 to 1
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
ease
Return Value:
A String, representing the animation-timing-function property of an element
CSS Version
CSS3
Browser Support
animationTimingFunction
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-timing-function property
Style
animationDuration
Property
Example
Changing the animationDuration property of a <div> element:
document.getElementById("myDIV").style.animationDuration = "3s";
Try it Yourself 
Description
The animationDuration property defines how many seconds or milliseconds an 
animation takes to complete one cycle.
Syntax
Return the animationDuration property:
object
.style.animationDuration
Set the animationDuration property:
object
.style.animationDuration = "
time
|initial|inherit"
Property Values
Value
Description
time
Specifies the length an animation takes to finish. Default value is 0, meaning there will be no animation
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the animation-duration property of an element
CSS Version
CSS3
Browser Support
animationDuration
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-duration property
Style
animationPlayState
Property
Example
Pausing an animation:
document.getElementById("myDIV").style.animationPlayState = "paused";
Try it Yourself 
Description
The animationPlayState property specifies whether the animation is running 
or paused.
Note:
Use this property to pause an animation in the 
middle of a cycle.
Syntax
Return the animationPlayState property:
object
.style.animationPlayState
Set the animationPlayState property:
object
.style.animationPlayState = "running|paused|initial|inherit"
Property Values
Value
Description
running
Default value. Specifies that the animation is running
paused
Specifies that the animation is paused
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
running
Return Value:
A String, representing the animation-play-state property of an element
CSS Version
CSS3
Browser Support
animationPlayState
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Related Pages
CSS reference:
animation-play-state property
Style
backgroundAttachment
Property
Example
Set a background-image to be fixed (will not scroll):
document.body.style.backgroundAttachment = "fixed";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The backgroundAttachment property sets or returns whether a background image should scroll with the content, or be fixed.
Syntax
Return the backgroundAttachment property:
object
.style.backgroundAttachment
Set the backgroundAttachment property:
object
.style.backgroundAttachment = "scroll|fixed|local|initial|inherit"
Property Values
Value
Description
scroll
The background scrolls along with the element. This is default
fixed
The background is fixed with regard to the viewport
local
The background scrolls along with the element's contents
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
scroll
Return Value:
A String, representing how the background image is attached to the object within the document
CSS Version
CSS1
Browser Support
backgroundAttachment
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Choose between scroll and local on a DIV element:
document.getElementById("myDIV").style.backgroundAttachment = "local";
Try it Yourself 
Example
Toggle between scroll and fixed:
let x = document.body.style.backgroundAttachment;
document.body.style.backgroundAttachment = (x == "scroll")? "fixed":"scroll";
Try it Yourself 
Example
Return the value of the background-attachment property:
let back = document.body.style.backgroundAttachment;
Try it Yourself 
Style
border
Property
Example
Add a border to a <div> element:
document.getElementById("myDiv").style.border = "thick solid #0000FF";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The border property sets or returns up to three separate border 
properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any 
order):
border-width
border-style
border-color
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border property
Syntax
Return the border property:
object
.style.border
Set the border property:
object
.style.border
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the borders
style
Sets the style of the borders
color
Sets the color of the borders
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the border width, style and/or color of an element
CSS Version
CSS1
Browser Support
border
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Change the width, style and color of the border of a <div> element:
document.getElementById("myDiv").style.border = "thin dotted red";
Try it Yourself 
Example
Return the border property values of a <div> element:
alert(document.getElementById("myDiv").style.border);
Try it Yourself 
Style
backgroundPosition
Property
Example
Change the position of a background-image:
document.body.style.backgroundPosition = "top right";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The backgroundPosition property sets or returns the position of a background-image 
within an element.
Syntax
Return the backgroundPosition property:
object
.style.backgroundPosition
Set the backgroundPosition property:
object
.style.backgroundPosition =
value
Property Values
Value
Description
top left
top center
top right
center left
center center
center right
bottom left
bottom center
bottom right
If you only specify one keyword, the other value will  be "center".
x% y%
The x value indicates the horizontal position and the  y value indicates the vertical position. The top left corner is 0% 0%. The right  bottom corner is 100% 100%. If you only specify one value, the other  value will be 50%.
xpos ypos
The x value indicates the horizontal position and the  y value indicates the vertical position. The top left corner is 0 0.  Units can be pixels (0px 0px) or any other CSS units. If you only  specify one value, the other value will be 50%. You can mix % and units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0% 0%
Return Value:
A String, representing the position of a background-image
CSS Version
CSS1
Browser Support
backgroundPosition
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Change the position of the background-image in a <div> element to center bottom:
document.getElementById("myDiv").style.backgroundPosition = "center bottom";
Try it Yourself 
Example
Change the position of the background-image in a <div> element to 200px horizontal and 40px 
vertical:
document.getElementById("myDiv").style.backgroundPosition = "200px 40px";
Try it Yourself 
Example
Return the position of the background-image in a <div> element:
document.getElementById("myDiv").style.backgroundPosition;
Try it Yourself 
Style
backgroundRepeat
Property
Example
Set a background-image to no-repeat:
document.body.style.backgroundRepeat = "repeat-y";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The backgroundRepeat property sets or returns how to repeat (tile) a background-image.
Syntax
Return the backgroundRepeat property:
object
.style.backgroundRepeat
Set the backgroundRepeat property:
object
.style.backgroundRepeat = "repeat|repeat-x|repeat-y|no-repeat|initial|inherit"
Property Values
Value
Description
repeat
The background image is repeated  both vertically and horizontally. This is default
repeat-x
The background image is only repeated horizontally
repeat-y
The background image is only repeated vertically
no-repeat
The background-image is not repeated
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
repeat
Return Value:
A String, representing how a background-image is repeated
CSS Version
CSS1
Browser Support
backgroundRepeat
is a CSS1 (1996) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
Yes
More Examples
Example
Change the backgroundRepeat property of a specified DIV element:
document.getElementById("myDIV").style.backgroundRepeat = "repeat-x";
Try it Yourself 
Example
Set a background-image to repeat horizontally or vertically:
function repeatVer()
{
document.body.style.backgroundRepeat = "repeat-y";
}
function repeatHor() {
document.body.style.backgroundRepeat = "repeat-x";
}
Try it Yourself 
Example
Return the background-repeat value of a document:
alert(document.body.style.backgroundRepeat);
Try it Yourself 
Style
backgroundClip
Property
Example
Specify the painting area of the background:
document.getElementById("myDIV").style.backgroundClip = "content-box";
Try it Yourself 
Description
The backgroundClip property sets or returns the painting area of the background.
Syntax
Return the backgroundClip property:
object
.style.backgroundClip
Set the backgroundClip property:
object
.style.backgroundClip = "border-box|padding-box|content-box|initial|inherit"
Property Values
Value
Description
border-box
Default value. The background is clipped to the border box
padding-box
The background is clipped to the padding box
content-box
The background is clipped to the content box
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
border-box
Return Value:
A String, representing the background-clip property of an element
CSS Version
CSS3
Browser Support
backgroundClip
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
backfaceVisibility
Property
Example
Hide the backside of a rotating <div> element:
document.getElementById("myDIV").style.backfaceVisibility = "hidden";
Try it Yourself 
Description
The backfaceVisibility property defines whether or not an element 
should be visible when not facing the screen.
This property is useful when an element is rotated, and you do not want to 
see its backside.
Syntax
Return the backfaceVisibility property:
object
.style.backfaceVisibility
Set the backfaceVisibility property:
object
.style.backfaceVisibility = "visible|hidden|initial|inherit"
Property Values
Value
Description
visible
Default value. The backside is visible
hidden
The backside is not visible
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
visible
Return Value:
A String, representing the backface-visibility property of an element
CSS Version
CSS3
Browser Support
backfaceVisibility
is a CSS3 (1999) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
height
Property
Example
Set the height of a <button> element:
document.getElementById("myBtn").style.height = "50px";
Try it Yourself 
Description
The height property sets or returns the height of an element.
The height property has effect only on block-level elements or on elements 
with absolute or fixed position. The overflowing content can be manipulated with 
the overflow property.
Tip:
Use the
width
property to set or return the width of an element.
Browser Support
Property
height
Yes
Yes
Yes
Yes
Yes
Syntax
Return the height property:
object
.style.height
Set the height property:
object
.style.height = "auto|
length|%
|initial|inherit"
Property Values
Value
Description
auto
The browser sets the height. This is default
length
Defines the height in length units
%
Defines the height in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the height of an element
CSS Version
CSS1
More Examples
Example
Change the height of a <div> element:
document.getElementById("myDIV").style.height = "500px";
Try it Yourself 
Example
Change the height and width of an <img> element:
document.getElementById("myImg").style.height = "300px";
document.getElementById("myImg").style.width = "300px";
Try it Yourself 
Example
Return the height of an <img> element:
alert(document.getElementById("myImg").style.height);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS tutorial:
CSS Box model
CSS reference:
height property
Style
lineHeight
Property
Example
Set the line height for a <div> element:
document.getElementById("myDiv").style.lineHeight = "3";
Try it Yourself 
Description
The lineHeight property sets or returns the distance between lines in a text.
Browser Support
Property
lineHeight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the lineHeight property:
object
.style.lineHeight
Set the lineHeight property:
object
.style.lineHeight = "normal|
number
|
length
|
%
|initial|inherit"
Property Values
Value
Description
normal
Normal line height is used. This is default
number
A number that will be multiplied with the current  font size to set the line height
length
Defines the line height in length units
%
Defines the line height in % of the current  font size
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the distance between lines in the text
CSS Version
CSS1
More Examples
Example
Return the line height of a <div> element:
alert(document.getElementById("myDiv").style.lineHeight);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
line-height property
HTM DOM Document createEvent()
Example
Simulate a mouseover event:
const ev = document.createEvent("MouseEvent");
ev.initMouseEvent("mouseover", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
document.getElementById("myDiv").dispatchEvent(ev);
Try it Yourself 
Description
The
createEvent()
method creates an event 
object.
The event must be of a legal event type, and must be initialized (dipatched) before use.
Syntax
document.createEvent(
type
)
Parameters
Parameter
Description
type
Required.
The type of event.
AnimationEvent
ClipboardEvent
DragEvent
FocusEvent
HashChangeEvent
InputEvent
KeyboardEvent
MouseEvent
PageTransitionEvent
PopStateEvent
ProgressEvent
StorageEvent
TouchEvent
TransitionEvent
UiEvent
WheelEvent
Return Value
Type
Description
Object
An Event object.
Browser Support
document.createEvent()
is a DOM Level 1 (1998) feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
borderBottom
Property
Example
Add a bottom border to a <div> element:
document.getElementById("myDiv").style.borderBottom = "thick solid #0000FF";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The borderBottom property sets or returns up to three separate border-bottom properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any order):
border-bottom-width
border-bottom-style
border-bottom-color
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottom
1.0
4.0
1.0
1.0
3.5
Syntax
Return the borderBottom property:
object
.style.borderBottom
Set the borderBottom property:
object
.style.borderBottom
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the bottom border
style
Sets the style of the bottom border
color
Sets the color of the bottom border
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the width, style and/or color of the bottom border of an element
CSS Version
CSS1
More Examples
Example
Change the width, style and color of the bottom border of a <div> element:
document.getElementById("myDiv").style.borderBottom = "thin dotted red";
Try it Yourself 
Example
Return the border-bottom property values of a <div> element:
alert(document.getElementById("myDiv").style.borderBottom);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom property
HTML DOM reference:
border property
Style
borderBottomLeftRadius
Property
Example
Add a rounded border to the bottom-left corner of a div element:
document.getElementById("myDIV").style.borderBottomLeftRadius = "25px";
Try it Yourself 
Description
The borderBottomLeftRadius property sets or returns the shape of the border of the bottom-left corner.
Tip:
This property allow you to add rounded borders to elements!
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottomLeftRadius
5.0
9.0
4.0
5.0
10.5
Syntax
Return the borderBottomLeftRadius property:
object
.style.borderBottomLeftRadius
Set the borderBottomLeftRadius property:
object
.style.borderBottomLeftRadius
= "length
|
%
[
length
|
%
]|initial|inherit"
Property Values
Value
Description
length
Defines the shape of the bottom-left corner. Default value is 0
%
Defines the shape of the bottom-left corner in %
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-bottom-left-radius property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-bottom-left-radius property
Style
borderBottomRightRadius
Property
Example
Add a rounded border to the bottom-right corner of a div element:
document.getElementById("myDIV").style.borderBottomRightRadius = "25px";
Try it Yourself 
Description
The borderBottomRightRadius property sets or returns the shape of the border of the bottom-right corner.
Tip:
This property allow you to add rounded borders to elements!
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottomRightRadius
5.0
9.0
4.0
5.0
10.5
Syntax
Return the borderBottomRightRadius property:
object
.style.borderBottomRightRadius
Set the borderBottomRightRadius property:
object
.style.borderBottomRightRadius
= "length
|
%
[
length
|
%
]|initial|inherit"
Property Values
Value
Description
length
Defines the shape of the bottom-right corner. Default value is 0
%
Defines the shape of the bottom-right corner in %
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-bottom-right-radius property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-bottom-right-radius property
Style
borderBottomStyle
Property
Example
Add a "solid" bottom border to a <div> element:
document.getElementById("myDiv").style.borderBottomStyle = "solid";
Try it Yourself 
Description
The borderBottomStyle property sets or returns the style of the bottom border of an element.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderBottomStyle
1.0
5.5
1.0
1.0
9.2
Syntax
Return the borderBottomStyle property:
object
.style.borderBottomStyle
Set the borderBottomStyle property:
object
.style.borderBottomStyle =
value
Property Values
Value
Description
none
Defines no border. This is default
hidden
Same as "none", except in border conflict  resolution for table elements
dotted
Defines a dotted border
dashed
Defines a dashed border
solid
Defines a solid border
double
Defines two borders. The width of the two borders are  the same as the border-width value
groove
Defines a 3D grooved border. The effect depends on the  border-color value
ridge
Defines a 3D ridged border. The effect depends on the  border-color value
inset
Defines a 3D inset border. The effect depends on the  border-color value
outset
Defines a 3D outset border. The effect depends on the  border-color value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's bottom border
CSS Version
CSS1
More Examples
Example
Change the style of the bottom border of a <div> element to "dotted":
document.getElementById("myDiv").style.borderBottomStyle = "dotted";
Try it Yourself 
Example
Return the bottom border style of a <div> element:
alert(document.getElementById("myDiv").style.borderBottomStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.borderBottomStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-bottom-style property
HTML DOM reference:
border property
Style
borderCollapse
Property
Example
Collapse the table border:
document.getElementById("myTable").style.borderCollapse = "collapse";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The borderCollapse property sets or returns whether the table border should be collapsed into a single border or not.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderCollapse
1.0
5.0
1.0
1.2
4.0
Syntax
Return the borderCollapse property:
object
.style.borderCollapse
Set the borderCollapse property:
object
.style.borderCollapse = "separate|collapse|initial|inherit"
Property Values
Value
Description
separate
Separate borders are drawn for all table cell elements. This is default
collapse
Borders are not drawn between table cell elements
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
separate
Return Value:
A String, representing the borders of a table
CSS Version
CSS2
More Examples
Example
Return the borderCollapse property:
alert(document.getElementById("myTable").style.borderCollapse);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
CSS reference:
border-collapse property
Style
borderImage
Property
Example
Specify an image as the border around a <div> element:
document.getElementById("myDIV").style.borderImage = "url(border.png) 30 30 round";
Try it Yourself 
Description
The borderImage property is a shorthand property for setting the
borderImageSource
,
borderImageSlice
,
borderImageWidth
,
borderImageOutset
and
borderImageRepeat
properties.
Omitted values are set to their default values.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImage
16.0
11.0
15.0
6.0
15.0
Syntax
Return the borderImage property:
object
.style.borderImage
Set the borderImage property:
object
.style.borderImage
= "source slice width outset repeat
|initial|inherit"
Property Values
Value
Description
borderImageSource
The path to the image to be used as a border
borderImageSlice
The inward offsets of the image-border
borderImageWidth
The widths of the image-border
borderImageOutset
The amount by which the border image area extends beyond the border box
borderImageRepeat
Whether the image-border should be repeated, rounded or stretched
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none 100% 1 0 stretch
Return Value:
A String, representing the border-image property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image property
Style
borderImageRepeat
Property
Example
Specify how to repeat the image-border:
document.getElementById("myDIV").style.borderImageRepeat = "round";
Try it Yourself 
Description
The borderImageRepeat property sets or returns whether the image-border should be repeated, rounded or stretched.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImageRepeat
Yes
11.0
Yes
6.0
15.0
Look at the
borderImage
property instead!
Syntax
Return the borderImageRepeat property:
object
.style.borderImageRepeat
Set the borderImageRepeat property:
object
.style.borderImageRepeat = "stretch|repeat|round|initial|inherit"
Property Values
Value
Description
stretch
Default value. The image is stretched to fill the area
repeat
The image is tiled (repeated) to fill the area
round
The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so it fits
space
The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
stretch
Return Value:
A String, representing the border-image-repeat property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image-repeat property
Style
cursor
Property
Example
Change the cursor:
document.getElementById("demo").style.cursor = "pointer";
Try it Yourself 
Description
The cursor property sets or returns the type of cursor to display for the mouse pointer.
Browser Support
Property
cursor
Yes
Yes
Yes
Yes
Yes
Syntax
Return the cursor property:
object
.style.cursor
Set the cursor property:
object
.style.cursor =
value
Property Values
Value
Description
alias
The cursor indicates an alias of something is to be created
all-scroll
The cursor indicates that something can be scrolled in any direction
auto
Default. The browser sets a cursor
cell
The cursor indicates that a cell (or set of cells) may be selected
context-menu
The cursor indicates that a context-menu is available
col-resize
The cursor indicates that the column can be resized horizontally
copy
The cursor indicates something is to be copied
crosshair
The cursor render as a crosshair
default
The default cursor
e-resize
The cursor indicates that an edge of a box is to be moved right (east)
ew-resize
Indicates a bidirectional resize cursor
help
The cursor indicates that help is available
move
The cursor indicates something is to be moved
n-resize
The cursor indicates that an edge of a box is to be moved up (north)
ne-resize
The cursor indicates that an edge of a box is to be moved up and right (north/east)
nesw-resize
Indicates a bidirectional resize cursor
ns-resize
Indicates a bidirectional resize cursor
nw-resize
The cursor indicates that an edge of a box is to be moved up and left (north/west)
nwse-resize
Indicates a bidirectional resize cursor
no-drop
The cursor indicates that the dragged item cannot be dropped here
none
No cursor is rendered for the element
not-allowed
The cursor indicates that the requested action will not be executed
pointer
The cursor is a pointer and indicates a link
progress
The cursor indicates that the program is busy (in progress)
row-resize
The cursor indicates that the row can be resized vertically
s-resize
The cursor indicates that an edge of a box is to be moved down (south)
se-resize
The cursor indicates that an edge of a box is to be moved down and right (south/east)
sw-resize
The cursor indicates that an edge of a box is to be moved down and left (south/west)
text
The cursor indicates text that may be selected
URL
A comma separated list of URLs to custom cursors.
Note:
Always specify a generic cursor at the end of the list, in case none of the URL-defined cursors can be used
vertical-text
The cursor indicates vertical-text that may be selected
w-resize
The cursor indicates that an edge of a box is to be moved left (west)
wait
The cursor indicates that the program is busy
zoom-in
The cursor indicates that something can be zoomed in
zoom-out
The cursor indicates that something can be zoomed out
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the displayed mouse cursor when the mouse pointer is over an element
CSS Version
CSS2
More Examples
Example
Show all available cursors:
var whichSelected = x.selectedIndex;
document.body.style.cursor = x.options[whichSelected].text;
Try it Yourself 
Example
Return the type of cursor:
alert(document.getElementById("demo").style.cursor);
Try it Yourself 
Related Pages
CSS reference:
cursor property
Style
direction
Property
Example
Set the text direction of a <p> element to "right-to-left":
document.getElementById("demo").style.direction = "rtl";
Try it Yourself 
Description
The direction property sets or returns the text direction (reading order) of an element's content.
Browser Support
Property
direction
Yes
Yes
Yes
Yes
Yes
Syntax
Return the direction property:
object
.style.direction
Set the direction property:
object
.style.direction = "ltr|rtl|initial|inherit"
Property Values
Value
Description
ltr
Text flows from left to right. This is default
rtl
Text flows from right to left
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
ltr
Return Value:
A String, representing the text direction of an element
CSS Version
CSS2
More Examples
Example
Return the text direction of a <p> element:
alert(document.getElementById("demo").style.direction);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
direction property
HTML reference:
HTML dir Attribute
HTML DOM reference:
HTML DOM dir Property
Style
fontFamily
Property
Example
Set the font for an element:
document.getElementById("demo").style.fontFamily = "Impact,Charcoal,sans-serif";
Try it Yourself 
Description
The fontFamily property sets or returns a list of font-family names and/or 
generic-family names for text in an element.
The browser will use the first value it recognizes.
There are two types of font-family values:
font-family: The name of a font-family, like "verdana" or "arial"
generic-family: The name of a generic font-family, like "serif" or "sans-serif"
Tip:
Always specify a generic-family name as the last alternative!
Note:
Separate each value with a comma.
Note:
If a font-family name contains whitespace, it must be quoted.
Tip:
Look at
Web safe fonts
for commonly used font combinations.
Browser Support
Property
fontFamily
Yes
Yes
Yes
Yes
Yes
Syntax
Return the fontFamily property:
object
.style.fontFamily
Set the fontFamily property:
object
.style.fontFamily
= "font1, font2, etc.
|initial|inherit"
Property Values
Value
Description
font1, font2, etc.
A comma-separated list of font-family names and/or generic-family  names
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the font name of the text in the element
CSS Version
CSS1
More Examples
Example
A demonstration of possible values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("demo").style.fontFamily = listValue;
Try it Yourself 
Example
Return the font of an element:
alert(document.getElementById("demo").style.fontFamily);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-family property
HTML DOM reference:
font property
Style
borderImageWidth
Property
Example
Specify the widths of the image-border:
document.getElementById("myDIV").style.borderImageWidth = "20px 30px";
Try it Yourself 
Description
The borderImageWidth property specifies the widths of the image-border.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImageWidth
Yes
11.0
Yes
6.0
15.0
Look at the
borderImage
property instead!
Syntax
Return the borderImageWidth property:
object
.style.borderImageWidth
Set the borderImageWidth property:
object
.style.borderImageWidth
= "number
|
%
|auto|initial|inherit"
Property Values
Value
Description
length
A length unit (px) specifying the size of the border-width
number
Default value 1. Represents multiples of the corresponding border-width
%
Refers to the size of the border image area: the width of the area for horizontal offsets, the height for vertical offsets
auto
If specified, the width is the intrinsic width or height of the corresponding image slice
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
1
Return Value:
A String, representing the border-image-width property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image-width property
Style
borderLeftColor
Property
Example
Change the color of the left border of a <div> element to red:
document.getElementById("myDiv").style.borderLeftColor = "red";
Try it Yourself 
Description
The borderLeftColor property sets or returns the color of the left border of an element.
Browser Support
Property
borderLeftColor
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderLeftColor property:
object
.style.borderLeftColor
Set the borderLeftColor property:
object
.style.borderLeftColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the left border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the current color of the element
transparent
The color of the left border is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
current color
Return Value:
A String, representing the color of an element's left border
CSS Version
CSS1
More Examples
Example
Return the left border color of a <div> element:
alert(document.getElementById("myDiv").style.borderLeftColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left-color property
HTML DOM reference:
border property
Style
borderLeftStyle
Property
Example
Add a "solid" left border to a <div> element:
document.getElementById("myDiv").style.borderLeftStyle = "solid";
Try it Yourself 
Description
The borderLeftStyle property sets or returns the style of the left border of an element.
Browser Support
Property
borderLeftStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderLeftStyle property:
object
.style.borderLeftStyle
Set the borderLeftStyle property:
object
.style.borderLeftStyle =
value
Property Values
Value
Description
none
Defines no border. This is default
hidden
Same as "none", except in border conflict  resolution for table elements
dotted
Defines a dotted border
dashed
Defines a dashed border
solid
Defines a solid border
double
Defines two borders. The width of the two borders are  the same as the border-width value
groove
Defines a 3D grooved border. The effect depends on the  border-color value
ridge
Defines a 3D ridged border. The effect depends on the  border-color value
inset
Defines a 3D inset border. The effect depends on the  border-color value
outset
Defines a 3D outset border. The effect depends on the  border-color value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's left border
CSS Version
CSS1
More Examples
Example
Change the style of the left border of a <div> element to "dotted":
document.getElementById("myDiv").style.borderLeftStyle = "dotted";
Try it Yourself 
Example
Return the left border style of a <div> element:
alert(document.getElementById("myDiv").style.borderLeftStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.borderLeftStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left-style property
HTML DOM reference:
border property
Style
borderLeftWidth
Property
Example
Change the width of the left border of a <div> element to 10px:
document.getElementById("myDiv").style.borderLeftWidth = "10px";
Try it Yourself 
Description
The borderLeftWidth property sets or returns the width of the left border of an element.
Browser Support
Property
borderLeftWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderLeftWidth property:
object
.style.borderLeftWidth
Set the borderLeftWidth property:
object
.style.borderLeftWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin border
medium
Defines a medium border. This is default
thick
Defines a thick border
length
The width of the border in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's left border
CSS Version
CSS1
More Examples
Example
Change the width of the left border of a <div> element to thin:
document.getElementById("myDiv").style.borderLeftWidth = "thin";
Try it Yourself 
Example
Return the width of the left border of a <div> element:
alert(document.getElementById("myDiv").style.borderLeftWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-left-width property
HTML DOM reference:
border property
Style
borderRadius
Property
Example
Add rounded borders to a div element:
document.getElementById("myDIV").style.borderRadius = "25px";
Try it Yourself 
Description
The borderRadius property is a shorthand property for setting, or returning, the four borderRadius properties.
The four border radius properties are (in this order):
borderTopLeftRadius
borderTopRightRadius
borderBottomRightRadius
borderBottomLeftRadius
Tip:
This property allows you to add rounded corners to elements!
Browser Support
Property
borderRadius
Yes
9.0
Yes
Yes
Yes
Syntax
Return the borderRadius property:
object
.style.borderRadius
Set the borderRadius property:
object
.style.borderRadius
= "1-4 length
|
%
/
1-4 length
|
%
|initial|inherit"
Note:
The four values for each radii are given in the order top-left, top-right, 
bottom-right, bottom-left. If bottom-left is omitted it is the same as 
top-right. If bottom-right is omitted it is the same as top-left. If top-right 
is omitted it is the same as top-left.
Property Values
Value
Description
length
Defines the shape of the corners. Default value is 0
%
Defines the shape of the corners in %
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-radius property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-radius property
Style
borderRight
Property
Example
Add a right border to a <div> element:
document.getElementById("myDiv").style.borderRight = "thick solid #0000FF";
Try it Yourself 
Description
The borderRight property sets or returns up to three separate border-right properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any order):
border-right-width
border-right-style
border-right-color
Browser Support
Property
borderRight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderRight property:
object
.style.borderRight
Set the borderRight property:
object
.style.borderRight
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the right border
style
Sets the style of the right border
color
Sets the color of the right border
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the width, style and/or color of the right border of an element
CSS Version
CSS1
More Examples
Example
Change the width, style and color of the right border of a <div> element:
document.getElementById("myDiv").style.borderLeft = "thin dotted red";
Try it Yourself 
Example
Return the border-right property values of a <div> element:
alert(document.getElementById("myDiv").style.borderLeft);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right property
HTML DOM reference:
border property
Style
borderRightColor
Property
Example
Change the color of the right border of a <div> element to red:
document.getElementById("myDiv").style.borderRightColor = "red";
Try it Yourself 
Description
The borderRightColor property sets or returns the color of the right border of an element.
Browser Support
Property
borderRightColor
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderRightColor property:
object
.style.borderRightColor
Set the borderRightColor property:
object
.style.borderRightColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the right border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the current color of the element
transparent
The color of the right border is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
current color
Return Value:
A String, representing the color of an element's right border
CSS Version
CSS1
More Examples
Example
Return the right border color of a <div> element:
alert(document.getElementById("myDiv").style.borderRightColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right-color property
HTML DOM reference:
border property
Style
borderRightWidth
Property
Example
Change the width of the right border of a <div> element to 10px:
document.getElementById("myDiv").style.borderRightWidth = "10px";
Try it Yourself 
Description
The borderRightWidth property sets or returns the width of the right border of 
an element.
Browser Support
Property
borderRightWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderRightWidth property:
object
.style.borderRightWidth
Set the borderRightWidth property:
object
.style.borderRightWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin border
medium
Defines a medium border. This is default
thick
Defines a thick border
length
The width of the border in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's right border
CSS Version
CSS1
More Examples
Example
Change the width of the right border of a <div> element to thin:
document.getElementById("myDiv").style.borderRightWidth = "thin";
Try it Yourself 
Example
Return the width of the right border of a <div> element:
alert(document.getElementById("myDiv").style.borderRightWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-right-width property
HTML DOM reference:
border property
Style
borderStyle
Property
Example
Add a "solid" border to a <div> element:
document.getElementById("myDiv").style.borderStyle = "solid";
Try it Yourself 
Description
The borderStyle property sets or returns the style of an element's border.
This property can take from one to four values:
One value, like: p {border-style: solid} - all four borders will be solid
Two values, like: p {border-style: solid dotted} - top and bottom border will be solid, left and right border will be dotted
Three values, like: p {border-style: solid dotted double}- top border will be solid, left and right border will be dotted, bottom border will be double
Four values, like: p {border-style: solid dotted double dashed} - top border will be solid, right border will be dotted, bottom border will be double, left border will be dashed
Browser Support
Property
borderStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderStyle property:
object
.style.borderStyle
Set the borderStyle property:
object
.style.borderStyle =
value
Property Values
Value
Description
none
Defines no border. This is default
hidden
The same as "none", except in border conflict  resolution for table elements
dotted
Defines a dotted border
dashed
Defines a dashed border
solid
Defines a solid border
double
Defines two borders. The width of the two borders are  the same as the border-width value
groove
Defines a 3D grooved border. The effect depends on the  border-color value
ridge
Defines a 3D ridged border. The effect depends on the  border-color value
inset
Defines a 3D inset border. The effect depends on the  border-color value
outset
Defines a 3D outset border. The effect depends on the  border-color value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's border
CSS Version
CSS1
More Examples
Example
Change the style of the four borders of a <div> element:
document.getElementById("myDiv").style.borderStyle = "dotted solid double dashed";
Try it Yourself 
Example
Return the border style of a <div> element:
alert(document.getElementById("myDiv").style.borderStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.borderStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-style property
HTML DOM reference:
border property
Style
fontSizeAdjust
Property
Example
Adjust font size:
document.getElementById("demo").style.fontSizeAdjust = "0.58";
Try it Yourself 
Description
The fontSizeAdjust property sets or returns the font aspect value of a text.
All fonts have an
aspect value
which is the size-difference between 
the lowercase letter "x" and the uppercase letter "X".
The fontSizeAdjust property gives you better control of the font size when 
the first-choice font is not available. When a font is not available, the 
browser uses the second specified font. This could result in a big change for 
the font size. To prevent this, use this property.
When the browser knows the aspect value for the first choice-font, the 
browser can figure out what font-size to use when displaying text with the 
second-choice font.
Browser Support
Property
fontSizeAdjust
Not supported
Not supported
Yes
Not supported
Not supported
Syntax
Return the fontSizeAdjust property:
object
.style.fontSizeAdjust
Set the fontSizeAdjust property:
object
.style.fontSizeAdjust = "none|
number
|initial|inherit"
Value
Description
none
Default value. No font size adjustment
number
Preserve the first-choice font's x-height, and calculate the aspect value ratio for the font.
The formula that is used: font-size of first-choice font*(aspect value of first-choice font/aspect value of available font)=font-size to use on available font
Example: If 14px Verdana (aspect value of 0.58) was unavailable, but the available font, Times New Roman, has an aspect value of 0.46, the adjusted font-size to use would be 14*(0.58/0.46) = 17.65px.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the font aspect value of a text
CSS Version
CSS3
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-size property
HTML DOM reference:
font property
Style
listStyle
Property
Example
Change the style of a list:
document.getElementById("myList").style.listStyle = "decimal inside";
Try it Yourself 
Description
The listStyle property sets or returns up to three separate list properties, in a shorthand form.
With this property, you can set/return one or more of the following (in any order):
list-style-type
list-style-position
list-style-image
Browser Support
Property
listStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the listStyle property:
object
.style.listStyle
Set the listStyle property:
object
.style.listStyle
= "type position image
|initial|inherit"
Property Values
Parameter
Description
type
Defines the list-item marker type
position
Positions the list-item marker
image
Defines an image to be used as the list-item marker
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
disc outside none
Return Value:
A String, representing the style of a list
CSS Version
CSS1
More Examples
Example
Change the type and position of a list to "square inside":
document.getElementById("myList").style.listStyle = "square inside";
Try it Yourself 
Example
Return the list style:
document.getElementById("myList").style.listStyle;
Try it Yourself 
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style property
Style
marginTop
Property
Example
Set the top margin of a <div> element:
document.getElementById("myDiv").style.marginTop = "50px";
Try it Yourself 
Description
The marginTop property sets or returns the top margin of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space within the border of an element.
Browser Support
Property
marginTop
Yes
Yes
Yes
Yes
Yes
Syntax
Return the marginTop property:
object
.style.marginTop
Set the marginTop property:
object
.style.marginTop
= "%
|
length
|auto|initial|inherit"
Property Values
Value
Description
%
Defines the top margin in % of the width of the parent element
length
Defines the top margin in length units
auto
The browser sets the top margin
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the top margin of an element
CSS Version
CSS1
More Examples
Example
Change the top margin of a <div> element back to "normal":
document.getElementById("myDiv").style.marginTop = "0px";
Try it Yourself 
Example
Return the top margin of a <div> element:
alert(document.getElementById("myDiv").style.marginTop);
Try it Yourself 
Example
Difference between marginTop and paddingTop:
function changeMargin() {
document.getElementById("myDiv").style.marginTop = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingTop = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS reference:
margin-top property
HTML DOM reference:
margin property
Style
minHeight
Property
Example
Set the minimum height of a <div> element:
document.getElementById("myDIV").style.minHeight = "100px";
Try it Yourself 
Description
The minHeight property sets or returns the minimum height of an element.
The minHeight property has effect only on block-level elements or on elements 
with absolute or fixed position.
Tip:
To set or return the maximum height of an element, use 
the
maxHeight
property.
Browser Support
Property
minHeight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the minHeight property:
object
.style.minHeight
Set the minHeight property:
object
.style.minHeight
= "length|%
|initial|inherit"
Property Values
Value
Description
length
Defines the minimum height in length units. Default is 0
%
Defines the minimum height in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the minimum height of an element
CSS Version
CSS2
More Examples
Example
Return the minimum height of a <div> element:
alert(document.getElementById("myDiv").style.minHeight);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS reference:
min-height property
Style
objectFit
Property
Example
Cut off the sides of an image, preserving the aspect ratio, and fill in the space:
document.getElementById("myImg").style.objectFit = "cover";
Try it Yourself 
Description
The objectFit property is used to specify how an <img> or <video> 
should be resized to fit its container.
This property tells the content 
to fill the container in a variety of ways; such as "preserve that aspect ratio" 
or "stretch up and take up as much space as possible"
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
objectFit
31.0
16.0
36.0
7.1
19.0
Syntax
Return the objectFit property:
object
.style.objectFit
Set the objectFit property:
object
.style.objectFit = "fill|contain|cover|scale-down|none|initial|inherit"
Property Values
Value
Description
fill
This is default. The replaced content is sized to fill the element's 
    content box. If necessary, the object will be stretched or squished to fit
contain
The replaced content is scaled to maintain its aspect ratio while fitting within the element's content box
cover
The replaced content is sized to maintain its aspect ratio while filling the element's entire content box. The object will be clipped to fit
none
The replaced content is not resized
scale-down
The content is sized as if none or contain were specified (would result in a smaller concrete object size)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
fill
Return Value:
A String, representing the object-fit of an element
CSS Version
CSS3
Related Pages
CSS tutorial:
CSS object-fit
CSS reference:
object-fit property
Style
opacity
Property
Example
Make a DIV element transparent:
document.getElementById("myDIV").style.opacity = "0.5";
Try it Yourself 
Description
The opacity property sets or returns the opacity level of an element.
The opacity-level of an element describes the transparency-level, where 1 is not transperant at all, 0.5 is 50% see-through, and 0 is completely transparent.
Browser Support
Property
opacity
Yes
Yes
Yes
Yes
Yes
Syntax
Return the opacity property:
object
.style.opacity
Set the opacity property:
object
.style.opacity
= "number
|initial|inherit"
Property Values
Value
Description
number
Specifies the opacity. From 0.0 (fully transparent) to 1.0 (fully opaque)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
1
Return Value:
A String, representing the opacity-level of an element
CSS Version
CSS3
Related Pages
CSS reference:
opacity property
Style
marginLeft
Property
Example
Set the left margin of a <div> element:
document.getElementById("myDiv").style.marginLeft = "50px";
Try it Yourself 
Description
The marginLeft property sets or returns the left margin of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
marginLeft
Yes
Yes
Yes
Yes
Yes
Syntax
Return the marginLeft property:
object
.style.marginLeft
Set the marginLeft property:
object
.style.marginLeft
= "%
|
length
|auto|inherit"
Property Values
Value
Description
%
Defines the left margin in % of the width of the parent element
length
Defines the left margin in length units
auto
The browser sets the left margin
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the left margin of an element
CSS Version
CSS1
More Examples
Example
Change the left margin of a <div> element back to "normal":
document.getElementById("myDiv").style.marginLeft = "0px";
Try it Yourself 
Example
Return the left margin of a <div> element:
alert(document.getElementById("myDiv").style.marginLeft);
Try it Yourself 
Example
Difference between marginLeft and paddingLeft:
function changeMargin() {
document.getElementById("myDiv").style.marginLeft = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingLeft = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS reference:
margin-left property
HTML DOM reference:
margin property
Style
order
Property
Example
Set the order of the flexible items:
document.getElementById("myRedDIV").style.order = "4";
document.getElementById("myBlueDIV").style.order = "3";
document.getElementById("myGreenDIV").style.order = "1";
document.getElementById("myPinkDIV").style.order = "2";
Try it Yourself 
Description
The order property specifies the order of a flexible item relative to the rest of the flexible items inside the same container.
Note:
If the element is not a flexible item, the order property has no effect.
Browser Support
Property
order
Yes
12.0
Yes
Yes
Yes
Syntax
Return the order property:
object
.style.order
Set the order property:
object
.style.order
= "number
|initial|inherit"
Property Values
Value
Description
number
Default value 0. Specifies the order for the flexible item
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the order property of an element
CSS Version
CSS3
Related Pages
CSS reference:
order property
HTML DOM STYLE Reference:
alignContent property
HTML DOM STYLE Reference:
alignItems property
HTML DOM STYLE Reference:
alignSelf property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
overflow
Property
Example
Use the overflow property to scroll overflowing content:
document.getElementById("myDIV").style.overflow = "scroll";
Try it Yourself 
Description
The overflow property sets or returns what to do with content that renders 
outside the element box.
Tip:
If you want to hide the scrollbars of the entire document, use 
the overflow property on the body or the html element.
Browser Support
Property
overflow
Yes
Yes
Yes
Yes
Yes
Syntax
Return the overflow property:
object
.style.overflow
Set the overflow property:
object
.style.overflow = "visible|hidden|scroll|auto|initial|inherit"
Property Values
Value
Description
visible
Content is NOT clipped and may be shown  outside the element box. This is default
hidden
Content outside the element box  is not shown
scroll
Scroll bars are added, and content is clipped when necessary
auto
Content is clipped and scroll bars are added when necessary
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
visible
Return Value:
A String, representing the content that renders outside the element box
CSS Version
CSS2
More Examples
Example
Use the overflow property to hide overflowing content:
document.getElementById("myDiv").style.overflow = "hidden";
Try it Yourself 
Example
Return the overflow property:
alert(document.getElementById("myDiv").style.overflow);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Overflow
CSS tutorial:
CSS Positioning
CSS reference:
overflow property
Style
borderTopColor
Property
Example
Change the color of the top border of a <div> element to red:
document.getElementById("myDiv").style.borderTopColor = "red";
Try it Yourself 
Description
The borderTopColor property sets or returns the color of the top border of an element.
Browser Support
Property
borderTopColor
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderTopColor property:
object
.style.borderTopColor
Set the borderTopColor property:
object
.style.borderTopColor
= "color
|transparent|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the top border. Look at
CSS Color Values
for a complete list of possible color values. Default color is the current color of the element
transparent
The color of the top border is transparent (underlying content will shine through)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
current color
Return Value:
A String, representing the color of an element's top border
CSS Version
CSS1
More Examples
Example
Return the top border color of a <div> element:
alert(document.getElementById("myDiv").style.borderTopColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top-color property
HTML DOM reference:
border property
Style
borderTopStyle
Property
Example
Add a "solid" top border to a <div> element:
document.getElementById("myDiv").style.borderTopStyle = "solid";
Try it Yourself 
Description
The borderTopStyle property sets or returns the style of the top border 
of an element.
Browser Support
Property
borderTopStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderTopStyle property:
object
.style.borderTopStyle
Set the borderTopStyle property:
object
.style.borderTopStyle =
value
|initial|inherit
Property Values
Value
Description
none
Defines no border. This is default
hidden
Same as "none", except in border conflict  resolution for table elements
dotted
Defines a dotted border
dashed
Defines a dashed border
solid
Defines a solid border
double
Defines two borders. The width of the two borders are  the same as the border-width value
groove
Defines a 3D grooved border. The effect depends on the  border-color value
ridge
Defines a 3D ridged border. The effect depends on the  border-color value
inset
Defines a 3D inset border. The effect depends on the  border-color value
outset
Defines a 3D outset border. The effect depends on the  border-color value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's top border
CSS Version
CSS1
More Examples
Example
Change the style of the top border of a <div> element to "dotted":
document.getElementById("myDiv").style.borderTopStyle = "dotted";
Try it Yourself 
Example
Return the top border style of a <div> element:
alert(document.getElementById("myDiv").style.borderTopStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.borderTopStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top-style property
HTML DOM reference:
border property
Style
borderTopWidth
Property
Example
Change the width of the top border of a <div> element to 10px:
document.getElementById("myDiv").style.borderTopWidth = "10px";
Try it Yourself 
Description
The borderTopWidth property sets or returns the width of the top border of 
an element.
Browser Support
Property
borderTopWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the borderTopWidth property:
object
.style.borderTopWidth
Set the borderTopWidth property:
object
.style.borderTopWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin border
medium
Defines a medium border. This is default
thick
Defines a thick border
length
The width of the border in length units
inherit
The width of the top border is inherited from the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's top border
CSS Version
CSS1
More Examples
Example
Change the width of the top border of a <div> element to thin:
document.getElementById("myDiv").style.borderTopWidth = "thin";
Try it Yourself 
Example
Return the width of the top border of a <div> element:
alert(document.getElementById("myDiv").style.borderTopWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Border
CSS reference:
border-top-width property
HTML DOM reference:
border property
Style
borderTopRightRadius
Property
Example
Add a rounded border to the top-right corner of a div element:
document.getElementById("myDIV").style.borderTopRightRadius = "25px";
Try it Yourself 
Description
The borderTopRightRadius property defines the shape of the border of the top-right corner.
Tip:
This property allow you to add rounded borders to elements!
Browser Support
Property
borderTopRightRadius
Yes
9.0
Yes
Yes
Yes
Syntax
Return the borderTopRightRadius property:
object
.style.borderTopRightRadius
Set the borderTopRightRadius property:
object
.style.borderTopRightRadius
= "length
|
%
[
length
|
%
]|initial|inherit"
Note:
The two length or percentage values of the 
border-top-right-radius properties define the radii of a quarter ellipse that 
defines the shape of the corner of the outer border edge. The first value is the 
horizontal radius, the second the vertical radius. If the second value is 
omitted it is copied from the first. If either length is zero, the corner is 
square, not rounded. Percentages for the horizontal radius refer to the width of 
the border box, whereas percentages for the vertical radius refer to the height 
of the border box.
Property Values
Value
Description
length
Defines the shape of the top-right corner
%
Defines the shape of the top-right corner in %
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-top-right-radius property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-top-right-radius property
Style
boxShadow
Property
Example
Add a box-shadow to a div element:
document.getElementById("myDIV").style.boxShadow = "10px 20px 30px blue";
Try it Yourself 
Description
The boxShadow property sets or returns the drop-shadows of a box element.
Browser Support
Property
boxShadow
Yes
9.0
Yes
5.1
Yes
Syntax
Return the boxShadow property:
object
.style.boxShadow
Set the boxShadow property:
object
.style.boxShadow = "none|
h-shadow v-shadow blur spread color
|inset|initial|inherit"
Note:
The boxShadow property attaches one or more drop-shadows to the 
box. The property is a comma-separated list of shadows, each specified by 2-4 
length values, an optional color, and an optional inset keyword. Omitted 
lengths are 0.
Property Values
Value
Description
none
Default value. No shadow is displayed
h-shadow
Required. The position of the horizontal shadow. Negative values are allowed
v-shadow
Required. The position of the vertical shadow. Negative values are allowed
blur
Optional. The blur distance
spread
Optional. The size of shadow
color
Optional. The color of the shadow. The default value is black. Look at
CSS Color Values
for a complete list of possible color values.
Note:
In Safari (on PC) the color parameter is required. If you do not specify the color, the shadow is not displayed at all.
inset
Optional. Changes the shadow from an outer shadow (outset) to an inner shadow
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the box-shadow property of an element
CSS Version
CSS3
Related Pages
CSS reference:
box-shadow property
Style
captionSide
Property
Example
Move the table caption to the bottom of the table:
document.getElementById("myCap").style.captionSide = "bottom";
Try it Yourself 
Description
The captionSide property sets or returns the position of the table caption.
Browser Support
Property
captionSide
Yes
9.0
Yes
Yes
Yes
Syntax
Return the captionSide property:
object
.style.captionSide
Set the captionSide property:
object
.style.captionSide = "top|bottom|initial|inherit"
Property Values
Value
Description
top
Default. Positions the table caption above the table
bottom
Positions the table caption below the table
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
top
Return Value:
A String, representing the position of the table caption
CSS Version
CSS2
More Examples
Example
Return the table caption:
alert(document.getElementById("myCap").style.captionSide);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
CSS reference:
caption-side property
Style
clear
Property
Example
Prohibit floating objects on the left side of the text in an element:
document.getElementById("demo").style.clear = "left";
Try it Yourself 
Description
The clear property sets or returns the position of the element relative to 
floating objects.
Browser Support
Property
clear
Yes
Yes
Yes
Yes
Yes
Syntax
Return the clear property:
object
.style.clear
Set the clear property:
object
.style.clear = "none|left|right|both|initial|inherit"
Property Values
Value
Description
none
Allows floating objects on both sides of the element. This is  default
left
No floating objects allowed on the left side of the element
right
No floating objects allowed on the right side of the element
both
No floating objects allowed on either the left or right side of the  element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the position of an element relative to floating objects
CSS Version
CSS1
More Examples
Example
Return the clear property:
alert(document.getElementById("demo").style.clear);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Float
CSS reference:
clear property
Style
clip
Property
Example
Clip an image into a specified shape:
document.getElementById("myImg").style.clip = "rect(0px 75px 75px 0px)";
Try it Yourself 
Description
The clip property sets or returns which part of a positioned element is 
visible.
Browser Support
Property
clip
Yes
Yes
Yes
Yes
Yes
Syntax
Return the clip property:
object
.style.clip
Set the clip property:
object
.style.clip = "auto|rect(
top right bottom left
)|initial|inherit"
Property Values
Value
Description
auto
Default. The element does not clip
rect(top right bottom left)
Clips the shape defined by the four coordinates
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the part of a positioned element that is visible
CSS Version
CSS2
More Examples
Example
Return the clip property:
alert(document.getElementById("myImg").style.clip);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
clip property
Style
margin
Property
Example
Set all four margins of a <div> element:
document.getElementById("myDiv").style.margin = "50px 10px 20px 30px";
Try it Yourself 
Description
The margin property sets or returns the  
margins of an element.
This property can take from one to four values:
One value, like: div {margin: 50px} - all four margins will be 50px
Two values, like: div {margin: 50px 10px} - the top and bottom margins will be 50px, left and right margins will be 10px
Three values, like: div {margin: 50px 10px 20px}- the top margin will be 50px, left and right margin will be 10px, bottom margin will be 20px
Four values, like: div {margin: 50px 10px 20px 30px} - the top margin will be 50px, right margin will be 10px, bottom margin will be 20px, left margin will be 30px
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
margin
Yes
Yes
Yes
Yes
Yes
Syntax
Return the margin property:
object
.style.margin
Set the margin property:
object
.style.margin
= "%
|
length
|auto|initial|inherit"
Property Values
Value
Description
%
Defines the margins in % of the width of the parent element
length
Defines the margins in length units
auto
The browser sets the margins (all four margins will be equal)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the margins of an element
CSS Version
CSS1
More Examples
Example
Change all four margins of a <div> element to "25px":
document.getElementById("myDiv").style.margin = "25px";
Try it Yourself 
Example
Return the margins of a <div> element:
alert(document.getElementById("myDiv").style.margin);
Try it Yourself 
Example
Difference between the margin property and the padding property:
function changeMargin() {
document.getElementById("myDiv").style.margin = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.padding = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS reference:
margin property
Style
padding
Property
Example
Set the padding of a <div> element:
document.getElementById("myDiv").style.padding = "50px 10px 20px 30px";
Try it Yourself 
Description
The padding property sets or returns the padding of an element.
This property can take from one to four values:
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
One value, like: div {padding: 50px} - all four sides will have a padding of 50px
Two values, like: div {padding: 50px 10px} - the top and bottom padding will be 50px, left and right padding will be 10px
Three values, like: div {padding: 50px 10px 20px} - the top padding will be 50px, left and right padding will be 10px, bottom padding will be 20px
Four values, like: div {padding: 50px 10px 20px 30px} - the top padding will be 50px, right padding will be 10px, bottom padding will be 20px, left padding will be 30px
Browser Support
Property
padding
Yes
Yes
Yes
Yes
Yes
Syntax
Return the padding property:
object
.style.padding
Set the padding property:
object
.style.padding
= "%
|
length
|initial|inherit"
Property Values
Value
Description
%
Defines the padding in % of the width of the parent element
length
Defines the padding in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the padding of an element
CSS Version
CSS1
More Examples
Example
Change the padding of all four sides of a <div> element to "25px":
document.getElementById("myDiv").style.padding = "25px";
Try it Yourself 
Example
Return the padding of a <div> element:
alert(document.getElementById("myDiv").style.padding);
Try it Yourself 
Example
Difference between the margin property and the padding property:
function changeMargin() {
document.getElementById("myDiv").style.margin = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.padding = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS reference:
padding property
Style
columnCount
Property
Example
Divide the text in the div element into three columns:
document.getElementById("myDIV").style.columnCount = 3;
Try it Yourself 
Description
The columnCount property specifies the number of columns an element should be divided into.
Browser Support
Property
columnCount
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnCount property:
object
.style.columnCount
Set the columnCount property:
object
.style.columnCount
= "number
|auto|initial|inherit"
Property Values
Value
Description
number
The optimal number of columns into which the content of the element will be flowed
auto
Default value. The number of columns will be determined by other properties, like e.g. "column-width"
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the column-count property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-count property
Style
columnRule
Property
Example
Specify the width, style and color of the rule between columns:
document.getElementById("myDIV").style.columnRule = "3px outset blue";
Try it Yourself 
Description
The columnRule property is a shorthand property for setting all the columnRule properties.
The columnRule property sets the width, style, and color of the rule between columns.
The column rule properties are, in any order:
columnRuleColor
columnRuleStyle
columnRuleWidth
Browser Support
Property
columnRule
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnRule property:
object
.style.columnRule
Set the columnRule property:
object
.style.columnRule
= "column-rule-width column-rule-style column-rule-color
|initial|inherit"
Property Values
Value
Description
columnRuleWidth
Sets the width of the rule between columns. Default value is medium
columnRuleStyle
Sets the style of the rule between columns. Default value is none
columnRuleColor
Sets the color of the rule between columns. Default value is the color of the element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium none
color
Return Value:
A String, representing the column-rule property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-rule property
Style
columnGap
Property
Example
Specify a 40 pixels gap between the columns:
document.getElementById("myDIV").style.columnGap = "50px";
Try it Yourself 
Description
The columnGap property specifies the gap between the columns.
Note:
If there is a column-rule between columns, it will appear in the middle of the gap.
Browser Support
Property
columnGap
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnGap property:
object
.style.columnGap
Set the columnGap property:
object
.style.columnGap
= "length
|normal|initial|inherit"
Property Values
Value
Description
length
A specified length that will set the gap between the columns
normal
Default value. Specifies a normal gap between the columns. W3C suggests a value of 1em
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the column-gap property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-gap property
Style
columnFill
Property
Example
Specify how to fill columns:
document.getElementById("myDIV").style.columnFill = "balance";
Try it Yourself 
Description
The columnFill property specifies how to fill columns, balanced or not.
Browser Support
Property
columnFill
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnFill property:
object
.style.columnFill
Set the columnFill property:
object
.style.columnFill = "balance|auto|initial|inherit"
Property Values
Value
Description
balance
Default value. Columns are balanced. Browsers should minimize the variation in column length
auto
Columns are filled sequentially, and they will have different lengths
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
balance
Return Value:
A String, representing the column-fill property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-fill property
Style
columnRuleColor
Property
Example
Specify the color of the rule between columns:
document.getElementById("myDIV").style.columnRuleColor = "blue";
Try it Yourself 
Description
The columnRuleColor property specifies the color of the rule between columns.
Browser Support
Property
columnRuleColor
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnRuleColor property:
object
.style.columnRuleColor
Set the columnRuleColor property:
object
.style.columnRuleColor
= "color
|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the rule. Look at
CSS Color Values
for a complete list of possible color values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
The current color of the element
Return Value:
A String, representing the column-rule-color property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-rule-color property
Style
columnRuleStyle
Property
Example
Change the style of the rule between columns:
document.getElementById("myDIV").style.columnRuleStyle = "dotted";
Try it Yourself 
Description
The columnRuleStyle property specifies the style of the rule between columns.
Browser Support
Property
columnRuleStyle
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnRuleStyle property:
object
.style.columnRuleStyle
Set the columnRuleStyle property:
object
.style.columnRuleStyle = "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|
initial|inherit"
Property Values
Value
Description
none
Default value. Defines no rule
hidden
Defines a hidden rule
dotted
Defines a dotted rule
dashed
Defines a dashed rule
solid
Defines a solid rule
double
Defines a double rule
groove
Specifies a 3D grooved rule. The effect depends on the width and color values
ridge
Specifies a 3D ridged rule. The effect depends on the width and color values
inset
Specifies a 3D inset rule. The effect depends on the width and color values
outset
Specifies a 3D outset rule. The effect depends on the width and color values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the column-rule-style property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-rule-style property
Style
counterIncrement
Property
Example
Change the counterIncrement property:
document.getElementById("myH1").style.counterIncrement = "subsection";
Try it Yourself 
Description
The counterIncrement property increments one or more counter values.
The counterIncrement property is usually used together with the counterReset property and the content property.
Browser Support
Property
counterIncrement
Yes
Yes
Yes
Yes
Yes
Syntax
Return the counterIncrement property:
object
.style.counterIncrement
Set the counterIncrement property:
object
.style.counterIncrement = "none|
id
|initial|inherit"
Property Values
Value
Description
none
Default value. No counters will be incremented
id number
The
id
defines which counter that should be incremented. The
number
sets how much the counter will increment on each occurrence of the selector. The default increment is 1. 0 or negative values, are allowed. If the
id
refers to a counter that has not been initialized by counter-reset, the default initial value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the counter-increment property of an element
CSS Version
CSS2
Style
counterReset
Property
Example
Change the counter-reset property:
document.body.style.counterReset = "section";
Try it Yourself 
Description
The counterReset property creates or resets one or more counters.
The counterReset property is usually used together with the counterIncrement property and the content property.
Browser Support
Property
counterReset
Yes
Yes
Yes
Yes
Yes
Syntax
Return the counterReset property:
object
.style.counterReset
Set the counterReset property:
object
.style.counterReset = "none|
name number
|initial|inherit"
Property Values
Value
Description
none
Default value. No counters will be reset
name
The
name
defines which counter that should be reset
number
The
id
defines which counter that should be reset. The
number
sets the value the counter is
      set to on each occurrence of the selector. The default reset value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the counter-increment property of an element
CSS Version
CSS2
Style
columnSpan
Property
Example
Let the h2 element span across all columns:
document.getElementById("myDIV").style.columnSpan = "all";
Try it Yourself 
Description
The columnSpan property specifies how many columns an element should span across.
Browser Support
Property
columnSpan
50.0
10.0
71.0
10.0
37.0
Syntax
Return the columnSpan property:
object
.style.columnSpan
Set the columnSpan property:
object
.style.columnSpan = "1|all|initial|inherit"
Property Values
Value
Description
1
Default value. The element should span across one column
all
The element should span across all columns
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
1
Return Value:
A String, representing the column-span property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-span property
Style
columnRuleWidth
Property
Example
Change the width of the rule between columns:
document.getElementById("myDIV").style.columnRuleWidth = "10px";
Try it Yourself 
Description
The columnRuleWidth property specifies the width of the rule between columns.
Browser Support
Property
columnRuleWidth
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columnRuleWidth property:
object
.style.columnRuleWidth
Set the columnRuleWidth property:
object
.style.columnRuleWidth = "medium|thin|thick|
length
|initial|inherit"
Property Values
Value
Description
medium
Default value. Defines a medium rule
thin
Defines a thin rule
thick
Defines a thick rule
length
Specifies the width of the rule
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the column-rule-width property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
column-rule-width property
Style
columns
Property
Example
Split the text into three columns, minimum 100 pixels each:
document.getElementById("myDIV").style.columns = "100px 3";
Try it Yourself 
Description
The columns property is a shorthand property for setting columnWidth and columnCount.
Browser Support
Property
columns
50.0
10.0
52.0
10.0
37.0
Syntax
Return the columns property:
object
.style.columns
Set the columns property:
object
.style.columns = "auto|
column-width column-count
|initial|inherit"
Property Values
Value
Description
auto
Default value. Sets both the column width to "auto" and the column-count to "auto"
columnWidth
The width of the columns
columnCount
The number of columns
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto auto
Return Value:
A String, representing the columns property of an element
CSS Version
CSS3
Related Pages
CSS3 tutorial:
CSS3 Multiple Columns
CSS reference:
columns property
Style
marginBottom
Property
Example
Set the bottom margin of a <div> element:
document.getElementById("myDiv").style.marginBottom = "50px";
Try it Yourself 
Description
The marginBottom property sets or returns the bottom margin of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space within the border of an element.
Browser Support
Property
marginBottom
Yes
Yes
Yes
Yes
Yes
Syntax
Return the marginBottom property:
object
.style.marginBottom
Set the marginBottom property:
object
.style.marginBottom
= "%
|
length
|auto|initial|inherit"
Property Values
Value
Description
%
Defines the bottom margin in % of the width of the parent element
length
Defines the bottom margin in length units
auto
The browser sets the bottom margin
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the bottom margin of an element
CSS Version
CSS1
More Examples
Example
Change the bottom margin of a <div> element back to "normal":
document.getElementById("myDiv").style.marginBottom = "0px";
Try it Yourself 
Example
Return the bottom margin of a <div> element:
alert(document.getElementById("myDiv").style.marginBottom);
Try it Yourself 
Example
Difference between marginBottom and paddingBottom:
function changeMargin() {
document.getElementById("myDiv").style.marginBottom = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingBottom = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS reference:
margin-bottom property
HTML DOM reference:
margin property
Style
filter
Property
Example
Change the color of an image to black and white (100% grayscale):
document.getElementById("myImg").style.filter = "grayscale(100%)";
Try it Yourself 
Description
The filter property adds visual effects (like blur and saturation) to images.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
filter
53.0
13.0
35.0
9.1
40.0
Syntax
Return the filter property:
object
.style.filter
Set the filter property:
object
.style.filter = "none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia()"
Filter Functions
Note:
The filters that use percentage values (i.e. 75%), also accept the value as 
decimal (i.e. 0.75).
Filter
Description
none
Specifies no effects
blur(
px
)
Applies a blur effect to the image. A larger value will create more blur.
If no value is specified, 0 is used.
brightness(
%
)
Adjusts the brightness of the image.
0% will make the image completely black.
100% (1) is default and represents the original image.
Values over 100% will provide brighter results.
contrast(
%
)
Adjusts the contrast of the image.
0% will make the image completely black.
100% (1) is default and represents the original image.
Values over 100% will provide results with less contrast.
drop-shadow(
h-shadow v-shadow blur spread color
)
Applies a drop shadow effect to the image.
Possible values:
h-shadow
- Required. Specifies a pixel value for the horizontal shadow. Negative values place the shadow to the left of the image.
v-shadow
- Required. Specifies a pixel value for the vertical shadow. Negative values place the shadow above the image.
blur
- Optional. This is the third value, and must be in pixels. Adds a blur effect to the shadow. A larger value will create more blur (the shadow becomes bigger and lighter). Negative values are not allowed. If no value is specified, 0 is used (the shadow's edge is sharp).
spread
- Optional. This is the fourth value, and must be in pixels. Positive values will cause the shadow to expand and grow bigger, and negative values will cause the shadow to shrink. If not specified, it will be 0 (the shadow will be the same size as the element).
Note:
Chrome, Safari and Opera, and maybe other browsers, do not support this 4th length; it will not render if added.
color:
Optional. Adds a color to the shadow. If not specified, the color depends on the browser (often black).
Tip:
This filter is similar to the
box-shadow
property.
grayscale(
%
)
Converts the image to grayscale.
0% (0) is default and represents the original image.
100% will make the image completely gray (used for black and white images).
Note:
Negative values are not allowed.
hue-rotate(
deg
)
Applies a hue rotation on the image. The value defines the number of degrees around the color circle the image samples will be adjusted. 0deg is default, and represents the original image.
Note:
Maximum value is 360deg.
invert(
%
)
Inverts the samples in the image.
0% (0) is default and represents the original image.
100% will make the image completely inverted.
Note:
Negative values are not allowed.
opacity(
%
)
Sets the opacity level for the image. The opacity-level describes the transparency-level, where:
0% is completely transparent.
100% (1) is default and represents the original image (no transparency).
Note:
Negative values are not allowed.
Tip:
This filter is similar to
opacity
property.
saturate(
%
)
Saturates the image.
0% (0) will make the image completely un-saturated.
100% is default and represents the original image.
Values over 100% provides super-saturated results.
Note:
Negative values are not allowed.
sepia(
%
)
Converts the image to sepia.
0% (0) is default and represents the original image.
100% will make the image completely sepia.
Note:
Negative values are not allowed.
Technical Details
CSS Version
CSS3
Related Pages
CSS reference:
filter property
Style
emptyCells
Property
Example
Change how empty cells are shown:
function show()
{
document.getElementById("myTable").style.emptyCells = "show";
}
function hide()
{
document.getElementById("myTable").style.emptyCells = "hide";
}
Try it Yourself 
Description
The emptyCells property sets or returns whether to show the border and 
background of empty cells, or not.
Browser Support
Property
emptyCells
Yes
Yes
Yes
Yes
Yes
Syntax
Return the emptyCells property:
object
.style.emptyCells
Set the emptyCells property:
object
.style.emptyCells = "show|hide|initial|inherit"
Property Values
Value
Description
show
Border and background are shown in empty cells. This is default
hide
Border and background are hidden in empty cells
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
show
Return Value:
A String, representing the border and background of empty cells
CSS Version
CSS2
More Examples
Example
Return the emptyCells property:
alert(document.getElementById("myTable").style.emptyCells);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
CSS reference:
empty-cells property
Style
flexBasis
Property
Example
Set the initial length of a flex-item to 200 pixels:
document.getElementById("myBlueDiv").style.flexBasis = "200px";
Try it Yourself 
Description
The flexBasis property specifies the initial length of a flexible item.
Note:
If the element is not a flexible item, the flexBasis property has no effect.
Browser Support
Property
flexBasis
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexBasis property:
object
.style.flexBasis
Set the flexBasis property:
object
.style.flexBasis
= "number
|auto|initial|inherit"
Property Values
Value
Description
number
A length unit, or percentage, specifying the initial length of the flexible item(s)
auto
Default value. The length is equal to the length of the flexible item. If the item has no length specified, the length will be according to its content
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the flex-basis property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-basis property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
flexDirection
Property
Example
Rearrange the direction of the flexible items inside the <div> element:
document.getElementById("main").style.flexDirection = "column-reverse";
Try it Yourself 
Description
The flexDirection property sets or returns the direction of the flexible items.
Note:
If the element is not a flexible item, the flexDirection property has no effect.
Browser Support
Property
flexDirection
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexDirection property:
object
.style.flexDirection
Set the flexDirection property:
object
.style.flexDirection = "row|row-reverse|column|column-reverse|initial|inherit"
Property Values
Value
Description
row
Default value. The flexible items are displayed horizontally, as a row
row-reverse
Same as row, but in reverse order
column
The flexible items are displayed vertically, as a column
column-reverse
Same as column, but in reverse order
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
row
Return Value:
A String, representing the flex-direction property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-direction property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
flexFlow
Property
Example
Make the flexible items display in columns, and no wrapping:
document.getElementById("main").style.flexFlow = "column nowrap";
Try it Yourself 
Description
The flexFlow property is a shorthand property for the flexDirection and the flexWrap properties.
The flexDirection property specifies the direction of the flexible items.
The flexWrap property specifies whether the flexible items should wrap or not.
Note:
If the elements are not flexible items, the flexFlow property has no effect.
Browser Support
Property
flexFlow
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexFlow property:
object
.style.flexFlow
Set the flexFlow property:
object
.style.flexFlow
= "flex-direction
flex-wrap
|initial|inherit"
Property Values
Value
Description
flex-direction
Possible values:
row
row-reverse
column
column-reverse
initial
inherit
Default value is "row".
Specifying the direction of the flexible items
flex-wrap
Possible values:
nowrap
wrap
wrap-reverse
initial
inherit
Default value is "nowrap".
Specifying whether the flexible items should wrap or not
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
row nowrap
Return Value:
A String, representing the flex-flow property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-flow property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
flexGrow
Property
Example
Let the blue DIV element grow five times wider than the rest of the flexible items:
document.getElementById("myBlueDiv").style.flexGrow = "5";
Try it Yourself 
Description
The flexGrow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.
Note:
If the element is not a flexible item, the flexGrow property has no effect.
Browser Support
Property
flexGrow
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexGrow property:
object
.style.flexGrow
Set the flexGrow property:
object
.style.flexGrow
= "number
|initial|inherit"
Property Values
Value
Description
number
A number specifying how much the item will grow relative to the rest of the flexible items. Default value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the flex-grow property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-grow property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexShrink property
HTML DOM STYLE Reference:
flexWrap property
Style
flexShrink
Property
Example
Let the blue DIV element  shrink five times more than the rest of the flexible items:
document.getElementById("myBlueDiv").style.flexShrink = "5";
Try it Yourself 
Description
The flexShrink property specifies how the item will shrink relative to the rest 
of the flexible items inside the same container.
Note:
If the element is not a flexible item, the flexShrink property has no effect.
Browser Support
Property
flexShrink
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexShrink property:
object
.style.flexShrink
Set the flexShrink property:
object
.style.flexShrink
= "number
|initial|inherit"
Property Values
Value
Description
number
A number specifying how much the item will shrink relative to the rest of the flexible items. Default value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
1
Return Value:
A String, representing the flex-shrink property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-shrink property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexWrap property
Style
flexWrap
Property
Example
Make the flexible items wrap if necesarry:
document.getElementById("main".style.flexWrap = "wrap";
Try it Yourself 
Description
The flexWrap property specifies whether the flexible items should wrap or not.
Note:
If the elements are not flexible items, the flexWrap property has no effect.
Browser Support
Property
flexWrap
Yes
11.0
Yes
9.0
Yes
Syntax
Return the flexWrap property:
object
.style.flexWrap
Set the flexWrap property:
object
.style.flexWrap = "nowrap|wrap|wrap-reverse|initial|inherit"
Property Values
Value
Description
nowrap
Default value. Specifies that the flexible items will not wrap
wrap
Specifies that the flexible items will wrap if necessary
wrap-reverse
Specifies that the flexible items will wrap, if necessary, in reverse order
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
nowrap
Return Value:
A String, representing the flex-wrap property of an element
CSS Version
CSS3
Related Pages
CSS reference:
flex-wrap property
HTML DOM STYLE Reference:
flex property
HTML DOM STYLE Reference:
flexBasis property
HTML DOM STYLE Reference:
flexDirection property
HTML DOM STYLE Reference:
flexFlow property
HTML DOM STYLE Reference:
flexGrow property
HTML DOM STYLE Reference:
flexShrink property
Style
font
Property
Example
Set the font for an element:
document.getElementById("demo").style.font = "italic bold 20px arial,serif";
Try it Yourself 
Description
The font property sets or returns up to six separate font 
properties, in a shorthand form.
With this property, you can set/return the following (in this 
order):
font-style
font-variant
font-weight
font-size
line-height
font-family
The font-size and font-family are required. If one of the other values are 
missing, the default values will be inserted, if any.
The properties above can also be set with separate style properties. The use 
of separate properties is highly recommended for non-advanced authors for better 
controllability.
Browser Support
Property
font
Yes
Yes
Yes
Yes
Yes
Syntax
Return the font property:
object
.style.font
Set the font property:
object
.style.font
= "font-style font-variant font-weight font-size/line-height
|caption|icon|menu|
message-box|small-caption|status-bar|initial|inherit;"
Property Values
Value
Description
style
Sets the font-style
variant
Sets the text in a small-caps font
weight
Sets the boldness of the font
size
Sets the size of the font
lineHeight
Sets the distance between lines
family
Sets the font face
caption
The font used for captioned controls  (like buttons, drop-downs, etc.)
icon
The font used to label icons
menu
The font used in menus
message-box
The font used in dialog boxes
small-caption
The font used in small controls
status-bar
The font used in window status bars
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing different font properties of the element
CSS Version
CSS1
More Examples
Example
Return the font of an element:
alert(document.getElementById("demo").style.font);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font property
Style
fontSize
Property
Example
Set the font size of an element to "x-large":
document.getElementById("demo").style.fontSize = "x-large";
Try it Yourself 
Description
The fontSize property sets or returns the font size of the text.
Browser Support
Property
fontSize
Yes
Yes
Yes
Yes
Yes
Syntax
Return the fontSize property:
object
.style.fontSize
Set the fontSize property:
object
.style.fontSize
= "value
|initial|inherit"
Property Values
Value
Description
xx-small
x-small
small
medium
large
x-large
xx-large
Sets the size of the font to different fixed sizes, from  xx-small to xx-large
smaller
Decreases the font-size by one relative unit
larger
Increases the font-size by one relative unit
length
Defines the font-size in length units
%
Sets the font-size to a % of the parent element's font size
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the font size of the text in the element
CSS Version
CSS1
More Examples
Example
A demonstration of possible values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("demo").style.fontSize = listValue;
Try it Yourself 
Example
Return the font size of an element:
alert(document.getElementById("demo").style.fontSize);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-size property
HTML DOM reference:
font property
Style
fontStyle
Property
Example
Set the font for an element to "italic":
document.getElementById("demo").style.fontStyle = "italic";
Try it Yourself 
Description
The fontStyle property sets or returns whether the style of the font is normal, italic or oblique.
Browser Support
Property
fontStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the fontStyle property:
object
.style.fontStyle
Set the fontStyle property:
object
.style.fontStyle = "normal|italic|oblique|initial|inherit"
Property Values
Value
Description
normal
Font is normal. This is default
italic
Font is in italic
oblique
Font is in oblique
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the font style of the text in the element
CSS Version
CSS1
More Examples
Example
A demonstration of possible values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("demo").style.fontStyle = listValue;
Try it Yourself 
Example
Return the font style of an element:
alert(document.getElementById("demo").style.fontStyle);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-style property
HTML DOM reference:
font property
Style
overflowX
Property
Example
Scroll horizontally if the text overflows the element's content area:
document.getElementById("myDIV").style.overflowX = "scroll";
Try it Yourself 
Description
The overflowX property specifies what to do with the left/right edges of the content - if it overflows the element's content area.
Tip:
Use the
overflowY
property to determine clipping at the  top and bottom edges.
Browser Support
Property
overflowX
Yes
Yes
Yes
Yes
Yes
Syntax
Return the overflowX property:
object
.style.overflowX
Set the overflowX property:
object
.style.overflowX = "visible|hidden|scroll|auto|initial|inherit"
Property Values
Value
Description
visible
The content is not clipped, and it may be rendered outside the content box
hidden
The content is clipped - and no scrolling mechanism is provided
scroll
The content is clipped and a scrolling mechanism is provided
auto
Should cause a scrolling mechanism to be provided for overflowing boxes
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
visible
Return Value:
A String, representing the overflow-x property of an element
CSS Version
CSS3
Related Pages
CSS reference:
overflow-x property
Style
perspectiveOrigin
Property
Example
Set a 3D element's base placement:
document.getElementById("myDIV").style.perspectiveOrigin = "10px 50%";
Try it Yourself 
Description
The perspectiveOrigin property defines where a 3D element is based in the x- 
and the y-axis. This property allows you to change the bottom position of 3D 
elements.
When defining the perspectiveOrigin property for an element, it is the CHILD elements 
that are positioned, NOT the element itself.
Note:
This property must be used together with the
perspective
property, and only affects 3D 
transformed elements!
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
perspectiveOrigin
36.0
10.0
16.0
6.1
23.0
Syntax
Return the perspectiveOrigin property:
object
.style.perspectiveOrigin
Set the perspectiveOrigin property:
object
.style.perspectiveOrigin
= "x-axis y-axis
|initial|inherit"
Property Values
Value
Description
x-axis
Defining where the view is placed at the x-axis
Possible values:
left
center
right
length
%
Default value: 50%
y-axis
Defining where the view is placed at the y-axis
Possible values:
top
center
bottom
length
%
Default value: 50%
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
50% 50%
Return Value:
A String, representing the perspective-origin property of an element
CSS Version
CSS3
Related Pages
JavaScript Style Object:
perspective property
CSS reference:
perspective-origin property
HTML DOMTokenList toggle()
 The DOMTokenList Object
Examples
Toggle "myStyle" on and off:
const list = element.classList;
list.toggle("mywStyle");
Try it Yourself 
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
More examples below.
Description
The
add()
method adds one (or more) tokens to a
DOMTokenList
.
Syntax
domtokenlist
.toggle(token)
Parameters
Parameter
Description
token
Required.
The token to toggle.
Return Value
NONE
More Examples
Add multiple classes to the an element:
element.classList.add("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Remove multiple classes from an element:
element.classList.remove("myStyle", "anotherClass", "thirdClass");
Try it Yourself 
Get the number of classes for an element:
let numb = element.classList.length;
Try it Yourself 
Toggle between classes to create a dropdown button:
document.getElementById("myBtn").onclick = function() {myFunction()};
function myFunction() {
document.getElementById("myDropdown").classList.toggle("show");
}
Try it Yourself 
Browser Support
domtokenlist.toggle()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.toggle()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
Style
transition
Property
Example
Hover over a div element to gradually change its appearance:
document.getElementById("myDIV").style.transition = "all 2s";
Try it Yourself 
Description
The transition property is a shorthand property for the four transition properties:
transitionProperty, transitionDuration, transitionTimingFunction, and transitionDelay.
Note:
Always specify the transitionDuration property, otherwise the duration is 0,
and the transition will have no effect.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transition
26.0
10.0
16.0
6.1
12.1
Syntax
Return the transition property:
object
.style.transition
Set the transition property:
object
.style.transition
= "property duration timing-function delay
|initial|inherit"
Property Values
Value
Description
transitionProperty
Specifies the name of the CSS property the transition effect is for
transitionDuration
Specifies how many seconds or milliseconds the transition effect takes to complete
transitionTimingFunction
Specifies the speed curve of the transition effect
transitionDelay
Defines when the transition effect will start
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
all 0 ease 0
Return Value:
A String, representing the transition property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transition property
Style
top
Property
Example
Set the top position of a <button> element:
document.getElementById("myBtn").style.top = "100px";
Try it Yourself 
Description
The top property sets or returns the top position of a positioned element.
This property specifies the top position of the element including padding, scrollbar, border and margin.
Tip:
A positioned element is an element with the position property set to: relative, absolute, or fixed.
Tip:
To set or return the bottom position of a positioned element, use the
bottom
property.
Browser Support
Property
top
Yes
Yes
Yes
Yes
Yes
Syntax
Return the top property:
object
.style.top
Set the top property:
object
.style.top = "auto|
length
|
%
|initial|inherit"
Property Values
Value
Description
auto
Lets the browser set the top position. This is default
length
Defines the top position in length units. Negative values are allowed
%
Sets the top position in %of the height of  the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the top position of a positioned element
CSS Version
CSS2
More Examples
Example
Using negative values - Set the top position of a <div> element:
document.getElementById("myDiv").style.top = "-100px";
Try it Yourself 
Example
Return the top position of a <div> element:
alert(document.getElementById("myDiv").style.top);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
top property
Style
fontVariant
Property
Example
Set the font of an element to "small-caps":
document.getElementById("demo").style.fontVariant = "small-caps";
Try it Yourself 
Description
The fontVariant property sets or returns whether the font should be displayed 
in small capital letters.
This means that all lowercase letters will be converted to uppercase, but 
the letters will have a smaller font-size compared to the 
rest of the text.
Browser Support
Property
fontVariant
Yes
Yes
Yes
Yes
Yes
Syntax
Return the fontVariant property:
object
.style.fontVariant
Set the fontVariant property:
object
.style.fontVariant = "normal|small-caps|initial|inherit"
Property Values
Value
Description
normal
The font is normal. This is default
small-caps
The font is displayed in small capital letters
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing a font in either normal or small capital letters
CSS Version
CSS1
More Examples
Example
Return the font variant of an element:
alert(document.getElementById("demo").style.fontVariant);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-variant 
property
HTML DOM reference:
font property
Style
fontWeight
Property
Example
Set the font weight for an element to "900":
document.getElementById("demo").style.fontWeight = "900";
Try it Yourself 
Description
The fontWeight property sets or returns how thick or thin characters in a text should be displayed.
Browser Support
Property
fontWeight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the fontWeight property:
object
.style.fontWeight
Set the fontWeight property:
object
.style.fontWeight = "normal|lighter|bold|bolder|
value
|initial|inherit"
Property Values
Value
Description
normal
Font is normal. This is default
lighter
Font is lighter
bold
Font is bold
bolder
Font is bolder
100
200
300
400
500
600
700
800
900
Defines from light to bold characters. 400 is the same  as normal, and 700 is the same as bold
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the boldness of the font
CSS Version
CSS1
More Examples
Example
A demonstration of possible values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("demo").style.fontWeight = listValue;
Try it Yourself 
Example
Return the font weight of an element:
alert(document.getElementById("demo").style.fontWeight);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Font
CSS reference:
font-weight property
HTML DOM reference:
font property
Style
textDecoration
Property
Example
Set the text decoration for an element:
document.getElementById("demo").style.textDecoration = "underline overline";
Try it Yourself 
Description
The textDecoration property sets or returns one ore more decorations for a text.
Tip:
To specify more than one decoration type for an element, specify 
a space separated list of decoration types.
Browser Support
Property
textDecoration
Yes
Yes
Yes
Yes
Yes
Syntax
Return the textDecoration property:
object
.style.textDecoration
Set the textDecoration property:
object
.style.textDecoration = "none|underline|overline|line-through|blink|initial|inherit"
Property Values
Value
Description
none
Defines a normal text. This is default
underline
Defines a line under the text
overline
Defines a line over the text
line-through
Defines a line through the text
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the decoration added to the text
CSS Version
CSS1
More Examples
Example
Return the text decoration of an element:
alert(document.getElementById("demo").style.textDecoration);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
text-decoration 
property
Style
textIndent
Property
Example
Indent the first line of a <div> element with 50 pixels:
document.getElementById("myDiv").style.textIndent = "50px";
Try it Yourself 
Description
The textIndent property sets or returns the indentation of the first line of text.
Note:
Negative values are allowed. The first line will be 
indented to the left if the value is negative.
Browser Support
Property
textIndent
Yes
Yes
Yes
Yes
Yes
Syntax
Return the textIndent property:
object
.style.textIndent
Set the textIndent property:
object
.style.textIndent
= "length|%
|initial|inherit"
Property Values
Value
Description
length
Defines the indentation in length units. Default value is 0
%
Defines the indentation in % of the width of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the indentation of the first line of text in the element
CSS Version
CSS1
More Examples
Example
Return the text indentation of a <div> element:
alert(document.getElementById("myDiv").style.textIndent);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
text-indent property
Style
color
Property
Example
Set the text-color for different elements:
document.getElementById("myH2").style.color = "#ff0000";
document.getElementById("myP").style.color = "magenta";
document.getElementById("myP2").style.color = "blue";
document.getElementById("myDiv").style.color = "lightblue";
Try it Yourself 
Description
The color property sets or returns the color of the text.
Browser Support
Property
color
Yes
Yes
Yes
Yes
Yes
Syntax
Return the color property:
object
.style.color
Set the color property:
object
.style.color
= "color
|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the text. Look at
CSS Color Values
for a complete list of possible color values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
not specified
Return Value:
A String, representing the text-color of an element
CSS Version
CSS1
More Examples
Example
Return the text-color of a <p> element:
alert(document.getElementById("myP").style.color);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
color property
animationend
Event
Example
Do something when a CSS animation has ended:
const div1 = document.getElementById("myDIV");
div1.addEventListener("animationend", myEndFunction);
Try it Yourself 
Description
The
animationend
event occurs when
a CSS animation has completed
.
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
AnimationEvent
DOM Version:
Level 3 Events
Browser Support
onanimationend
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onblur
Event
Example
Call a function when a user leaves an input field:
<input type="text" onblur="myFunction()">
Try it Yourself 
Description
The
onblur
event occurs when an
HTML element loses focus
.
The
onblur
event is often used on input fields.
The
onblur
event is often used with form validation (when the user leaves a form field).
Syntax
In HTML:
<
element
onblur="
myScript
">
Try it Yourself 
In JavaScript:
object
.onblur = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("blur",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
FocusEvent
HTML tags:
ALL HTML elements, EXCEPT: <base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
Using
onfocus
and
onblur
attributes:
<input type="text" onfocus="focusFunction()" onblur="blurFunction()">
Try it Yourself 
Example
Event delegation: using
focus
and
blur
events:
Set
useCapture
parameter of addEventListener() to
true
:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focus", myFocusFunction,
true
);
x.addEventListener("blur", myBlurFunction,
true
);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
Example
Event delegation: using
focusin
and
focusout
events:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focusin", myFocusFunction);
x.addEventListener("focusout", myBlurFunction);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
Browser Support
onblur
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
listStylePosition
Property
Example
Indent the list-item marker:
document.getElementById("myUL").style.listStylePosition = "inside";
Try it Yourself 
Description
The listStylePosition property sets or returns the position of the list-item marker.
Browser Support
Property
listStylePosition
Yes
Yes
Yes
Yes
Yes
Syntax
Return the listStylePosition property:
object
.style.listStylePosition
Set the listStylePosition property:
object
.style.listStylePosition = "outside|inside|initial|inherit"
Property Values
Value
Description
outside
The list-item marker will be rendered before any text content. This  is default
inside
Indents the list-item marker marker
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
outside
Return Value:
A String, representing the position of the list-item marker
CSS Version
CSS1
More Examples
Example
Return the position of the list-item marker:
alert(document.getElementById("myList").style.listStylePosition);
Try it Yourself 
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style-position property
HTML DOM reference:
listStyle property
Style
listStyleType
Property
Example
Change the list-item marker type to "upper-roman":
document.getElementById("myList").style.listStyleType = "upper-roman";
Try it Yourself 
Description
The listStyleType property sets or returns the list-item marker type.
Browser Support
Property
listStyleType
Yes
Yes
Yes
Yes
Yes
Syntax
Return the listStyleType property:
object
.style.listStyleType
Set the listStyleType property:
object
.style.listStyleType =
value
Property Values
Value
Description
armenian
The marker is traditional Armenian numbering
circle
The marker is a circle
cjk-ideographic
The marker is plain ideographic numbers
decimal
The marker is a number. This is default for <ol>
decimal-leading-zero
The marker is a number with leading zeros (01, 02,  03, etc.)
disc
The marker is a filled circle. This is default for <ul>
georgian
The marker is traditional Georgian numbering
hebrew
The marker is traditional Hebrew numbering
hiragana
The marker is traditional Hiragana numbering
hiragana-iroha
The marker is traditional Hiragana iroha numbering
katakana
The marker is traditional Katakana numbering
katakana-iroha
The marker is traditional Katakana iroha numbering
lower-alpha
The marker is lower-alpha (a, b, c, d, e, etc.)
lower-greek
The marker is lower-greek
lower-latin
The marker is lower-latin (a, b, c, d, e, etc.)
lower-roman
The marker is lower-roman (i, ii, iii, iv, v, etc.)
none
No marker is shown
square
The marker is a square
upper-alpha
The marker is upper-alpha (A, B, C, D, E, etc.)
upper-latin
The marker is upper-latin (A, B, C, D, E, etc.)
upper-roman
The marker is upper-roman (I, II, III, IV, V, etc.)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
"disc" for <ul> and "decimal" for <ol>
Return Value:
A String, representing the type of a list
CSS Version
CSS1
More Examples
Example
All the different list style types:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myList").style.listStyleType = listValue;
Try it Yourself 
Example
Return the list-item marker type:
alert(document.getElementById("myList").style.listStyleType);
Try it Yourself 
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style-type property
HTML DOM reference:
listStyle property
Style
transform
Property
Example
Rotate a div element:
document.getElementById("myDIV").style.transform = "rotate(7deg)";
Try it Yourself 
Description
The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, 
scale, move, skew, etc., elements.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transform
36.0
10.0
16.0
9.0
23.0
Syntax
Return the transform property:
object
.style.transform
Set the transform property:
object
.style.transform = "none|
transform-functions
|initial|inherit"
Property Values
Value
Description
none
Defines that there should be no transformation
matrix(
n, n, n, n, n, n
)
Defines a 2D transformation, using a matrix of six values
matrix3d(
n, n, n, n, etc....
)
Defines a 3D transformation, using a 4x4 matrix of 16 values
translate(
x, y
)
Defines a 2D translation
translate3d(
x, y, z
)
Defines a 3D translation
translateX(
x
)
Defines a translation, using only the value for the X-axis
translateY(
y
)
Defines a translation, using only the value for the Y-axis
translateZ(
z
)
Defines a 3D translation, using only the value for the Z-axis
scale(
x, y
)
Defines a 2D scale transformation
scale3d(
x, y, z
)
Defines a 3D scale transformation
scaleX(
x
)
Defines a scale transformation by giving a value for the X-axis
scaleY(
y
)
Defines a scale transformation by giving a value for the Y-axis
scaleZ(
z
)
Defines a 3D scale transformation by giving a value for the Z-axis
rotate(
angle
)
Defines a 2D rotation, the angle is specified in the  parameter
rotate3d(
x, y, z, angle
)
Defines a 3D rotation
rotateX(
angle
)
Defines a 3D rotation along the X-axis
rotateY(
angle
)
Defines a 3D rotation along the Y-axis
rotateZ(
angle
)
Defines a 3D rotation along the Z-axis
skew(
x-angle, y-angle
)
Defines a 2D skew transformation along the X- and the Y-axis
skewX(
angle
)
Defines a 2D skew transformation along the X-axis
skewY(
angle
)
Defines a 2D skew transformation along the Y-axis
perspective(
n
)
Defines a perspective view for a 3D transformed element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the transform property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transform property
Style
userSelect
Property
Example
Prevent text selection of a <div> element:
document.getElementById("myDiv").style.userSelect = "none";
Try it Yourself 
More "Try it Yourself" examples below.
Description
The userSelect property sets or returns whether the text of an element can be selected or not.
If you double-click on some text, it will be selected/highlighted. This property can be used to prevent this.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Numbers followed by ms or Webkit specify the first version that worked with a prefix.
Property
userSelect
54.0
79.0
10.0 ms
69.0
3.1 Webkit
41.0
Syntax
Return the userSelect property:
object
.style.userSelect
Set the userSelect property:
object
.style.userSelect = "auto|none|text|all"
Property Values
Parameter
Description
auto
Default. Text can be selected according to the browser's default 
    settings
none
Prevent text selection
text
The text can be selected by the user
all
Text selection is made with one click instead of a double-click
Technical Details
Default Value:
auto
Return Value:
A String, representing whether the text of an element can be selected
CSS Version
CSS3
More Examples
Example
Get the value of the "user-select" property of an element:
document.getElementById("demo").style.userSelect;
Try it Yourself 
Related Pages
CSS reference:
user-select property
Style
width
Property
Example
Set the width of a <button> element:
document.getElementById("myBtn").style.width = "300px";
Try it Yourself 
Description
The width property sets or returns the width an element.
The width property has effect only on block-level elements or on elements 
with absolute or fixed position. The overflowing content can be manipulated with 
the overflow property.
Tip:
Use the
height
property to set or return the height of an element.
Browser Support
Property
width
Yes
Yes
Yes
Yes
Yes
Syntax
Return the width property:
object
.style.width
Set the width property:
object
.style.width = "auto|
length|%
|initial|inherit"
Property Values
Value
Description
auto
The browser sets the width. This is default
length
Defines the width in length units
%
Defines the width in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the width of an element
CSS Version
CSS1
More Examples
Example
Change the width of a <div> element:
document.getElementById("myDIV").style.width = "500px";
Try it Yourself 
Example
Change the height and width of an <img> element:
document.getElementById("myImg").style.height = "300px";
document.getElementById("myImg").style.width = "300px";
Try it Yourself 
Example
Return the width of an <img> element:
alert(document.getElementById("myImg").style.width);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS tutorial:
CSS Box model
CSS reference:
width property
Style
visibility
Property
Example
Hide the content of a <p> element:
document.getElementById("myP").style.visibility = "hidden";
Try it Yourself 
Description
The visibility property sets or returns whether an element should be visible.
The visibility property allows the author to show or hide an element. It is 
similar to the
display
property. However, the difference is that if you set
display:none
, it hides 
the entire element, while
visibility:hidden
means that the contents of the 
element will be invisible, but the element stays in its original position and 
size.
Browser Support
Property
visibility
Yes
Yes
Yes
Yes
Yes
Syntax
Return the visibility property:
object
.style.visibility
Set the visibility property:
object
.style.visibility = "visible|hidden|collapse|initial|inherit"
Property Values
Value
Description
visible
The element is visible. This is default
hidden
The element is not visible, but still affects layout
collapse
When used on a table row or cell, the element is not visible (same as "hidden")
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
visible
Return Value:
A String, representing whether the content of an element is displayed or not
CSS Version
CSS2
More Examples
Example
Difference between the display property and the visibility property:
function demoDisplay() {
document.getElementById("myP1").style.display = "none";
}
function demoVisibility() {
document.getElementById("myP2").style.visibility = "hidden";
}
Try it Yourself 
Example
Toggle between hiding and showing an element:
function myFunction() {
var x = document.getElementById('myDIV');
if (x.style.visibility === 'hidden') {
x.style.visibility = 'visible';
} else {
x.style.visibility = 'hidden';
}
}
Try it Yourself 
Example
Hide and show an <img> element:
function hideElem() {
document.getElementById("myImg").style.visibility = "hidden";
}
function showElem() {
document.getElementById("myImg").style.visibility = "visible";
}
Try it Yourself 
Example
Return the visibility type of a <p> element:
alert(document.getElementById("myP").style.visibility);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Display and visibility
CSS reference:
visibility property
oncontextmenu
Event
Example
Prevent the context menu to show:
div.addEventListener("contextmenu", (e) => {e.preventDefault()});
Try it Yourself 
Description
The
oncontextmenu
event occurs when the user
right-clicks an
HTML element
to open the context menu.
Syntax
In HTML:
<
element
oncontextmenu="
myScript
">
Try it Yourself 
In JavaScript:
object
.oncontextmenu = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("contextmenu",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
Browser Support
oncontextmenu
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
oncopy
Event
Example
Call a function when copying some text of an <input> element:
<input type="text" oncopy="myFunction()" value="Try to copy me">
Try it Yourself 
More examples below
Description
The
oncopy
event occurs when the user
starts a copy process
in the browser.
The
oncopy
event occurs when the user copies element content (like a text copy).
The
oncopy
event also occurs when the user copies a whole element (like an image).
3 Ways to Copy:
Press Ctrl + C
Select "Copy" from the Edit menu in your browser
Right click to display the context menu, and select "Copy"
Syntax
In HTML:
<
element
oncopy="
myScript
">
Try it Yourself 
In JavaScript:
object
.oncopy = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("copy",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
ClipboardEvent
HTML tags:
All HTML elements
More Examples
Example
Call a function when copying some text of a <p> element:
<p oncopy="myFunction()">Try to copy this text</p>
Try it Yourself 
Example
Call a function when copying an image:
<img src="w3schools.gif" oncopy="myFunction()">
Try it Yourself 
Browser Support
oncopy
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onclick
Event
Example
Call a function when a button is clicked:
<button onclick="myFunction()">Click me</button>
Try it Yourself 
More examples below.
Description
The
onclick
event occurs when the user
clicks on an HTML element
.
Syntax
In HTML:
<
element
onclick="
myScript
">
Try it Yourself 
In JavaScript:
object
.onclick = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("click",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
Supported
HTML tags:
All except: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
More Examples
Click a <button> to display the date:
<button onclick="getElementById('demo').innerHTML = Date()">What is the time?</button>
Try it Yourself 
Click a <h3> element to change the text color:
<h3 id="demo" onclick="myFunction()">Click me to change my color.</h3>
<script>
function myFunction() {
document.getElementById("demo").style.color = "red";
}
</script>
Try it Yourself 
Another example on how to change the color of an element:
<h3 onclick="myFunction(this, 'red')">Click me to change my color.</h3>
<script>
function myFunction(element, color) {
element.style.color = color;
}
</script>
Try it Yourself 
Click to copy text from one input field to another:
<button onclick="myFunction()">Copy Text</button>
function myFunction() {
document.getElementById("field2").value =
 document.getElementById("field1").value;
}
</script>
Try it Yourself 
How to assign an "onclick" event to the window object:
window.onclick = myFunction;
function myFunction() {
document.getElementsByTagName("BODY")[0].style.backgroundColor = "yellow";
}
Try it Yourself 
Use onclick to create a dropdown:
document.getElementById("myBtn").onclick = function() {myFunction()};
function myFunction() {
document.getElementById("myDropdown").classList.toggle("show");
}
Try it Yourself 
Browser Support
onclick
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
oncanplaythrough
Event
Example
Call a function when a video can be played all the way through, without 
stopping:
<video oncanplaythrough="myFunction()">
Try it Yourself 
More examples below.
Description
The
oncanplaythrough
event occurs when the
browser estimates it can play
through a media without having to stop for buffering.
Syntax
In HTML:
<
element
oncanplaythrough="
myScript
">
Try it Yourself 
In JavaScript:
object
.oncanplaythrough = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("canplaythrough",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio can be played all the way through, without 
stopping:
<audio oncanplaythrough="myFunction()">
Try it Yourself 
Browser Support
oncanplaythrough
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ondragenter
Event
Example
Call a function when a draggable element enters a drop target:
<div ondragenter="myFunction(event)"></div>
Try it Yourself 
More examples below.
Description
The
ondragenter
event occurs when a draggable selection
enters a drop target
.
The
ondragenter
and
ondragleave
events
can help a user to better understand when a draggable is over the drop target.
For example, by setting a background color when a draggable element enters the 
drop target, and removing the color when the element is moved out of the target.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondragenter="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondragenter = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("dragenter",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondragenter
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
outline
Property
Example
Add an outline around a <div> element:
document.getElementById("myDiv").style.outline = "thick solid #0000FF";
Try it Yourself 
Description
The outline property sets or returns all the outline properties, in a 
shorthand form.
With this property, you can set/return one or more of the following (in 
any order):
outline-width
outline-style
outline-color
An outline is a line around an element. It is displayed around the margin of 
the element. However, it is different from the border property.
The outline is not a part of the element's dimensions, therefore the 
element's width and height properties do not contain the width of the outline.
Browser Support
Property
outline
Yes
Yes
Yes
Yes
Yes
Syntax
Return the outline property:
object
.style.outline
Set the outline property:
object
.style.outline
= "width style color
|initial|inherit"
Property Values
Parameter
Description
width
Sets the width of the outline
style
Sets the style of the outline
color
Sets the color of the outline
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium none invert
Return Value:
A String, representing the outline width, style and/or color of an element
CSS Version
CSS2
More Examples
Example
Change the width, style and color of the outline of a <div> element:
document.getElementById("myDiv").style.outline = "5px dotted green";
Try it Yourself 
Example
Return the outline property values of a <div> element:
alert(document.getElementById("myDiv").style.outline);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline property
Style
objectPosition
Property
Example
Resize an image to fit its content box, and position the image 5px from the 
left and 10% from the top inside the content box:
document.getElementById("myImg").style.objectPosition = "0 10%";
Try it Yourself 
Description
The objectPosition property is used to specify how an <img> or <video> 
should be positioned in its own content box.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
objectPosition
31.0
16.0
36.0
10.1
19.0
Syntax
Return the objectPosition property:
object
.style.objectPosition
Set the objectPosition property:
object
.style.objectPosition = "
position
|initial|inherit"
Property Values
Value
Description
position
Specifies the position of the image or video inside its content box. First value controls the x-asis and the second value controls the y-axis. Can be a string (left, center or right), or a number (in px or %). Negative values are allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
50% 50%
Return Value:
A String or a Number, representing the position of an element in its content box
CSS Version
CSS3
Related Pages
CSS tutorial:
CSS object-fit
CSS reference:
object-position property
Style
orphans
Property
Example
Change the orphans and check print or print preview:
<html>
<head>
<script>
function ChangeOrphans()
{
document.getElementById("p1").style.orphans = document.getElementById("orphans").value;
}
</script>
<style>
.othercontent
{
width: 400px;
border-top: 19cm solid #c3c3c3;
}
@page
{
/* set size of printed page */
size:21cm 27cm;
margin-top:2cm;
}
@media print
{
.orphans
{
orphans:2;
}
}
</style>
</head>
<body>
<div class="othercontent">
<input id="orphans" value="2">
<button onclick="ChangeOrphans();">Change orphans</button>
<p style="font-size:120%" id="p1">
Change orphans and see the print preview.<br>
Line 2<br>
Line 3<br>
Line 4<br>
Line 5<br>
Line 6<br>
Line 7<br>
Line 8<br>
</p>
</body>
</html>
Try it Yourself 
Description
The orphans property sets or returns the minimum number of lines for an element that must be 
visible at the bottom of a page 
(for printing or print preview).
The orphans property only affects block-level elements.
Tip:
orphans:5 means that at least 5 lines must be visible above the 
page break.
Tip:
See the widows property to set or return the minimum number of 
lines for an element that must be visible at the top of a page.
Browser Support
Property
orphans
25.0
8.0
Not supported
3.1
10.0
Syntax
Return the orphans property:
object
.style.orphans
Set the orphans property:
object
.style.orphans
= "number
|initial|inherit"
Property Values
Value
Description
number
An integer that specifies the minimum number of visible lines.  Negative values are not allowed. The  default value is 2
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
2
Return Value:
A String, representing the minimum number of lines to print at the bottom of the page
CSS Version
CSS2
Style
marginRight
Property
Example
Set the right margin of a <div> element:
document.getElementById("myDiv").style.marginRight = "50px";
Try it Yourself 
Description
The marginRight property sets or returns the right margin of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
marginRight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the marginRight property:
object
.style.marginRight
Set the marginRight property:
object
.style.marginRight
= "%
|
length
|auto|initial|inherit"
Property Values
Value
Description
%
Defines the right margin in % of the width of the parent element
length
Defines the right margin in length units
auto
The browser sets the right margin
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the right margin of an element
CSS Version
CSS1
More Examples
Example
Change the right margin of a <div> element back to "normal":
document.getElementById("myDiv").style.marginRight = "0px";
Try it Yourself 
Example
Return the right margin of a <div> element:
alert(document.getElementById("myDiv").style.marginRight);
Try it Yourself 
Example
Difference between marginRight and paddingRight:
function changeMargin() {
document.getElementById("myDiv").style.marginRight = "200px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingRight = "200px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Margin
CSS reference:
margin-right property
HTML DOM reference:
margin property
Style
maxWidth
Property
Example
Set the maximum width of a <div> element:
document.getElementById("myDiv").style.maxWidth = "100px";
Try it Yourself 
Description
The maxWidth property sets or returns the maximum width of an element.
The maxWidth property has effect only on block-level elements or on elements 
with absolute or fixed position.
Note:
The width of an element can never be greater than the value 
specified by the maxWidth property.
Tip:
To set or return the minimum width of an element, use 
the
minWidth
property.
Browser Support
Property
maxWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the maxWidth property:
object
.style.maxWidth
Set the maxWidth property:
object
.style.maxWidth = "none|
length|%
|initial|inherit"
Property Values
Value
Description
none
No limit on the width of the element. This is default
length
Defines the maximum width in length units
%
Defines the maximum width in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the maximum width of an element
CSS Version
CSS2
More Examples
Example
Return the maximum width of a <div> element:
alert(document.getElementById("myDiv").style.maxWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS reference:
max-width property
Style
minWidth
Property
Example
Set the minimum width of a <div> element:
document.getElementById("myDIV").style.minWidth = "400px";
Try it Yourself 
Description
The minWidth property sets or returns the minimum width of an element.
The minWidth property has effect only on block-level elements or on elements 
with absolute or fixed position.
Tip:
To set or return the maximum width of an element, use 
the
maxWidth
property.
Browser Support
Property
minWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the minWidth property:
object
.style.minWidth
Set the minWidth property:
object
.style.minWidth
= "length|%
|initial|inherit"
Property Values
Value
Description
length
Defines the minimum width in length units. Default is 0
%
Defines the minimum width in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the minimum width of an element
CSS Version
CSS2
More Examples
Example
Return the minimum width of a <p> element:
alert(document.getElementById("myP").style.minWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS reference:
min-width property
Style
outlineColor
Property
Example
Change the color of the outline of a <div> element:
document.getElementById("myDiv").style.outlineColor = "#00ff00";
Try it Yourself 
Description
The outlineColor property sets or returns the color of the outline around an element.
An outline is a line around an element. It is displayed around the margin of 
the element. However, it is different from the border property.
The outline is not a part of the element's dimensions, therefore the 
element's width and height properties do not contain the width of the outline.
Browser Support
Property
outlineColor
Yes
Yes
Yes
Yes
Yes
Syntax
Return the outlineColor property:
object
.style.outlineColor
Set the outlineColor property:
object
.style.outlineColor
= "color
|invert|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the outline. Look at
CSS Color Values
for a complete list of possible color values
invert
Inverts the color of the outline to the opposite value.
Note:
Browsers are not required to support this value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
invert
Return Value:
A String, representing the color of an element's outline
CSS Version
CSS2
More Examples
Example
Return the border color of a <div> element:
alert(document.getElementById("myDiv").style.outlineColor);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline-color property
HTML DOM reference:
outline property
Style
maxHeight
Property
Example
Set the maximum height of a <div> element:
document.getElementById("myDIV").style.maxHeight = "15px";
Try it Yourself 
Description
The maxHeight property sets or returns the maximum height of an element.
The maxHeight property has effect only on block-level elements or on elements 
with absolute or fixed position.
Note:
The height of an element can never be greater than the value 
specified by the maxHeight property.
Tip:
To set or return the minimum height of an element, use 
the
minHeight
property.
Browser Support
Property
maxHeight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the maxHeight property:
object
.style.maxHeight
Set the maxHeight property:
object
.style.maxHeight = "none|
length|%
|initial|inherit"
Property Values
Value
Description
none
No limit on the height of the element. This is default
length
Defines the maximum height in length units
%
Defines the maximum height in % of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the maximum height of an element
CSS Version
CSS2
More Examples
Example
Return the maximum height of a <div> element:
alert(document.getElementById("myDIV").style.maxHeight);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Dimension
CSS reference:
max-height property
Style
outlineOffset
Property
Example
Move the ouline border 15 pixels outside the border edge:
document.getElementById("myDIV").style.outlineOffset = "15px";
Try it Yourself 
Description
The outlineOffset property offsets an outline, and draws it beyond the 
border edge.
Outlines differ from borders in two ways:
Outlines do not take up space
Outlines may be non-rectangular
Browser Support
Property
outlineOffset
Yes
15.0
Yes
Yes
Yes
Syntax
Return the outlineOffset property:
object
.style.outlineOffset
Set the outlineOffset property:
object
.style.outlineOffset
= "length
|initial|inherit"
Property Values
Value
Description
length
The distance the outline is outset from the border edge. Default value is 0
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the outline-offset property of an element
CSS Version
CSS3
Related Pages
CSS reference:
outline-offset property
HTML DOM
Events
DOM Events
allow JavaScript to add
event listener
or
event handlers
to HTML elements.
For a tutorial about Events, read our
JavaScript Events Tutorial
.
Examples
In HTML onclick is the event listener, myFunction is the event handler:
<button onclick="myFunction()">Click me</button>
In JavaScript click is the event, myFunction is the event handler:
button.addEventListener("click", myFunction);
Event
Occurs When
Belongs To
abort
The loading of a media is aborted
UiEvent
,
Event
afterprint
A page has started printing
Event
animationend
A CSS animation has completed
AnimationEvent
animationiteration
A CSS animation is repeated
AnimationEvent
animationstart
A CSS animation has started
AnimationEvent
beforeprint
A page is about to be printed
Event
beforeunload
Before a document is about to be unloaded
UiEvent
,
Event
blur
An element loses focus
FocusEvent
canplay
The browser can start playing a media (has buffered enough to begin)
Event
canplaythrough
The browser can play through a media without stopping for buffering
Event
change
The content of a form element has changed
Event
click
An element is clicked on
MouseEvent
contextmenu
An element is right-clicked to open a context menu
MouseEvent
copy
The content of an element is copied
ClipboardEvent
cut
The content of an element is cut
ClipboardEvent
dblclick
An element is double-clicked
MouseEvent
drag
An element is being dragged
DragEvent
dragend
Dragging of an element has ended
DragEvent
dragenter
A dragged element enters the drop target
DragEvent
dragleave
A dragged element leaves the drop target
DragEvent
dragover
A dragged element is over the drop target
DragEvent
dragstart
Dragging of an element has started
DragEvent
drop
A dragged element is dropped on the target
DragEvent
durationchange
The duration of a media is changed
Event
ended
A media has reach the end ("thanks for listening")
Event
error
An error has occurred while loading a file
ProgressEvent
,
UiEvent
,
Event
focus
An element gets focus
FocusEvent
focusin
An element is about to get focus
FocusEvent
focusout
An element is about to lose focus
FocusEvent
fullscreenchange
An element is displayed in fullscreen mode
Event
fullscreenerror
An element can not be displayed in fullscreen mode
Event
hashchange
There has been changes to the anchor part of a URL
HashChangeEvent
input
An element gets user input
InputEvent
,
Event
invalid
An element is invalid
Event
keydown
A key is down
KeyboardEvent
keypress
A key is pressed
KeyboardEvent
keyup
A key is released
KeyboardEvent
load
An object has loaded
UiEvent
,
Event
loadeddata
Media data is loaded
Event
loadedmetadata
Meta data (like dimensions and duration) are loaded
Event
loadstart
The browser starts looking for the specified media
ProgressEvent
message
A message is received through the event source
Event
mousedown
The mouse button is pressed over an element
MouseEvent
mouseenter
The pointer is moved onto an element
MouseEvent
mouseleave
The pointer is moved out of an element
MouseEvent
mousemove
The pointer is moved over an element
MouseEvent
mouseover
The pointer is moved onto an element
MouseEvent
mouseout
The pointer is moved out of an element
MouseEvent
mouseup
A user releases a mouse button over an element
MouseEvent
mousewheel
Deprecated.
Use the
wheel
event instead
WheelEvent
offline
The browser starts working offline
Event
online
The browser starts working online
Event
open
A connection with the event source is opened
Event
pagehide
User navigates away from a webpage
PageTransitionEvent
pageshow
User navigates to a webpage
PageTransitionEvent
paste
Some content is pasted in an element
ClipboardEvent
pause
A media is paused
Event
play
The media has started or is no longer paused
Event
playing
The media is playing after being paused or buffered
Event
popstate
The window's history changes
PopStateEvent
progress
The browser is downloading media data
Event
ratechange
The playing speed of a media is changed
Event
resize
The document view is resized
UiEvent
,
Event
reset
A form is reset
Event
scroll
An scrollbar is being scrolled
UiEvent
,
Event
search
Something is written in a search field
Event
seeked
Skipping to a media position is finished
Event
seeking
Skipping to a media position is started
Event
select
User selects sometext
UiEvent
,
Event
show
A <menu> element is shown as a context menu
Event
stalled
The browser is trying to get unavailable media data
Event
storage
A Web Storage area is updated
StorageEvent
submit
A form is submitted
Event
suspend
The browser is intentionally not getting media data
Event
timeupdate
The playing position has changed (the user 
moves to a different point in the media)
Event
toggle
The user opens or closes the <details> element
Event
touchcancel
The touch is interrupted
TouchEvent
touchend
A finger is removed from a touch screen
TouchEvent
touchmove
A finger is dragged across the screen
TouchEvent
touchstart
A finger is placed on a touch screen
TouchEvent
transitionend
A CSS transition has completed
TransitionEvent
unload
A page has unloaded
UiEvent
,
Event
volumechange
The volume of a media is changed (includes muting)
Event
waiting
A media is paused but is expected to resume (e.g. buffering)
Event
wheel
The mouse wheel rolls up or down over an element
WheelEvent
Style
zIndex
Property
Example
Change the stack order of an <img> element:
document.getElementById("img1").style.zIndex = "1";
Try it Yourself 
Description
The zIndex property sets or returns the stack order of a positioned element.
An element with 
greater stack order (1) is always in front of another element with lower stack 
order (0).
Tip:
A positioned element is an element with the position property set 
to: relative, absolute, or fixed.
Tip:
This property is useful if you want to create overlapping 
elements.
Browser Support
Property
zIndex
Yes
Yes
Yes
Yes
Yes
Syntax
Return the zIndex property:
object
.style.zIndex
Set the zIndex property:
object
.style.zIndex = "auto|
number
|initial|inherit"
Property Values
Value
Description
auto
The browser determines the stack order of the element (based on its  order in the document). This is default
number
An integer that defines the stack order of the element. Negative  values are allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the stack order of an element
CSS Version
CSS2
More Examples
Example
Change the z-index property value of an <div> element:
document.getElementById("myDIV").style.zIndex = "-1";
Try it Yourself 
Example
Return the z-index property value of an <img> element:
alert(document.getElementById("img1").style.zIndex);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
z-index property
onafterprint
Event
Example
Call a function when a page starts printing:
<body onafterprint="myFunction()">
Try it Yourself 
Description
The
onafterprint
event occurs when
a page starts printing
.
The
onafterprint
event occurs when
after
the print dialogue box is closed.
Syntax
In HTML:
<
element
onafterprint="
myScript
">
Try it Yourself 
In JavaScript:
object
.onafterprint = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("afterprint",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<body>
DOM Version:
Level 3 Events
Browser Support
onafterprint
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
widows
Property
Example
Change the widows and check print or print preview:
<html>
<head>
<script>
function ChangeWidows()
{
document.getElementById("p1").style.widows = document.getElementById("widows").value;
}
</script>
<style>
.othercontent
{
width: 400px;
border-top: 19cm solid #c3c3c3;
}
@page
{
/* set size of printed page */
size: 21cm 27cm;
margin-top: 2cm;
}
@media print
{
.widows
{
widows:2;
}
}
</style>
</head>
<body>
<div class="othercontent">
<input id="widows" value="2">
<button onclick="ChangeWidows();">Change widows</button>
<p style="font-size:120%" id="p1">
Change widows and see the print preview.<br>
Line 2<br>
Line 3<br>
Line 4<br>
Line 5<br>
Line 6<br>
Line 7<br>
Line 8<br>
</p>
<div class="othercontent">
</body>
</html>
Try it Yourself 
Description
The widows property sets or returns the minimum number of lines for an element that must be 
visible at the top of a page (for printing or print preview).
The widows property only affects block-level elements.
Tip:
widows:5 means that at least 5 lines must be visible below the page break.
Tip:
See the orphans property to set or return the minimum number of 
lines for an element that must be visible at the bottom of a page.
Browser Support
Property
widows
25.0
8.0
Not supported
7.0
10.0
Syntax
Return the widows property:
object
.style.widows
Set the widows property:
object
.style.widows
= "number
|initial|inherit"
Property Values
Value
Description
number
An integer that specifies the minimum number of visible lines.  Negative values are not allowed. The  default value is 2
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
2
Return Value:
A String, representing the minimum number of lines to print at the top of the page
CSS Version
CSS2
animationstart
Event
Example
Do something when a CSS animation starts:
const div1 = document.getElementById("myDIV");
div1.addEventListener("animationstart", myStartFunction);
Try it Yourself 
Description
The
animationstart
event occurs when
a CSS animation starts
.
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
AnimationEvent
DOM Version:
Level 3 Events
Browser Support
onanimationstart
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onbeforeunload
Event
Example
Call a function when the page is about to be unloaded:
<body onbeforeunload="return myFunction()">
Try it Yourself 
Description
The
onbeforeunload
event occurs when
a document is about to be unloaded
.
This event allows you to display a message in a confirmation dialog box to inform the user whether he/she wants to stay or leave the current page.
The default message that appears in the confirmation box, is different in 
different browsers. However, the standard message is something like "Are you 
sure you want to leave this page?".
This message cannot be removed,
unless you call preventDefault() on the event.
Syntax
In HTML:
<
element
onbeforeunload="
myScript
">
Try it Yourself 
In JavaScript:
object
.onbeforeunload = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("beforeunload",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
Yes
Event type:
UiEvent
if generated from a user interface,
Event
otherwise
HTML tags:
<body>
DOM Version:
Level 2 Events
Browser Support
onbeforeunload
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
HTML DOM
Style
Object
Style object
The Style object represents an individual style statement.
Style Object Properties
Property
Description
alignContent
Sets or returns the alignment between the lines inside a flexible container when the items do not use all available space
alignItems
Sets or returns the alignment for items inside a flexible container
alignSelf
Sets or returns the alignment for selected items inside a flexible container
animation
A shorthand property for all the animation properties below, except the animationPlayState property
animationDelay
Sets or returns when the animation will start
animationDirection
Sets or returns whether or not the animation should play in reverse on alternate cycles
animationDuration
Sets or returns how many seconds or milliseconds an animation takes to complete one cycle
animationFillMode
Sets or returns what values are applied by the animation outside the time it is executing
animationIterationCount
Sets or returns the number of times an animation should be played
animationName
Sets or returns a name for the @keyframes animation
animationTimingFunction
Sets or returns the speed curve of the animation
animationPlayState
Sets or returns whether the animation is running or paused
background
Sets or returns all the background properties in one declaration
backgroundAttachment
Sets or returns whether a background-image is fixed or scrolls with the page
backgroundColor
Sets or returns the background-color of an element
backgroundImage
Sets or returns the background-image for an element
backgroundPosition
Sets or returns the starting position of a background-image
backgroundRepeat
Sets or returns how to repeat (tile) a background-image
backgroundClip
Sets or returns the painting area of the background
backgroundOrigin
Sets or returns the positioning area of the background images
backgroundSize
Sets or returns the size of the background image
backfaceVisibility
Sets or returns whether or not an element should be visible when not facing the screen
border
Sets or returns borderWidth, borderStyle, and borderColor in one declaration
borderBottom
Sets or returns all the borderBottom properties in one declaration
borderBottomColor
Sets or returns the color of the bottom border
borderBottomLeftRadius
Sets or returns the shape of the border of the bottom-left corner
borderBottomRightRadius
Sets or returns the shape of the border of the bottom-right corner
borderBottomStyle
Sets or returns the style of the bottom border
borderBottomWidth
Sets or returns the width of the bottom border
borderCollapse
Sets or returns whether the table border should be collapsed into a single border, or not
borderColor
Sets or returns the color of an element's border (can have up to four values)
borderImage
A shorthand property for setting or returning all the borderImage properties
borderImageOutset
Sets or returns the amount by which the border image area extends beyond the border box
borderImageRepeat
Sets or returns whether the image-border should be repeated, rounded or stretched
borderImageSlice
Sets or returns the inward offsets of the image-border
borderImageSource
Sets or returns the image to be used as a border
borderImageWidth
Sets or returns the widths of the image-border
borderLeft
Sets or returns all the borderLeft properties in one declaration
borderLeftColor
Sets or returns the color of the left border
borderLeftStyle
Sets or returns the style of the left border
borderLeftWidth
Sets or returns the width of the left border
borderRadius
A shorthand property for setting or returning all the four borderRadius properties
borderRight
Sets or returns all the borderRight properties in one declaration
borderRightColor
Sets or returns the color of the right border
borderRightStyle
Sets or returns the style of the right border
borderRightWidth
Sets or returns the width of the right border
borderSpacing
Sets or returns the space between cells in a table
borderStyle
Sets or returns the style of an element's border (can have up to four values)
borderTop
Sets or returns all the borderTop properties in one declaration
borderTopColor
Sets or returns the color of the top border
borderTopLeftRadius
Sets or returns the shape of the border of the top-left corner
borderTopRightRadius
Sets or returns the shape of the border of the top-right corner
borderTopStyle
Sets or returns the style of the top border
borderTopWidth
Sets or returns the width of the top border
borderWidth
Sets or returns the width of an element's border (can have up to four values)
bottom
Sets or returns the bottom position of a positioned element
boxDecorationBreak
Sets or returns the behaviour of the background and border of an element at page-break, or, for  in-line elements, at line-break.
boxShadow
Attaches one or more drop-shadows to the box
boxSizing
Allows you to define certain elements to fit an area in a certain way
captionSide
Sets or returns the position of the table caption
caretColor
Sets or returns the caret/cursor color of an element
clear
Sets or returns the position of the element relative to floating objects
clip
Sets or returns which part of a positioned element is visible
color
Sets or returns the color of the text
columnCount
Sets or returns the number of columns an element should be divided into
columnFill
Sets or returns how to fill columns
columnGap
Sets or returns the gap between the columns
columnRule
A shorthand property for setting or returning all the columnRule properties
columnRuleColor
Sets or returns the color of the rule between columns
columnRuleStyle
Sets or returns the style of the rule between columns
columnRuleWidth
Sets or returns the width of the rule between columns
columns
A shorthand property for setting or returning columnWidth and columnCount
columnSpan
Sets or returns how many columns an element should span across
columnWidth
Sets or returns the width of the columns
content
Used with the :before and :after pseudo-elements, to insert generated content
counterIncrement
Increments one or more counters
counterReset
Creates or resets one or more counters
cursor
Sets or returns the type of cursor to display for the mouse pointer
direction
Sets or returns the text direction
display
Sets or returns an element's display type
emptyCells
Sets or returns whether to show the border and background of empty cells, or not
filter
Sets or returns image filters (visual effects, like blur and saturation)
flex
Sets or returns the length of the item, relative to the rest
flexBasis
Sets or returns the initial length of a flexible item
flexDirection
Sets or returns the direction of the flexible items
flexFlow
A shorthand property for the flexDirection and the flexWrap properties
flexGrow
Sets or returns how much the item will grow relative to the rest
flexShrink
Sets or returns how the item will shrink relative to the rest
flexWrap
Sets or returns whether the flexible items should wrap or not
cssFloat
Sets or returns the horizontal alignment of an element
font
Sets or returns fontStyle, fontVariant, fontWeight, fontSize, lineHeight, and fontFamily in one declaration
fontFamily
Sets or returns the font family for text
fontSize
Sets or returns the font size of the text
fontStyle
Sets or returns whether the style of the font is normal, italic or oblique
fontVariant
Sets or returns whether the font should be displayed in small capital letters
fontWeight
Sets or returns the boldness of the font
fontSizeAdjust
Preserves the readability of text when font fallback occurs
fontStretch
Selects a normal, condensed, or expanded face from a font family
hangingPunctuation
Specifies whether a punctuation character may be placed outside the line box
height
Sets or returns the height of an element
hyphens
Sets how to split words to improve the layout of paragraphs
icon
Provides the author the ability to style an element with an iconic equivalent
imageOrientation
Specifies a rotation in the right or clockwise direction that a user agent applies to an image
isolation
Defines whether an element must create a new stacking content
justifyContent
Sets or returns the alignment between the items inside a flexible container when the items do not use all available space.
left
Sets or returns the left position of a positioned element
letterSpacing
Sets or returns the space between characters in a text
lineHeight
Sets or returns the distance between lines in a text
listStyle
Sets or returns listStyleImage, listStylePosition, and listStyleType in one declaration
listStyleImage
Sets or returns an image as the list-item marker
listStylePosition
Sets or returns the position of the list-item marker
listStyleType
Sets or returns the list-item marker type
margin
Sets or returns the margins of an element (can have up to four values)
marginBottom
Sets or returns the bottom margin of an element
marginLeft
Sets or returns the left margin of an element
marginRight
Sets or returns the right margin of an element
marginTop
Sets or returns the top margin of an element
maxHeight
Sets or returns the maximum height of an element
maxWidth
Sets or returns the maximum width of an element
minHeight
Sets or returns the minimum height of an element
minWidth
Sets or returns the minimum width of an element
navDown
Sets or returns where to navigate when using the arrow-down navigation key
navIndex
Sets or returns the tabbing order for an element
navLeft
Sets or returns where to navigate when using the arrow-left navigation key
navRight
Sets or returns where to navigate when using the arrow-right navigation key
navUp
Sets or returns where to navigate when using the arrow-up navigation key
objectFit
Specifies how the contents of a replaced element should be fitted to the box established by its used height and width
objectPosition
Specifies the alignment of the replaced element inside its box
opacity
Sets or returns the opacity level for an element
order
Sets or returns the order of the flexible item, relative to the rest
orphans
Sets or returns the minimum number of lines for an element that must be left at the bottom of a page when a page break occurs inside an element
outline
Sets or returns all the outline properties in one declaration
outlineColor
Sets or returns the color of the outline around a element
outlineOffset
Offsets an outline, and draws it beyond the border edge
outlineStyle
Sets or returns the style of the outline around an element
outlineWidth
Sets or returns the width of the outline around an element
overflow
Sets or returns what to do with content that renders outside the element box
overflowX
Specifies what to do with the left/right edges of the content, if it overflows the element's content area
overflowY
Specifies what to do with the top/bottom edges of the content, if it overflows the element's content area
padding
Sets or returns the padding of an element (can have up to four values)
paddingBottom
Sets or returns the bottom padding of an element
paddingLeft
Sets or returns the left padding of an element
paddingRight
Sets or returns the right padding of an element
paddingTop
Sets or returns the top padding of an element
pageBreakAfter
Sets or returns the page-break behavior after an element
pageBreakBefore
Sets or returns the page-break behavior before an element
pageBreakInside
Sets or returns the page-break behavior inside an element
perspective
Sets or returns the perspective on how 3D elements are viewed
perspectiveOrigin
Sets or returns the bottom position of 3D elements
position
Sets or returns the type of positioning method used for an element (static, relative, absolute or fixed)
quotes
Sets or returns the type of quotation marks for embedded quotations
resize
Sets or returns whether or not an element is resizable by the user
right
Sets or returns the right position of a positioned element
scrollBehavior
Specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable boxt
tableLayout
Sets or returns the way to lay out table cells, rows, and columns
tabSize
Sets or returns the length of the tab-character
textAlign
Sets or returns the horizontal alignment of text
textAlignLast
Sets or returns how the last line of a block or a line right before a forced line break is aligned when text-align is "justify"
textDecoration
Sets or returns the decoration of a text
textDecorationColor
Sets or returns the color of the text-decoration
textDecorationLine
Sets or returns the type of line in a text-decoration
textDecorationStyle
Sets or returns the style of the line in a text decoration
textIndent
Sets or returns the indentation of the first line of text
textJustify
Sets or returns the justification method used when text-align is "justify"
textOverflow
Sets or returns what should happen when text overflows the containing element
textShadow
Sets or returns the shadow effect of a text
textTransform
Sets or returns the capitalization of a text
top
Sets or returns the top position of a positioned element
transform
Applies a 2D or 3D transformation to an element
transformOrigin
Sets or returns the position of transformed elements
transformStyle
Sets or returns how nested elements are rendered in 3D space
transition
A shorthand property for setting or returning the four transition properties
transitionProperty
Sets or returns the CSS property that the transition effect is for
transitionDuration
Sets or returns how many seconds or milliseconds a transition effect takes to complete
transitionTimingFunction
Sets or returns the speed curve of the transition effect
transitionDelay
Sets or returns when the transition effect will start
unicodeBidi
Sets or returns whether the text should be overridden to support multiple languages in the same document
userSelect
Sets or returns whether the text of an element can be selected or not
verticalAlign
Sets or returns the vertical alignment of the content in an element
visibility
Sets or returns whether an element should be visible
whiteSpace
Sets or returns how to handle tabs, line breaks and whitespace in a text
width
Sets or returns the width of an element
wordBreak
Sets or returns line breaking rules for non-CJK scripts
wordSpacing
Sets or returns the spacing between words in a text
wordWrap
Allows long, unbreakable words to be broken and wrap to the next line
widows
Sets or returns the minimum number of lines for an element that must be visible at the top of a page
zIndex
Sets or returns the stack order of a positioned element
Access a Style Object
The Style object can be accessed from the head section of the document, or from specific HTML element(s).
Accessing style object(s) from the head section of the document:
Example
var x = document.getElementsByTagName("STYLE");
Try it Yourself 
Accessing a specified element's style object:
Example
var x = document.getElementById("myH1").style;
Try it Yourself 
Create a Style Object
You can create a <style> element by using the document.createElement() method:
Example
var x = document.createElement("STYLE");
Try it Yourself 
You can also set the style properties of an existing element:
Example
document.getElementById("myH1").style.color = "red";
Try it Yourself 
Related Pages
HTML tutorial:
HTML CSS
CSS tutorial:
CSS Tutorial
HTML reference:
HTML <style> tag
CSS reference:
CSS Properties
ondragleave
Event
Example
Call a function when a draggable element is moved out of a drop target:
<div ondragleave="myFunction(event)"></div>
Try it Yourself 
More examples below.
Description
The
ondragleave
event occurs when
a draggable selection leaves a drop target
.
The
ondragenter
and
ondragleave
events
can help a user to better understand when a draggable is over the drop target.
For example, by setting a background color when a draggable element enters the 
drop target, and removing the color when the element is moved out of the target.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondragleave="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondragleave = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("dragleave",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondragleave
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onerror
Event
Example
Execute a JavaScript if an error occurs when loading an image:
<img src="image.gif" onerror="myFunction()">
Try it Yourself 
Description
The onerror event is triggered if an error occurs while loading an external 
file (e.g. a document or an image).
Tip:
When used on audio/video media, related events that occurs when there is some kind of 
disturbance to the media loading process, are:
onabort
onemptied
onstalled
onsuspend
Browser Support
Event
onerror
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onerror="
myScript
">
Try it Yourself 
In JavaScript:
object
.onerror = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("error",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise
HTML tags:
<img>, <input type="image">, <object>, <link>, 
  and <script>
DOM Version:
Level 2 Events
onfocus
Event
Example
Call a function when an input field gets focus:
<input type="text" 
onfocus="myFunction()">
Try it Yourself 
Description
The
onfocus
event occurs when an element gets focus.
The
onfocus
event is often used on input fields.
Syntax
In HTML:
<
element
onfocus="
myScript
">
Try it Yourself 
In JavaScript:
object
.onfocus = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("focus",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
FocusEvent
HTML tags:
ALL HTML elements, EXCEPT: <base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
Browser Support
onfocus
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
More Examples
Example
Using
onfocus
and
onblur
:
<input type="text" onfocus="focusFunction()" onblur="blurFunction()">
Try it Yourself 
Example
Clear input field on focus:
<input type="text" onfocus="this.value=''" value="Blabla">
Try it Yourself 
Example
Event delegation: using
focus
and
blur
events:
Set
useCapture
parameter of addEventListener() to
true
:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focus", myFocusFunction,
true
);
x.addEventListener("blur", myBlurFunction,
true
);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
Example
Event delegation: using
focusin
and
focusout
events:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focusin", myFocusFunction);
x.addEventListener("focusout", myBlurFunction);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
onfocusout
Event
Example
Call a function when an input field is about to lose focus:
<input type="text" 
onfocusout="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
onfocusout
event occurs when an element loses focus.
The
onfocusout
event is often used on input fields.
The
onfocosout
event is often used with form validation (when the user leaves a form field).
Syntax
In HTML:
<
element
onfocusout="
myScript
">
Try it Yourself 
In JavaScript:
object
.onfocusout = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("focusout",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
FocusEvent
HTML tags:
ALL HTML elements, EXCEPT: <base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
Browser Support
onfocusout
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
More Examples
Example
Using
onfocus
and
onblur
:
<input type="text" onfocus="focusFunction()" onblur="blurFunction()">
Try it Yourself 
Example
Clear input field on focus:
<input type="text" onfocus="this.value=''" value="Blabla">
Try it Yourself 
Example
Event delegation: using
focus
and
blur
events:
Set
useCapture
parameter of addEventListener() to
true
:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focus", myFocusFunction,
true
);
x.addEventListener("blur", myBlurFunction,
true
);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
Example
Event delegation: using
focusin
and
focusout
events:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focusin", myFocusFunction);
x.addEventListener("focusout", myBlurFunction);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
oninput
Event
Example
Call a function when a user writes something in an <input> field:
<input type="text" oninput="myFunction()">
Try it Yourself 
More examples below.
Description
The
oninput
event occurs when
an element gets input
.
The
oninput
event occurs when the value of an <input> or 
<textarea> or <select> element is changed.
Syntax
In HTML:
<
element
oninput="
myScript
">
Try it Yourself 
In JavaScript:
object
.oninput = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("input",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
Event
,
InputEvent
HTML tags:
<input> and <textarea>
DOM Version:
Level 3 Input Events
More Examples
Example
Range slider - how to dynamically update slider value:
<input type="range" oninput="myFunction(this.value)">
Try it Yourself 
Browser Support
oninput
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
paddingRight
Property
Example
Set the right padding of a <div> element:
document.getElementById("myDIV").style.paddingRight = "50px";
Try it Yourself 
Description
The paddingRight property sets or returns the right padding of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space within the border of an element.
Browser Support
Property
paddingRight
Yes
Yes
Yes
Yes
Yes
Syntax
Return the paddingRight property:
object
.style.paddingRight
Set the paddingRight property:
object
.style.paddingRight
= "%
|
length
|initial|inherit"
Property Values
Value
Description
%
Defines the right padding in % of the width of the parent element
length
Defines the right padding in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the right padding of an element
CSS Version
CSS1
More Examples
Example
Change the right padding of a <div> element back to "normal":
document.getElementById("myDIV").style.paddingRight = "0px";
Try it Yourself 
Example
Return the right padding of a <div> element:
alert(document.getElementById("myDIV").style.paddingRight);
Try it Yourself 
Example
Difference between marginRight and paddingRight:
function changeMargin() {
document.getElementById("myDIV").style.marginRight = "200px";
}
function changePadding() {
document.getElementById("myDIV2").style.paddingRight = "200px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS reference:
padding-right property
HTML DOM reference:
padding property
Style
paddingBottom
Property
Example
Set the bottom padding of a <div> element:
document.getElementById("myDiv").style.paddingBottom = "50px";
Try it Yourself 
Description
The paddingBottom property sets or returns the bottom padding of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
paddingBottom
Yes
Yes
Yes
Yes
Yes
Syntax
Return the paddingBottom property:
object
.style.paddingBottom
Set the paddingBottom property:
object
.style.paddingBottom
= "%
|
length
|initial|inherit"
Property Values
Value
Description
%
Defines the bottom padding in % of the width of the parent element
length
Defines the bottom padding in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the bottom padding of an element
CSS Version
CSS1
More Examples
Example
Change the bottom padding of a <div> element back to "normal":
document.getElementById("myDiv").style.paddingBottom = "0px";
Try it Yourself 
Example
Return the bottom padding of a <div> element:
alert(document.getElementById("myDiv").style.paddingBottom);
Try it Yourself 
Example
Difference between marginBottom and paddingBottom:
function changeMargin() {
document.getElementById("myDiv").style.marginBottom = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingBottom = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS reference:
padding-bottom property
HTML DOM reference:
padding property
Style
overflowY
Property
Example
Scroll vertically if the text overflows the element's content area:
document.getElementById("myDIV").style.overflowY = "scroll";
Try it Yourself 
Description
The overflowY property specifies what to do with the top/bottom edges of the content - if it overflows the element's content area.
Tip:
Use the
overflowX
property to determine clipping at the left and right edges.
Browser Support
Property
overflowY
Yes
Yes
Yes
Yes
Yes
Syntax
Return the overflowY property:
object
.style.overflowY
Set the overflowY property:
object
.style.overflowY = "visible|hidden|scroll|auto|initial|inherit"
Property Values
Value
Description
visible
The content is not clipped, and it may be rendered outside the content box
hidden
The content is clipped - and no scrolling mechanism is provided
scroll
The content is clipped and a scrolling mechanism is provided
auto
Should cause a scrolling mechanism to be provided for overflowing boxes
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
visible
Return Value:
A String, representing the overflow-y property of an element
CSS Version
CSS3
Related Pages
CSS reference:
overflow-y property
Style
paddingTop
Property
Example
Set the top padding of a <div> element:
document.getElementById("myDiv").style.paddingTop = "50px";
Try it Yourself 
Description
The paddingTop property sets or returns the top padding of an element.
The padding properties define the space between the element border and the 
element content.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
paddingTop
Yes
Yes
Yes
Yes
Yes
Syntax
Return the paddingTop property:
object
.style.paddingTop
Set the paddingTop property:
object
.style.paddingTop
= "%
|
length
|initial|inherit"
Property Values
Value
Description
%
Defines the top padding in % of the width of the parent element
length
Defines the top padding in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the top padding of an element
CSS Version
CSS1
More Examples
Example
Change the top padding of a <div> element back to "normal":
document.getElementById("myDiv").style.paddingTop = "0px";
Try it Yourself 
Example
Return the top padding of a <div> element:
alert(document.getElementById("myDiv").style.paddingTop);
Try it Yourself 
Example
Difference between marginTop and paddingTop:
function changeMargin() {
document.getElementById("myDiv").style.marginTop = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingTop = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS reference:
padding-top property
HTML DOM reference:
padding property
Style
pageBreakAfter
Property
Example
Always set a page break after each <p> element with id="footer":
document.getElementById("footer").style.pageBreakAfter = "always";
Try it Yourself 
Description
The pageBreakAfter property sets or returns the page-break behavior after an element (for printing or print preview).
Note:
The pageBreakAfter property has no effect on absolutely positioned elements. 
The page break is only visible in a print preview or when printing.
Browser Support
Property
pageBreakAfter
Yes
Yes
Yes
Yes
Yes
Syntax
Return the pageBreakAfter property:
object
.style.pageBreakAfter
Set the pageBreakAfter property:
object
.style.pageBreakAfter = "auto|always|avoid|emptystring|left|right|initial|inherit"
Property Values
Value
Description
auto
Insert a page break after the element if necessary. This is default
always
Always insert a page break after the element
avoid
Avoid a page break after the element
"" (empty string)
Page break is not inserted after the element
left
Insert one or two page breaks after the element, so the next page is  considered a left page
right
Insert one or two page breaks after the element, so the next page is  considered a right page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the page-break behavior after an element when printing
CSS Version
CSS2
Related Pages
CSS reference:
page-break-after property
Style
outlineStyle
Property
Example
Add a "solid" outline around a <div> element:
document.getElementById("myDiv").style.outlineStyle = "solid";
Try it Yourself 
Description
The outlineStyle property sets or returns the style of the outline around an element.
An outline is a line around an element. It is displayed around the margin of 
the element. However, it is different from the border property.
The outline is not a part of the element's dimensions, therefore the 
element's width and height properties do not contain the width of the outline.
Browser Support
Property
outlineStyle
Yes
Yes
Yes
Yes
Yes
Syntax
Return the outlineStyle property:
object
.style.outlineStyle
Set the outlineStyle property:
object
.style.outlineStyle =
value
Property Values
Value
Description
none
Defines no outline. This is default
hidden
The outline is turned off
dotted
Defines a dotted outline
dashed
Defines a dashed outline
solid
Defines a solid outline
double
Defines a double outline
groove
Defines a 3D grooved outline. The effect depends on the  outline-color value
ridge
Defines a 3D ridged outline. The effect depends on the outline-color  value
inset
Defines a 3D inset outline. The effect depends on the outline-color  value
outset
Defines a 3D outset outline. The effect depends on the outline-color  value
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the style of an element's outline
CSS Version
CSS2
More Examples
Example
Change the outline style of a <div> element:
document.getElementById("myDiv").style.outlineStyle = "solid";
Try it Yourself 
Example
Return the outline style of a <div> element:
alert(document.getElementById("myDiv").style.outlineStyle);
Try it Yourself 
Example
A demonstration of all the different values:
var listValue = selectTag.options[selectTag.selectedIndex].text;
document.getElementById("myDiv").style.outlineStyle = listValue;
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline-style property
HTML DOM reference:
outline property
Style
outlineWidth
Property
Example
Change the width of the outline of a <div> element:
document.getElementById("myDiv").style.outlineWidth = "10px";
Try it Yourself 
Description
The outlineWidth property sets or returns the width of the outline around an element.
An outline is a line around an element. It is displayed around the margin of 
the element. However, it is different from the border property.
The outline is not a part of the element's dimensions, therefore the 
element's width and height properties do not contain the width of the outline.
Browser Support
Property
outlineWidth
Yes
Yes
Yes
Yes
Yes
Syntax
Return the outlineWidth property:
object
.style.outlineWidth
Set the outlineWidth property:
object
.style.outlineWidth = "thin|medium|thick|
length
|initial|inherit"
Property Values
Value
Description
thin
Defines a thin outline
medium
Defines a medium outline. This is default
thick
Defines a thick outline
length
The width of the outline in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
medium
Return Value:
A String, representing the width of an element's outline
CSS Version
CSS2
More Examples
Example
Change the width of the outline of a <div> element, using the "thick" 
value:
document.getElementById("myDiv").style.outlineWidth = "thick";
Try it Yourself 
Example
Return the width of the outline of a <div> element:
alert(document.getElementById("myDiv").style.outlineWidth);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Outline
CSS reference:
outline property
HTML DOM reference:
outline property
Style
pageBreakBefore
Property
Example
Always set a page break before each <p> element with id="footer":
document.getElementById("footer").style.pageBreakBefore = "always";
Try it Yourself 
Description
The pageBreakBefore property sets or returns the page-break behavior before an element 
(for printing or print preview).
Note:
The pageBreakBefore property has no effect on absolutely positioned elements. 
The page break is only visible in a print preview or when printing.
Browser Support
Property
pageBreakBefore
Yes
Yes
Yes
Yes
Yes
Syntax
Return the pageBreakBefore property:
object
.style.pageBreakBefore
Set the pageBreakBefore property:
object
.style.pageBreakBefore = "auto|always|avoid|emptystring|left|right|initial|inherit"
Property Values
Value
Description
auto
Insert a page break before the element if necessary. This is default
always
Always insert a page break before the element
avoid
Avoid a page break before the element
"" (empty string)
Page break is not inserted before the element
left
Insert one or two page breaks before the element, so the next page is  considered a left page
right
Insert one or two page breaks before the element, so the next page is  considered a right page
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the page-break behavior before an element when printing
CSS Version
CSS2
Related Pages
CSS reference:
page-break-before property
Style
paddingLeft
Property
Example
Set the left padding of a <div> element:
document.getElementById("myDiv").style.paddingLeft = "50px";
Try it Yourself 
Description
The paddingLeft property sets or returns the left padding of an element.
Both the margin property and the padding property insert space around an 
element. However, the difference is that margin inserts the space around the 
border, while padding inserts the space withinthe border of an element.
Browser Support
Property
paddingLeft
Yes
Yes
Yes
Yes
Yes
Syntax
Return the paddingLeft property:
object
.style.paddingLeft
Set the paddingLeft property:
object
.style.paddingLeft
= "%
|
length
|initial|inherit"
Property Values
Value
Description
%
Defines the left padding in % of the width of the parent element
length
Defines the left padding in length units
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the left padding of an element
CSS Version
CSS1
More Examples
Example
Change the left padding of a <div> element back to "normal":
document.getElementById("myDiv").style.paddingLeft = "0px";
Try it Yourself 
Example
Return the left padding of a <div> element:
alert(document.getElementById("myDiv").style.paddingLeft);
Try it Yourself 
Example
Difference between marginLeft and paddingLeft:
function changeMargin() {
document.getElementById("myDiv").style.marginLeft = "100px";
}
function changePadding() {
document.getElementById("myDiv2").style.paddingLeft = "100px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Padding
CSS reference:
padding-left property
HTML DOM reference:
padding property
Style
perspective
Property
Example
Set the perspective from where an element is viewed:
document.getElementById("myDIV").style.perspective = "50px";
Try it Yourself 
Description
The perspective property defines how many pixels a 3D element is placed from 
the view. This property allows you to change the perspective on how 3D 
elements are viewed.
When defining the perspective property for an element, it is the CHILD elements 
that get the perspective view, NOT the element itself.
Note:
The perspective property only affects 3D transformed elements!
Tip:
Use this property together with the
perspectiveOrigin
property, which 
allows you to change the bottom position of 3D elements.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
perspective
36.0
10.0
16.0
6.1
23.0
Syntax
Return the perspective property:
object
.style.perspective
Set the perspective property:
object
.style.perspective
= "length
|none"
Property Values
Value
Description
length
How far the element is placed from the view
none
Default value. Same as 0. The perspective is not set
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the perspective property of an element
CSS Version
CSS3
Related Pages
JavaScript Style Object:
perspectiveOrigin property
CSS reference:
perspective property
Style
pageBreakInside
Property
Example
Avoid a page break inside the <p> element with id="footer":
document.getElementById("footer").style.pageBreakInside = "avoid";
Try it Yourself 
Description
The pageBreakInside property sets or returns the page-break behavior inside an element 
(for printing or print preview).
Note:
The pageBreakInside property has no effect on absolutely positioned elements. 
The page break is only visible in a print preview or when printing.
Tip:
Avoid page-break properties inside tables, floating elements, and block 
elements with borders.
Browser Support
Property
pageBreakInside
Yes
Yes
Yes
Yes
Yes
Syntax
Return the pageBreakInside property:
object
.style.pageBreakInside
Set the pageBreakInside property:
object
.style.pageBreakInside = "auto|avoid|initial|inherit"
Property Values
Value
Description
auto
Insert a page break inside the element if necessary. This is default
avoid
Avoid a page break inside an element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the page-break behavior inside an element when printing
CSS Version
CSS2
Related Pages
CSS reference:
page-break-inside property
oncanplay
Event
Example
Call a function when a video is ready to start playing:
<video oncanplay="myFunction()">
Try it Yourself 
More examples below.
Description
The
oncanplay
event occurs when the browser
can start playing a media
.
The
oncanplay
event occurs when the browser has
buffered enough
to begin.
Syntax
In HTML:
<
element
oncanplay="
myScript
">
Try it Yourself 
In JavaScript:
object
.oncanplay = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("canplay",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio is ready to start playing:
<audio oncanplay="myFunction()">
Try it Yourself 
Browser Support
oncanplay
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onkeypress
Event
Example
Call a function when the user presses a key:
<input type="text" onkeypress="myFunction()">
Try it Yourself 
More examples below.
Description
The
onkeypress
event occurs when the user
presses a key
on the keyboard.
Warning
The
onkeypress
event is
deprecated
.
It is not fired for all keys (like ALT, CTRL, SHIFT, ESC) in all browsers.
To detect if the user presses a key, 
always use the
onkeydown
event. It works for all keys.
Syntax
In HTML:
<
element
onkeypress="
myScript
">
Try it Yourself 
In JavaScript:
object
.onkeypress = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("keypress",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
KeyboardEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
Browser Support
onkeypress
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onkeydown
Event
Example
Call a function when the user presses a key:
<input type="text" onkeydown="myFunction()">
Try it Yourself 
More examples below.
Description
The
onkeydown
event occurs when the user
presses a key
on the keyboard.
Warning
The
onkeypress
event is
deprecated
.
It is not fired for all keys (like ALT, CTRL, SHIFT, ESC) in all browsers.
To detect if the user presses a key, 
always use the
onkeydown
event. It works for all keys.
Syntax
In HTML:
<
element
onkeydown="
myScript
">
Try it Yourself 
In JavaScript:
object
.onkeydown = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("keydown",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
KeyboardEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
Using "onkeydown" together with the "onkeyup" event:
<input type="text" onkeydown="keydownFunction()" onkeyup="keyupFunction()">
Try it Yourself 
Browser Support
onkeydown
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onkeyup
Event
Example
Call a function when the user releases a key:
<input type="text" onkeyup="myFunction()">
Try it Yourself 
More examples below.
Description
The
onkeyup
event occurs when the user
releases a key
on the keyboard.
Warning
The
onkeypress
event is
deprecated
.
It is not fired for all keys (like ALT, CTRL, SHIFT, ESC) in all browsers.
To detect if the user presses a key, 
always use the
onkeydown
event. It works for all keys.
Syntax
In HTML:
<
element
onkeyup="
myScript
">
Try it Yourself 
In JavaScript:
object
.onkeyup = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("keyup",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
KeyboardEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
Using "onkeydown" together with the "onkeyup" event:
<input type="text" onkeydown="keydownFunction()" onkeyup="keyupFunction()">
Try it Yourself 
Example
Output the actual key that was released inside a text field:
Enter your name: <input type="text" id="fname" onkeyup="myFunction()">
<script>
function myFunction() {
var x = document.getElementById("fname").value;
document.getElementById("demo").innerHTML = x;
}
</script>
Try it Yourself 
Browser Support
onkeyup
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onload
Event
Example
Execute a JavaScript immediately after a page has been loaded:
<body onload="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onload event occurs when an object has been loaded.
onload is most often used within the <body> element to execute a script once 
a web page has completely loaded all content (including images, script files, 
CSS files, etc.).
The onload event can be used to check the visitor's browser type and browser 
version, and load the proper version of the web page based on the information.
The onload event can also be used to deal with cookies (see "More Examples" 
below).
Browser Support
Event
onload
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onload="
myScript
">
Try it Yourself 
In JavaScript:
object
.onload = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("load",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise.
HTML tags:
<body>, <frame>, <iframe>, <img>, <input type="image">, 
<link>, <script>, <style>
DOM Version:
Level 2 Events
More Examples
Example
Using onload on an <img> element. Alert "Image is loaded" immediately after 
an image has been loaded:
<img src="w3javascript.gif" onload="loadImage()" width="100" height="132">
<script>
function loadImage() {
alert("Image is loaded");
}
</script>
Try it Yourself 
Example
Using the onload event to deal with cookies:
<body onload="checkCookies()">
<script>
function checkCookies() {
var text = "";
if (navigator.cookieEnabled == true) {
text = "Cookies are enabled.";
} else {
text = "Cookies are not enabled.";
}
document.getElementById("demo").innerHTML = text;
}
</script>
Try it Yourself 
onloadedmetadata
Event
Example
Call a function when meta data for a video is loaded:
<video onloadedmetadata="myFunction()">
Try it Yourself 
More examples below.
Description
The
onloadedmetadata
event occurs when
meta data
for a media
has been loaded
.
Meta data for an audio or video consists of:
Duration
Dimensions (video)
Tracks
Syntax
In HTML:
<
element
onloadedmetadata="
myScript
">
Try it Yourself 
In JavaScript:
object
.onloadedmetadata = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("loadedmetadata",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when meta data for an audio is loaded:
<audio onloadedmetadata="myFunction()">
Try it Yourself 
Browser Support
onloadedmetadata
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
resize
Property
Example
Make a <div> element resizable:
document.getElementById("myDIV").style.resize = "both";
Try it Yourself 
Description
The resize property specifies whether or not an element is resizable by the 
user.
Note:
The resize property applies to elements whose computed overflow 
value is something other than "visible".
Browser Support
Property
resize
Yes
79.0
Yes
Yes
15.0
Syntax
Return the resize property:
object
.style.resize
Set the resize property:
object
.style.resize = "none|both|horizontal|vertical|initial|inherit"
Property Values
Value
Description
none
Default value. The user cannot resize the element
both
The user can adjust both the height and the width of the element
horizontal
The user can adjust the width of the element
vertical
The user can adjust the height of the element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the resize property of an element
CSS Version
CSS3
Related Pages
CSS reference:
resize property
Style
textDecorationColor
Property
Example
Change the color of the line, in an underlined text:
document.getElementById("demo").style.textDecorationColor = "red";
Try it Yourself 
Description
The textDecorationColor property specifies the color of the text-decoration (underlines, overlines, linethroughs).
Note:
The textDecorationColor property will only have effect on elements with a visible text-decoration.
Browser Support
Property
textDecorationColor
57
79.0
36.0
7.1 Webkit
44.0
Syntax
Return the textDecorationColor property:
object
.style.textDecorationColor
Set the textDecorationColor property:
object
.style.textDecorationColor
= "color
|initial|inherit"
Property Values
Value
Description
color
Specifies the color of the text-decoration
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
currentColor
Return Value:
A String, representing the text-decoration-color property of an element
CSS Version
CSS3
Related Pages
CSS reference:
text-decoration-color property
Style
scrollBehavior
Property
Example
Add a smooth scrolling effect to a page:
document.documentElement.style.scrollBehavior = "smooth";
Try it Yourself 
Description
The scrollBehavior property specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.
Browser Support
Property
scrollBehavior
61.0
79.0
36.0
14.0
48.0
Syntax
object
.style.scrollBehavior = "auto|smooth|initial|inherit"
Property Values
Value
Description
auto
Default. Allows a straight jump "scroll effect" between elements within the scrolling box.
smooth
Allows a smooth animated "scroll effect" between elements within the scrolling box.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Related Pages
CSS reference:
scroll-behavior property
Style
tableLayout
Property
Example
Set a fixed table layout:
document.getElementById("myTable").style.tableLayout = "fixed";
Try it Yourself 
Description
The tableLayout property sets or returns the way to lay out table cells, rows, and columns.
Browser Support
Property
tableLayout
Yes
Yes
Yes
Yes
Yes
Syntax
Return the tableLayout property:
object
.style.tableLayout
Set the tableLayout property:
object
.style.tableLayout = "auto|fixed|initial|inherit"
Property Values
Value
Description
auto
Column width is set by the widest unbreakable content. This is default.
This layout is sometimes slow since it needs to access all the content before the table can be fully displayed
fixed
Column width is set by the width of table and columns (not the content of the cells)
Fixed is faster than auto layout, because the user agent can begin to display the table once the first row has been received
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the table layout algorithm used for a table
CSS Version
CSS2
More Examples
Example
Return the table layout:
alert(document.getElementById("myTable").style.tableLayout);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Table
CSS reference:
table-layout property
Style
quotes
Property
Example
Change quotation marks:
document.getElementById("myQ").style.quotes = "'\253' '\273'";
Try it Yourself 
Description
The quotes property sets or returns the type of quotation marks for embedded 
quotations.
Browser Support
Property
quotes
Yes
Yes
Yes
Yes
Yes
Syntax
Return the quotes property:
object
.style.quotes
Set the quotes property:
object
.style.quotes = "none|
string string string string
|initial|inherit"
Property Values
Value
Description
none
Specifies that the open-quote and close-quote values will not  produce any quotation marks. This is default
string string string string
Specifies which quotation marks to use. The first two values  specifies the first level of quotation embedding, the next two values  specifies the next level of quote embedding, etc
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the type of quotation marks for embedded quotations
CSS Version
CSS2
More Examples
Example
Return the quotes property:
alert(document.getElementById("myQ").style.quotes);
Try it Yourself 
Related Pages
CSS reference:
quotes property
Style
textDecorationLine
Property
Example
Display an element with a line through the text:
document.getElementById("demo").style.textDecorationLine = "line-through";
Try it Yourself 
Description
The textDecorationLine property sets or returns what type of line, if any, the decoration will have.
Note:
You can also set the textDecorationLine using the textDecoration property,
which is a short-hand property for the textDecorationLine, textDecorationStyle, and the textDecorationColor properties.
Note:
You can also combine more than one value, like underline
and
overline to display lines both under and over the text.
Browser Support
Property
textDecorationLine
57.0
79.0
36.0
7.0 Webkit
44.0
Syntax
Return the textDecorationLine property:
object
.style.textDecorationLine
Set the textDecorationLine property:
object
.style.textDecorationLine = "none|underline|overline|line-through|initial|inherit"
Property Values
Value
Description
none
Default value. Specifies no line for the text-decoration
underline
Specifies that a line will be displayed under the text
overline
Specifies that a line will be displayed over the text
line-through
Specifies that a line will be displayed through the text
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the text-decoration-line property of an element
CSS Version
CSS3
Related Pages
CSS reference:
text-decoration-line property
Style
tabSize
Property
Example
Set the tabSize of a <pre> element:
document.getElementById("myPRE").style.tabSize = "16";
Try it Yourself 
Description
The tabSize property specifies the length of the space used for the tab character.
In HTML, the tab character is usually displayed as a single space-character, except for some elements,
like <textarea> and <pre>, and the result of the tabSize property will only be visible for these elements.
Browser Support
Property
tabSize
Yes
79.0
Not supported
Use MozTabSize
6.1
15.0
Syntax
Return the tabSize property:
object
.style.tabSize
Set the tabSize property:
object
.style.tabSize
= "number
|
length
|initial|inherit"
Property Values
Value
Description
number
Default value 8. Specifies the number of space-characters that should be displayed for each tab-character
length
Specifies the length of a tab-character. This property value is not supported in any of the major browsers
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
8
Return Value:
A String, representing the tab-size property of an element
CSS Version
CSS3
Related Pages
CSS reference:
tab-size property
Style
textAlign
Property
Example
Center-align the text in an element:
document.getElementById("demo").style.textAlign = "center";
Try it Yourself 
Description
The textAlign property sets or returns the horizontal alignment of text in a 
block level element.
Browser Support
Property
textAlign
Yes
Yes
Yes
Yes
Yes
Syntax
Return the textAlign property:
object
.style.textAlign
Set the textAlign property:
object
.style.textAlign = "left|right|center|justify|initial|inherit"
Property Values
Value
Description
left
Aligns the text to the left. This is default
right
Aligns the text to the right
center
Centers the text
justify
The text is justified
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
left
Return Value:
A String, representing the horizontal alignment of text within the element
CSS Version
CSS1
More Examples
Example
Return the text alignment of an element:
alert(document.getElementById("demo").style.textAlign);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
text-align property
Style
textAlignLast
Property
Example
Align the last line of a pragraph to the right:
document.getElementById("myDIV").style.textAlignLast = "right";
Try it Yourself 
Description
The textAlignLast property specifies how to align the last line of a text.
Note:
The textAlignLast property will only work for elements with the text-align property set to "justify".
Browser Support
Property
textAlignLast
Yes
Yes
Not supported
Use MozTextAlignLast
Yes
Yes
Syntax
Return the textAlignLast property:
object
.style.textAlignLast
Set the textAlignLast property:
object
.style.textAlignLast = "auto|left|right|center|justify|start|end|initial|inherit"
Property Values
Value
Description
auto
Default value. The last line is justified and aligned left
left
The last line is aligned to the left
right
The last line is aligned to the right
center
The last line is center-aligned
justify
The last line is justified as the rest of the lines
start
The last line is aligned at the beginning of the line (left if the text-direction is left-to-right, and right is the text-direction is right-to-left)
end
The last line is aligned at the end of the line (right if the text-direction is left-to-right, and left is the text-direction is right-to-left)
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the text-align-last property of an element
CSS Version
CSS3
Related Pages
CSS reference:
text-align-last property
Style
right
Property
Example
Set the right position of a <div> element:
document.getElementById("myDIV").style.right = "100px";
Try it Yourself 
Description
The right property sets or returns the right position of a positioned 
element.
This property specifies the right position of the element including padding, 
scrollbar, border and margin.
Tip:
A positioned element is an element with the position property set 
to: relative, absolute, or fixed.
Tip:
To set or return the left position of a positioned 
element, use the
left
property.
Browser Support
Property
right
Yes
Yes
Yes
Yes
Yes
Syntax
Return the right property:
object
.style.right
Set the right property:
object
.style.right = "auto|
length
|
%
|initial|inherit"
Property Values
Value
Description
auto
Lets the browser set the right position. This is default
length
Defines the right position in length units. Negative values are  allowed
%
Sets the right position in %of the width of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the right position of a positioned element
CSS Version
CSS2
More Examples
Example
Using negative values - Set the right position of a <div> element:
document.getElementById("myDiv").style.right = "-100px";
Try it Yourself 
Example
Return the right position of a <div> element:
alert(document.getElementById("myDiv").style.right);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
right property
Style
textOverflow
Property
Example
Change the textOverflow property:
document.getElementById("myDIV").style.textOverflow = "ellipsis";
Try it Yourself 
Description
The textOverflow property specifies what should happen when text overflows 
the containing element.
Browser Support
Property
textOverflow
Yes
Yes
Yes
Yes
Yes
Syntax
Return the textOverflow property:
object
.style.textOverflow
Set the textOverflow property:
object
.style.textOverflow = "clip|ellipsis|
string
|initial|inherit"
Property Values
Value
Description
clip
Default value. Clips the text
ellipsis
Render an ellipsis ("...") to represent clipped text
string
Render the given string to represent clipped text
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
clip
Return Value:
A String, representing the text-overflow property of an element
CSS Version
CSS3
Related Pages
CSS reference:
text-overflow property
Style
textShadow
Property
Example
Add shadow to a text:
document.getElementById("demo").style.textShadow = "5px 5px 1px #ff0000, 10px 10px 1px #0000ff";
Try it Yourself 
Description
The textShadow property sets or returns one ore more shadow effects for a text.
Browser Support
Property
textShadow
Yes
10.0
Yes
Yes
Yes
Syntax
Return the textShadow property:
object
.style.textShadow
Set the textShadow property:
object
.style.textShadow = "none|
h-shadow v-shadow blur color
|initial|inherit"
Note:
The textShadow property attaches one or more shadows to text. 
The property is a comma-separated list of shadows, each specified by 2 or 3 
length values and an optional color. Omitted lengths are 0.
Property Values
Value
Description
none
No shadow is drawn. This is default
h-shadow
Required. The position of the horizontal shadow. Negative values are  allowed
v-shadow
Required. The position of the vertical shadow. Negative values are  allowed
blur
Optional. The blur distance
color
Optional. The color of the shadow. Look at
CSS Color Values
for a complete  list of possible color values
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing a comma-separated list of shadow effects applied to the text of the element
CSS Version
CSS3
More Examples
Example
Return the text shadow:
alert(document.getElementById("myP").style.textShadow);
Try it Yourself 
Related Pages
CSS tutorial:
CSS3 Text Effects
CSS reference:
text-shadow property
Style
position
Property
Example
Change the position of a <div> element from relative to absolute:
document.getElementById("myDIV").style.position = "absolute";
Try it Yourself 
Description
The position property sets or returns the type of positioning method used for 
an element (static, relative, absolute or fixed).
Browser Support
Property
position
Yes
Yes
Yes
Yes
Yes
Syntax
Return the position property:
object
.style.position
Set the position property:
object
.style.position = "static|absolute|fixed|relative|sticky|initial|inherit"
Property Values
Value
Description
static
Elements renders in order, as they appear in the document flow. This is default.
absolute
The element is positioned relative to its first positioned (not static) ancestor element
fixed
The element is positioned relative to the browser window
relative
The element is positioned relative to its normal position, so "left:20"
      adds 20 pixels to the element's LEFT position
sticky
The element is positioned based on the user's scroll position
A sticky element toggles between
relative
and
fixed
, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
Note:
Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a Webkit prefix.
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
static
Return Value:
A String, representing the position type of an element
CSS Version
CSS2
More Examples
Example
Using different position types:
function myFunction(x) {
var whichSelected = x.selectedIndex;
var posVal = x.options[whichSelected].text;
var elem = document.getElementById("myDiv");
elem.style.position = posVal;
}
Try it Yourself 
Example
Return the position of a <h2> element:
alert(document.getElementById("myH2").style.position);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
position property
ondrop
Event
Example
Call a function when a draggable element is dropped in a <div> element:
<div ondrop="myFunction(event)"></div>
Try it Yourself 
More examples below.
Description
The
ondrop
event occurs when
a draggable selection is dropped
on a target.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondrop="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondrop = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("drop",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondrop
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ondragover
Event
Example
Call a function when an element is being dragged over a drop target:
<div ondragover="myFunction(event)"></div>
Try it Yourself 
More examples below.
Description
The
ondragover
event occurs when
a draggable selection is dragged over a target
.
By default, data/elements cannot be dropped in other elements. To allow a 
drop, we must prevent the default handling of the element. This is done by 
calling the event.preventDefault() method for the ondragover event.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondragover="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondragover = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("dragover",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondragover
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
fullscreenchange
Event
Example
Display some text when the page is viewed in fullscreen mode:
document.addEventListener("fullscreenchange", function() {
output.innerHTML = "fullscreenchange event fired!";
});
Try it Yourself 
Description
The fullscreenchange event occurs when an element is viewed in fullscreen mode.
Note:
This event requires specific prefixes 
to work in different browsers (see Browser Support below).
Tip:
Use the
element
.requestFullscreen()
method to view an element in fullscreen mode.
Tip:
Use the
element
.exitFullscreen()
method to cancel fullscreen mode.
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Note:
Each browser requires a specific prefix (see parentheses):
Event
fullscreenchange
45.0 (webkit)
11.0 (ms)
47.0 (moz)
5.1 (webkit)
15.0 (webkit)
Example
Using prefixes for cross-browser code:
/* Standard syntax */
document.addEventListener("fullscreenchange", 
  function() {
...
});
/* Firefox */
document.addEventListener("mozfullscreenchange", function() {
...
});
/* Chrome, Safari and Opera */
document.addEventListener("webkitfullscreenchange", 
  function() {
...
});
/* IE / Edge */
document.addEventListener("msfullscreenchange", function() {
...
});
Try it Yourself 
Syntax
In HTML:
<
element
onfullscreenchange="
myScript
">
In JavaScript:
object
.onfullscreenchange = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("fullscreenchange",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
Event
HTML tags:
ALL HTML elements
oninvalid
Event
Example
Alert some text if an input field is invalid:
<input type="text" oninvalid="alert('You must fill out the form!');" required>
Try it Yourself 
More "Try it Yourself" examples below.
Description
The oninvalid event occurs when a submittable <input> element is invalid.
For example, the input field is invalid if the required attribute is set and 
the field is empty (the required attribute specifies that the input field 
must be filled out before submitting the form).
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Event
oninvalid
Yes
10.0
Yes
Yes
Yes
Syntax
In HTML:
<
element
oninvalid="
myScript
">
Try it Yourself 
In JavaScript:
object
.oninvalid = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("invalid",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
Yes
Event type:
Event
HTML tags:
<input>
DOM Version:
Level 3 Events
More Examples
Example
Alert some text if an input field contains less than 6 characters:
Name: <input type="text" id="myInput" name="fname" pattern=".{6,}" 
  required>
<script>
document.getElementById("myInput").addEventListener("invalid", myFunction);
function myFunction() {
alert("Must contain 6 or more characters");
}
</script>
Try it Yourself 
Example
Alert some text if an input field contains a number that is less than 2 or 
greater than 5:
Number: <input type="number" id="myInput" name="quantity" min="2" max="5" 
  required>
<script>
document.getElementById("myInput").addEventListener("invalid", myFunction);
function myFunction() {
alert("You must pick a number between 2 and 5. You chose: " + this.value);
}
</script>
Try it Yourself 
Related Pages
JavaScript Tutorial:
JavaScript Forms
onmouseover
Event
 DOM Events
 MouseEvent
Example
Call a function when moving the mouse pointer onto an image:
<img onmouseover="bigImg(this)" src="smiley.gif" alt="Smiley">
Try it Yourself 
More examples below.
Description
The
onmouseover
event occurs when the
mouse pointer enters an element
.
The
onmouseover
event is often used together with the
onmouseout
event, which occurs when the mouse pointer leaves the element.
The
onmouseover
event is similar to the
onmouseenter
event.
The difference is that the
onmouseenter
event does not bubble (does not propagate up the document hierarchy). See "More Examples" at the bottom of this page to better understand the differences.
Syntax
In HTML:
<
element
onmouseover="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmouseover = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mouseover",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
This example demonstrates the difference between the onmousemove, onmouseenter 
and mouseover events:
<div onmousemove="myMoveFunction()">
<p id="demo1">I will demonstrate onmousemove!</p>
</div>
<div onmouseenter="myEnterFunction()">
<p id="demo2">I will demonstrate onmouseenter!</p>
</div>
<div onmouseover="myOverFunction()">
<p id="demo3">I will demonstrate onmouseover!</p>
</div>
Try it Yourself 
Browser Support
onmouseover
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
 DOM Events
 MouseEvent
onmouseout
Event
Example
Call a function when moving the mouse pointer out of an image:
<img onmouseout="normalImg(this)" src="smiley.gif" alt="Smiley">
Try it Yourself 
More examples below.
Description
The
onmouseout
event occurs when the mouse
pointer moves out of an 
element
.
The
onmouseout
event is often used together with the
onmouseover
event,
which occurs when the pointer is moved over an element.
The
onmouseout
event is similar to the
onmouseleave
event. The difference is that the
onmouseleave
event does not bubble 
(does not propagate up the document hierarchy). See "More Examples" at the 
bottom of this page to better understand the differences.
Syntax
In HTML:
<
element
onmouseout="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmouseout = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mouseout",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
This example demonstrates the difference between the onmousemove, 
onmouseleave 
and onmouseout events:
<div onmousemove="myMoveFunction()">
<p id="demo">I will demonstrate onmousemove!</p>
</div>
<div onmouseleave="myLeaveFunction()">
<p id="demo2">I will demonstrate onmouseleave!</p>
</div>
<div onmouseout="myOutFunction()">
<p id="demo3">I will demonstrate onmouseout!</p>
</div>
Try it Yourself 
Browser Support
onmouseout
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onmouseup
Event
Example
Call a function when releasing a mouse button over a paragraph:
<p onmouseup="mouseUp()">Click the text!</p>
Try it Yourself 
More examples below.
Description
The
onmouseup
event occurs when
a mouse button is released
over an element
.
Events order
for the left and middle mouse button:
onmousedown
onmouseup
onclick
Events order
for the right mouse button:
onmousedown
onmouseup
oncontextmenu
Syntax
In HTML:
<
element
onmouseup="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmouseup = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mouseup",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
Browser Support
onmouseup
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
ononline
Event
Example
Call a function when the browser starts to work online:
<body ononline="myFunction()">
Try it Yourself 
More examples below.
Description
The
ononline
event occurs when the browser starts to work online.
The
ononline
event is the opposite of the
onoffline
event.
Syntax
In HTML:
<
element
ononline="
myScript
">
Try it Yourself 
In JavaScript:
object
.ononline = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("online",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<body>
DOM Version:
Level 3 Events
Browser Support
ononline
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onpageshow
Event
Example
Call a function when a user navigates to a webpage:
<body onpageshow="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onpageshow event occurs when a user navigates to a webpage.
The onpageshow event is similar to the
onload
event, except that it occurs 
after the onload event when the page first loads. Also, the onpageshow event 
occurs every time the page is loaded, whereas the onload event does not occur 
when the page is loaded from the cache.
To find out if a page is loaded directly from the server or if the page is 
cached, you can use the
persisted
property of the PageTransitionEvent object. 
This property returns true if the page is cached by the browser, and false 
otherwise (see "More Examples" below).
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Event
onpageshow
Yes
11.0
Yes
5.0
Yes
Syntax
In HTML:
<
element
onpageshow="
myScript
">
Try it Yourself 
In JavaScript:
object
.onpageshow = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("pageshow",
myScript
);
Try it Yourself 
Note:
The
addEventListener()
method is not supported in Internet Explorer 
8 and earlier versions.
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
PageTransitionEvent
HTML tags:
<body>
DOM Version:
Level 3 Events
More Examples
Example
Find out whether the page was cached by the browser:
function myFunction(event) {
alert(event.persisted);
}
Try it Yourself 
onpagehide
Event
Example
Call a function when the user is navigating away from a webpage:
<body onpagehide="myFunction()">
Description
The onpagehide event occurs when the user is navigating away from a webpage.
There are several ways to navigate away from a page. E.g. by clicking on a link, refreshing the page, submitting a form, closing the browser window, etc.
The onpagehide event is sometimes used instead of the
onunload
event, as 
the onunload event causes the page to not be cached.
To find out if a page is loaded directly from the server or if the page is 
cached, you can use the persisted property of the PageTransitionEvent object. 
This property returns true if the page is cached by the browser, and false 
otherwise.
Browser Support
The numbers in the table specify the first browser version that fully supports the 
event.
Event
onpagehide
Yes
11.0
Yes
5.0
Yes
Note:
Due to different browser settings, this event may not always work as expected.
Syntax
In HTML:
<
element
onpagehide="
myScript
">
In JavaScript:
object
.onpagehide = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("pagehide",
myScript
);
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
PageTransitionEvent
HTML tags:
<body>
DOM Version:
Level 3 Events
Style
borderImageOutset
Property
Example
Place the border outside the edges of the <div> element:
document.getElementById("myDIV").style.borderImageOutset = "5px 10px 20px 15px";
Try it Yourself 
Description
The borderImageOutset property sets or returns the amount by which the border image area extends beyond the border box.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
borderImageOutset
Yes
11.0
Yes
6.0
15.0
Look at the
borderImage
property instead!
Syntax
Return the borderImageOutset property:
object
.style.borderImageOutset
Set the borderImageOutset property:
object
.style.borderImageOutset
= "length
|
number
|initial|inherit"
Note:
The borderImageOutset property specifies the amount by which 
the border image area extends beyond the border box. on the top, right, bottom, 
and left sides. If the fourth value is omitted, it is the same as the second. If 
the third one is also omitted, it is the same as the first. If the second one is 
also omitted, it is the same as the first. Negative values are not allowed for 
any of the borderImageOutset values.
Property Values
Value
Description
length
A length unit specifying how far from the edges the border-image will appear. Default value is 0
number
Represent multiples of the corresponding border-width
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the border-image-outset property of an element
CSS Version
CSS3
Related Pages
CSS reference:
border-image-outset property
Style
transformOrigin
Property
Example
Set a rotated element's base placement:
document.getElementById("myDIV").style.transformOrigin = "0 0";
Try it Yourself 
Description
The transformOrigin property allows you to change the position on transformed elements.
2D transformed element can change the x- and y-axis of the element. 3D transformed element can also 
change the z-axis of the element.
Note:
This property must be used together with the
transform
property.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transformOrigin
36.0
10.0
16.0
9.0
23.0
Syntax
Return the transformOrigin property:
object
.style.transformOrigin
Set the transformOrigin property:
object
.style.transformOrigin
= "x-axis y-axis z-axis
|initial|inherit"
Property Values
Value
Description
x-axis
Defining where the view is placed at the x-axis. Possible values:
left
center
right
length
%
y-axis
Defining where the view is placed at the y-axis. Possible values:
top
center
bottom
length
%
z-axis
Defining where the view is placed at the z-axis (for 3D transforms). Possible values:
length
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
50% 50% 0
Return Value:
A String, representing the transform-origin property of an element
CSS Version
CSS3
Related Pages
JavaScript Style Object:
transform property
CSS reference:
transform-origin property
Style
transitionProperty
Property
Example
Hover over a div element to gradually change its width and height:
document.getElementById("myDIV").style.transitionProperty = "width,height";
Try it Yourself 
Description
The transitionProperty property specifies the name of the CSS property the transition 
effect is for (the transition effect will start when the specified CSS property changes).
Tip:
A transition effect could typically occur when a user hover over an element.
Note:
Always specify the transitionDuration property, otherwise the duration is 0, and the transition will have no effect.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transitionProperty
26.0
10.0
16.0
6.1
12.1
Syntax
Return the transitionProperty property:
object
.style.transitionProperty
Set the transitionProperty property:
object
.style.transitionProperty = "none|all|
property
|initial|inherit"
Property Values
Value
Description
none
No property will get a transition effect
all
Default value. All properties will get a transition effect
property
Defines a comma separated list of CSS property names the transition effect is for
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
all
Return Value:
A String, representing the transition-property property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transition-property property
Style
transformStyle
Property
Example
Let the transformed child elements preserve the 3D transformations:
document.getElementById("myDIV").style.transformStyle = "preserve-3d";
Try it Yourself 
Description
The transformStyle property sets or returnd how nested elements are rendered in 3D space.
Note:
This property must be used together with the
transform
property.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transformStyle
36.0
11.0
16.0
9.0
23.0
Syntax
Return the transformStyle property:
object
.style.transformStyle
Set the transformStyle property:
object
.style.transformStyle = "flat|preserve-3d|initial|inherit"
Property Values
Value
Description
flat
Default value. The child elements will NOT preserve its 3D position
preserve-3d
The child elements will preserve its 3D position
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
flat
Return Value:
A String, representing the transform-style property of an element
CSS Version
CSS3
Related Pages
JavaScript Style Object:
transform property
CSS reference:
transform-style property
Style
textTransform
Property
 Style Object
Example
Transform the first letter of each word in an element to uppercase:
document.getElementById("demo").style.textTransform = "capitalize";
Try it Yourself 
Description
The textTransform property sets or returns the capitalization of a text.
This property is used to change the text to uppercase, lowercase or to capitalized.
Browser Support
Property
textTransform
Yes
Yes
Yes
Yes
Yes
Syntax
Return the textTransform property:
object
.style.textTransform
Set the textTransform property:
object
.style.textTransform = "none|capitalize|uppercase|lowercase|initial|inherit"
Property Values
Value
Description
none
No characters are transformed. This is default
capitalize
The first character of each word is transformed to uppercase
uppercase
All characters are transformed to uppercase
lowercase
All characters are transformed to lowercase
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the transformation of the text in the element
CSS Version
CSS1
More Examples
Example
Transform all characters in an element to uppercase:
document.getElementById("demo").style.textTransform = "uppercase";
Try it Yourself 
Example
Return the text transformation of an element:
alert(document.getElementById("demo").style.textTransform);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
text-transform 
property
 Style Object
Style
transitionDuration
Property
Example
Speed up the transition effect:
document.getElementById("myDIV").style.transitionDuration = "1s";
Try it Yourself 
Description
The transitionDuration property sets or returns how many seconds (s) or milliseconds 
(ms) a transition effect takes to complete.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transitionDuration
26.0
10.0
16.0
6.1
12.1
Syntax
Return the transitionDuration property:
object
.style.transitionDuration
Set the transitionDuration property:
object
.style.transitionDuration
= "time
|initial|inherit"
Property Values
Value
Description
time
Specifies how many seconds or milliseconds a transition effect takes to complete. Default value is 0, meaning there will be no effect
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the transition-duration property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transition-duration property
Style
textDecorationStyle
Property
Example
Display a wavy line under the an element:
document.getElementById("demo").style.textDecorationStyle = "wavy";
Try it Yourself 
Description
The textDecorationStyle property sets or returns how the line, if any, will display.
Browser Support
Property
textDecorationStyle
57.0
79.0
36.0
12.1
44.0
Syntax
Return the textDecorationStyle property:
object
.style.textDecorationStyle
Set the textDecorationStyle property:
object
.style.textDecorationStyle = "solid|double|dotted|dashed|wavy|initial|inherit"
Property Values
Value
Description
solid
Default value. The line will display as a single line
double
The line will display as a double line
dotted
The line will display as a dotted line
dashed
The line will display as a dashed line
wavy
The line will display as a wavy line
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
solid
Return Value:
A String, representing the text-decoration-style property of an element
CSS Version
CSS3
Related Pages
CSS reference:
text-decoration-style property
Style
transitionTimingFunction
Property
Example
Change the speed curve of a transition effect:
document.getElementById("myDIV").style.transitionTimingFunction = "linear";
Try it Yourself 
Description
The transitionTimingFunction property specifies the speed curve of the transition effect.
This property allows a transition effect to change speed over its duration.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transitionTimingFunction
26.0
10.0
16.0
6.1
12.1
Syntax
Return the transitionTimingFunction property:
object
.style.transitionTimingFunction
Set the transitionTimingFunction property:
object
.style.transitionTimingFunction = "ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier()|
initial|inherit"
Property Values
Value
Description
ease
Default value. Specifies a transition effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25, 0.1, 0.25, 1))
linear
Specifies a transition effect with the same speed from start to end (equivalent to cubic-bezier(0, 0, 1, 1))
ease-in
Specifies a transition effect with a slow start (equivalent to cubic-bezier(0.42, 0, 1, 1))
ease-out
Specifies a transition effect with a slow end (equivalent to cubic-bezier(0, 0, 0.58, 1))
ease-in-out
Specifies a transition effect with a slow start and end (equivalent to cubic-bezier(0.42, 0, 0.58, 1))
cubic-bezier(
n
,
n
,
n
,
n
)
Define your own values in the cubic-bezier function.
 Possible values are numeric values from 0 to 1
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
ease
Return Value:
A String, representing the transition-timing-function property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transition-timing-function property
Style
transitionDelay
Property
Example
Wait 2 seconds before the transition effect starts:
document.getElementById("myDIV").style.transitionDelay = "2s";
Try it Yourself 
Description
The transitionDelay property specifies when the transition effect will start.
The transitionDelay value is defined in seconds (s) or milliseconds (ms).
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
transitionDelay
26.0
10.0
16.0
6.1
12.1
Syntax
Return the transitionDelay property:
object
.style.transitionDelay
Set the transitionDelay property:
object
.style.transitionDelay
= "time
|initial|inherit"
Property Values
Value
Description
time
Specifies the number of seconds or milliseconds to wait before the transition effect will start
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
0
Return Value:
A String, representing the transition-delay property of an element
CSS Version
CSS3
Related Pages
CSS reference:
transition-delay property
Style
unicodeBidi
Property
Example
Override text in a <p> element:
document.getElementById("myP").style.unicodeBidi = "bidi-override";
Try it Yourself 
Description
The unicodeBidi property is used with the
direction
property to set or return whether the text should be overridden to 
support multiple languages in the same document.
Browser Support
Property
unicodeBidi
Yes
Yes
Yes
Yes
Yes
Syntax
Return the unicodeBidi property:
object
.style.unicodeBidi
Set the unicodeBidi property:
object
.style.unicodeBidi = "normal|embed|bidi-override|initial|inherit"
Property Values
Value
Description
normal
Does not use an additional level of embedding. This is default
embed
Creates an additional level of embedding
bidi-override
Creates an additional level of embedding. Reordering depends on the  direction property
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the level of embedding with respect to the bidirectional algorithm
CSS Version
CSS2
More Examples
Example
Return the unicodeBidi property:
alert(document.getElementById("myP").style.unicodeBidi);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
unicode-bidi 
property
Style
wordSpacing
Property
Example
Set the space between words in a <p> element to 50 pixels:
document.getElementById("myP").style.wordSpacing = "50px";
Try it Yourself 
Description
The wordSpacing property sets or returns the spacing between words in a text.
Tip:
To set or return the spacing between characters in a 
text, use the
letterSpacing
property.
Browser Support
Property
WordSpacing
Yes
Yes
Yes
Yes
Yes
Syntax
Return the wordSpacing property:
object
.style.wordSpacing
Set the wordSpacing property:
object
.style.wordSpacing = "normal|
length
|initial|inherit"
Property Values
Value
Description
normal
Defines normal spacing between words. This is default
length
Specifies the space between words in length units. Negative values are allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the space between words in the text
CSS Version
CSS1
More Examples
Example
Using negative values:
document.getElementById("myP").style.wordSpacing = -3px";
Try it Yourself 
Example
Return the word spacing of a <p> element:
alert(document.getElementById("myP").style.wordSpacing);
Try it Yourself 
Example
Difference between the letterSpacing property and the wordSpacing property:
function changeLetters() {
document.getElementById("myP1").style.letterSpacing = "15px";
}
function changeWords() {
document.getElementById("myP2").style.wordSpacing = "15px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
word-spacing property
Style
verticalAlign
Property
Example
Set the vertical alignment of some text in a table to "bottom":
document.getElementById("myTd").style.verticalAlign = "bottom";
Try it Yourself 
Description
The verticalAlign property sets or returns the vertical alignment of the content in an element.
Browser Support
Property
verticalAlign
Yes
Yes
Yes
Yes
Yes
Syntax
Return the verticalAlign property:
object
.style.verticalAlign
Set the verticalAlign property:
object
.style.verticalAlign =
value
Property Values
Value
Description
length
Raises or lower an element by the specified length. Negative values are allowed
%
Raises or lower an element in a percent of the "line-height"
      property. Negative values are allowed
baseline
Align the baseline of the element with the baseline of the parent element. This is default
sub
Aligns the element as it was subscript
super
Aligns the element as it was superscript
top
The top of the element is aligned with the top of the 
    tallest element on the line
text-top
The top of the element is aligned with the top of
      the parent element's font
middle
The element is placed in the middle of the parent element
bottom
The bottom of the element is aligned with the
      lowest element on the line
text-bottom
The bottom of the element is aligned with the
      bottom of the parent element's font
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
baseline
Return Value:
A String, representing the vertical alignment of the content in an element
CSS Version
CSS1
More Examples
Example
Return the vertical alignment of a <td> element:
alert(document.getElementById("myTd").style.verticalAlign);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
vertical-align 
property
Style
wordBreak
Property
Example
Break words between any two letters:
document.getElementById("myDIV").style.wordBreak = "break-all";
Try it Yourself 
Description
The wordBreak property specifies line breaking rules for non-CJK scripts.
Tip:
CJK scripts are Chinese, Japanese and Korean ("CJK") scripts.
Browser Support
Property
wordBreak
Yes
Yes
Yes
Yes
Yes
Syntax
Return the wordBreak property:
object
.style.wordBreak
Set the wordBreak property:
object
.style.wordBreak = "normal|break-all|keep-all|initial|inherit"
Property Values
Value
Description
normal
Default value. Break words according to their usual rules
break-all
Lines may break between any two letters
keep-all
Breaks are prohibited between pairs of letters
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the word-break property of an element
CSS Version
CSS3
Related Pages
CSS reference:
word-break property
onloadeddata
Event
Example
Call a function when data for the first video frame is available:
<video onloadeddata="myFunction()">
Try it Yourself 
More examples below.
Description
The
onloadeddata
event occurs when a
media frame is loaded
,
but does not guarantee that enough data is available to begin playing.
The
onloadeddata
event occurs after
onloadedmetadata
and before
oncanplay
.
Syntax
In HTML:
<
element
onloadeddata="
myScript
">
Try it Yourself 
In JavaScript:
object
.onloadeddata = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("loadeddata",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when data for the first audio frame is available:
<audio onloadeddata="myFunction()">
Try it Yourself 
Browser Support
onloadeddata
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onmessage
Event
Example
Create a new EventSource object, and specify the URL of the page sending the 
updates.
Each time an update is received, the onmessage event occurs. When an 
onmessage event occurs, put the received data into the <div> element with id="myDIV":
var source = new EventSource("demo_sse.php");
source.onmessage = function(event) {
document.getElementById("myDIV").innerHTML += event.data + "<br>";
};
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onmessage event occurs when a message is received through an event 
source.
The event object for the onmessage event supports the following properties:
data - Contains the actual message
origin - The URL of the document that invoked the event
lastEventId - the identifier of the last message seen in the event stream
Related events:
onopen
- Occurs when a connection to the server is open
onerror
- Occurs when a problem occurs
For more information about Server-Sent Events, read our
HTML5 Server-Sent Events Tutorial
.
Browser Support
The numbers in the table specify the first browser version that fully supports the 
event.
Event
onmessage
9.0
Not supported
6.0
5.0
11.0
Syntax
object
.onmessage = function(){
myScript
};
Try it Yourself 
Using the addEventListener() method:
object
.addEventListener("message",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
More Examples
Example
Get the URL of the document that invoked the onmessage event:
var source = new EventSource("demo_sse.php");
source.onmessage = function(event) {
document.getElementById("myDIV").innerHTML = event.origin;
};
The result could be:
https://www.w3schools.com/
Try it Yourself 
onresize
Event
Example
Call a function when the browser window is resized:
<body onresize="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onresize event occurs when the browser window has been resized.
Tip:
To get the size of an element, use the clientWidth, 
clientHeight,
innerWidth
,
innerHeight
,
outerWidth
,
outerHeight
, offsetWidth and/or 
offsetHeight properties.
Browser Support
Event
onresize
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onresize="
myScript
">
Try it Yourself 
In JavaScript:
object
.onresize = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("resize",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise
HTML tags:
<body>
DOM Version:
Level 2 Events
More Examples
Example
Using the addEventListener() method to attach the "resize" event on the 
window object.
window.addEventListener("resize", myFunction);
Try it Yourself 
onsearch
Event
Example
Call a function when submitting a search:
<input type="search" onsearch="myFunction()">
Try it Yourself 
Description
The onsearch event occurs when a user presses the "ENTER" key or clicks the 
"x" button in an <input> element with type="search".
Browser Support
The numbers in the table specify the first browser version that fully 
supports the event.
Event
onsearch
Yes
Not supported
Not supported
Yes
15.0
Syntax
In HTML:
<
element
onsearch="
myScript
">
Try it Yourself 
In JavaScript:
object
.onsearch = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("search",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<input type="search">
DOM Version:
Level 3 Events
onstalled
Event
Example
Call a function when the browser is trying to get not available media data:
<video onstalled="myFunction()">
More examples below.
Description
The
onstalled
event occurs when the browser is trying to get media data that is not available.
Syntax
In HTML:
<
element
onstalled="
myScript
">
In JavaScript:
object
.onstalled = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("stalled",
myScript
);
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
Browser Support
onstalled
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onsubmit
Event
Example
Call a function when a form is submitted:
<form onsubmit="myFunction()">
Enter name: <input type="text">
<input type="submit">
</form>
Try it Yourself 
Description
The onsubmit event occurs when a form is submitted.
Browser Support
Event
onsubmit
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onsubmit="
myScript
">
Try it Yourself 
In JavaScript:
object
.onsubmit = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("submit",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
Event
HTML tags:
<form>
DOM Version:
Level 2 Events
touchend
Event
Example
Call a function when the user releases the touch (for touch screens only):
<p ontouchend="myFunction(event)">Touch me!</p>
Try it Yourself 
Description
The
touchend
event occurs when
a user removes the finger from an element
.
The
touchend
event only works on touch screens.
Syntax
In HTML:
<
element
ontouchend="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontouchend =
myScript
;
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("touchend",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
TouchEvent
HTML tags:
All HTML elements
Browser Support
ontouchend
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
ontouchend
is not supported in Internet Explorer 11 (or earlier).
onsuspend
Event
Example
Call a function when the browser is not getting media data:
<video onsuspend="myFunction()">
More examples below.
Description
The
onsuspend
event occurs when the browser is not getting media data.
The
onsuspend
event occurs when the loading is prevented or suspended.
Syntax
In HTML:
<
element
onsuspend="
myScript
">
In JavaScript:
object
.onsuspend = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("suspend",
myScript
);
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
Browser Support
onsuspend
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Style
wordWrap
Property
Example
Allow long words to be able to break and wrap onto the next line:
document.getElementById("myDIV").style.wordWrap = "break-word";
Try it Yourself 
Description
The wordWrap property allows long words to be able to be broken and wrap 
onto the next line.
Browser Support
Property
wordWrap
Yes
Yes
Yes
Yes
Yes
Syntax
Return the wordWrap property:
object
.style.wordWrap
Set the wordWrap property:
object
.style.wordWrap = "normal|break-word|initial|inherit"
Property Values
Value
Description
normal
Break words only at allowed break points
break-word
Allows unbreakable words to be broken
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the word-wrap property of an element
CSS Version
CSS3
Related Pages
CSS reference:
word-wrap property
onabort
Event
Example
Call a function when the loading of a video is aborted:
<video onabort="myFunction()">
More examples below.
Description
The
onabort
event occurs when
the loading of an audio or video is aborted
.
The
onabort
event occurs when a download is aborted, not when an error occurs.
Syntax
In HTML:
<
element
onabort="
myScript
">
In JavaScript:
object
.onabort = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("abort",
myScript
);
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise.
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
Browser Support
onabort
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
animationiteration
Event
Example
Do something when a CSS animation is repeated:
const div1 = document.getElementById("myDIV");
div1.addEventListener("animationiteration", myRepeatFunction);
Try it Yourself 
Description
The
animationiteration
event occurs when
a CSS animation is repeated
.
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
AnimationEvent
DOM Version:
Level 3 Events
Browser Support
onanimationiteration
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onbeforeprint
Event
Example
Call a function when a page is about to be printed:
<body onbeforeprint="myFunction()">
Try it Yourself 
Description
The
onbeforeprint
event occurs when
a page is about to be printed
.
The
onbeforeprint
event occurs
before
the print dialogue box opens.
Syntax
In HTML:
<
element
onbeforeprint="
myScript
">
Try it Yourself 
In JavaScript:
object
.onbeforeprint = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("beforeprint",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<body>
DOM Version:
Level 3 Events
Browser Support
onbeforeprint
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onmouseenter
Event
Example
Call a function when moving the mouse pointer onto an image:
<img onmouseenter="bigImg(this)" src="smiley.gif" alt="Smiley">
Try it Yourself 
More examples below.
Description
The
onmouseenter
event occurs when the
mouse pointer enters an element
.
The
onmouseenter
event is often used together with the
onmouseleave
event, which occurs when the 
mouse pointer leaves an element.
The
onmouseenter
event is similar to the
onmouseover
event. The difference is that the
onmouseenter
event does not bubble 
(does not propagate up the document hierarchy). See "More Examples" at the 
bottom of this page to better understand the differences.
Syntax
In HTML:
<
element
onmouseenter="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmouseenter = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mouseenter",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
This example demonstrates the difference between the onmousemove, onmouseenter 
and mouseover events:
<div onmousemove="myMoveFunction()">
<p id="demo1">I will demonstrate onmousemove!</p>
</div>
<div onmouseenter="myEnterFunction()">
<p id="demo2">I will demonstrate onmouseenter!</p>
</div>
<div onmouseover="myOverFunction()">
<p id="demo3">I will demonstrate onmouseover!</p>
</div>
Try it Yourself 
Browser Support
onmouseenter
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onmouseleave
Event
Example
Call a function when moving the mouse pointer out of an image:
<img onmouseleave="normalImg(this)" src="smiley.gif" alt="Smiley">
Try it Yourself 
More examples below.
Description
The
onmouseleave
event occurs when the
mouse pointer leaves an element
.
The
onmouseleave
event is often used together with the
onmouseenter
event, which occurs when the 
mouse pointer enters an element.
The
onmouseleave
event is similar to the
onmouseout
event. The difference is that the
onmouseleave
event does not bubble 
(does not propagate up the document hierarchy). See "More Examples" at the 
bottom of this page to better understand the differences.
Syntax
In HTML:
<
element
onmouseleave="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmouseleave = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mouseleave",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
This example demonstrates the difference between the onmousemove, 
onmouseleave 
and onmouseout events:
<div onmousemove="myMoveFunction()">
<p id="demo1">I will demonstrate onmousemove!</p>
</div>
<div onmouseleave="myLeaveFunction()">
<p id="demo2">I will demonstrate onmouseleave!</p>
</div>
<div onmouseout="myOutFunction()">
<p id="demo3">I will demonstrate onmouseout!</p>
</div>
Try it Yourself 
Browser Support
onmouseleave
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onoffline
Event
Example
Call a function when the browser starts to work offline:
<body onoffline="myFunction()">
Try it Yourself 
More examples below.
Description
The
onoffline
event occurs when the browser starts to work offline.
The
onoffline
event is the opposite of the
ononline
event.
Syntax
In HTML:
<
element
onoffline="
myScript
">
Try it Yourself 
In JavaScript:
object
.onoffline = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("offline",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<body>
DOM Version:
Level 3 Events
Browser Support
onoffline
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onpaste
Event
Example
Call a function when pasting some text in an <input> element:
<input type="text" onpaste="myFunction()" value="Paste something here">
Try it Yourself 
More examples below
Description
The
onpaste
event occurs when the user
pastes some content
into an element.
The
onpaste
event is mostly used on <input> elements with type="text".
3 Ways to Paste:
Press Ctrl + V
Select "Paste" from the Edit menu in your browser
Right click to display the context menu, and select "Paste"
Syntax
In HTML:
<
element
onpaste="
myScript
">
Try it Yourself 
In JavaScript:
object
.onpaste = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("paste",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
ClipboardEvent
HTML tags:
All HTML elements
More Examples
Example
Call a function when pasting some text in a <p> element.
(Note that contenteditable is set to "true"):
<p contenteditable="true" onpaste="myFunction()">Try to paste something inside this paragraph.</p>
Try it Yourself 
Browser Support
onpaste
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onopen
Event
Example
Create a new EventSource object, and specify the URL of the page sending the 
updates.
When (and if) a connection is established, output some text in a 
<h1> element:
var source = new EventSource("demo_sse.php");
source.onopen = function() {
document.getElementById("myH1").innerHTML = "Getting server updates";
};
Try it Yourself 
Description
The onopen event occurs when a connection with an event source is opened.
Related events:
onmessage
- Occurs when a message is received
onerror
- Occurs when a problem occurs
For more information about Server-Sent Events, read our
HTML5 Server-Sent Events Tutorial
.
Browser Support
The numbers in the table specify the first browser version that fully supports the 
event.
Event
onopen
9.0
Not supported
6.0
5.0
11.0
Syntax
object
.onopen = function(){
myScript
};
Try it Yourself 
Using the addEventListener() method:
object
.addEventListener("open",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
touchmove
Event
Example
Call a function when the user moves the finger over a P element (for touch screens only):
<p ontouchmove="myFunction(event)">Touch me!</p>
Try it Yourself 
Description
The
touchmove
event occurs when
a user moves a finger across the screen
.
The
touchmove
event only works on touch screens.
The touchmove event is triggered once for each movement and continues until the finger is released.
Syntax
In HTML:
<
element
ontouchmove="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontouchmove =
myScript
;
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("touchmove",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
TouchEvent
HTML tags:
All HTML elements
Browser Support
ontouchmove
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
ontouchmove
is not supported in Internet Explorer 11 (or earlier).
HTML DOM Event Objects
Event Objects
When an event occurs in HTML, the event belongs to a certain event object, 
like a mouse click event belongs to the MouseEvent object.
For a tutorial about Events, read our
JavaScript Events Tutorial
.
The Event Object
All event objects are based on the Event Object.
All event objects inherit the Event Object's properties and methods.
Object
Description
Event
The parent of all event objects
Event Objects
Object
Handles
AnimationEvent
CSS animations
ClipboardEvent
Modification of the clipboard
DragEvent
Drag and drop interaction
FocusEvent
Focus-related events
HashChangeEvent
Changes in the anchor part of an URL
InputEvent
User input
KeyboardEvent
Keyboard interaction
MouseEvent
Mouse interaction
PageTransitionEvent
Navigation between web pages
PopStateEvent
Changes in the page history
ProgressEvent
The progress of loading external files
StorageEvent
Changes in the Web Storage
TouchEvent
Touch interaction
TransitionEvent
CSS transitions
UiEvent
User interface interaction
WheelEvent
Mouse-wheel interaction
cancelable
Event Property
Example
Is the event cancelable:
// true or false?
event.cancelable;
Try it Yourself 
Description
The
cancelable
event property returns
true
if an
event is cancelable
.
Otherwise it returns
false.
The
cancelable
event property is read-only.
An event is
cancelable
if it is possible to prevent its default action.
Prevent Bubbling:
The stopPropagation() Method
stops bubbling.
Prevent Default Action:
The preventDefault() Method
cancels an event
(the default action will not occur).
Syntax
event
.cancelable
Technical Details
Return Value:
A Boolean.
Returns
true
if the event is cancelable.
Otherwise it returns
false
.
DOM Version:
DOM Level 2 Events.
Browser Support
event.canceable
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent
charCode
Property
Example
Get the value of the pressed keyboard key:
let value = event.charCode;
Try it Yourself 
Description
The
charCode
property returns the
character code
when a keybord event occurs.
The
charCode
property is read-only.
Warning !
The charCode property is deprecated.
Use the
key property
instead.
Syntax
event
.charCode
Technical Details
Return Value:
A Number
The character code
DOM Version:
DOM Level 2
Keyboard Events
.
MouseEvent
buttons
Property
Example
Which mouse button(s) was pressed?
let value = event.buttons;
Try it Yourself 
Description
The
buttons
property returns
which mouse buttons are pressed
when a mouse event occurs.
The
buttons
property is mostly used with the
onmousedown
event.
The
buttons
property is read-only.
Syntax
event
.buttons
Technical Details
Return Value:
A Number.
The mouse buttons that were pressed when the mouse event occured.
If more than one button is pressed, the values are added.
1 : Left mouse button
2 : Right mouse button
4 : Wheel or middle button
8 : Fourth button (Browser Back)
16 : Fifth button (Browser Forward)
For a left-hand configured mouse, the values are reversed.
DOM Version:
DOM Level 3 Events
Browser Support
event.buttons
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOMTokenList value
 The DOMTokenList Object
Examples
Get an element's classList as a string:
const list = element.classList;
let text = list.value;
Try it Yourself 
Add a "myStyle" class to an element:
const list = element.classList;
list.add("myStyle");
Try it Yourself 
Remove the "myStyle" class from an element:
const list = element.classList;
list.remove("myStyle");
Try it Yourself 
Description
The
value
property returns a
DOMTokenList
as a string.
Syntax
domtokenlist
.value
Parameters
NONE
Return Value
Type
Description
String
The
DOMTokenList
as a string.
Browser Support
domtokenlist.value
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.value
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
onchange
Event
Example
Call a function when a user changes the selected option of a <select> 
element:
<select onchange="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
onchange
event occurs when
the value of an HTML element is changed
.
Tip:
This event is similar to the
oninput
event. The difference is 
that the oninput event occurs immediately after the value of an element has 
changed, while onchange occurs when the element loses focus, after the content 
has been changed. The other 
difference is that the onchange event also works on <select> 
elements.
Syntax
In HTML:
<
element
onchange="
myScript
">
Try it Yourself 
In JavaScript:
object
.onchange = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("change",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
Event
HTML tags:
<input type="checkbox">, <input type="color">, <input type="date">, <input type="datetime">, <input type="email">, <input type="file">, <input type="month">, <input type="number">, <input type="password">, <input type="radio">, <input type="range">, <input type="search">, <input type="tel">, <input type="text">, <input type="time">, <input type="url">, <input type="week">, <select> and <textarea>
DOM Version:
Level 2 Events
More Examples
Example
Call a function when a user changes the 
content of an input field:
<input type="text" 
onchange="myFunction()">
Try it Yourself 
Browser Support
onchange
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
oncut
Event
Example
Call a function when cutting some text in an <input> element:
<input type="text" oncut="myFunction()" value="Try to cut this text">
Try it Yourself 
More examples below
Description
The
oncut
event occurs when the user cuts the content of an element.
The
oncut
event is mostly used on <input> elements with type="text".
3 Ways to Cut:
Press Ctrl + X
Select "Cut" from the Edit menu in your browser
Right click to display the context menu, and select "Cut"
Syntax
In HTML:
<
element
oncut="
myScript
">
Try it Yourself 
In JavaScript:
object
.oncut = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("cut",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
ClipboardEvent
HTML tags:
All HTML elements
More Examples
Example
Call a function when cutting some text of a <p> element.
(Note that contenteditable is set to "true"):
<p contenteditable="true" oncut="myFunction()">Try to cut this text</p>
Try it Yourself 
Browser Support
oncut
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ondrag
Event
Example
Call a function when a <p> element is being dragged:
<p draggable="true" ondrag="myFunction(event)">Drag me!</p>
Try it Yourself 
More examples below.
Description
The
ondrag
event occurs when a selection is
being dragged
.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondrag="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondrag = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("drag",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondrag
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ondragend
Event
Example
Call a function when the user has finished dragging a <p> element:
<p draggable="true" ondragend="myFunction(event)">Drag me!</p>
Try it Yourself 
More examples below.
Description
The
ondragend
event occurs when a user has
finished dragging
a selection.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondragend="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondragend = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("dragend",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondragend
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onscroll
Event
Example
Call a function when a <div> element is being scrolled:
<div onscroll="myFunction()">
Try it Yourself 
Description
The onscroll event occurs when an element's scrollbar is being scrolled.
Tip:
use the CSS
overflow
style property to create 
a scrollbar for an element.
Browser Support
Event
onscroll
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onscroll="
myScript
">
Try it Yourself 
In JavaScript:
object
.onscroll = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("scroll",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise
HTML tags:
<address>, <blockquote>, <body>, <caption>, <center>, <dd>, <dir>, <div>, <dl>, <dt>, <fieldset>, <form>, <h1> to <h6>, <html>, <li>, <menu>, <object>, <ol>, <p>, <pre>, <select>, <tbody>, <textarea>, <tfoot>, <thead>, <ul>
DOM Version:
Level 2 Events
More Examples
Example
Toggle between class names on different scroll positions - When the user 
scrolls down 50 pixels from the top of the page, the class name "test" will be added to an 
element (and removed when scrolled up again).
window.onscroll = function() {myFunction()};
function myFunction() {
if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
document.getElementById("myP").className = "test";
} else {
document.getElementById("myP").className = "";
}
}
Try it Yourself 
Example
Slide in an element when the user has scrolled down 350 pixels from the top of the page 
(add the slideUp class):
window.onscroll = function() {myFunction()};
function myFunction() {
if (document.body.scrollTop > 350 || document.documentElement.scrollTop > 350) {
document.getElementById("myImg").className = "slideUp";
}
}
Try it Yourself 
onreset
Event
Example
Call a function when a form is reset:
<form onreset="myFunction()">
Enter name: <input type="text">
<input type="reset">
</form>
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onreset event occurs when a form is reset.
Browser Support
Event
onreset
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onreset="
myScript
">
Try it Yourself 
In JavaScript:
object
.onreset = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("reset",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
Event
HTML tags:
<form>
DOM Version:
Level 2 Events
More Examples
Example
Display the text that was inserted in a text field before it was reset:
var x = document.getElementById("myInput");
alert("Before reset, the text was: " + x.value);
Try it Yourself 
Example
Using the reset() method of the HTML DOM Form Object to reset the form. When 
this happens, the onreset event fires, which will trigger an alert function.
// Reset the value of all elements in a form with id="myForm"
function myResetFunction() {
document.getElementById("myForm").reset();
}
// Alert some text when the form is reset
function myAlertFunction() {
alert("The form was reset");
}
Try it Yourself 
onprogress
Event
Example
Call a function when the video is downloading:
<video onprogress="myFunction()">
Try it Yourself 
More examples below.
Description
The
onprogress
event occurs when the browser is
downloading an audio or video
.
Syntax
In HTML:
<
element
onprogress="
myScript
">
Try it Yourself 
In JavaScript:
object
.onprogress = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("progress",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio>, <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when the audio is downloading:
<audio onprogress="myFunction()">
Try it Yourself 
Browser Support
onprogress
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onratechange
Event
Example
Call a function when the playing speed of a video is changed:
<video onratechange="myFunction()">
Try it Yourself 
Description
The
onratechange
event occurs when
the playing speed of a media is changed
(like when a user switches to a slow motion or fast forward mode).
This event is invoked by the
playbackRate
property of the Audio/Video Object, which sets or returns the 
current playback speed of an audio/video.
Syntax
In HTML:
<
element
onratechange="
myScript
">
Try it Yourself 
In JavaScript:
object
.onratechange = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("ratechange",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
Browser Support
onratechange
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onseeked
Event
Example
Call a function when a user has seeked a new position in a video:
<video onseeked="myFunction()">
Try it Yourself 
More examples below.
Description
The
onseeked
event occurs when a user has
seeked a new position
in a media.
Syntax
In HTML:
<
element
onseeked="
myScript
">
Try it Yourself 
In JavaScript:
object
.onseeked = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("seeked",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
This example demonstrates the difference between the onseeking event and 
onseeked event:
<video onseeking="myFunction()" onseeked="mySecondFunction()">
Try it Yourself 
Example
Using the currentTime property of the Video Object to display the current 
playtime position when the user is finished moving/skipping to a new position:
// Get the video element:
const video = document.getElementById("myVideo");
// Attach a seeked event to the video element:
video.addEventListener("seeked", myFunction);
// Function to display the time position of the playback:
function myFunction() {
document.getElementById("demo").innerHTML = video.currentTime;
}
Try it Yourself 
Example
Call a function when the user is finished moving/skipping to a new 
position in the audio:
<audio onseeked="myFunction()">
Try it Yourself 
Browser Support
onseeked
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onselect
Event
Example
Call a function when some text has been selected:
<input type="text" onselect="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onselect event occurs after some text has been selected in an element.
The onselect event is mostly used on <input type="text"> or <textarea> 
elements.
Browser Support
Event
onselect
Yes
Yes
Yes
Yes
Yes
Syntax
In HTML:
<
element
onselect="
myScript
">
Try it Yourself 
In JavaScript:
object
.onselect = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("select",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise
HTML tags:
<input type="file">, <input type="password">, <input type="text">, and <textarea>
DOM Version:
Level 2 Events
More Examples
Example
Using the select() method of the HTML DOM Input Text Object to select some content of a text field. When this 
happens, the onselect event fires, which will trigger an alert function.
// Select the contents of a text field
function mySelectFunction() {
document.getElementById("myText").select();
}
// Alert some text when the text in the text field has been selected
function myAlertFunction() {
alert("You selected some text!");
}
Try it Yourself 
onshow
Event
Example
Call a function when a <menu> element is shown as a context menu:
<div contextmenu="mymenu">
<p>Right-click inside this box to see the context menu!
<menu type="context" id="mymenu" onshow="myFunction()">
<menuitem label="Refresh" onclick="window.location.reload();"></menuitem>
</menu>
</div>
Try it Yourself 
Description
The onshow event occurs when a <menu> element is shown as a context menu.
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Event
onshow
Not supported
Not supported
8.0
Not supported
Not supported
Syntax
In HTML:
<
element
onshow="
myScript
">
Try it Yourself 
In JavaScript:
object
.onshow = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("show",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<menu>
DOM Version:
Level 3 Events
Related Pages
HTML reference:
HTML contextmenu attribute
HTML reference:
HTML <menu> tag
ontoggle
Event
Example
Call a function when a <details> element is opened or closed:
<details ontoggle="myFunction()">
Try it Yourself 
Description
The ontoggle event occurs when the user opens or closes the <details> element.
The <details> element specifies additional details that the user can view or 
hide on demand.
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Event
ontoggle
12.0
79.0
48.0
6.0
15.0
Syntax
In HTML:
<
element
ontoggle="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontoggle = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("toggle",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<details>
DOM Version:
Level 3 Events
touchcancel
Event
Example
Call a function when a touch is interrupted (for touch screens only):
<p ontouchcancel="myFunction(event)">Touch me!</p>
Try it Yourself 
Description
The
touchcancel
event occurs when
a touch event is interrupted
.
The
touchcancel
event only works on touch screens.
Different devices interrupts a touch event at different actions.
It is considered good practice to include this event to clean up code if this "error" should occur.
Syntax
In HTML:
<
element
ontouchcancel="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontouchcancel =
myScript
;
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("touchcancel",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
TouchEvent
HTML tags:
All HTML elements
Browser Support
ontouchcancel
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
ontouchcancel
is not supported in Internet Explorer 11 (or earlier).
AnimationEvent
elapsedTime
Property
Example
How many seconds have the animation been running:
const div = document.getElementById("myDIV");
div.addEventListener("animationiteration", myRepeatFunction);
function myRepeatFunction(event) {
this.innerHTML = "Elapsed time: " + event.elapsedTime;
}
Try it Yourself 
Description
The
elapsedTime
property returns the
number of seconds
the animation has been running, when an animation event occurs.
The
elapsedTime
property always returns "0" for the
animationstart
event.
The
elapsedTime
value is not affected if the animation is paused.
The
elapsedTime
property is read-only.
Syntax
event
.elapsedTime
Technical Details
Return Value:
A Number.
The number of seconds an animation has been running.
DOM Version:
DOM Level 3
Animation Events
Browser Support
event.elapsedTime
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
eventPhase
Event Property
Description
The eventPhase event property returns a number that indicates which phase of 
the event flow is currently being evaluated.
The number is represented by 4 constants:
0. NONE
1. CAPTURING_PHASE - The event flow is in capturing phase
2. AT_TARGET - The event flow is in target phase, i.e. it is being evaluated at the event target
3. BUBBLING_PHASE - The event flow is in bubbling phase
Syntax
event
.eventPhase
Technical Details
Return Value:
A Number, representing which phase of the event flow is currently being evaluated
Possible values:
0. NONE
1. CAPTURING_PHASE - The event flow is in capturing phase
2. AT_TARGET - The event flow is in target phase
3. BUBBLING_PHASE - The event flow is in bubbling phase
DOM Version:
DOM Level 2 Events
Browser Support
event.eventPhase
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent keyCode
Example
Get the value of the pressed keyboard key:
let value = event.keyCode;
Try it Yourself 
Description
Warning !
The keyCode property is deprecated.
Use the
key property
instead.
Syntax
event.keyCode
Technical Details
Return Value:
A Number
The character code
DOM Version:
DOM Level 2
Keyboard Events
.
HTML DOMTokenList values()
 The DOMTokenList Object
Examples
Get a DOMTokenList from "demo":
let list = document.getElementById("demo").classList;
Try it Yourself 
List the keys of the list:
const list = document.body.childNodes;
for (let x of list.keys()) {
text += x;
}
Try it Yourself 
List the values from the list:
const list = document.body.childNodes;
for (let x of list.values()) {
text += x;
}
Try it Yourself 
Description
The
values()
method returns an Iterator with the values from a
DOMTokenList
.
Syntax
domtokenlist
.values()
Parameters
NONE
Return Value
Type
Description
Object
An Iterator object with the values from the list.
Browser Support
domtokenlist.values()
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
domtokenlist.values()
is not supported in Internet Explorer 11 (or earlier).
 The DOMTokenList Object
ondurationchange
Event
Example
Call a function when the duration of a video has changed:
<video ondurationchange="myFunction()">
Try it Yourself 
More examples below.
Description
The
ondurationchange
event occurs when the
duration of a media is changed
.
When an audio or video is loaded, the duration changes from "NaN" to an actual duration.
Syntax
In HTML:
<
element
ondurationchange="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondurationchange = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("durationchange",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when the audio is starting to load:
<audio ondurationchange="myFunction()">
Try it Yourself 
Browser Support
ondurationchange
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onended
Event
Example
Call a function when an audio has ended:
<audio onended="myFunction()">
Try it Yourself 
More examples below.
Description
The
onended
event occurs when an
audio/video has reached the end
.
The
onended
event is useful for messages like "thanks for listening".
Syntax
In HTML:
<
element
onended="
myScript
">
Try it Yourself 
In JavaScript:
object
.onended = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("ended",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when a video has ended:
<video onended="myFunction()">
Try it Yourself 
Browser Support
onended
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ondragstart
Event
Example
Call a function when the user starts to drag a <p> element:
<p draggable="true" ondragstart="myFunction(event)">Drag me!</p>
Try it Yourself 
More examples below.
Description
The
ondragstart
event occurs when the user
starts to drag a selection
.
Drag and drop
is a common feature in HTML. It is when you "grab" an 
object and drag it to a different location.
To make an element draggable, use
The draggable Attribute
.
For more information, see the
HTML Drag and Drop Tutorial
.
Links and images are draggable by default, and do not 
need the draggable attribute.
Many events occur in the different stages of a drag and drop operation (see below):
Syntax
In HTML:
<
element
ondragstart="
myScript
">
Try it Yourself 
In JavaScript:
object
.ondragstart = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("dragstart",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
DragEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
More Examples
Example
A demonstration of ALL possible drag and drop events:
<p draggable="true" id="dragtarget">Drag me!</p>
<div class="droptarget">Drop here!</div>
<script>
// Events fired on the drag target
document.addEventListener("dragstart", function(event) {
// The dataTransfer.setData() method sets the data type and the value of the dragged data
event.dataTransfer.setData("Text", event.target.id);
// Output some text when starting to drag the p element
document.getElementById("demo").innerHTML = "Started to drag the p element.";
// Change the opacity of the draggable element
event.target.style.opacity = "0.4";
});
// While dragging the p element, change the color of the output text
document.addEventListener("drag", function(event) {
document.getElementById("demo").style.color = "red";
});
// Output some text when finished dragging the p element and reset the opacity
document.addEventListener("dragend", function(event) {
document.getElementById("demo").innerHTML = "Finished dragging the p element.";
event.target.style.opacity = "1";
});
// Events fired on the drop target
// When the draggable p element enters the droptarget, change the DIVS's border style
document.addEventListener("dragenter", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "3px dotted red";
}
});
// By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element
document.addEventListener("dragover", function(event) {
event.preventDefault();
});
// When the draggable p element leaves the droptarget, reset the DIVS's border style
document.addEventListener("dragleave", function(event) {
if ( event.target.className == "droptarget" ) {
event.target.style.border = "";
}
});
/* On drop - Prevent the browser default handling of the data (default is open as link on drop)
Reset the color of the output text and DIV's border color
Get the dragged data with the dataTransfer.getData() method
The dragged data is the id of the dragged element ("drag1")
Append the dragged element into the drop element
*/
document.addEventListener("drop", function(event) {
event.preventDefault();
if ( event.target.className == "droptarget" ) {
document.getElementById("demo").style.color = "";
event.target.style.border = "";
var data = event.dataTransfer.getData("Text");
event.target.appendChild(document.getElementById(data));
}
});
</script>
Try it Yourself 
Browser Support
ondragstart
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onfocusin
Event
Example
Call a function when an input field is about to get focus:
<input type="text" 
onfocusin="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The
onfocusin
event occurs when an element gets focus.
The
onfocusin
event is often used on input fields.
Syntax
In HTML:
<
element
onfocusin="
myScript
">
Try it Yourself 
In JavaScript:
object
.onfocusin = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("focusin",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
FocusEvent
HTML tags:
ALL HTML elements, EXCEPT: <base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
Browser Support
onfocusin
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
More Examples
Example
Using
onfocus
and
onblur
:
<input type="text" onfocus="focusFunction()" onblur="blurFunction()">
Try it Yourself 
Example
Clear input field on focus:
<input type="text" onfocus="this.value=''" value="Blabla">
Try it Yourself 
Example
Event delegation: using
focus
and
blur
events:
Set
useCapture
parameter of addEventListener() to
true
:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focus", myFocusFunction,
true
);
x.addEventListener("blur", myBlurFunction,
true
);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
Example
Event delegation: using
focusin
and
focusout
events:
<form id="myForm">
<input type="text" id="myInput">
</form>
<script>
let x = document.getElementById("myForm");
x.addEventListener("focusin", myFocusFunction);
x.addEventListener("focusout", myBlurFunction);
function myFocusFunction() {
document.getElementById("myInput").style.backgroundColor = "yellow";
}
function myBlurFunction() {
document.getElementById("myInput").style.backgroundColor = "";
}
</script>
Try it Yourself 
onhashchange
Event
Example
Call a function when the anchor part has been changed:
<body onhashchange="myFunction()">
Try it Yourself 
More "Try it Yourself" examples below.
Description
The onhashchange event occurs when there has been changes to the anchor part 
(begins with a '#' symbol) of the current URL.
An example of what an anchor part actually is: Assume that the current URL is
http://www.example.com/test.htm#part2 - The anchor part of this URL would be 
#part2.
To invoke this event, you can:
Change the anchor part by setting the
location.hash
or
location.href
property of the
Location Object
Navigate to the current page with a different bookmark (Use the "back" or "forward" buttons)
Click on a link to a bookmark anchor
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Event
onhashchange
5.0
8.0
3.6
5.0
10.6
Syntax
In HTML:
<
element
onhashchange="
myScript
">
Try it Yourself 
In JavaScript:
object
.onhashchange = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("hashchange",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
HashChangeEvent
HTML tags:
<body>
DOM Version:
Level 3 Events
More Examples
Example
How to assign the "onhashchange" event to the window object:
window.onhashchange = myFunction;
Try it Yourself 
fullscreenerror
Event
Example
Alert some text if an element can not be viewed in fullscreen mode:
document.addEventListener("fullscreenerror", function() {
alert("Fullscreen denied")
});
Description
The fullscreenerror event occurs when an element can not be viewed in fullscreen mode, even if it has been requested.
Note:
This event requires specific prefixes 
to work in different browsers (see Browser Support below).
Tip:
Use the
element
.requestFullscreen()
method to view an element in fullscreen mode.
Tip:
Use the
element
.exitFullscreen()
method to cancel fullscreen mode.
Browser Support
The numbers in the table specify the first browser version that fully supports the event.
Note:
Each browser requires a specific prefix (see parentheses):
Event
fullscreenerror
45.0 (webkit)
11.0 (ms)
47.0 (moz)
5.1 (webkit)
15.0 (webkit)
Example
Using prefixes for cross-browser code:
/* Standard syntax */
document.addEventListener("fullscreenerror", 
  function() {
...
});
/* Firefox */
document.addEventListener("mozfullscreenerror", function() {
...
});
/* Chrome, Safari and Opera */
document.addEventListener("webkitfullscreenerror", 
  function() {
...
});
/* IE / Edge */
document.addEventListener("msfullscreenerror", function() {
...
});
Syntax
In HTML:
<
element
onfullscreenerror="
myScript
">
In JavaScript:
object
.onfullscreenerror = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("fullscreenerror",
myScript
);
Technical Details
Bubbles:
Yes
Cancelable:
No
Event type:
Event
HTML tags:
ALL HTML elements
onwheel
Event
Example
When the user rolls the mouse wheel over a <div> element, change its 
font-size:
document.getElementById("myDIV").addEventListener("wheel", myFunction);
function myFunction() {
this.style.fontSize = "35px";
}
Try it Yourself 
Description
The
onwheel
event occurs when
the mouse wheel is rolled over an element
.
The
onwheel
event also occurs when the user scrolls using a touchpad.
Syntax
In HTML:
<
element
onwheel="
myScript
">
Try it Yourself 
In JavaScript:
object
.onwheel = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("wheel",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
WheelEvent
HTML tags:
All HTML elements
DOM Version:
Level 3 Events
Browser Support
onwheel
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
touchstart
Event
Example
Call a function when the user touches a P element (for touch screens only):
<p ontouchstart="myFunction(event)">Touch me!</p>
Try it Yourself 
Description
The
touchstart
event occurs when
a user touches an element
.
The
touchstart
event only works on touch screens.
Syntax
In HTML:
<
element
ontouchstart="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontouchstart =
myScript
;
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("touchstart",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
TouchEvent
HTML tags:
All HTML elements
Browser Support
ontouchstart
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
ontouchstart
is not supported in Internet Explorer 11 (or earlier).
onwaiting
Event
Example
Call a function when a video stops because it needs to buffer the next frame:
<video onwaiting="myFunction()">
Try it Yourself 
More examples below.
Description
The
onwaiting
event occurs when
a media must wait for the next frame
.
Syntax
In HTML:
<
element
onwaiting="
myScript
">
Try it Yourself 
In JavaScript:
object
.onwaiting = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("waiting",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio>, <video>
DOM Version:
Level 3 Events
Browser Support
onwaiting
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
transitionend
Event
Example
Do something with a <div> element when a CSS transition has ended:
// Code for Safari 3.1 to 6.0
document.getElementById("myDIV").addEventListener("webkitTransitionEnd", myFunction);
// Standard syntax
document.getElementById("myDIV").addEventListener("transitionend", myFunction);
Try it Yourself 
Description
The transitionend event occurs when a CSS transition has completed.
Note:
If the transition is removed before completion, e.g. 
if the CSS
transition-property
property is removed, the transitionend event will not fire.
For more information about CSS Transitions, see our tutorial on
CSS3 Transitions
.
Syntax
object.addEventListener("webkitTransitionEnd",
myScript
); // Code for Safari 3.1 to 6.0
object
.addEventListener("transitionend",
myScript
); // Standard syntax
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
TransitionEvent
DOM Version:
Level 3 Events
Related Pages
CSS Tutorial:
CSS3 Transitions
CSS Reference:
CSS3 transition Property
CSS Reference:
CSS3 transition-property Property
Browser Support
event.transitionEnd
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML Event Properties
HTML DOM events allow JavaScript to register different event handlers on 
elements in an HTML document.
Events are normally used in combination with functions, and the function will not be executed before the event occurs 
(such as when a user clicks a button).
For a tutorial about Events, read our
JavaScript Events Tutorial
.
HTML DOM Event Properties
Property
Description
Belongs To
altKey
Returns whether the "ALT" key was pressed when the mouse event was triggered
MouseEvent
altKey
Returns whether the "ALT" key was pressed when the key event was triggered
KeyboardEvent
,
TouchEvent
animationName
Returns the name of the animation
AnimationEvent
bubbles
Returns whether or not a specific event is a bubbling event
Event
button
Returns which mouse button was pressed when the mouse event was triggered
MouseEvent
buttons
Returns which mouse buttons were pressed when the mouse event was triggered
MouseEvent
cancelable
Returns whether or not an event can have its default action prevented
Event
charCode
Deprecated (Avoid using it)
Use the
key property
instead
KeyboardEvent
changeTouches
Returns a list of all the touch objects whose state changed between the 
    previous touch and this touch
TouchEvent
clientX
Returns the horizontal coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered
MouseEvent
,
TouchEvent
clientY
Returns the vertical coordinate of the mouse pointer, relative to the current window, when  the mouse event was triggered
MouseEvent
,
TouchEvent
clipboardData
Returns an object containing the data affected by the clipboard 
    operation
ClipboardData
code
Returns the code of the key that triggered the event
KeyboardEvent
composed
Returns whether the event is composed or not
Event
ctrlKey
Returns whether the "CTRL" key was pressed when the mouse event was triggered
MouseEvent
ctrlKey
Returns whether the "CTRL" key was pressed when the key event was triggered
KeyboardEvent
,
TouchEvent
currentTarget
Returns the element whose event listeners triggered the event
Event
data
Returns the inserted characters
InputEvent
dataTransfer
Returns an object containing the data being dragged/dropped, or 
    inserted/deleted
DragEvent
,
InputEvent
defaultPrevented
Returns whether or not the preventDefault() method was called for  the event
Event
deltaX
Returns the horizontal scroll amount of a mouse wheel (x-axis)
WheelEvent
deltaY
Returns the vertical scroll amount of a mouse wheel (y-axis)
WheelEvent
deltaZ
Returns the scroll amount of a mouse wheel for the z-axis
WheelEvent
deltaMode
Returns a number that represents the unit of measurements for delta values (pixels, lines or pages)
WheelEvent
detail
Returns a number that indicates how many times the mouse was clicked
UiEvent
elapsedTime
Returns the number of seconds an animation has been running
AnimationEvent
elapsedTime
Returns the number of seconds a transition has been running
eventPhase
Returns which phase of the event flow is currently being evaluated
Event
getModifierState()
Returns an array containing target ranges that will be affected by the 
    insertion/deletion
MouseEvent
inputType
Returns the type of the change (i.e "inserting" or "deleting")
InputEvent
isComposing
Returns whether the state of the event is composing or not
InputEvent
,
KeyboardEvent
isTrusted
Returns whether or not an event is trusted
Event
key
Returns the key value of the key represented by the event
KeyboardEvent
key
Returns the key of the changed storage item
StorageEvent
keyCode
Deprecated (Avoid using it)
Use the
key property
instead
KeyboardEvent
location
Returns the location of a key on the keyboard or device
KeyboardEvent
lengthComputable
Returns whether the length of the progress can be computable or not
ProgressEvent
loaded
Returns how much work has been loaded
ProgressEvent
metaKey
Returns whether the "META" key was pressed when an event was triggered
MouseEvent
metaKey
Returns whether the "meta" key was pressed when the key event was triggered
KeyboardEvent
,
TouchEvent
MovementX
Returns the horizontal coordinate of the mouse pointer relative to the 
position of the last mousemove event
MouseEvent
MovementY
Returns the vertical coordinate of the mouse pointer relative to the 
position of the last mousemove event
MouseEvent
newValue
Returns the new value of the changed storage item
StorageEvent
newURL
Returns the URL of the document, after the hash has been changed
HasChangeEvent
offsetX
Returns the horizontal coordinate of the mouse pointer relative to the 
position of the edge of the target element
MouseEvent
offsetY
Returns the vertical coordinate of the mouse pointer relative to the 
position of the edge of the target element
MouseEvent
oldValue
Returns the old value of the changed storage item
StorageEvent
oldURL
Returns the URL of the document, before the hash was changed
HasChangeEvent
onemptied
When something bad happens and the media file is suddenly 
unavailable (like unexpectedly disconnects)
pageX
Returns the horizontal coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered
MouseEvent
pageY
Returns the vertical coordinate of the mouse pointer, relative to the document, when  the mouse event was triggered
MouseEvent
persisted
Returns whether the webpage was cached by the browser
PageTransitionEvent
propertyName
Returns the name of the CSS property associated with the animation or transition
AnimationEvent
,
TransitionEvent
pseudoElement
Returns the name of the pseudo-element of the animation or transition
AnimationEvent
,
TransitionEvent
region
MouseEvent
relatedTarget
Returns the element related to the element that triggered the mouse event
MouseEvent
relatedTarget
Returns the element related to the element that triggered the event
FocusEvent
repeat
Returns whether a key is being hold down repeatedly, or not
KeyboardEvent
screenX
Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered
MouseEvent
screenY
Returns the vertical coordinate of the mouse pointer, relative to  the screen, when an event was triggered
MouseEvent
shiftKey
Returns whether the "SHIFT" key was pressed when an event was triggered
MouseEvent
shiftKey
Returns whether the "SHIFT" key was pressed when the key event was triggered
KeyboardEvent
,
TouchEvent
state
Returns an object containing a copy of the history entries
PopStateEvent
storageArea
Returns an object representing the affected storage object
StorageEvent
target
Returns the element that triggered the event
Event
targetTouches
Returns a list of all the touch objects that are in contact with the 
  surface and where the touchstart event occured on the same target element as 
  the current target element
TouchEvent
timeStamp
Returns the time (in milliseconds relative to the epoch) at which  the event was created
Event
total
Returns the total amount of work that will be loaded
ProgressEvent
touches
Returns a list of all the touch objects that are currently in contact with 
  the surface
TouchEvent
transitionend
A CSS transition has completed
TransitionEvent
type
Returns the name of the event
Event
url
Returns the URL of the changed item's document
StorageEvent
which
Deprecated (Avoid using it)
Use the
button property
instead
MouseEvent
which
Deprecated (Avoid using it)
Use the
key property
instead
KeyboardEvent
view
Returns a reference to the Window object where the event occurred
UiEvent
x
Alias for clientX
MouseEvent
y
Alias for clientY
MouseEvent
Style
justifyContent
Property
Example
Make some space between the items of the flexible <div> element:
document.getElementById("main").style.justifyContent = "space-between";
Try it Yourself 
Description
The justifyContent property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
Tip:
Use the alignContent property to align the items on the cross-axis (vertically).
Browser Support
Property
justifyContent
Yes
12.0
Yes
9.0
Yes
Syntax
Return the justifyContent property:
object
.style.justifyContent
Set the justifyContent property:
object
.style.justifyContent = "flex-start|flex-end|center|space-between|space-around|initial|inherit"
Property Values
Value
Description
flex-start
Default value. Items are positioned at the beginning of the container
flex-end
Items are positioned at the end of the container
center
Items are positioned at the center of the container
space-between
Items are positioned with space between the lines
space-around
Items are positioned with space before, between, and after the lines
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
flex-start
Return Value:
A String, representing the justify-content property of an element
CSS Version
CSS3
Related Pages
CSS reference:
justify-content property
HTML DOM STYLE Reference:
alignContent property
HTML DOM STYLE Reference:
alignItems property
HTML DOM STYLE Reference:
alignSelf property
Style
left
Property
Example
Set the left position of a <button> element:
document.getElementById("myBtn").style.left = "100px";
Try it Yourself 
Description
The left property sets or returns the left position of a positioned element.
This property specifies the left position of the element including padding, 
scrollbar, border and margin.
Tip:
A positioned element is an element with the position property set 
to: relative, absolute, or fixed.
Tip:
To set or return the right position of a positioned 
element, use the
right
property.
Browser Support
Property
left
Yes
Yes
Yes
Yes
Yes
Syntax
Return the left property:
object
.style.left
Set the left property:
object
.style.left = "auto|
length
|
%
|initial|inherit"
Property Values
Value
Description
auto
Lets the browser set the left position. This is default
length
Defines the left position in length units. Negative values are  allowed
%
Sets the left position in %of the width of the parent element
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
Return Value:
A String, representing the left position of a positioned element
CSS Version
CSS2
More Examples
Example
Set the left position of a <div> element:
document.getElementById("myDIV").style.left = "100px";
Try it Yourself 
Example
Using negative values - Set the left position of a <div> element:
document.getElementById("myDIV").style.left = "-100px";
Try it Yourself 
Example
Return the left position of a <div> element:
alert(document.getElementById("myDiv").style.left);
Try it Yourself 
Related Pages
CSS tutorial:
CSS Positioning
CSS reference:
left property
TransitionEvent
propertyName
Property
Example
Get the property name associated with the transition:
document.getElementById("myDIV").addEventListener("transitionend", myFunction);
function myFunction(event) {
this.innerHTML = "Property name is: " + event.propertyName;
}
Try it Yourself 
Description
The propertyName property returns the name of the CSS property associated 
with the transition, when a
transitionevent
occurs.
This property is read-only.
Syntax
event
.propertyName
Technical Details
Return Value:
A String, representing the name of the transition
Related Pages
HTML DOM reference:
The transitionend Event
HTML DOM reference:
TransitionEvent elapsedTime Property
CSS reference:
CSS3 transition Property
CSS reference:
CSS3 transition-property Property
Browser Support
event.propertyName
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
KeyboardEvent
metaKey
Property
Example
Was the META key pressed when the event occurred?
if (event.metaKey) {
text = "The META key was pressed!";
} else {
text = "The META key was NOT pressed!";
}
Try it Yourself 
Description
The
metaKey
property returns
true
if
the
META key is pressed
when a mouse event is triggered, otherwise it returns
false
.
The
metaKey
property is read-only.
Syntax
event
.metaKey
Technical Details
Return Value:
A Boolean.
true
if the META key was pressed when a mouse event occured,
 otherwise
false
.
DOM Version:
DOM Level 2
Keyboard Events
.
Browser Support
event.metaKey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
MouseEvent
metaKey
Property
Example
Was the "META" key pressed when the mouse button was clicked:
if (event.metaKey) {
let text = "The META key was pressed!"
} else {
let text = "The META key was NOT pressed!");
}
Try it Yourself 
Description
The
metaKey
property returns
true
if
the
META key is pressed
when a mouse event is triggered, otherwise it returns
false
.
The
metaKey
property is read-only.
Syntax
event
.metaKey
Technical Details
Return Value:
A Boolean.
true
if the META key was pressed when a mouse event occured,
 otherwise
false
.
DOM Version:
DOM Level 2 Events
Browser Support
event.metaKey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
MouseEvent
screenX
Property
Example
The coordinates of the mouse pointer when the mouse button is clicked:
let x = event.screenX;// Horizontal
let y = event.screenY;// Vertical
Try it Yourself 
More examples below.
Description
The
screenX
property returns the
horizontal screen coordinate
of the mouse pointer when a mouse event 
is triggered.
The
screenX
property is read-only.
Syntax
event
.screenX
Technical Details
Return Value:
A Number
The horizontal screen pixel coordinate of the mouse pointer
DOM Version:
DOM Level 2
Mouse Events
More Examples
Example
The differences between screenX and screenY and clientX and clientY:
let sX = event.screenX;
let sY = event.screenY;
let cX = event.clientX;
let cY = event.clientY;
Try it Yourself 
Browser Support
event.screenX
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent
shiftKey
Property
Example
Was the shift key pressed when the event occurred?
if (event.shiftKey) {
text = "The SHIFT key was pressed!";
} else {
text = "The SHIFT key was NOT pressed!";
}
Try it Yourself 
Description
The
shiftKey
property returns
true
if
the
shift key is pressed
when a mouse event is triggered, otherwise it returns
false
.
The
altKey
property is read-only.
Syntax
event
.shiftKey
Technical Details
Return Value:
A Boolean.
true
if the shift key was pressed when a mouse event occured,
 otherwise
false
.
DOM Version:
DOM Level 2
Keyboard Events
.
Browser Support
event.shiftKey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
target
Event Property
Examples
Get the element where the event occurred:
const element = event.target;
Try it Yourself 
Get the name of the element where the event occurred:
let text = event.target.tagName;
Try it Yourself 
More examples below.
Description
The
target
property returns the element
where the event occured
.
The
target
property is read-only.
The
target
property returns the element on which the event occurred, 
opposed to the
currentTarget
property, 
which returns the element whose event listener triggered the event.
Syntax
event
.target
Technical Details
Return Value:
An Object.
The object where the event originally occured.
DOM Version:
DOM Level 2 Events.
More examples
Example
Get the element that triggered the event:
const element = event.currentTarget;
Try it Yourself 
Example
Get the name of the element that triggered the event:
let text = event.currentTarget.tagName;
Try it Yourself 
Browser Support
event.target
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
TouchEvent
targetTouches
Property
Example
Find out how many fingers that touches an element:
function countTouches(event) {
var x = event.targetTouches.length;
}
Try it Yourself 
Description
The targetTouches property returns an array of Touch objects, one for each finger 
that is touching the current target element.
Note:
This property is read-only.
Syntax
event
.targetTouches
Technical Details
Return Value:
An 
  Array of Touch objects.
Related Pages
HTML DOM reference:
TouchEvent 
touches Property
More Examples
Example
Return the tag name of the current element:
function getTagname(event) {
var x = event.touches[0].clientX;
var y = event.touches[0].clientY;
}
Try it Yourself 
Browser Support
event.targetTouches
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onloadstart
Event
Example
Call a function when the video is starting to load:
<video onloadstart="myFunction()">
Try it Yourself 
More examples below.
Description
The
onloadstart
event occurs when the browser
starts the loading process
of an audio or video.
In other words: When the browser
starts searching
for an audio or video.
Syntax
In HTML:
<
element
onloadstart="
myScript
">
Try it Yourself 
In JavaScript:
object
.onloadstart = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("loadstart",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
ProgressEvent
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio starts loading:
<audio onloadstart="myFunction()">
Try it Yourself 
Browser Support
onloadstart
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
currentTarget
Event Property
Example
Get the element that triggered the event:
const element = event.currentTarget;
Try it Yourself 
Get the name of the element that triggered the event:
let text = event.currentTarget.tagName;
Try it Yourself 
More examples below.
Description
The
currentTarget
property returns the element whose event listener triggered the event.
The
currentTarget
property is read-only.
The
currentTarget
property is useful during capturing and bubbling.
The
currenttarget
property refers to the element whose 
event listener triggered the event, opposed to the
target
property, which returns the element that triggered the event.
Syntax
event
.currentTarget
Technical Details
Return Value:
An Object.
The object whose event listeners triggered the event.
DOM Version:
DOM Level 2 Events.
More Examples
Example
Get the element where the event occurred:
const element = event.target;
Try it Yourself 
Example
Get the name of the element where the event occurred:
let text = event.target.tagName;
Try it Yourself 
Browser Support
event.currentTarget
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
InputEvent
data
Property
Example
Return the input data from a text field:
function myFunction(event) {
let text = event.data;
}
Try it Yourself 
Description
The
data
property returns
the inserted character(s)
from an input event.
The
data
property returns
null
if characters are deleted.
The
data
property is read-only.
Syntax
event
.data
Technical Details
Return Value:
A String.
The character(s) that was inserted
Browser Support
event.data
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.data
is not supported in Internet Explorer 11 (or earlier).
defaultPrevented
Event Property
Example
Prevent a link from opening the URL, and check if preventDefault() was called:
document.getElementById("myAnchor").addEventListener("click", function(event){
event.preventDefault()
alert("Was preventDefault() called: " + event.defaultPrevented);
});
Try it Yourself 
Description
The defaultPrevented event property checks whether the
preventDefault()
method was called for 
the event.
Syntax
event
.defaultPrevented
Technical Details
Return Value:
A Boolean, indicating whether the preventDefault() method was called for the event.
Possible values:
true - The preventDefault() method was called for the event
false - The preventDefault() method was not called for the event
DOM Version:
DOM Level 3 Events
Browser Support
event.delfaultPrevented()
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
MouseEvent
clientY
Property
Example
The coordinates of the mouse pointer when clicked:
let x = event.clientX;// Horizontal
let y = event.clientY;// Vertical
Try it Yourself 
More examples below.
Description
The
clientY
property returns the
vertical client coordinate
of the mouse pointer when a mouse event 
occurs.
The
clientY
property is read-only.
The
client area
is the current window.
Syntax
event
.clientY
Technical Details
Return Value:
A Number
The vertical window pixel coordinate of the mouse pointer
DOM Version:
DOM Level 2
Mouse Events
More Examples
Example
The coordinates of the mouse pointer while the mousepointer moves:
let x = event.clientX;
let y = event.clientY;
Try it Yourself 
Example
The differences between clientX and clientY and screenX and screenY:
let cX = event.clientX;
let cY = event.clientY;
let sX = event.screenX;
let sY = event.screenY;
Try it Yourself 
Browser Support
event.clientY
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
UiEvent
detail
Property
Example
How many times was the mouse clicked:
let num = event.detail;
Try it Yourself 
Description
The
detail
property returns
details about an event
.
The
detail
property is read-only.
Return Values:
click count
from click and dblclick events.
click count + 1
from mousedown and mouseup events.
2
for a dblclick event.
0
for all other events.
Syntax
event
.detail
Technical Details
Return Value:
A Number.
The number of clicks that happened in a short amount of time.
DOM Version:
DOM Level 2 UI Events
Browser Support
event.detail
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent
key
Property
Example
What key was pressed when a key event occured:
let key = event.key;
Try it Yourself 
More examples below.
Description
The
key
property returns
the key that was pressed
when the event occured.
The
key
property is read-only.
The return value can be:
A single character ("a", "W", "4", "+", "$")
Multiple characters ("F1", "Enter", "HOME", "CAPS LOCK")
Syntax
event
.key
Technical Details
Return Value:
A String
The key that was pressed:
A single character ("A", "a", "4", "+", "$")
Multiple characters ("F1", "Enter", "HOME", "CAPS LOCK")
DOM Version:
DOM Level 3
Keyboard Events
.
More Examples
Example
Write some text if the user presses the "A" key:
let key = event.key;
if (key == "a" || key == "A") {
let text = "You pressed the 'A' key!";
}
Try it Yourself 
Browser Support
event.key
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
stopPropagation()
Event Method
Example
Prevent any propagation of the same event:
function func1(event) {
alert("DIV 1");
event.stopPropagation();
}
Try it Yourself 
Description
The
stopPropagation()
method prevents propagation of the same 
event from being called.
Propagation means bubbling up to parent elements
or
capturing down to child 
elements.
Browser Support
The numbers in the table specify the first browser version that fully supports the 
method.
Method
stopPropagation()
Yes
9.0
Yes
Yes
Yes
Syntax
event
.stopPropagation()
Parameters
None
Technical Details
Return Value:
No return value
DOM Version:
DOM Level 3 Events
onmousedown
Event
Example
Call a function when pressing a mouse button over a paragraph:
<p onmousedown="myFunction()">Click the text!</p>
Try it Yourself 
More examples below.
Description
The
onmousedown
event occurs when a user
presses a mouse button
over an
HTML element
.
Events order
for the left and middle mouse button:
onmousedown
onmouseup
onclick
Events order
for the right mouse button:
onmousedown
onmouseup
oncontextmenu
Syntax
In HTML:
<
element
onmousedown="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmousedown = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mousedown",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Trigger a function with parameters when the button is pressed down
When the mouse button is pressed down over a <p> element, change its color to red.
Alert which mouse button that was pressed
Alert which mouse button the user pressed.
Alert the element the user clicked on
Alert the name of the element the user clicked on.
Browser Support
onmousedown
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
onmousemove
Event
Example
Call a function when moving the mouse pointer over a <div> element:
<div onmousemove="myFunction()">Move the cursor over me</div>
Try it Yourself 
More examples below.
Description
The
onmousemove
event occurs when
the pointer moves over an element
.
Syntax
In HTML:
<
element
onmousemove="
myScript
">
Try it Yourself 
In JavaScript:
object
.onmousemove = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("mousemove",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
Yes
Cancelable:
Yes
Event type:
MouseEvent
HTML tags:
All HTML elements, EXCEPT: <base>, <bdo>, <br>, 
<head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>
DOM Version:
Level 2 Events
More Examples
Example
This example demonstrates the difference between the onmousemove, onmouseenter 
and mouseover events:
<div onmousemove="myMoveFunction()">
<p id="demo1">I will demonstrate onmousemove!</p>
</div>
<div onmouseenter="myEnterFunction()">
<p id="demo2">I will demonstrate onmouseenter!</p>
</div>
<div onmouseover="myOverFunction()">
<p id="demo3">I will demonstrate onmouseover!</p>
</div>
Try it Yourself 
Example
This example demonstrates the difference between the onmousemove, 
onmouseleave 
and onmouseout events:
<div onmousemove="myMoveFunction()">
<p id="demo1">I will demonstrate onmousemove!</p>
</div>
<div onmouseleave="myLeaveFunction()">
<p id="demo2">I will demonstrate onmouseleave!</p>
</div>
<div onmouseout="myOutFunction()">
<p id="demo3">I will demonstrate onmouseout!</p>
</div>
Try it Yourself 
Browser Support
onmousemove
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
FocusEvent
relatedTarget
Property
Example
Get the related element of the element that triggered an onfocus event:
function getRelatedElement(event) {
alert(event.relatedTarget.tagName);
}
Try it Yourself 
Description
The relatedTarget property returns the element related to the element that  triggered the focus/blur event.
For
onfocus
and
onfocusin
events, the related element is the element that LOST focus.
For
onblur
and
onfocusout
events, the related element is the element that GOT focus.
This property is read-only.
Syntax
event
.relatedTarget
Technical Details
Return Value:
A reference to the related element, or
null
if there is no related element
DOM Version:
DOM Level 3 Events
Browser Support
event.relatedTarget
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
KeyboardEvent
which
Property
Example
Get the value of the pressed keyboard key:
let value = event.which;
Try it Yourself 
Description
Warning !
The which property is deprecated.
Use the
key property
instead.
Syntax
event
.which
Technical Details
Return Value:
A Number
The character code
DOM Version:
DOM Level 2
Keyboard Events
.
timeStamp
Event Property
Example
Get the number of milliseconds since this document was loaded:
var n = event.timeStamp;
Try it Yourself 
Description
The timeStamp event property returns the number of milliseconds from the 
document was finished loading until the specific event was created.
Not all systems provide this information, therefore, timeStamp may be not available for all systems/events.
Syntax
event
.timeStamp
Technical Details
Return Value:
A Number, representing the number of milliseconds from the document was 
  loaded until the event was created.
DOM Version:
DOM Level 2 Events
Browser Support
event.timeStamp
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
MediaQueryList API
The MediaQueryList Object
The
MediaQueryList object
stores information from a media query.
The
MediaQueryList object
is a property of the
window object
.
The
MediaQueryList object
is accessed with:
window.matchMedia()
or just
matchMedia()
:
Examples
const mqlObj = window.matchMedia();
Try it Yourself 
const mqlObj = matchMedia();
Try it Yourself 
MediaQueryList Properties
Property
Description
matches
A boolean.
true
if the document matches the query,
    otherwise
false
.
media
A string.
A media query (list).
MediaQueryList Methods
Method
Description
addListener()
Adds a new listener function, which is executed whenever the media 
    query's evaluated result changes
removeListener()
Removes a previously added listener function from the media query list. 
    Does nothing if the specified listener is not already in the list
Media Queries
The media queries of the
matchMedia()
method can be any of the media features of the
CSS @media rule
, like min-height, min-width, orientation, etc.
Examples
matchMedia("(max-height: 480px)").matches);
matchMedia("(max-width: 640px)").matches);
Media Types
Value
Description
all
Default. Used for all media type devices
print
Used for printers
screen
Used for computer screens, tablets, smart-phones etc.
speech
Used for screenreaders that "reads" the page out loud
Media Features
Value
Description
any-hover
Does any available input mechanism allow the user to hover over 
    elements? (added in Media Queries Level 4)
any-pointer
Is any available input mechanism a pointing device, and if so, how 
    accurate is it? (added in Media Queries Level 4)
aspect-ratio
The ratio between the width and the height of the viewport
color
The number of bits per color component for the output device
color-gamut
The approximate range of colors that are supported by the user agent and 
    output device (added in Media Queries Level 4)
color-index
The number of colors the device can display
grid
Whether the device is a grid or bitmap
height
The viewport height
hover
Does the primary input mechanism allow the user to hover over elements? 
    (added in Media Queries Level 4)
inverted-colors
Is the browser or underlying OS inverting colors? (added in Media 
    Queries Level 4)
light-level
Current ambient light level (added in Media Queries Level 4)
max-aspect-ratio
The maximum ratio between the width and the height of the display area
max-color
The maximum number of bits per color component for the output device
max-color-index
The maximum number of colors the device can display
max-height
The maximum height of the display area, such as a browser window
max-monochrome
The maximum number of bits per "color" on a monochrome (greyscale) device
max-resolution
The maximum resolution of the device, using dpi or dpcm
max-width
The maximum width of the display area, such as a browser window
min-aspect-ratio
The minimum ratio between the width and the height of the display area
min-color
The minimum number of bits per color component for the output device
min-color-index
The minimum number of colors the device can display
min-height
The minimum height of the display area, such as a browser window
min-monochrome
The minimum number of bits per "color" on a monochrome (greyscale) device
min-resolution
The minimum resolution of the device, using dpi or dpcm
min-width
The minimum width of the display area, such as a browser window
monochrome
The number of bits per "color" on a monochrome (greyscale) device
orientation
The orientation of the viewport (landscape or portrait mode)
overflow-block
How does the output device handle content that overflows the viewport along the block axis (added in Media Queries Level 4)
overflow-inline
Can content that overflows the viewport along the inline axis be scrolled (added in Media Queries Level 4)
pointer
Is the primary input mechanism a pointing device, and if so, how 
    accurate is it? (added in Media Queries Level 4)
resolution
The resolution of the output device, using dpi or dpcm
scan
The scanning process of the output device
scripting
Is scripting (e.g. JavaScript) available? (added in Media Queries Level 
    4)
update
How quickly can the output device modify the appearance of the content (added in Media Queries Level 4)
width
The viewport width
onplay
Event
Example
Call a function when a video has started to play:
<video onplay="myFunction()">
Try it Yourself 
More examples below.
Description
The
onplay
event occurs when an
audio/video is started
.
Syntax
In HTML:
<
element
onplay="
myScript
">
Try it Yourself 
In JavaScript:
object
.onplay = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("play",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio has started to play:
<audio onplay="myFunction()">
Try it Yourself 
Browser Support
onplay
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onpause
Event
Example
Call a function when a video has been paused:
<video onpause="myFunction()">
Try it Yourself 
More examples below.
Description
The
onpause
event occurs when an
audio/video is paused
.
The
onpause
event also occurs when an
audio/video has reached the end
.
Syntax
In HTML:
<
element
onpause="
myScript
">
Try it Yourself 
In JavaScript:
object
.onpause = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("pause",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio has been paused:
<audio onpause="myFunction()">
Try it Yourself 
Browser Support
onpause
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onplaying
Event
Example
Call a function when a video starts:
<video onplaying="myFunction()">
Try it Yourself 
More examples below.
Description
The
onplaying
event occurs when an
audio/video starts playing
.
The
onplaying
event also occurs when an audio/video resumes after beeing paused or buffered.
Syntax
In HTML:
<
element
onplaying="
myScript
">
Try it Yourself 
In JavaScript:
object
.onplaying = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("playing",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when an audio is ready to start after having been 
paused:
<audio onplaying="myFunction()">
Try it Yourself 
Browser Support
onplaying
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
onseeking
Event
Example
Call a function when the user starts moving/skipping to a new 
position in the video:
<video onseeking="myFunction()">
Try it Yourself 
More examples below.
Description
The
onseeking
event occurs when a user
starts seeking a new position
in a media.
Syntax
In HTML:
<
element
onseeking="
myScript
">
Try it Yourself 
In JavaScript:
object
.onseeking = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("seeking",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
This example demonstrates the difference between the onseeking event and 
onseeked event:
<video onseeking="myFunction()" onseeked="mySecondFunction()">
Try it Yourself 
Example
Using the currentTime property of the Video Object to display the current 
playtime position when the user starts to skip to a new position:
// Get the <video> element:
const video = document.getElementById("myVideo");
// Attach a seeking event to the <video> element:
x.addEventListener("seeking", myFunction);
// Function to display the current position of the video:
function myFunction() {
document.getElementById("demo").innerHTML = video.currentTime;
}
Try it Yourself 
Example
Call a function when the user starts seeking a new position in an audio:
<audio onseeking="myFunction()">
Try it Yourself 
Browser Support
onseeking
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
ontimeupdate
Event
Example
Call a function when the playing time has changed:
<video ontimeupdate="myFunction()">
Try it Yourself 
More examples below.
Description
The
ontimeupdate
event occurs when
the play time of a media changes
.
The
ontimeupdate
event occurs while
the media is playing
.
The
ontimeupdate
event occurs when
the user moves the play position
.
Syntax
In HTML:
<
element
ontimeupdate="
myScript
">
Try it Yourself 
In JavaScript:
object
.ontimeupdate = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("timeupdate",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when the playback position of an audio has changed:
<audio ontimeupdate="myFunction()">
Try it Yourself 
Example
Using the currentTime property to set the current playback position to 5 
seconds:
document.getElementById("myVideo").currentTime = 5;
Try it Yourself 
Browser Support
ontimeupdate
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
stopImmediatePropagation()
Event Method
Example
When clicking on a button, execute the first event handler, and stop the rest 
of the event handlers from being executed:
var x = document.getElementById("myBtn");
x.addEventListener("click", myFunction);
x.addEventListener("click", someOtherFunction);
function myFunction(event) {
alert ("Hello World!");
event.stopImmediatePropagation();
}
// This function will not be executed
function someOtherFunction() {
alert ("I will not get to say Hello World");
}
Try it Yourself 
Description
The stopImmediatePropagation() method prevents other listeners of the same 
event from being called.
Browser Support
The numbers in the table specify the first browser version that fully supports the 
method.
Method
stopImmediatePropagation()
Yes
9.0
Yes
Yes
Yes
Syntax
event
.stopImmediatePropagation()
Parameters
None
Technical Details
Return Value:
No return value
DOM Version:
DOM Level 3 Events
preventDefault()
Event Method
Example
Prevent a link from opening the URL:
document.getElementById("myAnchor").addEventListener("click", function(event){
event.preventDefault()
});
Try it Yourself 
More "Try it Yourself" examples below.
Description
The preventDefault() method cancels the event if it is cancelable, meaning 
that the default action that belongs to the event will not occur.
For example, this can be useful when:
Clicking on a "Submit" button, prevent it from submitting a form
Clicking on a link, prevent the link from following the URL
Note:
Not all events are cancelable. Use the
cancelable
property to find out if an event is cancelable.
Note:
The preventDefault() method does not prevent further 
propagation of an event through the DOM. Use the stopPropagation() method to 
handle this.
Browser Support
The numbers in the table specify the first browser version that fully supports the method.
Method
preventDefault()
Yes
9.0
Yes
Yes
Yes
Syntax
event
.preventDefault()
Parameters
None
Technical Details
Return Value:
No return value
DOM Version:
DOM Level 2 Events
More Examples
Example
Prevent the default action of a checkbox:
document.getElementById("myCheckbox").addEventListener("click", function(event){
event.preventDefault()
});
Try it Yourself 
HTML Event Methods
HTML DOM events allow JavaScript to register different event handlers on 
elements in an HTML document.
Events are normally used in combination with functions, and the function will not be executed before the event occurs 
(such as when a user clicks a button).
For a tutorial about Events, read our
JavaScript Events Tutorial
.
HTML DOM Event Methods
Method
Description
Belongs To
getModifierState()
Returns true if a specified key is activated
MouseEvent
getTargetRanges()
Returns an array containing target ranges that will be affected by the 
    insertion/deletion
InputEvent
preventDefault()
Cancels the event if it is cancelable, meaning that the default  action that belongs to the event will not occur
Event
stopImmediate
Propagation()
Prevents other listeners of the same event from being called
Event
stopPropagation()
Prevents further propagation of an event during event flow
Event
MouseEvent
getModifierState()
Method
Example
Is the Caps Lock key activated?
var x = event.getModifierState("CapsLock");
Try it Yourself 
Description
The
getModifierState()
method returns true if the specified modifier key was 
pressed, or activated.
Modifier keys that are activated only when they are being pressed down:
Alt
AltGraph
Control
Meta
Shift
Modifier keys that are activated when they are clicked, and deactivated when 
they are clicked again:
CapsLock
NumLock
ScrollLock
Syntax
event
.getModifierState(
modifierKey
)
Parameter Values
Parameter
Description
modifierKey
The key to check if is activated or not. Legal Values:
"Alt"
"AltGraph"
"CapsLock"
"Control"
"Meta"
"NumLocK"
"ScrollLock"
"Shift"
Technical Details
Return Value:
A Boolean.
Returns
true
if the modifier key is activated
Otherwise it returns
false
.
DOM Version:
DOM Level 3
Mouse Events
.
More Examples
Example
Is the shift key breing pressed down?
var x = event.getModifierState("Shift");
Try it Yourself 
Related Pages
HTML DOM reference:
MouseEvent altKey Property
HTML DOM reference:
MouseEvent ctrlKey Property
HTML DOM reference:
MouseEvent metaKey Property
Browser Support
event.getModifierState
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
Console API
The Console Object
The
console object
provides access to the browser's debugging console.
The
console object
is a property of the
window object
.
The
console object
is accessed with:
window.console
or just
console
Examples
window.console.error("You made a mistake");
Try it Yourself 
console.error("You made a mistake");
Try it Yourself 
Console Object Methods
Method
Description
assert()
Writes an error message to the console if a assertion is false
clear()
Clears the console
count()
Logs the number of times that this particular call to count() has been 
    called
error()
Outputs an error message to the console
group()
Creates a new inline group in the console. This indents following 
    console messages by an additional level, until console.groupEnd() is called
groupCollapsed()
Creates a new inline group in the console. However, the new group is 
    created collapsed. The user will need to use the disclosure button to expand 
    it
groupEnd()
Exits the current inline group in the console
info()
Outputs an informational message to the console
log()
Outputs a message to the console
table()
Displays tabular data as a table
time()
Starts a timer (can track how long an operation takes)
timeEnd()
Stops a timer that was previously started by console.time()
trace()
Outputs a stack trace to the console
warn()
Outputs a warning message to the console
JavaScript Fetch API
Examples
fetch(file)
.then(x => x.text())
.then(y => myDisplay(y));
Try it Yourself 
Fetch is based on async and await. The example might be easier to understand like this:
async function getText(file) {
let x = await fetch(file);
let y = await x.text();
myDisplay(y);
}
Try it Yourself 
Use understandable names instead of x and y:
async function getText(file) {
let myObject = await fetch(file);
let myText = await myObject.text();
myDisplay(myText);
}
Try it Yourself 
Description
The
fetch()
method starts the process of fetching a resource from a server.
The
fetch()
method returns a Promise that resolves to a Response object.
Syntax
fetch(file)
Parameters
Parameter
Description
file
Optional.
The name of a resource to fetch.
Return Value
Type
Description
Promise
A Promise that resolves to a Response object.
Browser Support
fetch()
is an ECMAScript6 (ES6) feature.
ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:
Chrome 51
Edge 15
Firefox 54
Safari 10
Opera 38
May 2016
Apr 2017
Jun 2017
Sep 2016
Jun 2016
fetch()
is not supported in Internet Explorer.
Fullscreen API fullscreenEnabled()
Example
Show a <video> element in fullscreen mode:
/* Get the element you want displayed in fullscreen */
var elem = 
  document.getElementById("myvideo");
/* Function to open fullscreen mode 
  */
function openFullscreen() {
/* If fullscreen mode is 
  available, show the element in fullscreen */
if (document.fullscreenEnabled) 
  {
/* Show the element in fullscreen */
elem.requestFullscreen();
}
}
Try it Yourself 
Description
The fullscreenEnabled() method returns a Boolean value indicating whether the document can be viewed in fullscreen mode.
The fullscreenEnabled() method returns true if fullscreen mode is available, otherwise false.
Tip:
Use the
element
.requestFullscreen()
method to view an element in fullscreen mode.
Tip:
Use the
element
.exitFullscreen()
method to cancel fullscreen mode.
Browser Support
The numbers in the table specify the first browser version that fully supports the method.
Note:
Some browsers require a specific prefix (see parentheses):
Method
fullscreenEnabled()
71.0
45.0 (webkit)
12.0
11.0 (ms)
64.0
47.0 (moz)
6.0 (webkit)
58.0
15.0 (webkit)
Example
Using prefixes for cross-browser code:
/* If fullscreen mode is available, then do something */
if (
document.fullscreenEnabled || /* Standard syntax */
document.webkitFullscreenEnabled || /* Safari */
document.msFullscreenEnabled/* IE11 */
) {
...
}
Try it Yourself 
Syntax
document.fullscreenEnabled()
Parameters
None
Technical Details
Return Value:
A Boolean value, indicating whether the document can be viewed in fullscreen mode:
true - The document
can
be viewed in full-screen mode
false - The document
can not
be viewed in full-screen mode
History API
The Window History Object
The
history object
contains the URLs visited by the user (in the browser window).
The
history object
is a property of the
window object
.
The
history object
is accessed with:
window.history
or just
history
:
Examples
let length = window.history.length;
Try it Yourself 
let length = history.length;
Try it Yourself 
History Object Properties and Methods
Property/Method
Description
back()
Loads the previous URL (page) in the history list
forward()
Loads the next URL (page) in the history list
go()
Loads a specific URL (page) from the history list
length
Returns the number of URLs (pages) in the history list
Geolocation API
The Geolocation Object
The Geolocation object allows the user to provide their location to web 
applications. For privacy reasons, the user is asked for permission to report 
location information.
The Geolocation API is published through the
navigator.geolocation
object.
Geolocation Object Properties
Property
Description
coordinates
Returns the position and altitude of the device on Earth
position
Returns the position of the concerned device at a given time
positionError
Returns the reason of an error occurring when using the geolocating 
    device
positionOptions
Describes an object containing option properties to pass as a parameter 
    of Geolocation.getCurrentPosition() and Geolocation.watchPosition()
Geolocation Object Methods
Method
Description
clearWatch()
Unregister location/error monitoring handlers previously installed using 
    Geolocation.watchPosition()
getCurrentPosition()
Returns the current position of the device
watchPosition()
Returns a watch ID value that then can be used to unregister the handler 
    by passing it to the Geolocation.clearWatch() method
Geolocation
getCurrentPosition()
Method
Example
Get the latitude and longitude of the user's position:
var x = document.getElementById("demo");
function getLocation() {
if (navigator.geolocation) {
navigator.geolocation.getCurrentPosition(showPosition);
} else {
x.innerHTML = "Geolocation is not supported by this browser.";
}
}
function showPosition(position) {
x.innerHTML = "Latitude: " + position.coords.latitude +
"<br>Longitude: " + position.coords.longitude;
}
Try it Yourself 
Description
The getCurrentPosition() method returns the current position of the device.
Browser Support
Method
getCurrentPosition()
5.0
9.0
3.5
5.0
16.0
Syntax
navigator.geolocation.getCurrentPosition(
success, error, options
)
Parameter Values
Parameter
Type
Description
success
Required. A callback function that takes a Position object as its sole input 
parameter
error
Optional. A callback function that takes a PositionError object as its sole 
input parameter
options
Optional. A PositionOptions object
Return Value
The current position of the device
HTML DOM
Bold
Object
Bold Object
The Bold object represents an HTML <b> element.
Access a Bold Object
You can access a <b> element by using getElementById():
Example
var x = document.getElementById("myB");
Try it Yourself 
Create a Bold Object
You can create a <b> element by using the document.createElement() method:
Example
var x = document.createElement("B");
Try it Yourself 
Standard Properties and Events
The Bold object supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML Text Formatting Elements
HTML reference:
HTML <b> tag
JavaScript reference:
HTML DOM Strong Object
HTML DOM
Audio
Object
Audio Object
The Audio object represents an HTML <audio> element.
Access an Audio Object
You can access an <audio> element by using getElementById():
Example
var x = document.getElementById("myAudio");
Try it Yourself 
Create an Audio Object
You can create an <audio> element by using the document.createElement() method:
Example
var x = document.createElement("AUDIO");
Try it Yourself 
Audio Object Properties
Property
Description
audioTracks
Returns an AudioTrackList object representing available audio tracks
autoplay
Sets or returns whether the audio should start playing as soon as it is ready
buffered
Returns a TimeRanges object representing the buffered parts of an audio
controller
Returns the MediaController object representing the current media controller of an audio
controls
Sets or returns whether an audio should have controls displayed (play/pause etc)
crossOrigin
Sets or returns the CORS settings of an audio
currentSrc
Returns the URL of the current audio
currentTime
Sets or returns the current playback position in an audio (in seconds)
defaultMuted
Sets or returns whether the audio should be muted by default
defaultPlaybackRate
Sets or returns whether the default playback speed of the audio
duration
Returns the length of an audio(in seconds)
ended
Returns whether the playback of the audio has ended
error
Returns a MediaError object representing the error state of the audio
loop
Sets or returns whether the audio should start playing over again, every time it is finished
mediaGroup
Sets or returns the name of the media group the audio(s) is a part of
muted
Sets or returns whether the sound should be turned off
networkState
Returns the current network state of an audio
paused
Returns whether an audio is paused
playbackRate
Sets or returns the speed of the audio playback
played
Returns a TimeRanges object representing the played parts of the audio
preload
Sets or returns the value of the preload attribute of an audio
readyState
Returns the current ready state of an audio
seekable
Returns a TimeRanges object representing the seekable parts of an audio
seeking
Returns whether the user is currently seeking in the audio
src
Sets or returns the value of the src attribute of an audio
textTracks
Returns a TextTrackList object representing the available text tracks
volume
Sets or returns the audio volume of an audio
Audio Object Methods
Method
Description
addTextTrack()
Adds a new text track to the audio
canPlayType()
Checks whether the browser can play the specified audio type
fastSeek()
Seeks to a specified time in the audio player
getStartDate()
Returns a new Date object, representing the current timeline offset
load()
Re-loads the audio element
play()
Starts playing the audio
pause()
Pauses the currently playing audio
Standard Properties and Events
The Audio object also supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML5 audio
HTML reference:
HTML <audio> tag
HTML DOM
Button
Object
Button Object
The Button object represents an HTML <button> element.
Access a Button Object
You can access a <button> element by using getElementById():
Example
var x = document.getElementById("myBtn");
Try it Yourself 
Create a Button Object
You can create a <button> element by using the document.createElement() method:
Example
var x = document.createElement("BUTTON");
Try it Yourself 
Button Object Properties
Property
Description
autofocus
Sets or returns whether a button should automatically get focus when the page loads, or not
disabled
Sets or returns whether a button is disabled, or not
form
Returns a reference to the form that contains a button
formAction
Sets or returns the value of the formaction attribute of a button
formEnctype
Sets or returns the value of the formenctype attribute of a button
formMethod
Sets or returns the value of the formmethod attribute of a button
formNoValidate
Sets or returns whether the form-data should be validated or not, on submission
formTarget
Sets or returns the value of the formtarget attribute of a button
name
Sets or returns the value of the name attribute of a button
type
Sets or returns the type of a button
value
Sets or returns the value of the value attribute of a button
Standard Properties and Events
The Button object also supports the standard
properties
and
events
.
Related Pages
HTML reference:
HTML <button> tag
HTML DOM Canvas
The
<canvas>
element defines a
bitmapped
area in an HTML page.
The
Canvas API
allows JavaScript to
draw graphics
on the canvas.
The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,
rotations, transparencies, and other pixel manipulations.
Adding Canvas to HTML
You can add a canvas element anywhere in an HTML page with the
<canvas>
tag:
Example
<canvas id="myCanvas" width="300" height="150"></canvas>
Try it Yourself 
How to Access a Canvas Element
You can access a
<canvas>
element with the
HTML 
DOM
method
getElementById()
:
const myCanvas = document.getElementById("myCanvas");
To draw in the canvas you need to create a
2D context
object:
const ctx = myCanvas.getContext("2d");
Drawing on the Canvas
After you have created a 2D context, you can draw on the canvas.
The
fillRect()
method draws a black rectangle with a top-left corner at position 20,20.
The rectangle is 150 pixel wide and 100 pixels high.
Example
const myCanvas = document.getElementById("myCanvas");
const ctx = myCanvas.getContext("2d");
ctx.fillRect(20, 20, 150, 100);
Try it Yourself 
Using Colors
The
fillStyle
property sets the fill color of the drawing object:
Example
const myCanvas = document.getElementById("myCanvas");
const ctx = myCanvas.getContext("2d");
ctx.fillStyle = "red";
ctx.fillRect(20, 20, 150, 100);
Try it Yourself 
You can also create a new
<canvas>
element 
with the
document.createElement()
method,
and add the element to an existing HTML page:
Example
const myCanvas = document.createElement("canvas");
document.body.appendChild(myCanvas);
const ctx = myCanvas.getContext("2d");
ctx.fillStyle = "red";
ctx.fillRect(20, 20, 150, 100);
Try it Yourself 
Paths
The common way to draw on the canvas is to:
Begin a Path - beginPath()
Move to a Point - moveTo()
Draw in the Path - lineTo()
Draw the Path - stroke()
Example
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");
ctx.beginPath();
ctx.moveTo(20, 20);
ctx.lineTo(20, 100);
ctx.lineTo(70, 100);
ctx.stroke();
Try it Yourself 
Complete Canvas API Reference
This reference covers all Properties and Methods of the getContext("2d") Object,
used to draw text, lines, boxes, circles, pictures, and more on the canvas.
Drawing Methods
There are only 3 methods to draw directly on the canvas:
Method
Description
fillRect()
Draws a "filled" rectangle
strokeRect()
Draws a rectangle (with no fill)
clearRect()
Clears specified pixels within a rectangle
Path Methods
Method
Description
beginPath()
Begins a new path or resets the current path
closePath()
Adds a line to the path from the current point to the start
isPointInPath()
Returns true if the specified point is in the current path
moveTo()
Moves the path to a point in the canvas (without drawing)
lineTo()
Adds a line to the the path
fill()
Fills the current path
rect()
Adds a rectangle to the path
stroke()
Draws the current path
Circles and Curves
bezierCurveTo()
Adds a cubic Bzier curve to the path
arc()
Adds an arc/curve (circle, or parts of a circle) to the path
arcTo()
Adds an arc/curve between two tangents to the path
quadraticCurveTo()
Adds a quadratic Bzier curve to the path
Text
Method/Prop
Description
direction
Sets or returns the direction used to draw text
fillText()
Draws "filled" text on the canvas
font
Sets or returns the font properties for text content
measureText()
Returns an object that contains the width of the specified text
strokeText()
Draws text on the canvas
textAlign
Sets or returns the alignment for text content
textBaseline
Sets or returns the text baseline used when drawing text
Colors, Styles, and Shadows
Method/Property
Description
addColorStop()
Specifies the colors and stop positions in a gradient object
createLinearGradient()
Creates a linear gradient (to use on canvas content)
createPattern()
Repeats a specified element in the specified direction
createRadialGradient()
Creates a radial/circular gradient (to use on canvas content)
fillStyle
Sets or returns the color, gradient, or pattern used to fill the drawing
lineCap
Sets or returns the style of the end caps for a line
lineJoin
Sets or returns the type of corner created, when two lines meet
lineWidth
Sets or returns the current line width
miterLimit
Sets or returns the maximum miter length
shadowBlur
Sets or returns the blur level for shadows
shadowColor
Sets or returns the color to use for shadows
shadowOffsetX
Sets or returns the horizontal distance of the shadow from the shape
shadowOffsetY
Sets or returns the vertical distance of the shadow from the shape
strokeStyle
Sets or returns the color, gradient, or pattern used for strokes
Transformations
Method
Description
scale()
Scales the current drawing bigger or smaller
rotate()
Rotates the current drawing
translate()
Remaps the (0,0) position on the canvas
transform()
Replaces the current transformation matrix for the drawing
setTransform()
Resets the current transform to the identity matrix. Then runs
transform()
Image Drawing
Method
Description
drawImage()
Draws an image, canvas, or video onto the canvas
The ImageData Object / Pixel Manipulation
Method/Property
Description
createImageData()
Creates a new, blank ImageData object
getImageData()
Returns an ImageData object that copies the pixel data for the specified 
    rectangle on a canvas
ImageData.data
Returns an object that contains image data of a specified ImageData 
    object
ImageData.height
Returns the height of an ImageData object
ImageData.width
Returns the width of an ImageData object
putImageData()
Puts the image data (from a specified ImageData object) back onto the 
    canvas
Compositing
Property
Description
globalAlpha
Sets or returns the current alpha or transparency value of the drawing
globalCompositeOperation
Sets or returns how a new image are drawn onto an existing image
Other Methods
Method
Description
clip()
Clips a region of any shape and size from the original canvas
save()
Saves the state of the current drawing context and all its attributes
restore()
Restores the previously saved state and attributes
createEvent()
getContext()
toDataURL()
Standard Properties and Events
The canvas object also supports the standard
properties
and
events
.
Related Pages
Canvas tutorial:
Canvas Tutorial
HTML tutorial:
HTML5 Canvas
HTML reference:
HTML <canvas> tag
Browser Support
The
<canvas>
element is an HTML5 standard (2014).
Canvas API
is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Style
isolation
Property
Example
Create a new stacking context for the element with id="d":
document.getElementById("d").style.isolation = "isolate";
Try it Yourself 
Description
The isolation property defines whether an element must create a new stacking content.
Browser Support
The numbers in the table specify the first browser version that fully supports the property.
Property
isolation
41.0
79.0
36.0
Yes
30.0
Syntax
Return the isolation property:
object
.style.isolation
Set the isolation property:
object
.style.isolation = "auto|isolate|initial|inherit"
Property Values
Value
Description
auto
Default. A new stacking context is created only if one of the properties applied to the element requires it
isolate
A new stacking context must be created
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
auto
CSS Version
CSS3
Related Pages
CSS reference:
isolation property
onunload
Event
Example
Call a function when a user unloads the document:
<body onunload="myFunction()">
Try it Yourself 
Description
The onunload event occurs once a page has unloaded (or the browser window has been closed).
onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.).
Note:
The onunload event is also triggered when a user reloads the page (and the
onload
event).
Browser Support
Event
onunload
Yes
Yes
Yes
Yes
Yes
Note:
Due to different browser settings, this event may not always work as expected.
Syntax
In HTML:
<
element
onunload="
myScript
">
In JavaScript:
object
.onunload = function(){
myScript
};
In JavaScript, using the addEventListener() method:
object
.addEventListener("unload",
myScript
);
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
UiEvent
if generated from a user interface,
Event
otherwise.
HTML tags:
<body>
DOM Version:
Level 2 Events
onvolumechange
Event
Example
Call a function when the volume of a video is changed:
<video onvolumechange="myFunction()">
Try it Yourself 
More examples below.
Description
The
onvolumechange
event occurs when
a media volume is changed
.
The
onvolumechange
event occurs when the volume is increased og decreased.
The
onvolumechange
event occurs when the volume is muted or unmuted.
Syntax
In HTML:
<
element
onvolumechange="
myScript
">
Try it Yourself 
In JavaScript:
object
.onvolumechange = function(){
myScript
};
Try it Yourself 
In JavaScript, using the addEventListener() method:
object
.addEventListener("volumechange",
myScript
);
Try it Yourself 
Technical Details
Bubbles:
No
Cancelable:
No
Event type:
Event
HTML tags:
<audio> and <video>
DOM Version:
Level 3 Events
More Examples
Example
Call a function when the volume of an audio has been changed:
<audio onvolumechange="myFunction()">
Try it Yourself 
Example
Using the volume property to set the volume:
document.getElementById("myVideo").volume = 0.2;
Try it Yourself 
Browser Support
onvolumechange
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
MouseEvent
altKey
Property
Example
Was the "ALT" key pressed when the mouse button was clicked:
if (event.altKey) {
text = "The ALT key was pressed!";
} else {
text = "The ALT key was NOT pressed!";
}
Try it Yourself 
Description
The
altKey
property returns
true
if
the
ALT key is pressed
when a mouse event occurs.
Otherwise it returns
false
.
The
altKey
property is read-only.
Syntax
event
.altKey
Technical Details
Return Value:
A Boolean.
Returns
true
if the ALT key is pressed when a mouse event occurs.
Otherwise it returns
false
.
DOM Version:
DOM Level 2
Mouse Events
.
Browser Support
event.altkey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent
altKey
Property
Example
Was the ALT key pressed when the event occurred?
if (event.altKey) {
text = "The ALT key was pressed!";
} else {
text = "The ALT key was NOT pressed!";
}
Try it Yourself 
Description
The
altKey
property returns
true
if
the
ALT key is pressed
when a keyboard event occurs.
Otherwise it returns
false
.
The
altKey
property is read-only.
Syntax
event
.altKey
Technical Details
Return Value:
A Boolean.
Returns
true
if the ALT key is pressed when a keyboard event occurs.
Otherwise it returns
false
.
DOM Version:
DOM Level 2
Keyboard Events
.
Browser Support
event.altkey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
MouseEvent
button
Property
Example
Which mouse button was pressed?
let text = "You pressed button: " + event.button;
Try it Yourself 
Description
The
button
property returns
which mouse button is pressed
when a mouse event 
occurs.
The
button
property is mostly used with the
onmousedown
event.
The
button
property is read-only.
Syntax
event
.button
Technical Details
Return Value:
A Number.
Which mouse button that was pressed:
0 : Left button
1 : Wheel or middle button (if present)
2 : Right button
For a left-hand configured mouse, the values are reversed.
DOM Version:
DOM Level 2 Events
Browser Support
event.button
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
AnimationEvent
animationName
Property
Example
Get the animation name associated with an animation:
const div = document.getElementById("myDIV");
div.addEventListener("animationstart", myStartFunction);
function myStartFunction(event) {
this.innerHTML = "Animation-name is: " + event.animationName;
}
Try it Yourself 
Description
The
animationName
property returns the
name of the animation
, when an 
animation event occurs.
The
animationName
property is read-only.
The
animationName
property is the value of the
animation-name
CSS property.
Syntax
event
.animationName
Technical Details
Return Value:
A String.
The the name of the animation.
DOM Version:
DOM Level 3
Animation Events
Browser Support
event.animationName
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
bubbles
Event Property
Example
Is it a bubbling event?
// true or false?
event.bubbles;
Try it Yourself 
Description
The
bubbles
event property returns
true
if an event is
a bubbling event
.
Otherwise it returns
false
.
The
bubbles
event property is read-only.
Prevent Bubbling:
The stopPropagation() Method
stops bubbling.
Prevent Default Action:
The preventDefault() Method
cancels an event
(the default action will not occur).
Syntax
event
.bubbles
Technical Details
Return Value:
A Boolean.
Returns
true
if the event is a bubbling event
(it can bubble up through the DOM).
Otherwise it returns
false
.
DOM Version:
DOM Level 2 Events.
Browser Support
event.bubbles
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
Storage
getItem()
Method
Example
Get the value of the specified local storage item:
var x = localStorage.getItem("mytime");
Try it Yourself 
Description
The getItem() method returns value of the specified Storage Object item.
The getItem() method belongs to the Storage Object, which can be either a
localStorage
object or a
sessionStorage
object.
Browser Support
Method
getItem()
4
8
3.5
4
10.5
Syntax
localStorage.getItem(
keyname
)
Or:
sessionStorage.getItem(
keyname
)
Parameter Values
Parameter
Description
keyname
Required. A String specifying the name of the key you want to get the value of
Technical Details
DOM Version:
Web Storage API
Return Value:
A String, representing the value of the specified key
More Examples
Example
The same example, but using session storage instead of local storage.
Get the value of the specified session storage item:
var x = sessionStorage.getItem("test1");
Try it Yourself 
Example
You can also get the value by using dot notation (
obj
.
key
):
var x = sessionStorage.test1;
Try it Yourself 
Example
You can also get the value like this:
var x = sessionStorage["test1"];
Try it Yourself 
Related Pages
Web Storage Reference:
setItem() Method
Web Storage Reference:
removeItem() Method
Storage
clear()
Method
Example
Remove all local storage items:
localStorage.clear();
Try it Yourself 
Description
The clear() method removes all the Storage Object item for this domain.
The clear() method belongs to the Storage Object, which can be either a
localStorage
object or a
sessionStorrage
object.
Browser Support
Method
clear()
4
8
3.5
4
10.5
Syntax
localStorage.clear()
Or:
sessionStorage.clear()
Parameter Values
No parameters.
Technical Details
DOM Version:
Web Storage API
Return Value:
No return value
More Examples
Example
The same example, but using session storage instead of local storage.
Remove all session items:
sessionStorage.clear();
Try it Yourself 
Related Pages
Web Storage Reference:
removeItem() Method
Storage
length
Property
Example
Get the number of local storage item for this domain:
var x = localStorage.length;
Try it Yourself 
Description
The length property returns the number of items stored in the browsers 
Storage Object, for this particular domain..
The length property belongs to the Storage Object, which can be either a
localStorage
object or a
sessionStorrage
object.
Browser Support
Property
length
4
8
3.5
4
10.5
Syntax
localStorage.length;
Or:
sessionStorage.length;
Technical Details
DOM Version:
Web Storage API
Return Value:
A Integer, representing the number of stored items
More Examples
Example
The same example, but using session storage instead of local storage.
Get the number of session storage item for this domain:
var x = sessionStorage.length;
Try it Yourself 
Example
Loop through each local storage item and display the names:
for (i = 0; i < localStorage.length; i++) {
x = localStorage.key(i);
document.getElementById("demo").innerHTML += x;
}
Try it Yourself 
JavaScript
Validation API
Constraint Validation DOM Methods and Properties
Method/Property
Description
checkValidity()
Returns true if an input element contains valid data.
setCustomValidity()
Sets the validationMessage property of an input element.
Property
Description
validity
Contains boolean properties related to the validity of an input element.
validationMessage
Contains the message a browser will display when the validity is false.
willValidate
Indicates if an input element will be validated.
If an input field contains invalid data, display a message:
The checkValidity() Method
<input id="id1" type="number" min="100" max="300" 
    required>
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
const inpObj = document.getElementById("id1");
if (!inpObj.checkValidity()) {
document.getElementById("demo").innerHTML = inpObj.validationMessage;
}
}
</script>
Try it Yourself 
Validity Properties
The
validity property
of an input element contains a number 
of properties related to the validity of data:
Property
Description
customError
Set to true, if a custom validity message is set.
patternMismatch
Set to true, if an element's value does not match its pattern attribute.
rangeOverflow
Set to true, if an element's value is greater than its max attribute.
rangeUnderflow
Set to true, if an element's value is less than its min attribute.
stepMismatch
Set to true, if an element's value is invalid per its step attribute.
tooLong
Set to true, if an element's value exceeds its maxLength attribute.
typeMismatch
Set to true, if an element's value is invalid per its type attribute.
valueMissing
Set to true, if an element (with a required attribute) has no value.
valid
Set to true, if an element's value is valid.
Examples
If the number in an input field is greater than 100 (the input's
max
attribute), display a message:
The rangeOverflow Property
<input id="id1" type="number" max="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
let text = "Value OK";
if (document.getElementById("id1").validity.rangeOverflow) {
text = "Value too large";
}
}
</script>
Try it Yourself 
If the number in an input field is less than 100 (the input's
min
attribute), display a message:
The rangeUnderflow Property
<input id="id1" type="number" min="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
let text =  = "Value OK";
if (document.getElementById("id1").validity.rangeUnderflow) {
text = "Value too small";
}
}
</script>
Try it Yourself 
HTML DOM
Anchor
Object
Anchor Object
The Anchor object represents an HTML <a> element.
Access an Anchor Object
You can access an <a> element by using getElementById():
Example
const element = document.getElementById("myAnchor");
Try it Yourself 
Create an Anchor Object
You can create an <a> element by using the document.createElement() method:
Example
const element = document.createElement("a");
Try it Yourself 
Anchor Object Properties
Property
Description
charset
Not supported in HTML5.
Sets or returns the value of the charset attribute of a link
download
Sets or returns the value of the download attribute of a link
hash
Sets or returns the anchor part of the href attribute value
host
Sets or returns the hostname and port part of the href attribute value
hostname
Sets or returns the hostname part of the href attribute value
href
Sets or returns the value of the href attribute of a link
hreflang
Sets or returns the value of the hreflang attribute of a link
origin
Returns the protocol, hostname and port part of the href attribute value
name
Not supported in HTML5. Use
element.id
instead.
Sets or returns the value of the name attribute of a link
password
Sets or returns the password part of the href attribute value
pathname
Sets or returns the pathname part of the href attribute value
port
Sets or returns the port part of the href attribute value
protocol
Sets or returns the protocol part of the href attribute value
rel
Sets or returns the value of the rel attribute of a link
rev
Not supported in HTML5.
Sets or returns the value of the rev attribute of a link
search
Sets or returns the querystring part of the href attribute value
target
Sets or returns the value of the target attribute of a link
text
Sets or returns the text content of a link
type
Sets or returns the value of the type attribute of a link
username
Sets or returns the username part of the href attribute value
Standard Properties and Events
The Anchor object also supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML links
HTML reference:
HTML <a> tag
WheelEvent
deltaY
Property
Example
Return whether the user scrolls up or down:
function myFunction(event) {
var y = event.deltaY;
}
Try it Yourself 
Description
The
deltaY
property returns a positive value 
when scrolling down, and a negative value when scrolling up, otherwise 0.
Note:
This property is read-only.
Syntax
event
.deltaY
Technical Details
Return Value:
A 
  Double, indicating the scrolling direction of the mouse wheel
Related Pages
HTML DOM reference:
WheelEvent deltaX Property
More Examples
Example
Scroll inside a DIV to make it bigger/smaller:
function myFunction(event) {
var y = event.deltaY;
var 
  currentSize = event.target.style.width;
if (y > 0) {
newSize = parseInt(currentSize) + 10;
} else {
newSize = parseInt(currentSize) - 10;
}
event.target.style.width = newSize + "px";
event.target.style.height 
  = newSize + "px";
}
Try it Yourself 
Browser Support
event.deltaY
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.deltaY
is not supported in Internet Explorer 11 (or earlier).
KeyboardEvent
ctrlKey
Property
Example
Was the CTRL key pressed when the event occurred?
if (event.ctrlKey) {
text = "The CTRL key was pressed!";
} else {
text = "The CTRL key was NOT pressed!";
}
Try it Yourself 
Description
The
ctrlKey
property returns
true
if
the
CTRL key is pressed
when a mouse event is triggered, otherwise it returns
false
.
The
ctrlKey
property is read-only.
Syntax
event
.ctrlKey
Technical Details
Return Value:
A Boolean.
true
if the CTRL key was pressed when a mouse event occured,
 otherwise
false
.
DOM Version:
DOM Level 2
Keyboard Events
.
Browser Support
event.ctrlKey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
MouseEvent
ctrlKey
Property
Example
Was the "CTRL" key pressed when the mouse button was clicked:
if (event.ctrlKey) {
text = "The CTRL key was pressed!";
} else {
text = "The CTRL key was NOT pressed!";
}
Try it Yourself 
Description
The
ctrlKey
property returns
true
if
the
CTRL key is pressed
when a mouse event occurs.
Otherwise it returns
false
.
The
ctrlKey
property is read-only.
Syntax
event
.ctrlKey
Technical Details
Return Value:
A Boolean.
Returns
true
if the CTRL key was pressed when a mouse event occurs.
Otherwise it returns
false
.
DOM Version:
DOM Level 2 Events.
Browser Support
event.ctrlKey
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
KeyboardEvent
code
Property
Example
Return the key that was pressed:
let key = event.code;
Try it Yourself 
Description
The
code
property returns the
key code
when a keyboard event occurs.
The
code
property is read-only.
Warning!
The
code
property returns different values for different 
keyboard layouts.
Use the
key
property instead.
Syntax
event
.code
Technical Details
Return Value:
A 
  String, representing the key that was pressed
Browser Support
event.code
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.code
is not supported in Internet Explorer 11 (or earlier).
MouseEvent
clientX
Property
Example
The coordinates of the mouse pointer when clicked:
let x = event.clientX;// Horizontal
let y = event.clientY;// Vertical
Try it Yourself 
More examples below.
Description
The
clientX
property returns the
horizontal client coordinate
of the mouse pointer when a mouse event 
occurs.
The
clientX
property is read-only.
The
client area
is the current window.
Syntax
event
.clientX
Technical Details
Return Value:
A Number.
The horizontal window pixel coordinate of the mouse pointer.
DOM Version:
DOM Level 2
Mouse Events
.
More Examples
Example
The coordinates of the mouse pointer while the mouse pointer moves:
let x = event.clientX;
let y = event.clientY;
Try it Yourself 
Example
The differences between clientX and clientY and screenX 
and screenY:
let cX = event.clientX;
let cY = event.clientY;
let sX = event.screenX;
let sY = event.screenY;
Try it Yourself 
Browser Support
event.clientX
is a DOM Level 2 (2001)  feature.
It is fully supported in all browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
9-11
WheelEvent
deltaX
Property
Example
Return whether the user scrolls left or right:
function myFunction(event) {
var x = event.deltaX;
}
Try it Yourself 
Description
The
deltaX
property returns a positive value 
when scrolling to the right, and a negative value when scrolling to the left, 
otherwise 0.
Note:
Most mouse devices do not have the ability to scroll 
left and right, and will always return 0.
Note:
This property is read-only.
Syntax
event
.deltaX
Technical Details
Return Value:
A 
  Double, indicating the scrolling direction of the mouse wheel
Related Pages
HTML DOM reference:
WheelEvent deltaY Property
Browser Support
event.deltaX
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.deltaX
is not supported in Internet Explorer 11 (or earlier).
WheelEvent
deltaZ
Property
Example
Return whether the user scrolls in or out (along the z-axis):
function myFunction(event) {
var z = event.deltaZ;
}
Try it Yourself 
Description
The
deltaZ
property returns a positive value 
when scrolling in, and a negative value when scrolling out, 
otherwise 0.
Note:
Most mouse devices do not have the ability to scroll 
along the z-axis, and will always return 0.
Note:
This property is read-only.
Syntax
event
.deltaZ
Technical Details
Return Value:
A 
  Double, indicating the scrolling direction of the mouse wheel
Related Pages
HTML DOM reference:
WheelEvent deltaY Property
HTML DOM reference:
WheelEvent deltaX Property
Browser Support
event.deltaZ
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.deltaZ
is not supported in Internet Explorer 11 (or earlier).
KeyboardEvent
location
Property
Example
Get the location of a pressed key:
let location = event.location;
Try it Yourself 
Description
The
location
property returns
the location of a pressed key
.
The
location
property is read-only.
The
location
property returns a number (0-4):
0 (DOM_KEY_LOCATION_STANDARD):
The value 0 represents almost every key on the keyboard
1 (DOM_KEY_LOCATION_LEFT):
The left key was pressed (like left CTRL and ALT)
2 (DOM_KEY_LOCATION_RIGHT):
The right key was pressed (like right CTRL and ALT)
3 (DOM_KEY_LOCATION_NUMPAD):
The key was pressed on the numeric keypad.
Syntax
event
.location
Technical Details
Return Value:
A Number.
The location of a the key on the keyboard or device:
0. DOM_KEY_LOCATION_STANDARD
1. DOM_KEY_LOCATION_LEFT
2. DOM_KEY_LOCATION_RIGHT
3. DOM_KEY_LOCATION_NUMPAD
DOM Version:
DOM Level 3
Keyboard Events
.
Browser Support
event.location
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
isTrusted
Event Property
Example
Find out if a specific event is trusted:
function myFunction(event) {
if ("isTrusted" in event) {
if (event.isTrusted) {
alert ("The " + event.type + " event is trusted.");
} else {
alert ("The " + event.type + " event is not trusted.");
}
} else {
alert ("The isTrusted property is not supported by your browser");
}
}
Try it Yourself 
Description
The isTrusted event property returns a Boolean value indicating whether the 
event is trusted or not.
Note:
In Chrome, Firefox and Opera, the event is trusted if it is invoked by the user, and not 
trusted if it is invoked by a script. In IE, all events are trusted except those 
that are created with the createEvent() method.
Syntax
event
.isTrusted
Technical Details
Return Value:
A Boolean, indicating whether the event is trusted or not
Possible values:
true - The event is trusted
false - The event is not trusted
DOM Version:
DOM Level 3 Events
Browser Support
event.isTrusted
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
InputEvent
inputType
Property
Example
Return the type of input the event was about:
function myFunction(event) {
let text = event.inputType;
}
Try it Yourself 
Description
The
inputType
property returns the type of change that was done by the event.
The
inputType
property is read-only.
Possible values:
"insertText"
"insertReplacementText"
"insertLineBreak"
"insertParagraph"
"insertOrderedList"
"insertUnorderedList"
"insertHorizontalRule"
"insertFromYank"
"insertFromDrop"
"insertFromPaste"
"insertTranspose"
"insertCompositionText"
"insertFromComposition"
"insertLink"
"deleteByComposition"
"deleteCompositionText"
"deleteWordBackward"
"deleteWordForward"
"deleteSoftLineBackward"
"deleteSoftLineForward"
"deleteEntireSoftLine"
"deleteHardLineBackward"
"deleteHardLineForward"
"deleteByDrag"
"deleteByCut"
"deleteByContent"
"deleteContentBackward"
"deleteContentForward"
"historyUndo"
"historyRedo"
"formatBold"
"formatItalic"
"formatUnderline"
"formatStrikethrough"
"formatSuperscript"
"formatSubscript"
"formatJustifyFull"
"formatJustifyCenter"
"formatJustifyRight"
"formatJustifyLeft"
"formatIndent"
"formatOutdent"
"formatRemove"
"formatSetBlockTextDirection"
"formatSetInlineTextDirection"
"formatBackColor"
"formatFontColor"
"formatFontName"
Syntax
event
.inputType
Technical Details
Return Value:
A String.
The name of the input action
Browser Support
event.inputType
is a DOM Level 4 (2015)  feature.
It is supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
Yes
Yes
Yes
Yes
Yes
event.inputType
is not supported in Internet Explorer 11 (or earlier).
TransitionEvent
elapsedTime
Property
Example
Find out how many seconds a transition has been running:
document.getElementById("myDIV").addEventListener("transitionend", myFunction);
function myFunction(event) {
this.innerHTML = "Transition lasted: " + event.elapsedTime + " seconds";
}
Try it Yourself 
Description
The elapsedTime property returns the number of seconds a transition has been 
running, when a
transitionend
event occurs.
Note:
The return value is not affected if the transition is 
paused (by using the transition-delay CSS property).
This property is read-only.
Syntax
event
.elapsedTime
Technical Details
Return Value:
A Number, representing the number of seconds a transition has been running
Related Pages
HTML DOM reference:
The transitionend Event
HTML DOM reference:
TransitionEvent propertyName Property
CSS reference:
CSS3 transition Property
CSS reference:
CSS3 transition-duration Property
Browser Support
event.elapsedTime
is a DOM Level 3 (2004) feature.
It is fully supported in all modern browsers:
Chrome
Edge
Firefox
Safari
Opera
IE
Yes
Yes
Yes
Yes
Yes
11
HTML DOM
Article
Object
Article Object
The Article object represents an HTML <article> element.
Access an Article Object
You can access an <article> element by using getElementById():
Example
var x = document.getElementById("myArticle");
Try it Yourself 
Create an Article Object
You can create an <article> element by using the document.createElement() method:
Example
var x = document.createElement("ARTICLE");
Try it Yourself 
Standard Properties and Events
The Article object supports the standard
properties
and
events
.
Related Pages
HTML reference:
HTML <article> tag
HTML DOM
Base
Object
Base Object
The Base object represents an HTML <base> element.
Access a Base Object
You can access a <base> element by using getElementById():
Example
var x = document.getElementById("myBase");
Try it Yourself 
Create a Base Object
You can create a <base> element by using the document.createElement() method:
Example
var x = document.createElement("BASE");
Try it Yourself 
Base Object Properties
Property
Description
href
Sets or returns the value of the href attribute in a base element
target
Sets or returns the value of the target attribute in a base element
Standard Properties and Events
The Base object also supports the standard
properties
and
events
.
Related Pages
HTML reference:
HTML <base> tag
HTML DOM
Caption
Object
Caption Object
The Caption object represents an HTML <caption> element.
Access a Caption Object
You can access a <caption> element by using getElementById():
Example
var x = document.getElementById("myCaption");
Try it Yourself 
Create a Caption Object
You can create a <caption> element by using the document.createElement() method:
Example
var x = document.createElement("CAPTION");
Try it Yourself 
Tip:
You can also create a <caption> element by using the
createCaption
method of the Table 
object.
Caption Object Properties
Property
Description
align
Not supported in HTML5. Use
style.textAlign
or
style.captionSide
instead.
Sets or returns the alignment of the caption
Standard Properties and Events
The Caption object also supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML Tables
HTML reference:
HTML <caption> tag
JavaScript reference:
HTML DOM Table Object
HTML DOM
Embed
Object
Embed Object
The Embed object represents an HTML <embed> element.
Access an Embed Object
You can access an <embed> element by using getElementById():
Example
var x = document.getElementById("myEmbed");
Try it Yourself 
Create an Embed Object
You can create an <embed> element by using the document.createElement() method:
Example
var x = document.createElement("EMBED");
Try it Yourself 
Embed Object Properties
Property
Description
height
Sets or returns the value of the height attribute in an embed element
src
Sets or returns the value of the src attribute in an embed element
type
Sets or returns the value of the type attribute in an embed element
width
Sets or returns the value of the width attribute in an embed element
Standard Properties and Events
The Embed object also supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML Plug-ins
HTML reference:
HTML <embed> tag
HTML DOM
Form
Object
Form Object
The Form object represents an HTML <form> element.
Access a Form Object
You can access a <form> element by using getElementById():
Example
var x = document.getElementById("myForm");
Try it Yourself 
Tip:
You can also access a <form> element by using the
forms
collection.
Create a Form Object
You can create a <form> element by using the document.createElement() method:
Example
var x = document.createElement("FORM");
Try it Yourself 
Form Object Collections
Collection
Description
elements
Returns a collection of all elements in a form
Form Object Properties
Property
Description
acceptCharset
Sets or returns the value of the accept-charset attribute in a form
action
Sets or returns the value of the action attribute in a form
autocomplete
Sets or returns the value of the autocomplete attribute in a form
encoding
Alias of
enctype
enctype
Sets or returns the value of the enctype attribute in a form
length
Returns the number of elements in a form
method
Sets or returns the value of the method attribute in a form
name
Sets or returns the value of the name attribute in a form
noValidate
Sets or returns whether the form-data should be validated or not, on submission
target
Sets or returns the value of the target attribute in a form
Form Object Methods
Method
Description
reset()
Resets a form
submit()
Submits a form
Standard Properties and Events
The Form object also supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML Forms
JavaScript tutorial:
JS Forms/Validation
HTML reference:
HTML <form> tag
Style
letterSpacing
Property
Example
Set the space between characters in an element to 15 pixels:
document.getElementById("demo").style.letterSpacing = "15px";
Try it Yourself 
Description
The letterSpacing property sets or returns the space between characters in a text.
Tip:
To set or return the spacing between words in a text, 
use the
wordSpacing
property.
Browser Support
Property
letterSpacing
Yes
Yes
Yes
Yes
Yes
Syntax
Return the letterSpacing property:
object
.style.letterSpacing
Set the letterSpacing property:
object
.style.letterSpacing = "normal|
length
|initial|inherit"
Property Values
Value
Description
normal
Normal space between characters. This is default
length
Defines the space in length units. Negative values are allowed
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
normal
Return Value:
A String, representing the space between characters in the text
CSS Version
CSS1
More Examples
Example
Using negative values:
document.getElementById("demo").style.letterSpacing = "-2px";
Try it Yourself 
Example
Return the letter spacing of an element:
alert(document.getElementById("demo").style.letterSpacing);
Try it Yourself 
Example
Difference between the letterSpacing property and the wordSpacing property:
function changeLetters() {
document.getElementById("demo1").style.letterSpacing = "15px";
}
function changeWords() {
document.getElementById("demo2").style.wordSpacing = "15px";
}
Try it Yourself 
Related Pages
CSS tutorial:
CSS Text
CSS reference:
letter-spacing property
Style
listStyleImage
Property
Example
Specify an image as the list-item marker in a list:
document.getElementById("myList").style.listStyleImage = "url('sqorange.gif')";
Try it Yourself 
Description
The listStyleImage property sets or returns an image as the list-item marker.
Browser Support
Property
listStyleImage
Yes
Yes
Yes
Yes
Yes
Syntax
Return the listStyleImage property:
object
.style.listStyleImage
Set the listStyleImage property:
object
.style.listStyleImage = "none|
url
|initial|inherit"
Property Values
Value
Description
none
No image will be displayed. This is default
url
Specifies the path to the image
initial
Sets this property to its default value.
Read about
initial
inherit
Inherits this property from its parent element.
Read about
inherit
Technical Details
Default Value:
none
Return Value:
A String, representing the location path of the image
CSS Version
CSS1
More Examples
Example
Return the list-style-image property value:
alert(document.getElementById("myList").style.listStyleImage);
Try it Yourself 
Related Pages
CSS tutorial:
CSS List
CSS reference:
list-style-image property
HTML DOM reference:
listStyle property
HTML DOM
Dialog
Object
Dialog Object
The Dialog object represents an HTML <dialog> element.
Access a Dialog Object
You can access a <dialog> element by using getElementById():
Example
const element = document.getElementById("myDialog");
element.open = true;
Try it Yourself 
Create a Dialog Object
You can create a <dialog> element by using the document.createElement() method:
Example
const dialog = document.createElement("DIALOG");
Try it Yourself 
Dialog Object Properties
Property
Description
open
Sets or returns whether a dialog should be open or not
returnValue
Sets or returns the dialog's return value
Dialog Object Methods
Method
Description
close()
Closes the dialog
show()
Shows the dialog
showModal()
Shows the dialog and makes it the top-most modal dialog
Standard Properties and Events
The Dialog object also supports the standard
properties
and
events
.
Related Pages
HTML reference:
HTML <dialog> tag
HTML DOM
DList
Object
DList Object
The DList object represents an HTML <dl> element.
Access a DList Object
You can access a <dl> element by using getElementById():
Example
var x = document.getElementById("myDL");
Try it Yourself 
Create a DList Object
You can create a <dl> element by using the document.createElement() method:
Example
var x = document.createElement("DL");
Try it Yourself 
Standard Properties and Events
The DList object supports the standard
properties
and
events
.
Related Pages
HTML tutorial:
HTML Lists
HTML reference:
HTML <dl> tag
